cscope 15 $HOME/cs2670/spring2025ta/weenix_64 -q 0000009071 0001131679
	@kernel/api/access.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~<mm/mm.h
>

4 
	~<utû/°rög.h
>

6 
	~"utû/debug.h
"

8 
	~"mm/kmÆloc.h
"

9 
	~"mm/mm™.h
"

11 
	~"≠i/ac˚ss.h
"

12 
	~"≠i/sysˇŒ.h
"

14 
ölöe
 
	$u£æ™d_addªss
(c⁄° *
addr
)

16  
addr
 >(*)
USER_MEM_LOW
 &&ádd∏< (*)
USER_MEM_HIGH
;

17 
	}
}

25 
	$c›y_‰om_u£r
(*
kaddr
, c⁄° *
uaddr
, 
size_t
 
nbyãs
)

27 i‡(!
	`ønge_≥rm
(
cuΩroc
, 
uaddr
, 
nbyãs
, 
PROT_READ
))

29  -
EFAULT
;

31 
	`KASSERT
(
	`u£æ™d_addªss
(
uaddr
Ë&& !u£æ™d_addªss(
kaddr
));

32  
	`vmm≠_ªad
(
cuΩroc
->
p_vmm≠
, 
uaddr
, 
kaddr
, 
nbyãs
);

33 
	}
}

41 
	$c›y_to_u£r
(*
uaddr
, c⁄° *
kaddr
, 
size_t
 
nbyãs
)

43 i‡(!
	`ønge_≥rm
(
cuΩroc
, 
uaddr
, 
nbyãs
, 
PROT_WRITE
))

45  -
EFAULT
;

47 
	`KASSERT
(
	`u£æ™d_addªss
(
uaddr
Ë&& !u£æ™d_addªss(
kaddr
));

48  
	`vmm≠_wrôe
(
cuΩroc
->
p_vmm≠
, 
uaddr
, 
kaddr
, 
nbyãs
);

49 
	}
}

55 
	$u£r_°rdup
(
¨g°r_t
 *
u°r
, **
k°Ω
)

57 
	`KASSERT
(!
	`u£æ™d_addªss
(
u°r
));

58 
	`KASSERT
(
	`u£æ™d_addªss
(
u°r
->
as_°r
));

60 *
k°Ω
 = 
	`kmÆloc
(
u°r
->
as_Àn
 + 1);

61 i‡(!*
k°Ω
)

62  -
ENOMEM
;

63 
ªt
 = 
	`c›y_‰om_u£r
(*
k°Ω
, 
u°r
->
as_°r
, u°r->
as_Àn
 + 1);

64 i‡(
ªt
)

66 
	`k‰ì
(*
k°Ω
);

67  
ªt
;

70 
	}
}

77 
	$u£r_vecdup
(
¨gvec_t
 *
uvec
, ***
kve˝
)

79 
	`KASSERT
(!
	`u£æ™d_addªss
(
uvec
));

80 
	`KASSERT
(
	`u£æ™d_addªss
(
uvec
->
av_vec
));

82 **
kvec
 = 
	`kmÆloc
((
uvec
->
av_Àn
 + 1) * (*));

83 *
kve˝
 = 
kvec
;

85 i‡(!
kvec
)

87  -
ENOMEM
;

89 
	`mem£t
(
kvec
, 0, (
uvec
->
av_Àn
 + 1) * (*));

91 
ªt
 = 0;

92 
size_t
 
i
 = 0; i < 
uvec
->
av_Àn
 && !
ªt
; i++)

94 
¨g°r_t
 
¨g°r
;

95 
	`c›y_‰om_u£r
(&
¨g°r
, 
uvec
->
av_vec
 + 
i
, (
¨g°r_t
));

96 
ªt
 = 
	`u£r_°rdup
(&
¨g°r
, 
kvec
 + 
i
);

99 i‡(
ªt
)

101 
size_t
 
i
 = 0; i < 
uvec
->
av_Àn
; i++)

102 i‡(
kvec
[
i
])

103 
	`k‰ì
(
kvec
[
i
]);

104 
	`k‰ì
(
kvec
);

105 *
kve˝
 = 
NULL
;

108  
ªt
;

109 
	}
}

117 
	$addr_≥rm
(
¥oc_t
 *
p
, c⁄° *
vaddr
, 
≥rm
)

119 
	`NOT_YET_IMPLEMENTED
("VM:áddr_perm");

121 
	}
}

132 
	$ønge_≥rm
(
¥oc_t
 *
p
, c⁄° *
vaddr
, 
size_t
 
Àn
, 
≥rm
)

134 
	`NOT_YET_IMPLEMENTED
("VM:Ñange_perm");

136 
	}
}

	@kernel/api/binfmt.c

1 
	~"î∫o.h
"

3 
	~"maö/öôs.h
"

5 
	~"fs/f˙é.h
"

6 
	~"fs/fûe.h
"

7 
	~"fs/vfs_sysˇŒ.h
"

9 
	~"utû/debug.h
"

10 
	~"utû/öô.h
"

11 
	~"utû/li°.h
"

13 
	~"mm/kmÆloc.h
"

15 
	~"≠i/böfmt.h
"

17 
	sböfmt


19 c⁄° *
	mbf_id
;

20 
böfmt_lﬂd_func_t
 
	mbf_lﬂd
;

21 
li°_lök_t
 
	mbf_lök
;

22 } 
	tböfmt_t
;

24 
li°_t
 
	gböfmt_li°
 = 
LIST_INITIALIZER
(
böfmt_li°
);

26 
	$böfmt_add
(c⁄° *
id
, 
böfmt_lﬂd_func_t
 
lﬂdfunc
)

28 
böfmt_t
 *
fmt
;

29 i‡(
NULL
 =(
fmt
 = 
	`kmÆloc
((*fmt))))

31  -
ENOMEM
;

34 
	`dbg
(
DBG_EXEC
, "Regi°îög bö¨yÜﬂdî %s\n", 
id
);

36 
fmt
->
bf_id
 = 
id
;

37 
fmt
->
bf_lﬂd
 = 
lﬂdfunc
;

38 
	`li°_ö£π_hód
(&
böfmt_li°
, &
fmt
->
bf_lök
);

41 
	}
}

43 
	$böfmt_lﬂd
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
,

44 
uöt64_t
 *
rù
, uöt64_à*
r•
)

46 
fd
 = 
	`do_›í
(
fûíame
, 
O_RDONLY
);

47 i‡(
fd
 < 0)

49 
	`dbg
(
DBG_EXEC
, "ERROR:Éxe¯ÁûedÅÿ›í fûê%s\n", 
fûíame
);

50  
fd
;

52 
fûe_t
 *
fûe
 = 
	`fgë
(()
fd
);

53 
ªt
 = 0;

54 i‡(
	`S_ISDIR
(
fûe
->
f_vnode
->
vn_mode
))

56 
ªt
 = -
EISDIR
;

58 i‡(!
ªt
 && !
	`S_ISREG
(
fûe
->
f_vnode
->
vn_mode
))

60 
ªt
 = -
EACCES
;

62 
	`Âut
(&
fûe
);

63 i‡(
ªt
)

65 
	`do_˛o£
(()
fd
);

66  
ªt
;

69 
	`li°_ôî©e
(&
böfmt_li°
, 
fmt
, 
böfmt_t
, 
bf_lök
)

71 
	`dbg
(
DBG_EXEC
, "TryögÅÿexe¯%†usög bö¨yÜﬂdî %s\n", 
fûíame
,

72 
fmt
->
bf_id
);

79 
ªt
 = 
fmt
->
	`bf_lﬂd
(
fûíame
, ()
fd
, 
¨gv
, 
ívp
, 
rù
, 
r•
);

80 i‡(
ªt
 !-
ENOEXEC
)

82 
	`do_˛o£
(()
fd
);

86 
	`do_˛o£
(()
fd
);

87  
ªt
;

88 
	}
}

	@kernel/api/elf.c

22 
	~"î∫o.h
"

23 
	~"globÆs.h
"

25 
	~"maö/öôs.h
"

27 
	~"mm/kmÆloc.h
"

28 
	~"mm/mm.h
"

29 
	~"mm/mm™.h
"

30 
	~"mm/éb.h
"

32 
	~"≠i/böfmt.h
"

33 
	~"≠i/ñf.h
"

35 
	~"utû/debug.h
"

36 
	~"utû/°rög.h
"

38 
	~"fs/f˙é.h
"

39 
	~"fs/fûe.h
"

40 
	~"fs/l£ek.h
"

41 
	~"fs/vfs_sysˇŒ.h
"

43 
	$_ñf64_∂©f‹m_check
(c⁄° 
Elf64_Ehdr
 *
hódî
)

45  (
EM_X86_64
 =
hódî
->
e_machöe
)

46 && (
ELFCLASS64
 =
hódî
->
e_idít
[
EI_CLASS
])

47 && (
ELFDATA2LSB
 =
hódî
->
e_idít
[
EI_DATA
]);

48 
	}
}

57 
	$_ñf64_m≠_£gmít
(
vmm≠_t
 *
m≠
, 
vnode_t
 *
fûe
, 
öt64_t
 
memoff
,

58 c⁄° 
Elf64_Phdr
 *
£gmít
)

61 
uöçå_t
 
addr
;

62 i‡(
memoff
 < 0)

64 
	`KASSERT
(
	`ADDR_TO_PN
(
£gmít
->
p_vaddr
Ë> (
uöt64_t
)-
memoff
);

65 
addr
 = (
uöçå_t
)
£gmít
->
p_vaddr
 - (uöçå_t)
	`PN_TO_ADDR
(-
memoff
);

69 
addr
 = (
uöçå_t
)
£gmít
->
p_vaddr
 + (uöçå_t)
	`PN_TO_ADDR
(
memoff
);

71 
uöt64_t
 
off
 = 
£gmít
->
p_off£t
;

72 
uöt64_t
 
memsz
 = 
£gmít
->
p_memsz
;

73 
uöt64_t
 
fûesz
 = 
£gmít
->
p_fûesz
;

75 
	`dbg
(
DBG_ELF
,

78 
£gmít
->
p_ty≥
, segmít->
p_off£t
, segmít->
p_vaddr
, segmít->
p_fûesz
,

79 
£gmít
->
p_memsz
, segmít->
p_Êags
, segmít->
p_Æign
);

82 i‡((
£gmít
->
p_Æign
 % 
PAGE_SIZE
))

84 
	`dbg
(
DBG_ELF
, "ERROR: segmentÇotáligned onÖage\n");

85  -
ENOEXEC
;

87 i‡(
fûesz
 > 
memsz
)

89 
	`dbg
(
DBG_ELF
, "ERROR: segment file size is greaterÅhan memory size\n");

90  -
ENOEXEC
;

92 i‡(
	`PAGE_OFFSET
(
addr
Ë!PAGE_OFFSET(
off
))

94 
	`dbg
(
DBG_ELF
,

96  -
ENOEXEC
;

100 
≥rms
 = 0;

101 i‡(
PF_R
 & 
£gmít
->
p_Êags
)

103 
≥rms
 |
PROT_READ
;

105 i‡(
PF_W
 & 
£gmít
->
p_Êags
)

107 
≥rms
 |
PROT_WRITE
;

109 i‡(
PF_X
 & 
£gmít
->
p_Êags
)

111 
≥rms
 |
PROT_EXEC
;

114 i‡(
fûesz
 > 0)

119 
uöt64_t
 
l›age
 = 
	`ADDR_TO_PN
(
addr
);

120 
uöt64_t
 
≈ages
 = 
	`ADDR_TO_PN
(
addr
 + 
fûesz
 - 1Ë- 
l›age
 + 1;

121 
off_t
 
fûeoff
 = (off_t)
	`PAGE_ALIGN_DOWN
(
off
);

123 i‡(!
	`vmm≠_is_ønge_em±y
(
m≠
, 
l›age
, 
≈ages
))

125 
	`dbg
(
DBG_ELF
, "ERROR: ELF file contains overlapping segments\n");

126  -
ENOEXEC
;

128 
ªt
 = 
	`vmm≠_m≠
(
m≠
, 
fûe
, 
l›age
, 
≈ages
, 
≥rms
,

129 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fûeoff
, 0, 
NULL
);

130 i‡(
ªt
)

131  
ªt
;

132 
	`dbg
(
DBG_ELF
,

134 
≈ages
, 
addr
, 
memoff
);

137 i‡(
memsz
 > 
fûesz
)

141 
uöt64_t
 
l›age
 = 
	`ADDR_TO_PN
(

142 
addr
 +

143 
fûesz
);

144 
uöt64_t
 
≈ages
 =

145 
	`ADDR_TO_PN
(
	`PAGE_ALIGN_UP
(
addr
 + 
memsz
)) -

146 
l›age
;

150 i‡(
	`PAGE_ALIGNED
(
addr
 + 
fûesz
) &&

151 !
	`vmm≠_is_ønge_em±y
(
m≠
, 
l›age
, 
≈ages
))

153 
	`dbg
(
DBG_ELF
, "ERROR: ELF file contains overlapping segments\n");

154  -
ENOEXEC
;

156 i‡(!
	`PAGE_ALIGNED
(
addr
 + 
fûesz
Ë&& 
≈ages
 > 1 &&

157 !
	`vmm≠_is_ønge_em±y
(
m≠
, 
l›age
 + 1, 
≈ages
 - 1))

159 
	`dbg
(
DBG_ELF
, "ERROR: ELF file contains overlapping segments\n");

160  -
ENOEXEC
;

162 
ªt
 = 
	`vmm≠_m≠
(
m≠
, 
NULL
, 
l›age
, 
≈ages
, 
≥rms
,

163 
MAP_PRIVATE
 | 
MAP_FIXED
, 0, 0, 
NULL
);

164 i‡(
ªt
)

165  
ªt
;

166 i‡(!
	`PAGE_ALIGNED
(
addr
 + 
fûesz
) && filesz > 0)

177 *
buf
 = 
	`∑ge_Æloc
();

178 i‡(!
buf
)

179  -
ENOMEM
;

181 
	`vlock
(
fûe
);

182 
ªt
 = 
fûe
->
vn_›s
->
	`ªad
(file,

183 (
size_t
)
	`PAGE_ALIGN_DOWN
(
off
 + 
fûesz
 - 1),

184 
buf
, 
	`PAGE_OFFSET
(
addr
 + 
fûesz
));

185 i‡(
ªt
 >= 0)

187 
	`KASSERT
((
uöçå_t
)
ªt
 =
	`PAGE_OFFSET
(
addr
 + 
fûesz
));

188 
ªt
 = 
	`vmm≠_wrôe
(
m≠
, 
	`PAGE_ALIGN_DOWN
(
addr
 + 
fûesz
 - 1), 
buf
,

189 
	`PAGE_OFFSET
(
addr
 + 
fûesz
));

191 
	`vu∆ock
(
fûe
);

192 
	`∑ge_‰ì
(
buf
);

193  
ªt
;

197 
	}
}

205 
	$_ñf64_lﬂd_ehdr
(
fd
, 
Elf64_Ehdr
 *
hódî
, 
öãΩ
)

207 
ªt
;

208 
	`mem£t
(
hódî
, 0, (*header));

211 
ªt
 = 
	`do_ªad
(
fd
, 
hódî
, (*header));

212 i‡(
ªt
 < 0)

213  
ªt
;

214 i‡((
ªt
 < 
SELFMAG
Ë|| 
	`memcmp
(&
hódî
->
e_idít
[0], 
ELFMAG
, SELFMAG) != 0)

216 
	`dbg
(
DBG_ELF
, "ELFÜoad failed:Ço magicÇumberÖresent\n");

217  -
ENOEXEC
;

219 i‡(
ªt
 < 
hódî
->
e_ehsize
)

221 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: bad file size\n");

222  -
ENOEXEC
;

225 
	`dbg
(
DBG_ELF
, "loading ELF file\n");

226 
	`dbgq
(
DBG_ELF
, "ELF Header Information:\n");

227 
	`dbgq
(
DBG_ELF
, "Vîsi⁄: %d\n", ()
hódî
->
e_idít
[
EI_VERSION
]);

228 
	`dbgq
(
DBG_ELF
, "Cœss: %d\n", ()
hódî
->
e_idít
[
EI_CLASS
]);

229 
	`dbgq
(
DBG_ELF
, "D©a: %d\n", ()
hódî
->
e_idít
[
EI_DATA
]);

230 
	`dbgq
(
DBG_ELF
, "Ty≥: %d\n", ()
hódî
->
e_ty≥
);

231 
	`dbgq
(
DBG_ELF
, "Machöe: %d\n", ()
hódî
->
e_machöe
);

235 i‡(
öãΩ
 && 
hódî
->
e_ty≥
 !
ET_DYN
)

237 
	`dbg
(
DBG_ELF
,

239  -
ENOEXEC
;

241 i‡(!
öãΩ
 && 
hódî
->
e_ty≥
 !
ET_EXEC
)

243 
	`dbg
(
DBG_ELF
, "ELFÜoad failed:ÇotÉxecutable ELF\n");

244  -
ENOEXEC
;

246 i‡(!
	`_ñf64_∂©f‹m_check
(
hódî
))

248 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: incorrectÖlatform\n");

249  -
ENOEXEC
;

252 
	}
}

261 
	$_ñf64_lﬂd_phèbÀ
(
fd
, 
Elf64_Ehdr
 *
hódî
, *
pht
,

262 
size_t
 
size
)

264 
size_t
 
phtsize
 = 
hódî
->
e_phítsize
 * hódî->
e_phnum
;

265 
	`KASSERT
(
phtsize
 <
size
);

271 
ªt
 = 
	`do_l£ek
(
fd
, ()(
hódî
->
e_phoff
), 
SEEK_SET
);

272 i‡(
ªt
 < 0)

273  
ªt
;

275 
ªt
 = 
	`do_ªad
(
fd
, 
pht
, 
phtsize
);

276 i‡(
ªt
 < 0)

277  
ªt
;

279 
	`KASSERT
((
size_t
)
ªt
 <
phtsize
);

280 i‡((
size_t
)
ªt
 < 
phtsize
)

282  -
ENOEXEC
;

285 
	}
}

296 
	$_ñf64_m≠_¥og£gs
(
vnode_t
 *
vnode
, 
vmm≠_t
 *
m≠
,

297 
Elf64_Ehdr
 *
hódî
, *
pht
, 
öt64_t
 
memoff
)

299 
ªt
 = 0;

301 
lﬂdcou¡
 = 0;

302 
uöt32_t
 
i
 = 0; i < 
hódî
->
e_phnum
; i++)

304 
Elf64_Phdr
 *
phã¡ry
 = (Elf64_Phd∏*)(
pht
 + 
i
 * 
hódî
->
e_phítsize
);

305 i‡(
phã¡ry
->
p_ty≥
 =
PT_LOAD
)

307 
ªt
 = 
	`_ñf64_m≠_£gmít
(
m≠
, 
vnode
, 
memoff
, 
phã¡ry
);

308 i‡(
ªt
)

309  
ªt
;

310 
lﬂdcou¡
++;

314 i‡(!
lﬂdcou¡
)

316 
	`dbg
(
DBG_ELF
, "ERROR: ELF file containedÇoÜoadable sections\n");

317  -
ENOEXEC
;

319  
lﬂdcou¡
;

320 
	}
}

327 
	$_ñf64_föd_phöãΩ
(
Elf64_Ehdr
 *
hódî
, *
pht
,

328 
Elf64_Phdr
 **
phöãΩ
)

330 *
phöãΩ
 = 
NULL
;

332 
uöt32_t
 
i
 = 0; i < 
hódî
->
e_phnum
; i++)

334 
Elf64_Phdr
 *
phã¡ry
 = (Elf64_Phd∏*)(
pht
 + 
i
 * 
hódî
->
e_phítsize
);

335 i‡(
phã¡ry
->
p_ty≥
 =
PT_INTERP
)

337 i‡(!*
phöãΩ
)

339 *
phöãΩ
 = 
phã¡ry
;

343 
	`dbg
(
DBG_ELF
, "ELFÜoad failed: multiple interpreters\n");

344  -
EINVAL
;

349 
	}
}

356 
	$_ñf64_ˇlc_¥ogbounds
(
Elf64_Ehdr
 *
hódî
, *
pht
, **
low
,

357 **
high
)

359 
Elf64_Addr
 
cuæow
 = (Elf64_Addr)-1;

360 
Elf64_Addr
 
curhigh
 = 0;

361 
uöt32_t
 
i
 = 0; i < 
hódî
->
e_phnum
; i++)

363 
Elf64_Phdr
 *
phã¡ry
 = (Elf64_Phd∏*)(
pht
 + 
i
 * 
hódî
->
e_phítsize
);

364 i‡(
phã¡ry
->
p_ty≥
 =
PT_LOAD
)

366 i‡(
phã¡ry
->
p_vaddr
 < 
cuæow
)

368 
cuæow
 = 
phã¡ry
->
p_vaddr
;

370 i‡(
phã¡ry
->
p_vaddr
 +Öhã¡ry->
p_memsz
 > 
curhigh
)

372 
curhigh
 = 
phã¡ry
->
p_vaddr
 +Öhã¡ry->
p_memsz
;

376 i‡(
low
)

378 *
low
 = (*)
cuæow
;

380 i‡(
high
)

382 *
high
 = (*)
curhigh
;

384 
	}
}

390 
size_t
 
	$_ñf64_ˇlc_¨gsize
(*c⁄° 
¨gv
[], *c⁄° 
ívp
[],

391 
Elf64_auxv_t
 *
auxv
, 
size_t
 
phtsize
,

392 
size_t
 *
¨gc
, size_à*
ívc
, size_à*
auxc
)

394 
size_t
 
size
 = 0;

395 
size_t
 
i
;

397 
i
 = 0; 
¨gv
[i]; i++)

399 
size
 +
	`°æí
(
¨gv
[
i
]) + 1;

401 i‡(
¨gc
)

403 *
¨gc
 = 
i
;

406 
size
 +(
i
 + 1) * (*);

409 
i
 = 0; 
ívp
[i] !
NULL
; i++)

411 
size
 +
	`°æí
(
ívp
[
i
]) + 1;

413 i‡(
ívc
 !
NULL
)

415 *
ívc
 = 
i
;

418 
size
 +(
i
 + 1) * (*);

422 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++)

424 i‡(
auxv
[
i
].
a_ty≥
 =
AT_PHDR
)

426 
size
 +
phtsize
;

429 i‡(
auxc
)

431 *
auxc
 = 
i
;

434 
size
 +(
i
 + 1Ë* (
Elf64_auxv_t
);

437 
size
 +(
öt64_t
);

439 
size
 += 3 * (*);

448  
size
;

449 
	}
}

462 
	$_ñf64_lﬂd_¨gs
(
vmm≠_t
 *
m≠
, *
¨glow
, 
size_t
 
¨gsize
,

463 *
buf
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[],

464 
Elf64_auxv_t
 *
auxv
, 
size_t
 
¨gc
, size_à
ívc
,

465 
size_t
 
auxc
, size_à
phtsize
)

467 
	`dbg
(
DBG_ELF
,

470 
¨glow
, 
¨gc
, 
ívc
, 
auxc
);

472 
size_t
 
i
;

476 *((
öt64_t
 *)
buf
Ë(öt64_t)
¨gc
;

479 
size_t
 
ve˛í
 = (
¨gc
 + 1 + 
ívc
 + 1) * (*) +

480 (
auxc
 + 1Ë* (
Elf64_auxv_t
);

482 *
vec°¨t
 =

483 
buf
 + (
öt64_t
) +

486 *
vvec°¨t
 =

487 ((*)
¨glow
Ë+ (
öt64_t
) +

490 *
°r°¨t
 = 
vec°¨t
 + 
ve˛í
;

494 *
v°r°¨t
 = 
vvec°¨t
 + 
ve˛í
;

504 *(**)(
buf
 + 8Ë
vvec°¨t
;

506 *(**)(
buf
 + 16Ë
vvec°¨t
 + (
¨gc
 + 1) * (*);

508 *(**)(
buf
 + 24Ë
vvec°¨t
 + (
¨gc
 + 1 + 
ívc
 + 1) * (*);

511 
i
 = 0; i < 
¨gc
; i++)

513 
size_t
 
Àn
 = 
	`°æí
(
¨gv
[
i
]) + 1;

514 
	`°r˝y
(
°r°¨t
, 
¨gv
[
i
]);

516 *(**)
vec°¨t
 = 
v°r°¨t
;

517 
°r°¨t
 +
Àn
;

518 
v°r°¨t
 +
Àn
;

519 
vec°¨t
 += (*);

522 *(**)
vec°¨t
 = 
NULL
;

523 
vec°¨t
 += (*);

526 
i
 = 0; i < 
ívc
; i++)

528 
size_t
 
Àn
 = 
	`°æí
(
ívp
[
i
]) + 1;

529 
	`°r˝y
(
°r°¨t
, 
ívp
[
i
]);

531 *(**)
vec°¨t
 = 
v°r°¨t
;

532 
°r°¨t
 +
Àn
;

533 
v°r°¨t
 +
Àn
;

534 
vec°¨t
 += (*);

537 *(**)
vec°¨t
 = 
NULL
;

538 
vec°¨t
 += (*);

541 
i
 = 0; i < 
auxc
; i++)

544 
	`mem˝y
(
vec°¨t
, &
auxv
[
i
], (
Elf64_auxv_t
));

546 i‡(
auxv
[
i
].
a_ty≥
 =
AT_PHDR
)

549 
	`mem˝y
(
°r°¨t
, 
auxv
[
i
].
a_un
.
a_±r
, (
size_t
)
phtsize
);

551 ((
Elf64_auxv_t
 *)
vec°¨t
)->
a_un
.
a_±r
 = 
v°r°¨t
;

553 
vec°¨t
 +(
Elf64_auxv_t
);

556 ((
Elf64_auxv_t
 *)
vec°¨t
)->
a_ty≥
 = 
NULL
;

560 
ªt
 = 
	`vmm≠_wrôe
(
m≠
, 
¨glow
, 
buf
, 
¨gsize
);

562 
	`KASSERT
(!
ªt
);

563 
	}
}

565 
	$_ñf64_lﬂd
(c⁄° *
fûíame
, 
fd
, *c⁄° 
¨gv
[],

566 *c⁄° 
ívp
[], 
uöt64_t
 *
rù
, uöt64_à*
r•
)

568 
ªt
 = 0;

569 
Elf64_Ehdr
 
hódî
;

570 
Elf64_Ehdr
 
öãΩhódî
;

573 
vmm≠_t
 *
m≠
 = 
NULL
;

574 
fûe_t
 *
fûe
 = 
NULL
;

575 *
pht
 = 
NULL
;

576 *
öãΩ«me
 = 
NULL
;

577 
öãΩfd
 = -1;

578 
fûe_t
 *
öãΩfûe
 = 
NULL
;

579 *
öãΩpht
 = 
NULL
;

580 
Elf64_auxv_t
 *
auxv
 = 
NULL
;

581 *
¨gbuf
 = 
NULL
;

583 
uöçå_t
 
íåy
;

585 
fûe
 = 
	`fgë
(
fd
);

586 i‡(!
fûe
)

587  -
EBADF
;

590 
ªt
 = 
	`_ñf64_lﬂd_ehdr
(
fd
, &
hódî
, 0);

591 i‡(
ªt
)

592 
d⁄e
;

594 
m≠
 = 
	`vmm≠_¸óã
();

595 i‡(!
m≠
)

597 
ªt
 = -
ENOMEM
;

598 
d⁄e
;

603 
size_t
 
phtsize
 = 
hódî
.
e_phítsize
 * hódî.
e_phnum
;

604 
pht
 = 
	`kmÆloc
(
phtsize
);

605 i‡(!
pht
)

607 
ªt
 = -
ENOMEM
;

608 
d⁄e
;

611 
ªt
 = 
	`_ñf64_lﬂd_phèbÀ
(
fd
, &
hódî
, 
pht
, 
phtsize
);

612 i‡(
ªt
)

613 
d⁄e
;

616 
ªt
 = 
	`_ñf64_m≠_¥og£gs
(
fûe
->
f_vnode
, 
m≠
, &
hódî
, 
pht
, 0);

617 i‡(
ªt
 < 0)

618 
d⁄e
;

621 
Elf64_Phdr
 *
phöãΩ
 = 
NULL
;

622 
ªt
 = 
	`_ñf64_föd_phöãΩ
(&
hódî
, 
pht
, &
phöãΩ
);

623 i‡(
ªt
)

624 
d⁄e
;

627 *
¥oglow
;

628 *
¥oghigh
;

629 
	`_ñf64_ˇlc_¥ogbounds
(&
hódî
, 
pht
, &
¥oglow
, &
¥oghigh
);

631 
íåy
 = (
uöçå_t
)
hódî
.
e_íåy
;

634 i‡(
phöãΩ
)

637 
ªt
 = 
	`do_l£ek
(
fd
, ()(
phöãΩ
->
p_off£t
), 
SEEK_SET
);

638 i‡(
ªt
 < 0)

639 
d⁄e
;

641 
öãΩ«me
 = 
	`kmÆloc
(
phöãΩ
->
p_fûesz
);

642 i‡(!
öãΩ«me
)

644 
ªt
 = -
ENOMEM
;

645 
d⁄e
;

647 
ªt
 = 
	`do_ªad
(
fd
, 
öãΩ«me
, 
phöãΩ
->
p_fûesz
);

648 i‡(
ªt
 < 0)

649 
d⁄e
;

651 i‡((
size_t
)
ªt
 !
phöãΩ
->
p_fûesz
)

653 
ªt
 = -
ENOEXEC
;

654 
d⁄e
;

658 
	`dbgq
(
DBG_ELF
, "ELF I¡î¥ëî: %*s\n", ()
phöãΩ
->
p_fûesz
,

659 
öãΩ«me
);

660 
öãΩfd
 = 
	`do_›í
(
öãΩ«me
, 
O_RDONLY
);

661 i‡(
öãΩfd
 < 0)

663 
ªt
 = 
öãΩfd
;

664 
d⁄e
;

666 
	`k‰ì
(
öãΩ«me
);

667 
öãΩ«me
 = 
NULL
;

669 
öãΩfûe
 = 
	`fgë
(()
öãΩfd
);

670 
	`KASSERT
(
öãΩfûe
);

673 
ªt
 = 
	`_ñf64_lﬂd_ehdr
(()
öãΩfd
, &
öãΩhódî
, 1);

674 i‡(
ªt
)

675 
d⁄e
;

677 
size_t
 
öãΩphtsize
 = 
öãΩhódî
.
e_phítsize
 * i¡îphódî.
e_phnum
;

678 
öãΩpht
 = 
	`kmÆloc
(
öãΩphtsize
);

679 i‡(!
öãΩpht
)

681 
ªt
 = -
ENOMEM
;

682 
d⁄e
;

685 
ªt
 = 
	`_ñf64_lﬂd_phèbÀ
(()
öãΩfd
, &
öãΩhódî
, 
öãΩpht
,

686 
öãΩphtsize
);

687 i‡(
ªt
)

688 
d⁄e
;

691 
Elf64_Phdr
 *
öãΩphöãΩ
;

692 
ªt
 = 
	`_ñf64_föd_phöãΩ
(&
öãΩhódî
, 
öãΩpht
, &
öãΩphöãΩ
);

693 i‡(
ªt
)

694 
d⁄e
;

696 i‡(
öãΩphöãΩ
)

698 
ªt
 = -
EINVAL
;

699 
d⁄e
;

703 *
öãΩlow
;

704 *
öãΩhigh
;

705 
	`_ñf64_ˇlc_¥ogbounds
(&
öãΩhódî
, 
öãΩpht
, &
öãΩlow
,

706 &
öãΩhigh
);

707 
uöt64_t
 
öãΩ≈ages
 =

708 
	`ADDR_TO_PN
(
	`PAGE_ALIGN_UP
(
öãΩhigh
)Ë- ADDR_TO_PN(
öãΩlow
);

712 
uöt64_t
 
öãΩ∑geba£
 =

713 (
uöt64_t
)
	`vmm≠_föd_ønge
(
m≠
, 
öãΩ≈ages
, 
VMMAP_DIR_HILO
);

714 i‡(
öãΩ∑geba£
 == ~0UL)

716 
ªt
 = -
ENOMEM
;

717 
d⁄e
;

721 *
öãΩba£
 = (*)((
uöçå_t
)
	`PN_TO_ADDR
(
öãΩ∑geba£
) +

722 
	`PAGE_OFFSET
(
öãΩlow
));

725 
öt64_t
 
öãΩoff
 =

726 (
öt64_t
)
öãΩ∑geba£
 - (öt64_t)
	`ADDR_TO_PN
(
öãΩlow
);

728 
íåy
 = (
uöçå_t
)
öãΩba£
 +

729 ((
uöçå_t
)
öãΩhódî
.
e_íåy
 - (uöçå_t)
öãΩlow
);

732 
ªt
 = 
	`_ñf64_m≠_¥og£gs
(
öãΩfûe
->
f_vnode
, 
m≠
, &
öãΩhódî
,

733 
öãΩpht
, 
öãΩoff
);

734 i‡(
ªt
 < 0)

735 
d⁄e
;

740 
auxv
 = (
Elf64_auxv_t
 *)
	`kmÆloc
(7 * (Elf64_auxv_t));

741 i‡(!
auxv
)

743 
ªt
 = -
ENOMEM
;

744 
d⁄e
;

746 
Elf64_auxv_t
 *
auxvít
 = 
auxv
;

749 
auxvít
->
a_ty≥
 = 
AT_PHDR
;

750 
auxvít
->
a_un
.
a_±r
 = 
pht
;

751 
auxvít
++;

753 
auxvít
->
a_ty≥
 = 
AT_PHENT
;

754 
auxvít
->
a_un
.
a_vÆ
 = 
hódî
.
e_phítsize
;

755 
auxvít
++;

757 
auxvít
->
a_ty≥
 = 
AT_PHNUM
;

758 
auxvít
->
a_un
.
a_vÆ
 = 
hódî
.
e_phnum
;

759 
auxvít
++;

761 
auxvít
->
a_ty≥
 = 
AT_ENTRY
;

762 
auxvít
->
a_un
.
a_±r
 = (*)
hódî
.
e_íåy
;

763 
auxvít
++;

765 
auxvít
->
a_ty≥
 = 
AT_BASE
;

766 
auxvít
->
a_un
.
a_±r
 = 
öãΩba£
;

767 
auxvít
++;

769 
auxvít
->
a_ty≥
 = 
AT_PAGESZ
;

770 
auxvít
->
a_un
.
a_vÆ
 = 
PAGE_SIZE
;

771 
auxvít
++;

773 
auxvít
->
a_ty≥
 = 
AT_NULL
;

778 
auxv
 = (
Elf64_auxv_t
 *)
	`kmÆloc
((Elf64_auxv_t));

779 i‡(!
auxv
)

781 
ªt
 = -
ENOMEM
;

782 
d⁄e
;

784 
auxv
->
a_ty≥
 = 
AT_NULL
;

788 
uöt64_t
 
°ack_l›age
 = (uöt64_t)
	`vmm≠_föd_ønge
(

789 
m≠
, (
DEFAULT_STACK_SIZE
 / 
PAGE_SIZE
Ë+ 1, 
VMMAP_DIR_HILO
);

790 i‡(
°ack_l›age
 == ~0UL)

792 
ªt
 = -
ENOMEM
;

793 
d⁄e
;

795 
ªt
 =

796 
	`vmm≠_m≠
(
m≠
, 
NULL
, 
°ack_l›age
, (
DEFAULT_STACK_SIZE
 / 
PAGE_SIZE
) + 1,

797 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 0, 0, 
NULL
);

798 
	`KASSERT
(0 =
ªt
);

799 
	`dbg
(
DBG_ELF
, "Mapped StackátÜowáddr 0x%p, size %#lx\n",

800 
	`PN_TO_ADDR
(
°ack_l›age
), 
DEFAULT_STACK_SIZE
 + 
PAGE_SIZE
);

803 
size_t
 
¨gc
, 
ívc
, 
auxc
;

804 
size_t
 
¨gsize
 =

805 
	`_ñf64_ˇlc_¨gsize
(
¨gv
, 
ívp
, 
auxv
, 
phtsize
, &
¨gc
, &
ívc
, &
auxc
);

807 i‡(
¨gsize
 >
DEFAULT_STACK_SIZE
)

809 
ªt
 = -
E2BIG
;

810 
d⁄e
;

813 
¨gbuf
 = (*)
	`kmÆloc
(
¨gsize
);

814 i‡(!
¨gbuf
)

816 
ªt
 = -
ENOMEM
;

817 
d⁄e
;

821 *
¨glow
 =

822 (*)
	`PN_TO_ADDR
(
°ack_l›age
) +

823 (
uöt64_t
)(

824 ((
uöt64_t
)
	`PN_TO_ADDR
((
DEFAULT_STACK_SIZE
 / 
PAGE_SIZE
) + 1)) -

825 
¨gsize
);

829 
	`_ñf64_lﬂd_¨gs
(
m≠
, 
¨glow
, 
¨gsize
, 
¨gbuf
, 
¨gv
, 
ívp
, 
auxv
, 
¨gc
, 
ívc
,

830 
auxc
, 
phtsize
);

832 
	`dbg
(
DBG_ELF
,

835 
m≠
, 
¥oghigh
);

840 
	`vmm≠_de°roy
(&
cuΩroc
->
p_vmm≠
);

841 
m≠
->
vmm_¥oc
 = 
cuΩroc
;

842 
cuΩroc
->
p_vmm≠
 = 
m≠
;

843 
m≠
 = 
NULL
;

846 
	`±_unm≠_ønge
(
cuΩroc
->
p_pml4
, 
USER_MEM_LOW
, 
USER_MEM_HIGH
);

847 
	`éb_Êush_Æl
();

851 
cuΩroc
->
p_brk
 = 
¥oghigh
;

852 
cuΩroc
->
p_°¨t_brk
 = 
¥oghigh
;

854 
	`°∫˝y
(
cuΩroc
->
p_«me
, 
fûíame
, 
PROC_NAME_LEN
);

858 *
rù
 = (
uöt64_t
)
íåy
;

859 *
r•
 = ((
uöt64_t
)
¨glow
) -

865 
ªt
 = 0;

868 
d⁄e
:

869 
	`Âut
(&
fûe
);

870 i‡(
m≠
)

872 
	`vmm≠_de°roy
(&
m≠
);

874 i‡(
pht
)

876 
	`k‰ì
(
pht
);

878 i‡(
öãΩ«me
)

880 
	`k‰ì
(
öãΩ«me
);

882 i‡(
öãΩfd
 >= 0)

884 
	`do_˛o£
(()
öãΩfd
);

886 i‡(
öãΩfûe
)

888 
	`Âut
(&
öãΩfûe
);

890 i‡(
öãΩpht
)

892 
	`k‰ì
(
öãΩpht
);

894 i‡(
auxv
)

896 
	`k‰ì
(
auxv
);

898 i‡(
¨gbuf
)

900 
	`k‰ì
(
¨gbuf
);

902  
ªt
;

903 
	}
}

905 
	$ñf64_öô
(Ë{ 
	`böfmt_add
("ELF64", 
_ñf64_lﬂd
); 
	}
}

	@kernel/api/exec.c

1 
	~"utû/debug.h
"

2 
	~<utû/°rög.h
>

4 
	~"maö/gdt.h
"

6 
	~"≠i/böfmt.h
"

7 
	~"≠i/exec.h
"

8 
	~"≠i/sysˇŒ.h
"

16 
	$u£æ™d_íåy
(c⁄° 
ªgs_t
 
ªgs
)

18 
	`KASSERT
(
	`¥ìm±i⁄_íabÀd
());

20 
	`dbg
(
DBG_ELF
, ">>>>>>>>>>>>>>>Öid: %d\n", 
cuΩroc
->
p_pid
);

22 
	`öå_dißbÀ
();

23 
	`dbg
(
DBG_ELF
, ">>>>>>>>>>>>>>>> intr_disable()\n");

24 
	`öå_£tùl
(
IPL_LOW
);

25 
	`dbg
(
DBG_ELF
, ">>>>>>>>>>>>>>>> intr_setipl()\n");

27 
__asm__
 
	`__vﬁ©ûe__
(

52 : "a"(&
ªgs
)

54 
	}
}

56 
	$do_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
,

57 
ªgs
 *regs)

59 
uöt64_t
 
rù
, 
r•
;

60 
ªt
 = 
	`böfmt_lﬂd
(
fûíame
, 
¨gv
, 
ívp
, &
rù
, &
r•
);

61 i‡(
ªt
 < 0)

63  
ªt
;

66 
	`dbg
(
DBG_EXEC
, "Executög bö¨y wôhÑù 0x%p,Ñ• 0x%p\n", (*)
rù
,

67 (*)
r•
);

68 
ªgs
->
r_rù
 = 
rù
;

69 
ªgs
->
r_r•
 = 
r•
;

71 
	}
}

83 
	$kî√l_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
)

85 
uöt64_t
 
rù
, 
r•
;

86 
ªt
 = 
	`böfmt_lﬂd
(
fûíame
, 
¨gv
, 
ívp
, &
rù
, &
r•
);

87 
	`dbg
(
DBG_EXEC
, "ªà%ld\n", 
ªt
);

89 
	`KASSERT
(0 =
ªt
);

91 
	`dbg
(
DBG_EXEC
, "E¡îög u£æ™d wôhÑù 0x%p,Ñ• 0x%p\n", (*)
rù
,

92 (*)
r•
);

97 
ªgs_t
 
ªgs
;

98 
	`mem£t
(&
ªgs
, 0, (
ªgs_t
));

101 
ªgs
.
r_cs
 = 
GDT_USER_TEXT
 | 0x3;

102 
ªgs
.
r_ss
 = 
GDT_USER_DATA
 | 0x3;

105 
ªgs
.
r_rù
 = 
rù
;

106 
ªgs
.
r_r•
 = 
r•
;

108 
ªgs
.
r_rÊags
 = 0x202;

109 
	`u£æ™d_íåy
(
ªgs
);

110 
	}
}

	@kernel/api/syscall.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"kî√l.h
"

4 
	~<fs/vfs.h
>

5 
	~<utû/time.h
>

7 
	~"maö/öôs.h
"

8 
	~"maö/öãºu±.h
"

10 
	~"mm/kmÆloc.h
"

11 
	~"mm/mm™.h
"

13 
	~"fs/vfs_sysˇŒ.h
"

14 
	~"fs/vnode.h
"

16 
	~"drivîs/ây/ây.h
"

17 
	~"ã°/kshñl/kshñl.h
"

19 
	~"vm/brk.h
"

20 
	~"vm/mm≠.h
"

22 
	~"≠i/ac˚ss.h
"

23 
	~"≠i/exec.h
"

24 
	~"≠i/sysˇŒ.h
"

25 
	~"≠i/ut¢ame.h
"

27 
sysˇŒ_h™dÀr
(
ªgs_t
 *
ªgs
);

29 
sysˇŒ_di•©ch
(
size_t
 
sy¢um
, 
uöçå_t
 
¨gs
, 
ªgs_t
 *
ªgs
);

31 
size_t
 
a˘ive_ây
;

33 c⁄° *
	gsysˇŒ_°rögs
[49] = {

43 
	$sysˇŒ_öô
(Ë{ 
	`öå_ªgi°î
(
INTR_SYSCALL
, 
sysˇŒ_h™dÀr
); 
	}
}

46 
	#ERROR_OUT
(
c⁄dôi⁄
, 
îr
) \

47 i‡(
c⁄dôi⁄
) \

49 
cuπhr
->
kt_î∫o
 = (
îr
); \

51 }

	)

54 
	#ERROR_OUT_RET
(
ªt
Ë
	`ERROR_OUT
‘ë < 0, -ªt)

	)

70 
	$sys_ªad
(
ªad_¨gs_t
 *
¨gs
)

72 
	`NOT_YET_IMPLEMENTED
("VM: sys_read");

74 
	}
}

85 
	$sys_wrôe
(
wrôe_¨gs_t
 *
¨gs
)

87 
	`NOT_YET_IMPLEMENTED
("VM: sys_write");

89 
	}
}

101 
	$sys_gëdíts
(
gëdíts_¨gs_t
 *
¨gs
)

103 
	`NOT_YET_IMPLEMENTED
("VM: sys_getdents");

105 
	}
}

107 #ifde‡
__MOUNTING__


108 
	$sys_mou¡
(
mou¡_¨gs_t
 *
¨g
)

110 
mou¡_¨gs_t
 
kîn_¨gs
;

111 *
sour˚
;

112 *
èrgë
;

113 *
ty≥
;

114 
ªt
;

116 i‡(
	`c›y_‰om_u£r
(&
kîn_¨gs
, 
¨g
, (kern_args)) < 0)

118 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

123 
sour˚
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
•ec
);

124 i‡(
NULL
 =(
èrgë
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
dú
)))

126 
	`k‰ì
(
sour˚
);

127 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

130 i‡(
NULL
 =(
ty≥
 = 
	`u£r_°rdup
(&
kîn_¨gs
.
f°y≥
)))

132 
	`k‰ì
(
sour˚
);

133 
	`k‰ì
(
èrgë
);

134 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

138 
ªt
 = 
	`do_mou¡
(
sour˚
, 
èrgë
, 
ty≥
);

139 
	`k‰ì
(
sour˚
);

140 
	`k‰ì
(
èrgë
);

141 
	`k‰ì
(
ty≥
);

143 i‡(
ªt
)

145 
cuπhr
->
kt_î∫o
 = -
ªt
;

150 
	}
}

152 
	$sys_umou¡
(
¨g°r_t
 *
öput
)

154 
¨g°r_t
 
k°r
;

155 *
èrgë
;

156 
ªt
;

158 i‡(
	`c›y_‰om_u£r
(&
k°r
, 
öput
, (kstr)) < 0)

160 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

164 i‡(
NULL
 =(
èrgë
 = 
	`u£r_°rdup
(&
k°r
)))

166 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

170 
ªt
 = 
	`do_umou¡
(
èrgë
);

171 
	`k‰ì
(
èrgë
);

173 i‡(
ªt
)

175 
cuπhr
->
kt_î∫o
 = -
ªt
;

180 
	}
}

183 
	$sys_˛o£
(
fd
)

185 
ªt
 = 
	`do_˛o£
(
fd
);

186 
	`ERROR_OUT_RET
(
ªt
);

187  
ªt
;

188 
	}
}

190 
	$sys_dup
(
fd
)

192 
ªt
 = 
	`do_dup
(
fd
);

193 
	`ERROR_OUT_RET
(
ªt
);

194  
ªt
;

195 
	}
}

197 
	$sys_dup2
(c⁄° 
dup2_¨gs_t
 *
¨gs
)

199 
dup2_¨gs_t
 
k¨gs
;

200 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

201 
	`ERROR_OUT_RET
(
ªt
);

202 
ªt
 = 
	`do_dup2
(
k¨gs
.
ofd
, k¨gs.
nfd
);

203 
	`ERROR_OUT_RET
(
ªt
);

204  
ªt
;

205 
	}
}

207 
	$sys_mkdú
(
mkdú_¨gs_t
 *
¨gs
)

209 
mkdú_¨gs_t
 
k¨gs
;

210 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

211 
	`ERROR_OUT_RET
(
ªt
);

213 *
∑th
;

214 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
∑th
, &path);

215 
	`ERROR_OUT_RET
(
ªt
);

217 
ªt
 = 
	`do_mkdú
(
∑th
);

218 
	`k‰ì
(
∑th
);

220 
	`ERROR_OUT_RET
(
ªt
);

221  
ªt
;

222 
	}
}

224 
	$sys_rmdú
(
¨g°r_t
 *
¨gs
)

226 
¨g°r_t
 
k¨gs
;

227 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

228 
	`ERROR_OUT_RET
(
ªt
);

230 *
∑th
;

231 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
, &
∑th
);

232 
	`ERROR_OUT_RET
(
ªt
);

234 
ªt
 = 
	`do_rmdú
(
∑th
);

235 
	`k‰ì
(
∑th
);

237 
	`ERROR_OUT_RET
(
ªt
);

238  
ªt
;

239 
	}
}

241 
	$sys_u∆ök
(
¨g°r_t
 *
¨gs
)

243 
¨g°r_t
 
k¨gs
;

244 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

245 
	`ERROR_OUT_RET
(
ªt
);

247 *
∑th
;

248 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
, &
∑th
);

249 
	`ERROR_OUT_RET
(
ªt
);

251 
ªt
 = 
	`do_u∆ök
(
∑th
);

252 
	`k‰ì
(
∑th
);

254 
	`ERROR_OUT_RET
(
ªt
);

255  
ªt
;

256 
	}
}

258 
	$sys_lök
(
lök_¨gs_t
 *
¨gs
)

260 
lök_¨gs_t
 
k¨gs
;

261 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

262 
	`ERROR_OUT_RET
(
ªt
);

264 *
to
, *
‰om
;

265 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
to
, &to);

266 
	`ERROR_OUT_RET
(
ªt
);

268 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
‰om
, &from);

269 i‡(
ªt
)

271 
	`k‰ì
(
to
);

272 
	`ERROR_OUT_RET
(
ªt
);

275 
ªt
 = 
	`do_lök
(
‰om
, 
to
);

276 
	`k‰ì
(
to
);

277 
	`k‰ì
(
‰om
);

279 
	`ERROR_OUT_RET
(
ªt
);

280  
ªt
;

281 
	}
}

283 
	$sys_ª«me
(
ª«me_¨gs_t
 *
¨gs
)

285 
ª«me_¨gs_t
 
k¨gs
;

286 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

287 
	`ERROR_OUT_RET
(
ªt
);

289 *
ﬁd∑th
, *
√w∑th
;

290 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
ﬁd∑th
, &oldpath);

291 
	`ERROR_OUT_RET
(
ªt
);

293 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
√w∑th
, &newpath);

294 i‡(
ªt
)

296 
	`k‰ì
(
ﬁd∑th
);

297 
	`ERROR_OUT_RET
(
ªt
);

300 
ªt
 = 
	`do_ª«me
(
ﬁd∑th
, 
√w∑th
);

301 
	`k‰ì
(
ﬁd∑th
);

302 
	`k‰ì
(
√w∑th
);

304 
	`ERROR_OUT_RET
(
ªt
);

305  
ªt
;

306 
	}
}

308 
	$sys_chdú
(
¨g°r_t
 *
¨gs
)

310 
¨g°r_t
 
k¨gs
;

311 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

312 
	`ERROR_OUT_RET
(
ªt
);

314 *
∑th
;

315 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
, &
∑th
);

316 
	`ERROR_OUT_RET
(
ªt
);

318 
ªt
 = 
	`do_chdú
(
∑th
);

319 
	`k‰ì
(
∑th
);

321 
	`ERROR_OUT_RET
(
ªt
);

322  
ªt
;

323 
	}
}

325 
	$sys_l£ek
(
l£ek_¨gs_t
 *
¨gs
)

327 
l£ek_¨gs_t
 
k¨gs
;

328 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

329 
	`ERROR_OUT_RET
(
ªt
);

331 
ªt
 = 
	`do_l£ek
(
k¨gs
.
fd
, k¨gs.
off£t
, k¨gs.
whí˚
);

333 
	`ERROR_OUT_RET
(
ªt
);

334  
ªt
;

335 
	}
}

337 
	$sys_›í
(
›í_¨gs_t
 *
¨gs
)

339 
›í_¨gs_t
 
k¨gs
;

340 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

341 
	`ERROR_OUT_RET
(
ªt
);

343 *
∑th
;

344 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
fûíame
, &
∑th
);

345 
	`ERROR_OUT_RET
(
ªt
);

347 
ªt
 = 
	`do_›í
(
∑th
, 
k¨gs
.
Êags
);

348 
	`k‰ì
(
∑th
);

350 
	`ERROR_OUT_RET
(
ªt
);

351  
ªt
;

352 
	}
}

354 
	$sys_munm≠
(
munm≠_¨gs_t
 *
¨gs
)

356 
munm≠_¨gs_t
 
k¨gs
;

357 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

358 
	`ERROR_OUT_RET
(
ªt
);

360 
ªt
 = 
	`do_munm≠
(
k¨gs
.
addr
, k¨gs.
Àn
);

362 
	`ERROR_OUT_RET
(
ªt
);

363  
ªt
;

364 
	}
}

366 *
	$sys_mm≠
(
mm≠_¨gs_t
 *
¨g
)

368 
mm≠_¨gs_t
 
k¨gs
;

370 i‡(
	`c›y_‰om_u£r
(&
k¨gs
, 
¨g
, (
mm≠_¨gs_t
)))

372 
cuπhr
->
kt_î∫o
 = 
EFAULT
;

373  
MAP_FAILED
;

376 *
ªt
;

377 
îr
 = 
	`do_mm≠
(
k¨gs
.
mma_addr
, k¨gs.
mma_Àn
, k¨gs.
mma_¥Ÿ
,

378 
k¨gs
.
mma_Êags
, k¨gs.
mma_fd
, k¨gs.
mma_off
, &
ªt
);

379 i‡(
îr
)

381 
cuπhr
->
kt_î∫o
 = -
îr
;

382  
MAP_FAILED
;

384  
ªt
;

385 
	}
}

387 
pid_t
 
	$sys_waôpid
(
waôpid_¨gs_t
 *
¨gs
)

389 
waôpid_¨gs_t
 
k¨gs
;

390 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

391 
	`ERROR_OUT_RET
(
ªt
);

393 
°©us
;

394 
pid_t
 
pid
 = 
	`do_waôpid
(
k¨gs
.
w∑_pid
, &
°©us
, k¨gs.
w∑_›ti⁄s
);

395 
	`ERROR_OUT_RET
(
pid
);

397 i‡(
k¨gs
.
w∑_°©us
)

399 
ªt
 = 
	`c›y_to_u£r
(
k¨gs
.
w∑_°©us
, &
°©us
, ());

400 
	`ERROR_OUT_RET
(
ªt
);

403  
pid
;

404 
	}
}

406 *
	$sys_brk
(*
addr
)

408 *
√w_brk
;

409 
ªt
 = 
	`do_brk
(
addr
, &
√w_brk
);

410 i‡(
ªt
)

412 
cuπhr
->
kt_î∫o
 = -
ªt
;

415  
√w_brk
;

416 
	}
}

418 
	$sys_hÆt
(Ë{ 
	`¥oc_kûl_Æl
(); 
	}
}

420 
	$sys_°©
(
°©_¨gs_t
 *
¨gs
)

422 
°©_¨gs_t
 
k¨gs
;

423 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

424 
	`ERROR_OUT_RET
(
ªt
);

426 *
∑th
;

427 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
∑th
, &path);

428 
	`ERROR_OUT_RET
(
ªt
);

430 
°©_t
 
°©_buf
;

431 
ªt
 = 
	`do_°©
(
∑th
, &
°©_buf
);

432 
	`k‰ì
(
∑th
);

433 
	`ERROR_OUT_RET
(
ªt
);

435 
ªt
 = 
	`c›y_to_u£r
(
k¨gs
.
buf
, &
°©_buf
, (stat_buf));

436 
	`ERROR_OUT_RET
(
ªt
);

438  
ªt
;

439 
	}
}

441 
	$sys_pùe
(
¨gs
[2])

443 
k¨gs
[2];

444 
ªt
 = 
	`do_pùe
(
k¨gs
);

445 
	`ERROR_OUT_RET
(
ªt
);

447 
ªt
 = 
	`c›y_to_u£r
(
¨gs
, 
k¨gs
, (kargs));

448 
	`ERROR_OUT_RET
(
ªt
);

450  
ªt
;

451 
	}
}

453 
	$sys_u«me
(
ut¢ame
 *
¨g
)

455 c⁄° 
sy¢ame
[] = "Weenix";

456 c⁄° 
ªÀa£
[] = "1.2";

458 c⁄° 
vîsi⁄
[] = "#1 " 
__DATE__
 " " 
__TIME__
;

459 c⁄° 
nodíame
[] = "";

460 c⁄° 
machöe
[] = "";

461 
ªt
 = 0;

463 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
sy¢ame
, sysname, (sysname));

464 
	`ERROR_OUT_RET
(
ªt
);

465 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
ªÀa£
,Ñelease, (release));

466 
	`ERROR_OUT_RET
(
ªt
);

467 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
vîsi⁄
, version, (version));

468 
	`ERROR_OUT_RET
(
ªt
);

469 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
nodíame
,Çodename, (nodename));

470 
	`ERROR_OUT_RET
(
ªt
);

471 
ªt
 = 
	`c›y_to_u£r
(
¨g
->
machöe
, machine, (machine));

472 
	`ERROR_OUT_RET
(
ªt
);

473  
ªt
;

474 
	}
}

476 
	$sys_time
(
time_t
 *
uéoc
)

478 
time_t
 
time
 = 
	`do_time
();

479 i‡(
uéoc
)

481 
ªt
 = 
	`c›y_to_u£r
(
uéoc
, &
time
, (
time_t
));

482 
	`ERROR_OUT_RET
(
ªt
);

484  
time
;

485 
	}
}

487 
	$sys_f‹k
(
ªgs_t
 *
ªgs
)

489 
ªt
 = 
	`do_f‹k
(
ªgs
);

490 
	`ERROR_OUT_RET
(
ªt
);

491  
ªt
;

492 
	}
}

494 
	$‰ì_ve˘‹
(**
ve˘
)

496 **
ãmp
;

497 
ãmp
 = 
ve˘
; *temp;Åemp++)

499 
	`k‰ì
(*
ãmp
);

501 
	`k‰ì
(
ve˘
);

502 
	}
}

504 
	$sys_execve
(
execve_¨gs_t
 *
¨gs
, 
ªgs_t
 *
ªgs
)

506 
execve_¨gs_t
 
k¨gs
;

507 *
fûíame
 = 
NULL
;

508 **
¨gv
 = 
NULL
;

509 **
ívp
 = 
NULL
;

511 
ªt
;

512 i‡((
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs))))

513 
˛ónup
;

515 i‡((
ªt
 = 
	`u£r_°rdup
(&
k¨gs
.
fûíame
, &filename)))

516 
˛ónup
;

518 i‡(
k¨gs
.
¨gv
.
av_vec
 && (
ªt
 = 
	`u£r_vecdup
(&kargs.argv, &argv)))

519 
˛ónup
;

521 i‡(
k¨gs
.
ívp
.
av_vec
 && (
ªt
 = 
	`u£r_vecdup
(&kargs.envp, &envp)))

522 
˛ónup
;

524 
ªt
 = 
	`do_execve
(
fûíame
, 
¨gv
, 
ívp
, 
ªgs
);

526 
˛ónup
:

527 i‡(
fûíame
)

528 
	`k‰ì
(
fûíame
);

529 i‡(
¨gv
)

530 
	`‰ì_ve˘‹
(
¨gv
);

531 i‡(
ívp
)

532 
	`‰ì_ve˘‹
(
ívp
);

533 
	`ERROR_OUT_RET
(
ªt
);

534  
ªt
;

535 
	}
}

537 
	$sys_debug
(
¨g°r_t
 *
¨gs
)

539 
¨g°r_t
 
k¨gs
;

540 
ªt
 = 
	`c›y_‰om_u£r
(&
k¨gs
, 
¨gs
, (kargs));

541 
	`ERROR_OUT_RET
(
ªt
);

543 *
°r
;

544 
ªt
 = 
	`u£r_°rdup
(&
k¨gs
, &
°r
);

545 
	`ERROR_OUT_RET
(
ªt
);

546 
	`dbg
(
DBG_USER
, "%s\n", 
°r
);

547 
	`k‰ì
(
°r
);

548  
ªt
;

549 
	}
}

551 
	$sys_kshñl
(
âyid
)

555 
kshñl_t
 *
ksh
 = 
	`kshñl_¸óã
(
a˘ive_ây
);

556 
	`ERROR_OUT
(!
ksh
, 
ENODEV
);

558 
ªt
;

559 (
ªt
 = 
	`kshñl_execuã_√xt
(
ksh
)) > 0)

561 
	`kshñl_de°roy
(
ksh
);

563 
	`ERROR_OUT_RET
(
ªt
);

564  
ªt
;

565 
	}
}

567 
	$sys_u¶ìp
(
u¶ìp_¨gs_t
 *
¨gs
)

569  
	`do_u¶ìp
(
¨gs
->
u£c
);

570 
	}
}

572 
ölöe
 
	$check_cuπhr_ˇn˚Œed
()

574 
	`KASSERT
(
	`li°_em±y
(&
cuπhr
->
kt_muãxes
));

575 
ˇn˚Œed
 = 
cuπhr
->
kt_ˇn˚Œed
;

576 *
ªtvÆ
 = 
cuπhr
->
kt_ªtvÆ
;

578 i‡(
ˇn˚Œed
)

580 
	`dbg
(
DBG_SYSCALL
, "CANCELLING:Åhªad 0x%∞o‡P%d (%s)\n", 
cuπhr
,

581 
cuΩroc
->
p_pid
, cuΩroc->
p_«me
);

582 
	`kthªad_exô
(
ªtvÆ
);

584 
	}
}

586 
	$sysˇŒ_h™dÀr
(
ªgs_t
 *
ªgs
)

588 
size_t
 
sy¢um
 = (size_t)
ªgs
->
r_øx
;

589 
uöçå_t
 
¨gs
 = (uöçå_t)
ªgs
->
r_rdx
;

591 c⁄° *
sysˇŒ_°rög
;

592 i‡(
sy¢um
 <= 47)

594 
sysˇŒ_°rög
 = 
sysˇŒ_°rögs
[
sy¢um
];

598 i‡(
sy¢um
 == 9001)

600 
sysˇŒ_°rög
 = "debug";

602 i‡(
sy¢um
 == 9002)

604 
sysˇŒ_°rög
 = "kshell";

608 
sysˇŒ_°rög
 = "unknown";

612 i‡(
sy¢um
 !
SYS_î∫o
)

613 
	`dbg
(
DBG_SYSCALL
, ">>Öid %d, sysnum: %lu (%s),árg: %lu (0x%p)\n",

614 
cuΩroc
->
p_pid
, 
sy¢um
, 
sysˇŒ_°rög
, 
¨gs
, (*)args);

616 
	`check_cuπhr_ˇn˚Œed
();

617 
ªt
 = 
	`sysˇŒ_di•©ch
(
sy¢um
, 
¨gs
, 
ªgs
);

618 
	`check_cuπhr_ˇn˚Œed
();

620 i‡(
sy¢um
 !
SYS_î∫o
)

621 
	`dbg
(
DBG_SYSCALL
, "<<Öid %d, sysnum: %lu (%s),Ñeturned: %lu (%#lx)\n",

622 
cuΩroc
->
p_pid
, 
sy¢um
, 
sysˇŒ_°rög
, 
ªt
,Ñet);

624 
ªgs
->
r_øx
 = (
uöt64_t
)
ªt
;

626 
	}
}

628 
	$sysˇŒ_di•©ch
(
size_t
 
sy¢um
, 
uöçå_t
 
¨gs
, 
ªgs_t
 *
ªgs
)

630 
sy¢um
)

632 
SYS_waôpid
:

633  
	`sys_waôpid
((
waôpid_¨gs_t
 *)
¨gs
);

635 
SYS_exô
:

636 
	`do_exô
(()
¨gs
);

637 
	`∑nic
("exit failed!\n");

639 
SYS_thr_exô
:

640 
	`kthªad_exô
((*)
¨gs
);

641 
	`∑nic
("thr_exit failed!\n");

643 
SYS_sched_yõld
:

644 
	`sched_yõld
();

647 
SYS_f‹k
:

648  
	`sys_f‹k
(
ªgs
);

650 
SYS_gëpid
:

651  
cuΩroc
->
p_pid
;

653 
SYS_sync
:

654 
	`do_sync
();

657 #ifde‡
__MOUNTING__


658 
SYS_mou¡
:

659  
	`sys_mou¡
((
mou¡_¨gs_t
 *)
¨gs
);

661 
SYS_umou¡
:

662  
	`sys_umou¡
((
¨g°r_t
 *)
¨gs
);

665 
SYS_mm≠
:

666  ()
	`sys_mm≠
((
mm≠_¨gs_t
 *)
¨gs
);

668 
SYS_munm≠
:

669  
	`sys_munm≠
((
munm≠_¨gs_t
 *)
¨gs
);

671 
SYS_›í
:

672  
	`sys_›í
((
›í_¨gs_t
 *)
¨gs
);

674 
SYS_˛o£
:

675  
	`sys_˛o£
(()
¨gs
);

677 
SYS_ªad
:

678  
	`sys_ªad
((
ªad_¨gs_t
 *)
¨gs
);

680 
SYS_wrôe
:

681  
	`sys_wrôe
((
wrôe_¨gs_t
 *)
¨gs
);

683 
SYS_dup
:

684  
	`sys_dup
(()
¨gs
);

686 
SYS_dup2
:

687  
	`sys_dup2
((
dup2_¨gs_t
 *)
¨gs
);

689 
SYS_mkdú
:

690  
	`sys_mkdú
((
mkdú_¨gs_t
 *)
¨gs
);

692 
SYS_rmdú
:

693  
	`sys_rmdú
((
¨g°r_t
 *)
¨gs
);

695 
SYS_u∆ök
:

696  
	`sys_u∆ök
((
¨g°r_t
 *)
¨gs
);

698 
SYS_lök
:

699  
	`sys_lök
((
lök_¨gs_t
 *)
¨gs
);

701 
SYS_ª«me
:

702  
	`sys_ª«me
((
ª«me_¨gs_t
 *)
¨gs
);

704 
SYS_chdú
:

705  
	`sys_chdú
((
¨g°r_t
 *)
¨gs
);

707 
SYS_gëdíts
:

708  
	`sys_gëdíts
((
gëdíts_¨gs_t
 *)
¨gs
);

710 
SYS_brk
:

711  ()
	`sys_brk
((*)
¨gs
);

713 
SYS_l£ek
:

714  
	`sys_l£ek
((
l£ek_¨gs_t
 *)
¨gs
);

716 
SYS_hÆt
:

717 
	`sys_hÆt
();

720 
SYS_£t_î∫o
:

721 
cuπhr
->
kt_î∫o
 = ()
¨gs
;

724 
SYS_î∫o
:

725  
cuπhr
->
kt_î∫o
;

727 
SYS_execve
:

728  
	`sys_execve
((
execve_¨gs_t
 *)
¨gs
, 
ªgs
);

730 
SYS_°©
:

731  
	`sys_°©
((
°©_¨gs_t
 *)
¨gs
);

733 
SYS_pùe
:

734  
	`sys_pùe
((*)
¨gs
);

736 
SYS_u«me
:

737  
	`sys_u«me
((
ut¢ame
 *)
¨gs
);

739 
SYS_time
:

740  
	`sys_time
((
time_t
 *)
¨gs
);

742 
SYS_debug
:

743  
	`sys_debug
((
¨g°r_t
 *)
¨gs
);

745 
SYS_kshñl
:

746  
	`sys_kshñl
(()
¨gs
);

748 
SYS_u¶ìp
:

749  
	`sys_u¶ìp
((
u¶ìp_¨gs_t
 *)
¨gs
);

752 
	`dbg
(
DBG_ERROR
, "ERROR: unknown system call: %lu (args: 0x%p)\n",

753 
sy¢um
, (*)
¨gs
);

754 
cuπhr
->
kt_î∫o
 = 
ENOSYS
;

757 
	}
}

	@kernel/drivers/blockdev.c

1 
	~"kî√l.h
"

2 
	~"utû/debug.h
"

3 
	~<drivîs/disk/ßè.h
>

5 
	~"drivîs/blockdev.h
"

7 
	~"fs/s5fs/s5fs.h
"

8 
	~"mm/p‰ame.h
"

10 
li°_t
 
	gblockdevs
 = 
LIST_INITIALIZER
(
blockdevs
);

12 
	$blockdev_öô
(Ë{ 
	`ßè_öô
(); 
	}
}

14 
	$blockdev_ªgi°î
(
blockdev_t
 *
dev
)

16 i‡(!
dev
 || dev->
bd_id
 =
NULL_DEVID
 || !dev->
bd_›s
)

21 
	`li°_ôî©e
(&
blockdevs
, 
bd
, 
blockdev_t
, 
bd_lök
)

23 i‡(
dev
->
bd_id
 =
bd
->bd_id)

29 
	`li°_ö£π_èû
(&
blockdevs
, &
dev
->
bd_lök
);

31 
	}
}

33 
blockdev_t
 *
	$blockdev_lookup
(
devid_t
 
id
)

35 
	`li°_ôî©e
(&
blockdevs
, 
bd
, 
blockdev_t
, 
bd_lök
)

37 i‡(
id
 =
bd
->
bd_id
)

39  
bd
;

42  
NULL
;

43 
	}
}

45 
	$blockdev_fûl_p‰ame
(
mobj_t
 *
mobj
, 
p‰ame_t
 *
pf
)

47 
	`KASSERT
(
mobj
 && 
pf
);

48 
	`KASSERT
(
pf
->
pf_∑gíum
 <(1UL << (8 * (
blocknum_t
))));

49 
blockdev_t
 *
bd
 = 
	`CONTAINER_OF
(
mobj
, 
s5fs_t
, 
s5f_mobj
)->
s5f_bdev
;

50  
bd
->
bd_›s
->
	`ªad_block
(bd, 
pf
->
pf_addr
, (
blocknum_t
Ìf->
pf_loc
, 1);

51 
	}
}

53 
	$blockdev_Êush_p‰ame
(
mobj_t
 *
mobj
, 
p‰ame_t
 *
pf
)

55 
	`KASSERT
(
mobj
 && 
pf
);

56 
	`KASSERT
(
pf
->
pf_∑gíum
 <(1UL << (8 * (
blocknum_t
))));

57 
	`dbg
(
DBG_S5FS
, "wrôög disk block %lu\n", 
pf
->
pf_∑gíum
);

58 
blockdev_t
 *
bd
 = 
	`CONTAINER_OF
(
mobj
, 
s5fs_t
, 
s5f_mobj
)->
s5f_bdev
;

59  
bd
->
bd_›s
->
	`wrôe_block
(bd, 
pf
->
pf_addr
, (
blocknum_t
Ìf->
pf_loc
, 1);

60 
	}
}

	@kernel/drivers/chardev.c

1 
	~"drivîs/ch¨dev.h
"

2 
	~"drivîs/memdevs.h
"

3 
	~"drivîs/ây/ây.h
"

4 
	~"kî√l.h
"

5 
	~"utû/debug.h
"

7 
li°_t
 
	gch¨devs
 = 
LIST_INITIALIZER
(
ch¨devs
);

9 
	$ch¨dev_öô
()

11 
	`ây_öô
();

12 
	`memdevs_öô
();

13 
	}
}

15 
	$ch¨dev_ªgi°î
(
ch¨dev_t
 *
dev
)

17 i‡(!
dev
 || (
NULL_DEVID
 =dev->
cd_id
Ë|| !(dev->
cd_›s
))

21 
	`li°_ôî©e
(&
ch¨devs
, 
cd
, 
ch¨dev_t
, 
cd_lök
)

23 i‡(
dev
->
cd_id
 =
cd
->cd_id)

28 
	`li°_ö£π_èû
(&
ch¨devs
, &
dev
->
cd_lök
);

30 
	}
}

32 
ch¨dev_t
 *
	$ch¨dev_lookup
(
devid_t
 
id
)

34 
	`li°_ôî©e
(&
ch¨devs
, 
cd
, 
ch¨dev_t
, 
cd_lök
)

36 
	`KASSERT
(
NULL_DEVID
 !
cd
->
cd_id
);

37 i‡(
id
 =
cd
->
cd_id
)

39  
cd
;

42  
NULL
;

43 
	}
}

	@kernel/drivers/cmos.c

1 
	~"drivîs/cmos.h
"

3 
	$cmos_upd©e_Êag_£t
()

5 
	`outb
(
CMOS_ADDR
, 
CMOS_REG_STAT_A
);

6  (
	`öb
(
CMOS_DATA
) & 0x80);

7 
	}
}

9 
	$cmos_ªad_ªgi°î
(
ªg
)

11 
	`outb
(
CMOS_ADDR
, 
ªg
);

12  
	`öb
(
CMOS_DATA
);

13 
	}
}

15 
	$πc_time_m©ch
(
πc_time_t
 
a
,Ñtc_time_à
b
)

17  (
a
.
£c⁄d
 =
b
.£c⁄dË&& (a.
möuã
 == b.minute) &&

18 (
a
.
hour
 =
b
.hourË&& (a.
day
 =b.dayË&& (a.
m⁄th
 == b.month) &&

19 (
a
.
yór
 =
b
.yórË&& (a.
__˚¡ury
 == b.__century);

20 
	}
}

22 
πc_time_t
 
	$__gë_πc_time
()

24 
πc_time_t
 
tm
;

26 
	`cmos_upd©e_Êag_£t
())

29 
tm
.
£c⁄d
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_SECOND
);

30 
tm
.
möuã
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_MINUTE
);

31 
tm
.
hour
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_HOUR
);

32 
tm
.
day
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_DAY
);

33 
tm
.
m⁄th
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_MONTH
);

34 
tm
.
yór
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_YEAR
);

35 
tm
.
__˚¡ury
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_CENTURY
);

37  
tm
;

38 
	}
}

42 
πc_time_t
 
	$πc_gë_time
()

45 
πc_time_t
 
tm_a
;

46 
πc_time_t
 
tm_b
;

50 
tm_a
 = 
	`__gë_πc_time
();

51 
tm_b
 = 
	`__gë_πc_time
();

52 } !
	`πc_time_m©ch
(
tm_a
, 
tm_b
));

54 
cmos_£âögs
 = 
	`cmos_ªad_ªgi°î
(
CMOS_REG_STAT_B
);

57 i‡(!(
cmos_£âögs
 & 0x04))

59 
tm_a
.
£c⁄d
 = (tm_a.second & 0x0F) + ((tm_a.second / 16) * 10);

60 
tm_a
.
möuã
 = (tm_a.minute & 0x0F) + ((tm_a.minute / 16) * 10);

61 
tm_a
.
hour
 = ((tm_a.hour & 0x0F) + (((tm_a.hour & 0x70) / 16) * 10)) |

62 (
tm_a
.
hour
 & 0x80);

63 
tm_a
.
day
 = (tm_a.day & 0x0F) + ((tm_a.day / 16) * 10);

64 
tm_a
.
m⁄th
 = (tm_a.month & 0x0F) + ((tm_a.month / 16) * 10);

65 
tm_a
.
yór
 = (tm_a.year & 0x0F) + ((tm_a.year / 16) * 10);

66 
tm_a
.
__˚¡ury
 = (tm_a.__century & 0x0F) + ((tm_a.__century / 16) * 10);

70 i‡(!(
cmos_£âögs
 & 0x02Ë&& (
tm_a
.
hour
 & 0x80))

72 
tm_a
.
hour
 = ((tm_a.hour & 0x7F) + 12) % 24;

75 
tm_a
.
yór
 +—m_a.
__˚¡ury
 * 100);

77  
tm_a
;

78 
	}
}

	@kernel/drivers/disk/sata.c

1 
	~<drivîs/blockdev.h
>

2 
	~<drivîs/disk/ahci.h
>

3 
	~<drivîs/disk/ßè.h
>

4 
	~<drivîs/pcõ.h
>

5 
	~<î∫o.h
>

6 
	~<mm/kmÆloc.h
>

7 
	~<mm/∑ge.h
>

8 
	~<utû/debug.h
>

9 
	~<utû/°rög.h
>

11 
	#ENABLE_NATIVE_COMMAND_QUEUING
 1

	)

13 
	#bdev_to_©a_disk
(
bd
Ë(
	`CONTAINER_OF
((bd), 
©a_disk_t
, 
bdev
))

	)

14 
	#SATA_SECTORS_PER_BLOCK
 (
SATA_BLOCK_SIZE
 / 
ATA_SECTOR_SIZE
)

	)

16 
	#SATA_PCI_CLASS
 0x1

	)

17 
	#SATA_PCI_SUBCLASS
 0x6

	)

18 
	#SATA_AHCI_INTERFACE
 0x1

	)

20 
hba_t
 *
	ghba
;

24 
uöt32_t
 
	gout°™dög_ªque°s
[
AHCI_MAX_NUM_PORTS
] = {0};

28 
ktqueue_t
 
	gout°™dög_ªque°_queues
[
AHCI_MAX_NUM_PORTS
]

29 [
AHCI_COMMAND_HEADERS_PER_LIST
];

33 
ktqueue_t
 
	gcomm™d_¶Ÿ_queues
[
AHCI_MAX_NUM_PORTS
];

35 
ßè_ªad_block
(
blockdev_t
 *
bdev
, *
buf
, 
blocknum_t
 
block
,

36 
size_t
 
block_cou¡
);

37 
ßè_wrôe_block
(
blockdev_t
 *
bdev
, c⁄° *
buf
, 
blocknum_t
 
block
,

38 
size_t
 
block_cou¡
);

41 
blockdev_›s_t
 
	gßè_disk_›s
 = {

42 .
ªad_block
 = 
ßè_ªad_block
,

43 .
	gwrôe_block
 = 
ßè_wrôe_block
,

48 
ölöe
 
	$föd_cmd¶Ÿ
(
hba_p‹t_t
 *
p‹t
)

55  
	`__buûtö_˘z
(~(
p‹t
->
px_ß˘
 |Ö‹t->
px_ci
 |

56 
out°™dög_ªque°s
[
	`PORT_INDEX
(
hba
, 
p‹t
)]));

57 
	}
}

60 
	$ísuª_m≠≥d
(*
addr
, 
size_t
 
size
)

62 
	`±_m≠_ønge
(
	`±_gë
(), (
uöçå_t
)
	`PAGE_ALIGN_DOWN
(
addr
Ë- 
PHYS_OFFSET
,

63 (
uöçå_t
)
	`PAGE_ALIGN_DOWN
(
addr
),

64 (
uöçå_t
)
	`PAGE_ALIGN_UP
((uöçå_t)
addr
 + 
size
),

65 
PT_WRITE
 | 
PT_PRESENT
, PT_WRITE | PT_PRESENT);

66 
	}
}

68 
kmuãx_t
 
	gbeˇu£_qemu_d€¢t_emuœã_ahci_ncq_c‹ª˘ly
;

81 
	$ahci_do_›î©i⁄
(
hba_p‹t_t
 *
p‹t
, 
ssize_t
 
lba
, 
uöt16_t
 
cou¡
, *
buf
,

82 
wrôe
)

84 
	`kmuãx_lock
(&
beˇu£_qemu_d€¢t_emuœã_ahci_ncq_c‹ª˘ly
);

85 
	`KASSERT
(
cou¡
 && 
buf
);

87 
	`KASSERT
(
lba
 >= 0 &&Üba < 1L << 23);

90 
size_t
 
p‹t_ödex
 = 
	`PORT_INDEX
(
hba
, 
p‹t
);

92 
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
IPL_HIGH
);

94 
uöt64_t
 
physbuf
 = 
	`±_vút_to_phys
((
uöçå_t
)
buf
);

97 
comm™d_¶Ÿ
;

98 (
comm™d_¶Ÿ
 = 
	`föd_cmd¶Ÿ
(
p‹t
)) == -1)

100 
	`sched_¶ìp_⁄
(
comm™d_¶Ÿ_queues
 + 
p‹t_ödex
);

104 
comm™d_li°_t
 *
comm™d_li°
 =

105 (
comm™d_li°_t
 *)(
p‹t
->
px_˛b
 + 
PHYS_OFFSET
);

106 
comm™d_hódî_t
 *
comm™d_hódî
 =

107 
comm™d_li°
->
comm™d_hódîs
 + 
comm™d_¶Ÿ
;

108 
	`mem£t
(
comm™d_hódî
, 0, (
comm™d_hódî_t
));

111 
comm™d_hódî
->
cÊ
 = (
h2d_ªgi°î_fis_t
Ë/ (
uöt32_t
);

112 
comm™d_hódî
->
wrôe
 = (
uöt8_t
)write;

113 
comm™d_hódî
->
¥dé
 = (
uöt16_t
)(

114 
	`ALIGN_UP_POW_2
(
cou¡
, 
AHCI_SECTORS_PER_PRDT
) / AHCI_SECTORS_PER_PRDT);

115 
	`KASSERT
(
comm™d_hódî
->
¥dé
);

118 
comm™d_èbÀ_t
 *
comm™d_èbÀ
 =

119 (
comm™d_èbÀ_t
 *)(
comm™d_hódî
->
˘ba
 + 
PHYS_OFFSET
);

120 
	`mem£t
(
comm™d_èbÀ
, 0, (
comm™d_èbÀ_t
));

123 
¥d_t
 *
¥dt
 = 
comm™d_èbÀ
->prdt;

126 
i
 = 0; i < 
comm™d_hódî
->
¥dé
 - 1U; i++)

128 
¥dt
->
dbc
 = 
AHCI_MAX_PRDT_SIZE
 - 1;

129 
¥dt
->
dba
 = 
physbuf
;

130 
¥dt
->
i
 = 1;

131 
physbuf
 +=

132 
AHCI_MAX_PRDT_SIZE
;

133 
¥dt
++;

135 
¥dt
->
dbc
 = (
uöt32_t
)(
cou¡
 % 
AHCI_SECTORS_PER_PRDT
Ë* 
ATA_SECTOR_SIZE
 - 1;

136 
¥dt
->
dba
 = (
uöt64_t
)
physbuf
;

139 
h2d_ªgi°î_fis_t
 *
comm™d_fis
 = &
comm™d_èbÀ
->
cfis
.
h2d_ªgi°î_fis
;

140 
comm™d_fis
->
fis_ty≥
 = 
fis_ty≥_h2d_ªgi°î
;

141 
comm™d_fis
->
c
 = 1;

142 
comm™d_fis
->
devi˚
 = 
ATA_DEVICE_LBA_MODE
;

143 
comm™d_fis
->
lba
 = (
uöt32_t
)lba;

144 
comm™d_fis
->
lba_exp
 = (
uöt32_t
)(
lba
 >> 24);

148 #i‡
ENABLE_NATIVE_COMMAND_QUEUING


149 i‡(
hba
->
ghc
.
ˇp
.
¢cq
)

152 
comm™d_fis
->
„©uªs
 = (
uöt8_t
)
cou¡
;

153 
comm™d_fis
->
„©uªs_exp
 = (
uöt8_t
)(
cou¡
 >> 8);

156 
comm™d_fis
->
£˘‹_cou¡
 = (
uöt16_t
)(
comm™d_¶Ÿ
 << 3);

159 
comm™d_fis
->
comm™d
 = (
uöt8_t
)(
wrôe
 ? 
ATA_WRITE_FPDMA_QUEUED_COMMAND


160 : 
ATA_READ_FPDMA_QUEUED_COMMAND
);

164 
comm™d_fis
->
£˘‹_cou¡
 = 
cou¡
;

166 
comm™d_fis
->
comm™d
 = (
uöt8_t
)(
wrôe
 ? 
ATA_WRITE_DMA_EXT_COMMAND


167 : 
ATA_READ_DMA_EXT_COMMAND
);

172 
comm™d_fis
->
£˘‹_cou¡
 = 
cou¡
;

173 
comm™d_fis
->
comm™d
 =

174 (
uöt8_t
)(
wrôe
 ? 
ATA_WRITE_DMA_EXT_COMMAND
 : 
ATA_READ_DMA_EXT_COMMAND
);

177 
	`dbg
(
DBG_DISK
, "initiatingÑequest on slot %ldÅo %s sectors [%lu, %lu)\n",

178 
comm™d_¶Ÿ
, 
wrôe
 ? "wrôe" : "ªad", 
lba
,Üb®+ 
cou¡
);

182 
out°™dög_ªque°s
[
p‹t_ödex
] |(1 << 
comm™d_¶Ÿ
);

185 
p‹t
->
px_ß˘
 |(1 << 
comm™d_¶Ÿ
);

186 
p‹t
->
px_ci
 |(1 << 
comm™d_¶Ÿ
);

188 *
ﬁd_ªtvÆ
 = 0;

189 i‡(
cuπhr
->
kt_ªtvÆ
)

191 
ﬁd_ªtvÆ
 = 
cuπhr
->
kt_ªtvÆ
;

192 
cuπhr
->
kt_ªtvÆ
 = 0;

195 
	`KASSERT
(!
cuπhr
->
kt_ªtvÆ
);

197 
	`dbg
(
DBG_DISK
,

199 
comm™d_¶Ÿ
, 
wrôe
 ? "wrôe" : "ªad", 
lba
,Üb®+ 
cou¡
);

200 
	`sched_¶ìp_⁄
(
out°™dög_ªque°_queues
[
p‹t_ödex
] + 
comm™d_¶Ÿ
);

201 
	`öå_£tùl
(
ùl
);

202 
	`dbg
(
DBG_DISK
, "completedÑequest on slot %ldÅo %s sectors [%lu, %lu)\n",

203 
comm™d_¶Ÿ
, 
wrôe
 ? "wrôe" : "ªad", 
lba
,Üb®+ 
cou¡
);

204 
	`kmuãx_u∆ock
(&
beˇu£_qemu_d€¢t_emuœã_ahci_ncq_c‹ª˘ly
);

206 
ªt
 = ()
cuπhr
->
kt_ªtvÆ
;

207 i‡(
ﬁd_ªtvÆ
)

209 
cuπhr
->
kt_ªtvÆ
 = 
ﬁd_ªtvÆ
;

211  
ªt
;

212 
	}
}

215 
ölöe
 
	$°¨t_cmd
(
hba_p‹t_t
 *
p‹t
)

217 
p‹t
->
px_cmd
.
¸
)

219 
p‹t
->
px_cmd
.
‰e
 = 1;

220 
p‹t
->
px_cmd
.
°
 = 1;

221 
	}
}

224 
ölöe
 
	$°›_cmd
(
hba_p‹t_t
 *
p‹t
)

226 
p‹t
->
px_cmd
.
°
 = 0;

227 
p‹t
->
px_cmd
.
¸
)

229 
p‹t
->
px_cmd
.
‰e
 = 0;

230 
p‹t
->
px_cmd
.
‰
)

232 
	}
}

235 
	$ahci_öôülize_p‹t
(
hba_p‹t_t
 *
p‹t
, 
p‹t_numbî
,

236 
uöçå_t
 
ahci_ba£
)

238 
	`dbg
(
DBG_DISK
, "Inôülizög AHCI P‹à%d\n", 
p‹t_numbî
);

244 
	`°›_cmd
(
p‹t
);

251 
comm™d_li°_t
 *
comm™d_li°
 =

252 (
comm™d_li°_t
 *)
	`AHCI_COMMAND_LIST_ARRAY_BASE
(
ahci_ba£
Ë+ 
p‹t_numbî
;

253 
ª˚ived_fis_t
 *
ª˚ived_fis
 =

254 (
ª˚ived_fis_t
 *)
	`AHCI_RECEIVED_FIS_ARRAY_BASE
(
ahci_ba£
Ë+ 
p‹t_numbî
;

256 
p‹t
->
px_˛b
 = (
uöt64_t
)
comm™d_li°
 - 
PHYS_OFFSET
;

257 
p‹t
->
px_fb
 = (
uöt64_t
)
ª˚ived_fis
 - 
PHYS_OFFSET
;

258 
p‹t
->
px_õ
 =

259 
px_öãºu±_íabÀ_Æl_íabÀd
;

265 
p‹t
->
px_is
 =

266 
px_öãºu±_°©us_˛ór
;

270 
comm™d_èbÀ_t
 *
p‹t_comm™d_èbÀ_¨øy_ba£
 =

271 (
comm™d_èbÀ_t
 *)
	`AHCI_COMMAND_TABLE_ARRAY_BASE
(
ahci_ba£
) +

272 
p‹t_numbî
 * 
AHCI_COMMAND_HEADERS_PER_LIST
;

273 
i
 = 0; i < 
AHCI_COMMAND_HEADERS_PER_LIST
; i++)

275 
comm™d_li°
->
comm™d_hódîs
[
i
].
˘ba
 =

276 (
uöt64_t
)(
p‹t_comm™d_èbÀ_¨øy_ba£
 + 
i
Ë- 
PHYS_OFFSET
;

277 
	`sched_queue_öô
(
out°™dög_ªque°_queues
[
p‹t_numbî
] + 
i
);

281 
	`sched_queue_öô
(
comm™d_¶Ÿ_queues
 + 
p‹t_numbî
);

284 i‡(
p‹t
->
px_sig
 =
SATA_SIG_ATA
)

286 
	`dbg
(
DBG_DISK
, "\tAddög SATA Disk Drivê© P‹à%d\n", 
p‹t_numbî
);

287 
©a_disk_t
 *
disk
 = 
	`kmÆloc
((ata_disk_t));

288 
disk
->
p‹t
 =Öort;

289 
disk
->
bdev
.
bd_id
 = 
	`MKDEVID
(
DISK_MAJOR
, 
p‹t_numbî
);

290 
disk
->
bdev
.
bd_›s
 = &
ßè_disk_›s
;

291 
	`li°_lök_öô
(&
disk
->
bdev
.
bd_lök
);

292 
ªt
 = 
	`blockdev_ªgi°î
(&
disk
->
bdev
);

293 
	`KASSERT
(!
ªt
);

299 
	`dbg
(
DBG_DISK
, "\tunknow¿devi˚ sig«tuª: 0x%x\n", 
p‹t
->
px_sig
);

303 
	`°¨t_cmd
(
p‹t
);

307 
	}
}

311 
	$ahci_öôülize_hba
()

313 
	`kmuãx_öô
(&
beˇu£_qemu_d€¢t_emuœã_ahci_ncq_c‹ª˘ly
);

316 
pcõ_devi˚_t
 *
dev
 =

317 
	`pcõ_lookup
(
SATA_PCI_CLASS
, 
SATA_PCI_SUBCLASS
, 
SATA_AHCI_INTERFACE
);

326 
	`KASSERT
(
dev
->
°™d¨d
.
ˇ∑bûôõs_±r
 & 
PCI_CAPABILITY_PTR_MASK
);

327 
pci_ˇ∑bûôy_t
 *
ˇp
 =

328 (
pci_ˇ∑bûôy_t
 *)((
uöçå_t
)
dev
 + (dev->
°™d¨d
.
ˇ∑bûôõs_±r
 &

329 
PCI_CAPABILITY_PTR_MASK
));

330 
ˇp
->
id
 !
PCI_MSI_CAPABILITY_ID
)

332 
	`KASSERT
(
ˇp
->
√xt_ˇp
 && "couldn't find msi control foráhci device");

333 
ˇp
 = (
pci_ˇ∑bûôy_t
 *)((
uöçå_t
)
dev
 +

334 (
ˇp
->
√xt_ˇp
 & 
PCI_CAPABILITY_PTR_MASK
));

336 
msi_ˇ∑bûôy_t
 *
msi_ˇp
 = (msi_ˇ∑bûôy_à*)
ˇp
;

339 
msi_ˇp
->
c⁄åﬁ
.
msõ
 = 1;

348 i‡(
msi_ˇp
->
c⁄åﬁ
.
c64
)

350 
msi_ˇp
->
addªss_d©a
.
ad64
.
addr
 = 
	`MSI_ADDRESS_FOR
(1);

351 
msi_ˇp
->
addªss_d©a
.
ad64
.
d©a
 = 
	`MSI_DATA_FOR
(
INTR_DISK_PRIMARY
);

355 
msi_ˇp
->
addªss_d©a
.
ad32
.
addr
 = 
	`MSI_ADDRESS_FOR
(1);

356 
msi_ˇp
->
addªss_d©a
.
ad32
.
d©a
 = 
	`MSI_DATA_FOR
(
INTR_DISK_PRIMARY
);

359 
	`KASSERT
(
dev
 && "CouldÇot find AHCI Controller");

360 
	`dbg
(
DBG_DISK
, "Found AHCI Controller\n");

364 
hba
 = (
hba_t
 *)(
PHYS_OFFSET
 + 
dev
->
°™d¨d
.
b¨
[5]);

367 
	`ísuª_m≠≥d
(
hba
, (
hba_t
));

375 
uöçå_t
 
ahci_ba£
 = (uöçå_t)
	`∑ge_Æloc_n
(
AHCI_SIZE_PAGES
);

376 
	`mem£t
((*)
ahci_ba£
, 0, 
AHCI_SIZE_PAGES
 * 
PAGE_SIZE
);

378 
	`KASSERT
(
ahci_ba£
);

383 
	`KASSERT
(
hba
->
ghc
.ghc.
´
);

386 
hba
->
ghc
.ghc.
õ
 = 0;

388 
	`dbg
(
DBG_DISK
, "ahciÇcq supported: %s\n",

389 
hba
->
ghc
.
ˇp
.
¢cq
 ? "true" : "false");

392 
uöt32_t
 
p‹ts_im∂emíãd
 = 
hba
->
ghc
.
pi
;

393 
	`KASSERT
(
p‹ts_im∂emíãd
);

394 
p‹ts_im∂emíãd
)

396 
p‹t_numbî
 = 
	`__buûtö_˘z
(
p‹ts_im∂emíãd
);

397 
p‹ts_im∂emíãd
 &~(1 << 
p‹t_numbî
);

398 
	`ahci_öôülize_p‹t
(
hba
->
p‹ts
 + 
p‹t_numbî
,Ö‹t_numbî, 
ahci_ba£
);

402 
hba
->
ghc
.
is
 = (
uöt32_t
)-1;

405 
hba
->
ghc
.ghc.
õ
 = 1;

406 
	}
}

410 
	$ahci_öãºu±_h™dÀr
(
ªgs_t
 *
ªgs
)

413 
hba
->
ghc
.
is
)

416 
p‹t_ödex
 = 
	`__buûtö_˘z
(
hba
->
ghc
.
is
);

419 
hba_p‹t_t
 *
p‹t
 = 
hba
->
p‹ts
 + 
p‹t_ödex
;

430 #i‡
ENABLE_NATIVE_COMMAND_QUEUING


431 i‡(
hba
->
ghc
.
ˇp
.
¢cq
)

433 
	`KASSERT
(
p‹t
->
px_is
.
bôs
.
sdbs
);

434 
p‹t
->
px_is
.
bôs
.
sdbs
 = 1;

438 
	`KASSERT
(
p‹t
->
px_is
.
bôs
.
dhrs
);

439 
p‹t
->
px_is
.
bôs
.
dhrs
 = 1;

442 
	`KASSERT
(
p‹t
->
px_is
.
bôs
.
dhrs
);

443 
p‹t
->
px_is
.
bôs
.
dhrs
 = 1;

449 
hba
->
ghc
.
is
 &(1 << 
p‹t_ödex
);

452 #i‡
ENABLE_NATIVE_COMMAND_QUEUING


454 
uöt32_t
 
a˘ive
 = 
hba
->
ghc
.
ˇp
.
¢cq
 ? 
p‹t
->
px_ß˘
 :Ö‹t->
px_ci
;

457 
uöt32_t
 
a˘ive
 = 
p‹t
->
px_ci
;

462 
uöt32_t
 
com∂ëed
 = 
out°™dög_ªque°s
[
p‹t_ödex
] &

463 ~(
out°™dög_ªque°s
[
p‹t_ödex
] & 
a˘ive
);

465 
com∂ëed
)

467 
uöt32_t
 
¶Ÿ
 = 
	`__buûtö_˘z
(
com∂ëed
);

470 
kthªad_t
 *
thr
;

471 
	`sched_wakeup_⁄
(&
out°™dög_ªque°_queues
[
p‹t_ödex
][
¶Ÿ
],

472 &
thr
);

475 
com∂ëed
 &~(1 << 
¶Ÿ
);

476 
out°™dög_ªque°s
[
p‹t_ödex
] &~(1 << 
¶Ÿ
);

483 
	}
}

485 
	$ßè_öô
()

487 
	`öå_ªgi°î
(
INTR_DISK_PRIMARY
, 
ahci_öãºu±_h™dÀr
);

488 
	`ahci_öôülize_hba
();

489 
	}
}

506 
	$ßè_ªad_block
(
blockdev_t
 *
bdev
, *
buf
, 
blocknum_t
 
block
,

507 
size_t
 
block_cou¡
)

510 i‡(
block_cou¡
 * 
SATA_SECTORS_PER_BLOCK
 >= (1 << 16))

512  -
EIO
;

514  
	`ahci_do_›î©i⁄
(

515 
	`bdev_to_©a_disk
(
bdev
)->
p‹t
, 
block
 * 
SATA_SECTORS_PER_BLOCK
,

516 (
uöt16_t
)(
block_cou¡
 * 
SATA_SECTORS_PER_BLOCK
), 
buf
, 0);

519 
	}
}

533 
	$ßè_wrôe_block
(
blockdev_t
 *
bdev
, c⁄° *
buf
, 
blocknum_t
 
block
,

534 
size_t
 
block_cou¡
)

537 i‡(
block_cou¡
 * 
SATA_SECTORS_PER_BLOCK
 >= (1 << 16))

539  -
EIO
;

541  
	`ahci_do_›î©i⁄
(

542 
	`bdev_to_©a_disk
(
bdev
)->
p‹t
, 
block
 * 
SATA_SECTORS_PER_BLOCK
,

543 (
uöt16_t
)(
block_cou¡
 * 
SATA_SECTORS_PER_BLOCK
), (*)
buf
, 1);

546 
	}
}

	@kernel/drivers/keyboard.c

1 
	~"drivîs/keybﬂrd.h
"

3 
	~"drivîs/ây/ây.h
"

5 
	~"maö/öãºu±.h
"

6 
	~"maö/io.h
"

8 
	#IRQ_KEYBOARD
 1

	)

11 
	#SHIFT_MASK
 0x1

	)

12 
	#CTRL_MASK
 0x2

	)

14 
	#ESC_MASK
 0x4

	)

15 
	gcurmask
 = 0;

18 
	#KEYBOARD_IN_PORT
 0x60

	)

19 
	#KEYBOARD_CMD_PORT
 0x61

	)

22 
	#LSHIFT
 0x2a

	)

23 
	#RSHIFT
 0x36

	)

24 
	#CTRL
 0x1d

	)

28 
	#ESC0
 0xe0

	)

29 
	#ESC1
 0xe1

	)

33 
	#BREAK_MASK
 0x80

	)

35 
	#NORMAL_KEY_HIGH
 0x39

	)

39 
	#NO_CHAR
 0xff

	)

41 
	#F1_SCANCODE
 0x3b

	)

42 
	#F12_SCANCODE
 (
F1_SCANCODE
 + 11)

	)

49 c⁄° *
	gn‹mÆ_sˇncodes
 =

63 c⁄° *
	gshi·_sˇncodes
 =

77 
keybﬂrd_ch¨_h™dÀr_t
 
	gkeybﬂrd_h™dÀr
 = 
NULL
;

81 
	$keybﬂrd_öå_h™dÀr
(
ªgs_t
 *
ªgs
)

83 
uöt8_t
 
sc
;

84 
bªak_code
;

86 
uöt8_t
 
c
 = 
NO_CHAR
;

88 
sc
 = 
	`öb
(
KEYBOARD_IN_PORT
);

90 
bªak_code
 = 
sc
 & 
BREAK_MASK
;

91 
sc
 &~
BREAK_MASK
;

99 i‡(
bªak_code
)

102 i‡(
sc
 =
LSHIFT
 || s¯=
RSHIFT
)

104 
curmask
 &~
SHIFT_MASK
;

106 i‡(
sc
 =
CTRL
)

108 
curmask
 &~
CTRL_MASK
;

112 i‡(
sc
 =
LSHIFT
 || s¯=
RSHIFT
)

114 
curmask
 |
SHIFT_MASK
;

116 i‡(
sc
 =
CTRL
)

118 
curmask
 |
CTRL_MASK
;

122 i‡(
curmask
 & 
ESC_MASK
)

125 
curmask
 &~
ESC_MASK
;

128 i‡(
sc
 =
ESC0
 || s¯=
ESC1
)

130 
curmask
 |
ESC_MASK
;

133 i‡(
sc
 >
F1_SCANCODE
 && s¯<
F12_SCANCODE
)

135 
c
 = (
uöt8_t
)(
F1
 + (
sc
 - 
F1_SCANCODE
));

138 i‡((
curmask
 & 
CTRL_MASK
Ë&& (curmask & 
SHIFT_MASK
) &&

139 
sc
 =
SCROLL_DOWN
)

141 
c
 = 
SCROLL_DOWN_PAGE
;

144 i‡((
curmask
 & 
CTRL_MASK
Ë&& (curmask & 
SHIFT_MASK
) &&

145 
sc
 =
SCROLL_UP
)

147 
c
 = 
SCROLL_UP_PAGE
;

150 i‡((
curmask
 & 
CTRL_MASK
Ë&& 
sc
 =
SCROLL_DOWN
)

152 
c
 = 
SCROLL_DOWN
;

155 i‡((
curmask
 & 
CTRL_MASK
Ë&& 
sc
 =
SCROLL_UP
)

157 
c
 = 
SCROLL_UP
;

161 i‡(
sc
 > 
NORMAL_KEY_HIGH
)

166 i‡(
curmask
 & 
CTRL_MASK
)

170 
c
 = (
uöt8_t
)
shi·_sˇncodes
[
sc
];

172 i‡(
c
 >= 0x40 && c < 0x60)

174 
c
 -= 0x40;

178 
c
 = 
NO_CHAR
;

182 i‡(
curmask
 & 
SHIFT_MASK
)

184 
c
 = (
uöt8_t
)
shi·_sˇncodes
[
sc
];

188 
c
 = (
uöt8_t
)
n‹mÆ_sˇncodes
[
sc
];

191 i‡(
c
 !
NO_CHAR
)

193 
	`keybﬂrd_h™dÀr
(
c
);

199 
	`dbg
(
DBG_KB
, "ª˚ived sˇncodê0x%x;ÑesﬁvedÅÿch¨ 0x%x\n", 
sc
, 
c
);

201 
	}
}

203 
	$keybﬂrd_öô
(
keybﬂrd_ch¨_h™dÀr_t
 
h™dÀr
)

205 
	`öå_m≠
(
IRQ_KEYBOARD
, 
INTR_KEYBOARD
);

206 
	`öå_ªgi°î
(
INTR_KEYBOARD
, 
keybﬂrd_öå_h™dÀr
);

207 
keybﬂrd_h™dÀr
 = 
h™dÀr
;

208 
	}
}

	@kernel/drivers/memdevs.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

4 
	~"utû/debug.h
"

5 
	~"utû/°rög.h
"

7 
	~"mm/kmÆloc.h
"

8 
	~"mm/mobj.h
"

10 
	~"drivîs/ch¨dev.h
"

12 
	~"vm/™⁄.h
"

14 
	~"fs/vnode.h
"

16 
ssize_t
 
nuŒ_ªad
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
);

18 
ssize_t
 
nuŒ_wrôe
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, c⁄° *
buf
,

19 
size_t
 
cou¡
);

21 
ssize_t
 
zîo_ªad
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
);

23 
zîo_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
);

25 
ch¨dev_›s_t
 
	gnuŒ_dev_›s
 = {.
ªad
 = 
nuŒ_ªad
,

26 .
	gwrôe
 = 
nuŒ_wrôe
,

27 .
	gmm≠
 = 
NULL
,

28 .
	gfûl_p‰ame
 = 
NULL
,

29 .
	gÊush_p‰ame
 = 
NULL
};

31 
ch¨dev_›s_t
 
	gzîo_dev_›s
 = {.
ªad
 = 
zîo_ªad
,

32 .
	gwrôe
 = 
nuŒ_wrôe
,

33 .
	gmm≠
 = 
zîo_mm≠
,

34 .
	gfûl_p‰ame
 = 
NULL
,

35 .
	gÊush_p‰ame
 = 
NULL
};

44 
	$memdevs_öô
()

47 
ch¨dev_t
 *
nuŒ
 = (ch¨dev_à*)
	`kmÆloc
((chardev_t));

48 
ch¨dev_t
 *
zîo
 = (ch¨dev_à*)
	`kmÆloc
((chardev_t));

50 
	`KASSERT
(
nuŒ
 && 
zîo
);

52 
nuŒ
->
cd_id
 = 
	`MKDEVID
(
MEM_MAJOR
, 
MEM_NULL_MINOR
);

53 
nuŒ
->
cd_›s
 = &
nuŒ_dev_›s
;

55 
zîo
->
cd_id
 = 
	`MKDEVID
(
MEM_MAJOR
, 
MEM_ZERO_MINOR
);

56 
zîo
->
cd_›s
 = &
zîo_dev_›s
;

58 i‡(
	`ch¨dev_ªgi°î
(
nuŒ
Ë|| ch¨dev_ªgi°î(
zîo
))

59 
	`∑nic
("registration of memory devices failed");

61 
	}
}

73 
ssize_t
 
	$nuŒ_ªad
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
)

78  -
ENOMEM
;

79 
	}
}

92 
ssize_t
 
	$nuŒ_wrôe
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, c⁄° *
buf
,

93 
size_t
 
cou¡
)

96  
cou¡
;

98  -
ENOMEM
;

99 
	}
}

112 
ssize_t
 
	$zîo_ªad
(
ch¨dev_t
 *
dev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
)

115 
	`mem£t
(
buf
, 0, 
cou¡
);

116  
cou¡
;

119 
	}
}

126 
	$zîo_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
)

128 
	`NOT_YET_IMPLEMENTED
("VM: zero_mmap");

130 
	}
}

	@kernel/drivers/pcie.c

1 
	~"drivîs/pcõ.h
"

2 
	~<drivîs/pcõ.h
>

3 
	~<maö/a˝i.h
>

4 
	~<mm/kmÆloc.h
>

5 
	~<mm/∑gëabÀ.h
>

6 
	~<utû/debug.h
>

8 
	#MCFG_SIGNATURE
 (*(
uöt32_t
 *)"MCFG")

	)

9 
uöçå_t
 
	gpcõ_ba£_addr
;

11 
	spcõ_èbÀ


13 
pcõ_devi˚_t
 
	mdevi˚s
[
PCI_NUM_BUSES
][
PCI_NUM_DEVICES_PER_BUS
]

14 [
PCI_NUM_FUNCTIONS_PER_DEVICE
];

15 } 
	tpcõ_èbÀ_t
;

17 
pcõ_èbÀ_t
 *
	gpcõ_èbÀ
;

19 
	#PCIE_DEV
(
bus
, 
devi˚
, 
func
) \

20 (&
pcõ_èbÀ
->
devi˚s
[(
bus
)][(
devi˚
)][(
func
)])

	)

21 
li°_t
 
	gpcõ_wøµî_li°
;

23 
	$pci_öô
()

26 *
èbÀ
 = 
	`a˝i_èbÀ
(
MCFG_SIGNATURE
, 0);

27 
	`KASSERT
(
èbÀ
);

28 
pcõ_ba£_addr
 = *(
uöçå_t
 *)((uöçå_t)
èbÀ
 + 44Ë+ 
PHYS_OFFSET
;

29 
pcõ_èbÀ
 = (
pcõ_èbÀ_t
 *)
pcõ_ba£_addr
;

30 
	`±_m≠_ønge
(
	`±_gë
(), 
pcõ_ba£_addr
 - 
PHYS_OFFSET
,Öcie_base_addr,

31 
pcõ_ba£_addr
 + 
PAGE_SIZE_1GB
, 
PT_WRITE
 | 
PT_PRESENT
,

32 
PT_WRITE
 | 
PT_PRESENT
);

34 
	`li°_öô
(&
pcõ_wøµî_li°
);

35 
bus
 = 0; bu†< 
PCI_NUM_BUSES
; bus++)

37 
devi˚
 = 0; devi˚ < 
PCI_NUM_DEVICES_PER_BUS
; device++)

39 
max_fun˘i⁄s
 =

40 (
	`PCIE_DEV
(
bus
, 
devi˚
, 0)->
°™d¨d
.
hódî_ty≥
 & 0x80)

41 ? 
PCI_NUM_DEVICES_PER_BUS


43 
fun˘i⁄
 = 0; fun˘i⁄ < 
max_fun˘i⁄s
; function++)

45 
pcõ_devi˚_t
 *
dev
 = 
	`PCIE_DEV
(
bus
, 
devi˚
, 
fun˘i⁄
);

46 i‡(!
dev
->
°™d¨d
.
víd‹_id
 ||

47 
dev
->
°™d¨d
.
víd‹_id
 =(
uöt16_t
)-1)

49 
pcõ_devi˚_wøµî_t
 *
wøµî
 =

50 
	`kmÆloc
((
pcõ_devi˚_wøµî_t
));

51 
wøµî
->
dev
 = dev;

52 
wøµî
->
˛ass
 = 
dev
->
°™d¨d
.class;

53 
wøµî
->
sub˛ass
 = 
dev
->
°™d¨d
.subclass;

54 
wøµî
->
öãrÁ˚
 = 
dev
->
°™d¨d
.
¥og_if
;

55 
	`li°_lök_öô
(&
wøµî
->
lök
);

56 
	`li°_ö£π_èû
(&
pcõ_wøµî_li°
, &
wøµî
->
lök
);

60 
	}
}

62 
pcõ_devi˚_t
 *
	$pcõ_lookup
(
uöt8_t
 
˛ass
, uöt8_à
sub˛ass
, uöt8_à
öãrÁ˚
)

64 
	`li°_ôî©e
(&
pcõ_wøµî_li°
, 
wøµî
, 
pcõ_devi˚_wøµî_t
, 
lök
)

67 i‡(((
˛ass
 =
PCI_LOOKUP_WILDCARD
Ë|| (
wøµî
->class == class)) &&

68 ((
sub˛ass
 =
PCI_LOOKUP_WILDCARD
) ||

69 (
wøµî
->
sub˛ass
 == subclass)) &&

70 ((
öãrÁ˚
 =
PCI_LOOKUP_WILDCARD
) ||

71 (
wøµî
->
öãrÁ˚
 == interface)))

73  
wøµî
->
dev
;

76  
NULL
;

77 
	}
}

	@kernel/drivers/screen.c

1 
	~<boŸ/c⁄fig.h
>

2 
	~<boŸ/mu…iboŸ_ma¸os.h
>

3 
	~<drivîs/s¸ìn.h
>

4 
	~<mu…iboŸ.h
>

5 
	~<ty≥s.h
>

6 
	~<utû/debug.h
>

7 
	~<utû/°rög.h
>

9 #ifde‡
__VGABUF___


11 
	#BITMAP_HEIGHT
 13

	)

14 c⁄° 
	gbôm≠_Àâîs
[95][
BITMAP_HEIGHT
] = {

207 
	#DOUBLE_BUFFERING
 0

	)

209 
	#BITWISE_TERNARY
(
c⁄dôi⁄
, 
x
, 
y
) \

210 (!!(
c⁄dôi⁄
Ë* (
x
Ë+ !(c⁄dôi⁄Ë* (
y
))

	)

212 
uöt32_t
 *
	gfb
;

213 
uöt32_t
 
	gfb_width
;

214 
uöt32_t
 
	gfb_height
;

215 
uöt32_t
 
	gfb_pôch
;

217 
uöt32_t
 *
	gfb_buf„r
;

219 
	$s¸ìn_öô
()

221 
öôed
 = 0;

222 i‡(
öôed
)

224 
öôed
 = 1;

226 
mu…iboŸ_èg_‰amebuf„r
 *
fb_èg
 = 
NULL
;

227 
mu…iboŸ_èg
 *
èg
 =

228 (
mu…iboŸ_èg
 *)((
uöçå_t
)(
mb_èg
 + 1Ë+ 
PHYS_OFFSET
);

229 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
;Åag +
	`TAG_SIZE
—ag->
size
))

231 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_FRAMEBUFFER
)

235 
fb_èg
 = (
mu…iboŸ_èg_‰amebuf„r
 *)
èg
;

238 
	`KASSERT
(
fb_èg
);

240 
fb
 = (
uöt32_t
 *)(
PHYS_OFFSET
 + 
fb_èg
->
comm⁄
.
‰amebuf„r_addr
);

241 
fb_width
 = 
fb_èg
->
comm⁄
.
‰amebuf„r_width
;

242 
fb_height
 = 
fb_èg
->
comm⁄
.
‰amebuf„r_height
;

243 
fb_pôch
 = 
fb_èg
->
comm⁄
.
‰amebuf„r_pôch
;

244 
	`KASSERT
(
fb_pôch
 =
fb_width
 * (
uöt32_t
));

245 
	`KASSERT
(
fb_èg
->
comm⁄
.
‰amebuf„r_bµ
 == 32);

246 
	`KASSERT
(
fb_èg
->
comm⁄
.
‰amebuf„r_ty≥
 == 1);

247 
	`KASSERT
(
fb_èg
->
‰amebuf„r_ªd_fõld_posôi⁄
 == 0x10);

248 
	`KASSERT
(
fb_èg
->
‰amebuf„r_gªí_fõld_posôi⁄
 == 0x08);

249 
	`KASSERT
(
fb_èg
->
‰amebuf„r_blue_fõld_posôi⁄
 == 0x00);

250 
	`KASSERT
(
fb_èg
->
‰amebuf„r_ªd_mask_size
);

251 
	`KASSERT
(
fb_èg
->
‰amebuf„r_gªí_mask_size
 == 8);

252 
	`KASSERT
(
fb_èg
->
‰amebuf„r_blue_mask_size
 == 8);

254 
size_t
 
≈ages
 = 0;

255 
uöçå_t
 
∑ge
 = (uöçå_t)
	`PAGE_ALIGN_DOWN
(
fb
);

256 
∑ge
 < (
uöçå_t
)
	`PAGE_ALIGN_UP
(
fb
 + 
fb_width
 * 
fb_height
);

257 
∑ge
 +
PAGE_SIZE
)

259 
	`∑ge_m¨k_ª£rved
((*)(
∑ge
 - 
PHYS_OFFSET
));

260 
≈ages
++;

263 
mu…iboŸ_èg_vbe
 *
vbe_öfo
 = 
NULL
;

264 
mu…iboŸ_èg
 *
èg
 =

265 (
mu…iboŸ_èg
 *)((
uöçå_t
)(
mb_èg
 + 1Ë+ 
PHYS_OFFSET
);

266 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
;Åag +
	`TAG_SIZE
—ag->
size
))

268 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_VBE
)

272 
vbe_öfo
 = (
mu…iboŸ_èg_vbe
 *)
èg
;

275 
	`KASSERT
(
vbe_öfo
);

277 #i‡
DOUBLE_BUFFERING


278 
fb_buf„r
 = 
	`∑ge_Æloc_n
(
≈ages
);

279 
	`KASSERT
(
fb_buf„r
 && "couldn'tállocate double buffer for screen");

281 
fb_buf„r
 = 
fb
;

283 
	`±_m≠_ønge
(
	`±_gë
(), (
uöçå_t
)
fb
 - 
PHYS_OFFSET
, (uintptr_t)fb,

284 (
uöçå_t
)
	`PAGE_ALIGN_UP
(
fb
 + 
fb_width
 * 
fb_height
),

285 
PT_PRESENT
 | 
PT_WRITE
, PT_PRESENT | PT_WRITE);

286 
	`±_£t
(
	`±_gë
());

287 
uöt32_t
 
i
 = 0; i < 
fb_width
 * 
fb_height
; i++)

288 
fb_buf„r
[
i
] = 0x008A2BE2;

289 
	`s¸ìn_Êush
();

290 
	}
}

292 
ölöe
 
size_t
 
	$s¸ìn_gë_width
(Ë{  
fb_width
; 
	}
}

294 
ölöe
 
size_t
 
	$s¸ìn_gë_height
(Ë{  
fb_height
; 
	}
}

296 
ölöe
 
size_t
 
	$s¸ìn_gë_ch¨a˘î_width
(Ë{  
SCREEN_CHARACTER_WIDTH
; 
	}
}

298 
ölöe
 
size_t
 
	$s¸ìn_gë_ch¨a˘î_height
(Ë{  
SCREEN_CHARACTER_HEIGHT
; 
	}
}

300 
ölöe
 
	$s¸ìn_døw_°rög
(
size_t
 
x
, size_à
y
, c⁄° *
s
, size_à
Àn
,

301 
cﬁ‹_t
 
cﬁ‹
)

303 
uöt32_t
 *
pos
 = 
fb_buf„r
 + 
y
 * 
fb_width
 + 
x
;

304 
Àn
--)

306 c⁄° 
c
 = *
s
++;

307 i‡(
c
 < ' ' || c > '~')

309 c⁄° *
bôm≠
 = 
bôm≠_Àâîs
[
c
 - ' '];

311 
size_t
 
bm_row
 = 
BITMAP_HEIGHT
;

312 
bm_row
--)

314 
cﬁs
 = 
bôm≠
[
bm_row
];

315 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x80, 
cﬁ‹
.
vÆue
, *pos);

316 
pos
++;

317 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x40, 
cﬁ‹
.
vÆue
, *pos);

318 
pos
++;

319 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x20, 
cﬁ‹
.
vÆue
, *pos);

320 
pos
++;

321 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x10, 
cﬁ‹
.
vÆue
, *pos);

322 
pos
++;

323 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x08, 
cﬁ‹
.
vÆue
, *pos);

324 
pos
++;

325 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x04, 
cﬁ‹
.
vÆue
, *pos);

326 
pos
++;

327 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x02, 
cﬁ‹
.
vÆue
, *pos);

328 
pos
++;

329 *
pos
 = 
	`BITWISE_TERNARY
(
cﬁs
 & 0x01, 
cﬁ‹
.
vÆue
, *pos);

330 
pos
++;

331 
pos
 +
fb_width
 - 8;

333 
pos
 =Öo†- 
fb_width
 * 
BITMAP_HEIGHT
 + 
SCREEN_CHARACTER_WIDTH
;

335 
	}
}

337 
ölöe
 
	$s¸ìn_døw_h‹iz⁄èl
(
uöt32_t
 *
pos
, 
size_t
 
cou¡
, 
cﬁ‹_t
 
cﬁ‹
)

340 
__asm__
 vﬁ©ûe("˛d;Ñï sto¶;" ::"a"(
cﬁ‹
.
vÆue
), "D"(
pos
), "c"(
cou¡
)

342 
	}
}

344 
ölöe
 
	$s¸ìn_c›y_h‹iz⁄èl
(
uöt32_t
 *
‰om
, uöt32_à*
to
, 
size_t
 
cou¡
)

346 
__asm__
 vﬁ©ûe("˛d;Ñï mov¶;" ::"S"(
‰om
), "D"(
to
), "c"(
cou¡
)

348 
	}
}

350 
ölöe
 
	$s¸ìn_døw_ª˘
(
size_t
 
x
, size_à
y
, size_à
width
, size_à
height
,

351 
cﬁ‹_t
 
cﬁ‹
)

353 
uöt32_t
 *
t›
 = 
fb_buf„r
 + 
y
 * 
fb_width
 + 
x
;

354 
	`s¸ìn_døw_h‹iz⁄èl
(
t›
, 
width
, 
cﬁ‹
);

355 
	`s¸ìn_døw_h‹iz⁄èl
(
t›
 + 
height
 * 
fb_width
, 
width
, 
cﬁ‹
);

356 
height
--)

358 *
t›
 = *—› + 
width
Ë
cﬁ‹
.
vÆue
;

359 
t›
 +
fb_width
;

361 
	}
}

363 
ölöe
 
	$s¸ìn_fûl
(
cﬁ‹_t
 
cﬁ‹
)

365 
__asm__
 vﬁ©ûe("˛d;Ñï sto¶;" ::"a"(
cﬁ‹
.
vÆue
), "D"(
fb_buf„r
),

366 "c"(
fb_width
 * 
fb_height
)

368 
	}
}

370 
ölöe
 
	$s¸ìn_fûl_ª˘
(
size_t
 
x
, size_à
y
, size_à
width
, size_à
height
,

371 
cﬁ‹_t
 
cﬁ‹
)

373 
uöt32_t
 *
t›
 = 
fb_buf„r
 + 
y
 * 
fb_width
 + 
x
;

374 
height
--)

376 
	`s¸ìn_døw_h‹iz⁄èl
(
t›
, 
width
, 
cﬁ‹
);

377 
t›
 +
fb_width
;

379 
	}
}

381 
ölöe
 
	$s¸ìn_c›y_ª˘
(
size_t
 
‰omx
, size_à
‰omy
, size_à
width
,

382 
size_t
 
height
, size_à
tox
, size_à
toy
)

384 
uöt32_t
 *
‰om
 = 
fb_buf„r
 + 
‰omy
 * 
fb_width
 + 
‰omx
;

385 
uöt32_t
 *
to
 = 
fb_buf„r
 + 
toy
 * 
fb_width
 + 
tox
;

386 
height
--)

388 
	`s¸ìn_c›y_h‹iz⁄èl
(
‰om
, 
to
, 
width
);

389 
‰om
 +
fb_width
;

390 
to
 +
fb_width
;

392 
	}
}

394 
ölöe
 
	$s¸ìn_Êush
()

396 #i‡
DOUBLE_BUFFERING


397 
__asm__
 vﬁ©ûe("˛d;Ñï mov¶;" ::"S"(
fb_buf„r
), "D"(
fb
),

398 "c"(
fb_width
 * 
fb_height
)

401 
	}
}

403 *
	gshutdown_mesßge
 = "Weenix has halted cleanly!";

404 
	$s¸ìn_¥öt_shutdown
()

406 
cﬁ‹_t
 
background
 = {.
vÆue
 = 0x00000000};

407 
cﬁ‹_t
 
f‹eground
 = {.
vÆue
 = 0x00FFFFFF};

408 
	`s¸ìn_fûl
(
background
);

409 
size_t
 
°r_Àn
 = 
	`°æí
(
shutdown_mesßge
);

410 
size_t
 
°r_width
 = 
°r_Àn
 * 
	`s¸ìn_gë_ch¨a˘î_width
();

411 
size_t
 
°r_height
 = 
	`s¸ìn_gë_ch¨a˘î_height
();

412 
	`s¸ìn_døw_°rög
((
	`s¸ìn_gë_width
(Ë- 
°r_width
) >> 1,

413 (
	`s¸ìn_gë_height
(Ë- 
°r_height
) >> 1,

414 
shutdown_mesßge
, 
°r_Àn
, 
f‹eground
);

415 
	}
}

419 
	~"c⁄fig.h
"

420 
	~"drivîs/s¸ìn.h
"

421 
	~"maö/io.h
"

424 
	#CRT_CONTROL_ADDR
 0x3d4

	)

425 
	#CRT_CONTROL_DATA
 0x3d5

	)

428 
	#CURSOR_HIGH
 0x0e

	)

429 
	#CURSOR_LOW
 0x0f

	)

431 
uöçå_t
 
	gvga_ãxtbuf„r_phys
 = 0xB8000;

432 
uöt16_t
 *
	gvga_ãxtbuf„r
;

433 
uöt16_t
 
	gvga_bœnk_s¸ìn
[
VGA_HEIGHT
][
VGA_WIDTH
];

434 
uöt16_t
 
	gvga_bœnk_row
[
VGA_WIDTH
];

436 
	$vga_íabÀ_curs‹
()

438 
	`outb
(0x3D4, 0x0A);

439 
	`outb
(0x3D5, (
	`öb
(0x3D5) & 0xC0) | 0);

441 
	`outb
(0x3D4, 0x0B);

442 
	`outb
(0x3D5, (
	`öb
(0x3D5) & 0xE0) | 15);

443 
	}
}

445 
	$vga_dißbÀ_curs‹
()

447 
	`outb
(0x3D4, 0x0A);

448 
	`outb
(0x3D5, 0x20);

449 
	}
}

451 
	$vga_öô
()

454 
size_t
 
∑ges
 =

455 
	`ADDR_TO_PN
(
	`PAGE_ALIGN_UP
((
uöçå_t
)(
vga_bœnk_s¸ìn
)));

456 
vga_ãxtbuf„r
 = 
	`∑ge_Æloc_n
(
∑ges
);

457 
	`KASSERT
(
vga_ãxtbuf„r
);

459 
	`±_m≠_ønge
(
	`±_gë
(), (
uöçå_t
)
vga_ãxtbuf„r_phys
,

460 (
uöçå_t
)
vga_ãxtbuf„r
,

461 (
uöçå_t
)
vga_ãxtbuf„r
 + ((uöçå_t)
	`PN_TO_ADDR
(
∑ges
)),

462 
PT_PRESENT
 | 
PT_WRITE
, PT_PRESENT | PT_WRITE);

463 
	`±_£t
(
	`±_gë
());

465 
size_t
 
i
 = 0; i < 
VGA_WIDTH
; i++)

467 
vga_bœnk_row
[
i
] = (
VGA_DEFAULT_ATTRIB
 << 8) | ' ';

469 
size_t
 
i
 = 0; i < 
VGA_HEIGHT
; i++)

471 
	`mem˝y
(&
vga_bœnk_s¸ìn
[
i
], 
vga_bœnk_row
, 
VGA_LINE_SIZE
);

474 
	`vga_íabÀ_curs‹
();

475 
	`vga_˛ór_s¸ìn
();

476 
	}
}

478 
	$vga_£t_curs‹
(
size_t
 
row
, size_à
cﬁ
)

480 
uöt16_t
 
pos
 = (
row
 * 
VGA_WIDTH
Ë+ 
cﬁ
;

481 
	`outb
(0x3D4, 0x0F);

482 
	`outb
(0x3D5, (
uöt8_t
)(
pos
 & 0xFF));

483 
	`outb
(0x3D4, 0x0E);

484 
	`outb
(0x3D5, (
uöt8_t
)((
pos
 >> 8) & 0xFF));

485 
	}
}

487 
	$vga_˛ór_s¸ìn
()

489 
	`mem˝y
(
vga_ãxtbuf„r
, 
vga_bœnk_s¸ìn
, (vga_blank_screen));

490 
	}
}

492 
	$vga_wrôe_ch¨_©
(
size_t
 
row
, size_à
cﬁ
, 
uöt16_t
 
v
)

494 
	`KASSERT
(
row
 < 
VGA_HEIGHT
 && 
cﬁ
 < 
VGA_WIDTH
);

495 
vga_ãxtbuf„r
[(
row
 * 
VGA_WIDTH
Ë+ 
cﬁ
] = 
v
;

496 
	}
}

498 *
	gshutdown_mesßge
 = "Weenix has halted cleanly!";

499 
	$s¸ìn_¥öt_shutdown
()

501 
	`vga_dißbÀ_curs‹
();

502 
	`vga_˛ór_s¸ìn
();

503 
x
 = (
VGA_WIDTH
 - 
	`°æí
(
shutdown_mesßge
)) / 2;

504 
y
 = 
VGA_HEIGHT
 / 2;

506 
size_t
 
i
 = 0; i < 
	`°æí
(
shutdown_mesßge
); i++)

508 
	`vga_wrôe_ch¨_©
(
y
, 
x
 + 
i
,

509 (
VGA_DEFAULT_ATTRIB
 << 8Ë| 
shutdown_mesßge
[
i
]);

511 
	}
}

	@kernel/drivers/tty/ldisc.c

1 
	~"drivîs/ây/ldisc.h
"

2 
	~<drivîs/keybﬂrd.h
>

3 
	~<drivîs/ây/ây.h
>

4 
	~<î∫o.h
>

5 
	~<utû/bôs.h
>

6 
	~<utû/debug.h
>

7 
	~<utû/°rög.h
>

9 
	#ldisc_to_ây
(
ldisc
Ë
	`CONTAINER_OF
(÷disc), 
ây_t
, 
ây_ldisc
)

	)

17 
	$ldisc_öô
(
ldisc_t
 *
ldisc
)

20 
	`KASSERT
((
ldisc
->
ldisc_buf„r
Ë=
LDISC_BUFFER_SIZE
 &&

21 
	`IS_POW_2
(
LDISC_BUFFER_SIZE
));

23 
ldisc
->
ldisc_hód
 = 0;

24 
ldisc
->
ldisc_èû
 = 0;

25 
ldisc
->
ldisc_cooked
 = 0;

26 
ldisc
->
ldisc_fuŒ
 = 0;

27 
	`sched_queue_öô
(&
ldisc
->
ldisc_ªad_queue
);

28 
	`mem£t
(
ldisc
->
ldisc_buf„r
, 0, 
LDISC_BUFFER_SIZE
);

30 
	}
}

43 
	$ldisc_waô_ªad
(
ldisc_t
 *
ldisc
)

46 
ªt
 = 0;

47 !
ªt
 && 
ldisc
->
ldisc_èû
 =ldisc->
ldisc_cooked
 &&

48 !
ldisc
->
ldisc_fuŒ
)

50 
ªt
 = 
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
ldisc
->
ldisc_ªad_queue
);

52  
ªt
;

55 
	}
}

72 
size_t
 
	$ldisc_ªad
(
ldisc_t
 *
ldisc
, *
buf
, 
size_t
 
cou¡
)

75 i‡(
ldisc
->
ldisc_èû
 =ldisc->
ldisc_cooked
 && !ldisc->
ldisc_fuŒ
)

79 
size_t
 
ªad
 = 0;

80 
ªad
 < 
cou¡
)

82 
buf
[
ªad
++] = 
ldisc
->
ldisc_buf„r
[ldisc->
ldisc_èû
];

83 
ldisc
->
ldisc_èû
 = 
	`MOD_POW_2
÷disc->ldisc_èû + 1, 
LDISC_BUFFER_SIZE
);

84 i‡(
buf
[
ªad
 - 1] =
LF
)

88 i‡(
buf
[
ªad
 - 1] =
EOT
)

90 
ªad
--;

94 
ldisc
->
ldisc_fuŒ
 = 0;

95  
ªad
;

98 
	}
}

146 
	$ldisc_key_¥es£d
(
ldisc_t
 *
ldisc
, 
c
)

149 
vãrmöÆ_t
 *
vt
 = &
	`ldisc_to_ây
(
ldisc
)->
ây_vãrmöÆ
;

153 i‡(
c
 =
BS
)

156 i‡(
ldisc
->
ldisc_cooked
 =ldisc->
ldisc_hód
)

158 
ldisc
->
ldisc_hód
 = 
	`MOD_POW_2
÷disc->ldisc_hód - 1, 
LDISC_BUFFER_SIZE
);

159 
	`vãrmöÆ_wrôe
(
vt
, "\b", 1);

162 i‡(
c
 =
ETX
)

166 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
;

167 
c
 = 
LF
;

168 
	`vãrmöÆ_echo_öput
(
vt
, "^C", 2);

174 i‡((
	`MOD_POW_2
(
ldisc
->
ldisc_hód
 + 1, 
LDISC_BUFFER_SIZE
) ==

175 
ldisc
->
ldisc_èû
 &&

176 (
c
 !
LF
 && c !
EOT
)) ||

177 
ldisc
->
ldisc_fuŒ
)

180 
ldisc
->
ldisc_buf„r
[ldisc->
ldisc_hód
] = 
c
;

181 
ldisc
->
ldisc_hód
 = 
	`MOD_POW_2
÷disc->ldisc_hód + 1, 
LDISC_BUFFER_SIZE
);

182 
ldisc
->
ldisc_fuŒ
 =Üdisc->
ldisc_hód
 =ldisc->
ldisc_èû
;

184 i‡(
c
 =
LF
 || c =
EOT
)

186 
ldisc
->
ldisc_cooked
 =Üdisc->
ldisc_hód
;

187 
	`sched_wakeup_⁄
(&
ldisc
->
ldisc_ªad_queue
, 
NULL
);

188 i‡(
c
 =
LF
)

190 
	`vãrmöÆ_wrôe
(
vt
, "\n", 1);

195 
	`vãrmöÆ_key_¥es£d
(
vt
);

198 
	}
}

207 
size_t
 
	$ldisc_gë_cuºít_löe_øw
(
ldisc_t
 *
ldisc
, *
s
)

210 
size_t
 
Àn
 =

211 
	`MOD_POW_2
(
ldisc
->
ldisc_hód
 -Üdisc->
ldisc_cooked
, 
LDISC_BUFFER_SIZE
);

212 i‡(
ldisc
->
ldisc_hód
 >Üdisc->
ldisc_cooked
)

214 
	`mem˝y
(
s
, 
ldisc
->
ldisc_buf„r
 +Üdisc->
ldisc_cooked
,

215 
ldisc
->
ldisc_hód
 -Üdisc->
ldisc_cooked
);

219 
	`mem˝y
(
s
, 
ldisc
->
ldisc_buf„r
 +Üdisc->
ldisc_cooked
,

220 
LDISC_BUFFER_SIZE
 - 
ldisc
->
ldisc_cooked
);

221 
s
 +
LDISC_BUFFER_SIZE
 - 
ldisc
->
ldisc_cooked
;

222 
	`mem˝y
(
s
, 
ldisc
->
ldisc_buf„r
,Üdisc->
ldisc_hód
);

224  
Àn
;

227 
	}
}

	@kernel/drivers/tty/tty.c

1 
	~"drivîs/ây/ây.h
"

2 
	~"drivîs/ch¨dev.h
"

3 
	~"drivîs/dev.h
"

4 
	~"drivîs/keybﬂrd.h
"

5 
	~"kî√l.h
"

6 
	~"mm/kmÆloc.h
"

7 
	~"utû/debug.h
"

8 
	~<î∫o.h
>

10 #i‚de‡
NTERMS


11 
	#NTERMS
 3

	)

14 
ssize_t
 
ây_ªad
(
ch¨dev_t
 *
cdev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
);

15 
ssize_t
 
ây_wrôe
(
ch¨dev_t
 *
cdev
, 
size_t
 
pos
, c⁄° *
buf
, size_à
cou¡
);

17 
ch¨dev_›s_t
 
	gây_cdev_›s
 = {.
ªad
 = 
ây_ªad
,

18 .
	gwrôe
 = 
ây_wrôe
,

19 .
	gmm≠
 = 
NULL
,

20 .
	gfûl_p‰ame
 = 
NULL
,

21 .
	gÊush_p‰ame
 = 
NULL
};

23 
ây_t
 *
	gâys
[
NTERMS
] = {
NULL
};

25 
size_t
 
	ga˘ive_ây
;

27 
ây_ª˚ive_ch¨_mu…ùÀxî
(
uöt8_t
 
c
);

29 
	$ây_öô
()

31 
i
 = 0; i < 
NTERMS
; i++)

33 
ây_t
 *
ây
 = 
âys
[
i
] = 
	`kmÆloc
((tty_t));

34 
	`vãrmöÆ_öô
(&
ây
->
ây_vãrmöÆ
);

35 
	`ldisc_öô
(&
ây
->
ây_ldisc
);

37 
ây
->
ây_cdev
.
cd_id
 = 
	`MKDEVID
(
TTY_MAJOR
, 
i
);

38 
	`li°_lök_öô
(&
ây
->
ây_cdev
.
cd_lök
);

39 
ây
->
ây_cdev
.
cd_›s
 = &
ây_cdev_›s
;

41 
	`kmuãx_öô
(&
ây
->
ây_wrôe_muãx
);

42 
	`kmuãx_öô
(&
ây
->
ây_ªad_muãx
);

44 
ªt
 = 
	`ch¨dev_ªgi°î
(&
ây
->
ây_cdev
);

45 
	`KASSERT
(!
ªt
);

47 
a˘ive_ây
 = 0;

48 
	`vãrmöÆ_make_a˘ive
(&
âys
[
a˘ive_ây
]->
ây_vãrmöÆ
);

49 
	`KASSERT
(
âys
[
a˘ive_ây
]);

51 
	`keybﬂrd_öô
(
ây_ª˚ive_ch¨_mu…ùÀxî
);

52 
	}
}

70 
ssize_t
 
	$ây_ªad
(
ch¨dev_t
 *
cdev
, 
size_t
 
pos
, *
buf
, size_à
cou¡
)

73 i‡(!
cou¡
)

77 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cdev
);

78 
	`kmuãx_lock
(&
ây
->
ây_ªad_muãx
);

80 
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
INTR_KEYBOARD
);

82 
ssize_t
 
ªt
 = 
	`ldisc_waô_ªad
(&
ây
->
ây_ldisc
);

83 i‡(!
ªt
)

84 
ªt
 = 
	`ldisc_ªad
(&
ây
->
ây_ldisc
, 
buf
, 
cou¡
);

86 
	`öå_£tùl
(
ùl
);

88 
	`kmuãx_u∆ock
(&
ây
->
ây_ªad_muãx
);

89  
ªt
;

92 
	}
}

107 
ssize_t
 
	$ây_wrôe
(
ch¨dev_t
 *
cdev
, 
size_t
 
pos
, c⁄° *
buf
, size_à
cou¡
)

110 i‡(!
cou¡
)

112 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cdev
);

113 
	`kmuãx_lock
(&
ây
->
ây_wrôe_muãx
);

115 
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
INTR_KEYBOARD
);

117 
ssize_t
 
ªt
 = 
	`vãrmöÆ_wrôe
(&
ây
->
ây_vãrmöÆ
, 
buf
, 
cou¡
);

119 
	`öå_£tùl
(
ùl
);

121 
	`kmuãx_u∆ock
(&
ây
->
ây_wrôe_muãx
);

122  
ªt
;

125 
	}
}

127 
	$ây_ª˚ive_ch¨_mu…ùÀxî
(
uöt8_t
 
c
)

129 
ây_t
 *
ây
 = 
âys
[
a˘ive_ây
];

131 i‡(
c
 >
F1
 && c <
F12
)

133 i‡(
c
 - 
F1
 < 
NTERMS
)

136 
a˘ive_ây
 = ()
c
 - 
F1
;

137 
ây
 = 
âys
[
a˘ive_ây
];

138 
	`vãrmöÆ_make_a˘ive
(&
ây
->
ây_vãrmöÆ
);

142 i‡(
c
 =
CR
)

143 
c
 = 
LF
;

144 i‡(
c
 =
DEL
)

145 
c
 = 
BS
;

147 
vãrmöÆ_t
 *
vt
 = &
ây
->
ây_vãrmöÆ
;

148 ()
c
)

150 
SCROLL_DOWN
:

151 
SCROLL_UP
:

154 
SCROLL_DOWN_PAGE
:

155 
SCROLL_UP_PAGE
:

159 
ESC
:

163 
	`ldisc_key_¥es£d
(&
ây
->
ây_ldisc
, 
c
);

167 
	}
}

	@kernel/drivers/tty/vterminal.c

1 
	~<drivîs/keybﬂrd.h
>

2 
	~<drivîs/ây/ldisc.h
>

3 
	~<drivîs/ây/ây.h
>

4 
	~<drivîs/ây/vãrmöÆ.h
>

5 
	~<î∫o.h
>

6 
	~<mm/kmÆloc.h
>

7 
	~<utû/debug.h
>

8 
	~<utû/°rög.h
>

34 
	#vãrmöÆ_to_ây
(
vãrmöÆ
) \

35 
	`CONTAINER_OF
((
vãrmöÆ
), 
ây_t
, 
ây_vãrmöÆ
)

	)

37 #ifde‡
__VGABUF___


47 
	#VT_LINE_POSITION
(
vt
, 
löe
) \

48 ((
vt
)->
vt_löe_posôi⁄s
[((vt)->
vt_löe_off£t
 + (vt)->
vt_height
 + \

49 (
löe
)) % \

50 (
vt
)->
vt_height
])

	)

52 
	#vãrmöÆ_to_ây
(
vãrmöÆ
) \

53 
	`CONTAINER_OF
((
vãrmöÆ
), 
ây_t
, 
ây_vãrmöÆ
)

	)

55 
	#VT_OFFSCREEN
 ((
size_t
)-1)

	)

57 
vãrmöÆ_add_chunk
(
vãrmöÆ_t
 *
vt
);

59 
vãrmöÆ_t
 *
	ga˘ive_vt
 = 
NULL
;

61 
	$vãrmöÆ_öô
(
vãrmöÆ_t
 *
vt
)

63 
vt
->
vt_width
 = 
	`s¸ìn_gë_width
(Ë/ 
	`s¸ìn_gë_ch¨a˘î_width
();

64 
vt
->
vt_height
 = 
	`s¸ìn_gë_height
(Ë/ 
	`s¸ìn_gë_ch¨a˘î_height
();

65 
	`li°_öô
(&
vt
->
vt_hi°‹y_chunks
);

66 
vt
->
vt_löe_posôi⁄s
 = 
	`kmÆloc
((
size_t
Ë* vt->
vt_height
 * 2);

67 
	`KASSERT
(
vt
->
vt_löe_posôi⁄s
);

68 
vt
->
vt_löe_widths
 = vt->
vt_löe_posôi⁄s
 + vt->
vt_height
;

70 
	`li°_öô
(&
vt
->
vt_hi°‹y_chunks
);

71 
suc˚ss
 = 
	`vãrmöÆ_add_chunk
(
vt
);

72 
	`KASSERT
(
suc˚ss
 && !
	`li°_em±y
(&
vt
->
vt_hi°‹y_chunks
));

74 
	`vãrmöÆ_˛ór
(
vt
);

75 
	}
}

77 
	$vãrmöÆ_£ek_to_pos
(
vãrmöÆ_t
 *
vt
, 
size_t
 
pos
,

78 
vãrmöÆ_hi°‹y_chunk_t
 **
chunk
,

79 
size_t
 *
off£t
)

81 i‡(
pos
 > 
vt
->
vt_Àn
)

83 *
chunk
 = 
NULL
;

84 *
off£t
 = 0;

87 *
off£t
 = 
pos
 % 
VT_CHARS_PER_HISTORY_CHUNK
;

88 
size_t
 
n_chunks
 = 
vt
->
vt_Àn
 / 
VT_CHARS_PER_HISTORY_CHUNK
;

89 
size_t
 
ôî©i⁄s
 = 
pos
 / 
VT_CHARS_PER_HISTORY_CHUNK
;

90 i‡(
ôî©i⁄s
 > 
n_chunks
 >> 1)

92 
ôî©i⁄s
 = 
n_chunks
 - iterations;

93 
	`li°_ôî©e_ªvî£
(&
vt
->
vt_hi°‹y_chunks
, 
chunk_ôî
,

94 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
)

96 i‡(!
ôî©i⁄s
--)

98 *
chunk
 = 
chunk_ôî
;

105 
	`li°_ôî©e
(&
vt
->
vt_hi°‹y_chunks
, 
chunk_ôî
,

106 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
)

108 i‡(!
ôî©i⁄s
--)

110 *
chunk
 = 
chunk_ôî
;

115 
	}
}

117 
ölöe
 
	$vãrmöÆ_£ek_to_off£t
(
vãrmöÆ_t
 *
vt
,

118 
vãrmöÆ_hi°‹y_chunk_t
 **
chunk
,

119 
size_t
 *
off£t
)

121 *
off£t
 >
VT_CHARS_PER_HISTORY_CHUNK
)

123 i‡(*
chunk
 ==

124 
	`li°_èû
(&
vt
->
vt_hi°‹y_chunks
, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
))

126 *
chunk
 = 
	`li°_√xt
(*chunk, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
);

127 *
off£t
 -
VT_CHARS_PER_HISTORY_CHUNK
;

130 
	}
}

132 
size_t
 
	$vãrmöÆ_ˇlcuœã_löe_width_f‹w¨d
(
vãrmöÆ_t
 *
vt
, 
size_t
 
pos
)

134 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
;

135 
size_t
 
off£t
;

136 
	`vãrmöÆ_£ek_to_pos
(
vt
, 
pos
, &
chunk
, &
off£t
);

137 i‡(!
chunk
)

139 
size_t
 
width
 = 0;

140 
pos
 + 
width
 < 
vt
->
vt_Àn
 && 
chunk
->
ch¨s
[
off£t
++] !
LF
)

142 
width
++;

143 i‡(!
	`vãrmöÆ_£ek_to_off£t
(
vt
, &
chunk
, &
off£t
))

146  
width
;

147 
	}
}

148 
	$vãrmöÆ_ªdøw_löes
(
vãrmöÆ_t
 *
vt
, 
size_t
 
°¨t
, size_à
íd
)

150 
	`KASSERT
(
°¨t
 < 
vt
->
vt_height
 && sèπ < 
íd
 &&Énd <= vt->vt_height);

152 
size_t
 
pos
 = 
	`VT_LINE_POSITION
(
vt
, 
°¨t
);

153 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
;

154 
size_t
 
off£t
;

155 
	`vãrmöÆ_£ek_to_pos
(
vt
, 
pos
, &
chunk
, &
off£t
);

157 
cﬁ‹_t
 
curs‹
 = {.
vÆue
 = 0x00D3D3D3};

158 
cﬁ‹_t
 
background
 = {.
vÆue
 = 0x00000000};

159 
cﬁ‹_t
 
f‹eground
 = {.
vÆue
 = 0x00FFFFFF};

161 
size_t
 
s¸ìn_y
 = 
	`s¸ìn_gë_ch¨a˘î_height
(Ë* 
°¨t
;

163 
size_t
 
löe
 = 
°¨t
;

164 
löe
 < 
íd
 && 
pos
 <
vt
->
vt_Àn
 &&

165 
	`vãrmöÆ_£ek_to_off£t
(
vt
, &
chunk
, &
off£t
))

167 
	`KASSERT
(
pos
 =
	`VT_LINE_POSITION
(
vt
, 
löe
));

169 
size_t
 
cur_width
 = 
vt
->
vt_löe_widths
[
löe
];

170 
size_t
 
√w_width
, 
√xt_pos
;

171 i‡(
löe
 + 1 < 
vt
->
vt_height
 &&

172 (
√xt_pos
 = 
	`VT_LINE_POSITION
(
vt
, 
löe
 + 1)Ë!
VT_OFFSCREEN
)

174 
√w_width
 = 
√xt_pos
 - 
pos
 - 1;

178 
√w_width
 = 
	`vãrmöÆ_ˇlcuœã_löe_width_f‹w¨d
(
vt
, 
pos
);

180 
vt
->
vt_löe_widths
[
löe
] = 
√w_width
;

182 
	`s¸ìn_fûl_ª˘
(

183 0, 
s¸ìn_y
,

184 
	`MAX
(
cur_width
, 
√w_width
Ë* 
	`s¸ìn_gë_ch¨a˘î_width
(),

185 
	`s¸ìn_gë_ch¨a˘î_height
(), 
background
);

186 i‡(
pos
 <
vt
->
vt_curs‹_pos
 && vt->vt_curs‹_po†<po†+ 
√w_width
)

188 
	`s¸ìn_fûl_ª˘
(

189 (
vt
->
vt_curs‹_pos
 - 
pos
Ë* 
	`s¸ìn_gë_ch¨a˘î_width
(),

190 
s¸ìn_y
, 
	`s¸ìn_gë_ch¨a˘î_width
(),

191 
	`s¸ìn_gë_ch¨a˘î_height
(), 
curs‹
);

192 
vt
->
vt_löe_widths
[
löe
]++;

194 
size_t
 
døwn
 = 0;

195 
døwn
 !
√w_width
)

197 
size_t
 
to_døw
 =

198 
	`MIN
(
VT_CHARS_PER_HISTORY_CHUNK
 - 
off£t
, 
√w_width
 - 
døwn
);

199 
	`s¸ìn_døw_°rög
(
døwn
 * 
	`s¸ìn_gë_ch¨a˘î_width
(), 
s¸ìn_y
,

200 
chunk
->
ch¨s
 + 
off£t
, 
to_døw
, 
f‹eground
);

201 
døwn
 +
to_døw
;

202 
off£t
 +
to_døw
;

203 i‡(!
	`vãrmöÆ_£ek_to_off£t
(
vt
, &
chunk
, &
off£t
))

205 
	`vãrmöÆ_£ek_to_off£t
(
vt
, &
chunk
, &
off£t
);

206 
	`KASSERT
(
døwn
 =
√w_width
);

211 
pos
 +
√w_width
 + 1;

212 
	`KASSERT
(
chunk
->
ch¨s
[
off£t
] =
LF
 || 
pos
 >
vt
->
vt_Àn
);

214 
off£t
++;

215 
löe
++;

216 
s¸ìn_y
 +
	`s¸ìn_gë_ch¨a˘î_height
();

218 
löe
 < 
íd
)

221 
	`s¸ìn_fûl_ª˘
(

222 0, 
s¸ìn_y
,

223 
vt
->
vt_löe_widths
[
löe
] * 
	`s¸ìn_gë_ch¨a˘î_width
(),

224 
	`s¸ìn_gë_ch¨a˘î_height
(), 
background
);

225 
vt
->
vt_löe_widths
[
löe
] = 0;

226 
löe
++;

227 
s¸ìn_y
 +
	`s¸ìn_gë_ch¨a˘î_height
();

229 
	}
}

231 
	$vãrmöÆ_make_a˘ive
(
vãrmöÆ_t
 *
vt
)

233 
	`KASSERT
(
vt
);

234 i‡(
a˘ive_vt
 =
vt
)

236 
a˘ive_vt
 = 
vt
;

237 
size_t
 
löe
 = 0;Üöê< 
vt
->
vt_height
;Üine++)

239 
vt
->
vt_löe_widths
[
löe
] = vt->
vt_width
;

241 
cﬁ‹_t
 
background
 = {.
vÆue
 = 0x00000000};

242 
	`s¸ìn_fûl_ª˘
(

243 
vt
->
vt_width
 * 
	`s¸ìn_gë_ch¨a˘î_width
(), 0,

244 
	`s¸ìn_gë_width
(Ë- 
vt
->
vt_width
 * 
	`s¸ìn_gë_ch¨a˘î_width
(),

245 
	`s¸ìn_gë_height
(), 
background
);

246 
	`s¸ìn_fûl_ª˘
(

247 0, 
vt
->
vt_height
 * 
	`s¸ìn_gë_ch¨a˘î_height
(), 
	`s¸ìn_gë_width
(),

248 
	`s¸ìn_gë_height
(Ë- 
vt
->
vt_height
 * 
	`s¸ìn_gë_ch¨a˘î_height
(),

249 
background
);

250 
	`vãrmöÆ_ªdøw_löes
(
vt
, 0, vt->
vt_height
);

251 
	}
}

253 
size_t
 
	$vãrmöÆ_ˇlcuœã_löe_width_backw¨d
(
vãrmöÆ_t
 *
vt
, 
size_t
 
pos
)

255 i‡(!
pos
)

257 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
;

258 
size_t
 
off£t
;

259 
	`vãrmöÆ_£ek_to_pos
(
vt
, 
pos
 - 1, &
chunk
, &
off£t
);

260 
size_t
 
width
 = 0;

261 
chunk
->
ch¨s
[
off£t
] !
LF
)

263 
width
++;

264 i‡(
off£t
 == 0)

266 i‡(
chunk
 =
	`li°_hód
(&
vt
->
vt_hi°‹y_chunks
,

267 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
))

269 
chunk
 = 
	`li°_¥ev
(chunk, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
);

270 
off£t
 = 
VT_CHARS_PER_HISTORY_CHUNK
;

272 
off£t
--;

274  
width
;

275 
	}
}

277 
ölöe
 
	$vãrmöÆ_gë_œ°_visibÀ_löe_öf‹m©i⁄
(
vãrmöÆ_t
 *
vt
,

278 
size_t
 *
posôi⁄
,

279 
size_t
 *
width
)

281 
löe
 = 
vt
->
vt_height
 - 1;Üine >= 0;Üine--)

283 i‡(
	`VT_LINE_POSITION
(
vt
, 
löe
Ë!
VT_OFFSCREEN
)

285 *
posôi⁄
 = 
	`VT_LINE_POSITION
(
vt
, 
löe
);

286 *
width
 = 
	`vãrmöÆ_ˇlcuœã_löe_width_f‹w¨d
(
vt
, *
posôi⁄
);

290 
	`∑nic
("shouldálways findÜast visibleÜine information");

291 
	}
}

293 
ölöe
 
	$vãrmöÆ_s¸ﬁÀd_to_bŸtom
(
vãrmöÆ_t
 *
vt
)

295 
size_t
 
posôi⁄
;

296 
size_t
 
width
;

297 
	`vãrmöÆ_gë_œ°_visibÀ_löe_öf‹m©i⁄
(
vt
, &
posôi⁄
, &
width
);

298  
posôi⁄
 + 
width
 =
vt
->
vt_Àn
;

299 
	}
}

301 
	$vãrmöÆ_s¸ﬁl_to_bŸtom
(
vãrmöÆ_t
 *
vt
)

303 i‡(
	`vãrmöÆ_s¸ﬁÀd_to_bŸtom
(
vt
))

305 
vt
->
vt_löe_off£t
 = 0;

306 
	`VT_LINE_POSITION
(
vt
, 0Ëvt->
vt_Àn
 + 1;

307 
	`vãrmöÆ_s¸ﬁl
(
vt
, -vt->
vt_height
);

308 
size_t
 
löe
 = 
vt
->
vt_height
 - vt->
vt_löe_off£t
;Üine < vt->vt_height;

309 
löe
++)

311 
	`VT_LINE_POSITION
(
vt
, 
löe
Ë
VT_OFFSCREEN
;

313 
	}
}

315 
	$vãrmöÆ_s¸ﬁl_døw
(
vãrmöÆ_t
 *
vt
, 
cou¡
)

317 i‡(
cou¡
 > 0)

319 i‡((
size_t
)
cou¡
 > 
vt
->
vt_height
)

320 
cou¡
 = 
vt
->
vt_height
;

321 
size_t
 
c›y_di°™˚
 = 
cou¡
 * 
	`s¸ìn_gë_ch¨a˘î_height
();

322 
size_t
 
s¸ìn_y
 = 0;

323 
size_t
 
löe
 = 0;Üöê< 
vt
->
vt_height
 - 
cou¡
;Üine++)

325 
	`s¸ìn_c›y_ª˘
(0, 
s¸ìn_y
 + 
c›y_di°™˚
,

326 
	`MAX
(
vt
->
vt_löe_widths
[
löe
],

327 
vt
->
vt_löe_widths
[
löe
 + 
cou¡
]) *

328 
	`s¸ìn_gë_ch¨a˘î_width
(),

329 
	`s¸ìn_gë_ch¨a˘î_height
(), 0, 
s¸ìn_y
);

330 
vt
->
vt_löe_widths
[
löe
] = vt->vt_löe_widths[löê+ 
cou¡
];

331 
s¸ìn_y
 +
	`s¸ìn_gë_ch¨a˘î_height
();

333 
	`vãrmöÆ_ªdøw_löes
(
vt
, vt->
vt_height
 - 
cou¡
, vt->vt_height);

335 i‡(
cou¡
 < 0)

337 
cou¡
 *= -1;

338 i‡((
size_t
)
cou¡
 > 
vt
->
vt_height
)

339 
cou¡
 = 
vt
->
vt_height
;

340 
size_t
 
c›y_di°™˚
 = 
cou¡
 * 
	`s¸ìn_gë_ch¨a˘î_height
();

341 
size_t
 
s¸ìn_y
 =

342 (
vt
->
vt_height
 - 
cou¡
Ë* 
	`s¸ìn_gë_ch¨a˘î_height
();

343 
size_t
 
löe
 = 
vt
->
vt_height
 - 
cou¡
;Üine >= (size_t)count;

344 
löe
--)

346 
	`s¸ìn_c›y_ª˘
(0, 
s¸ìn_y
 - 
c›y_di°™˚
,

347 
	`MAX
(
vt
->
vt_löe_widths
[
löe
],

348 
vt
->
vt_löe_widths
[
löe
 - 
cou¡
]) *

349 
	`s¸ìn_gë_ch¨a˘î_width
(),

350 
	`s¸ìn_gë_ch¨a˘î_height
(), 0, 
s¸ìn_y
);

351 
vt
->
vt_löe_widths
[
löe
] = vt->vt_löe_widths[löê- 
cou¡
];

352 
s¸ìn_y
 -
	`s¸ìn_gë_ch¨a˘î_height
();

354 
	`vãrmöÆ_ªdøw_löes
(
vt
, 0, (
size_t
)
cou¡
);

356 
	}
}

358 
	$vãrmöÆ_s¸ﬁl
(
vãrmöÆ_t
 *
vt
, 
cou¡
)

360 
n_s¸ﬁls
 = 0;

361 i‡(
cou¡
 < 0)

363 
size_t
 
fú°_löe_posôi⁄
 = 
	`VT_LINE_POSITION
(
vt
, 0);

364 
cou¡
++ && 
fú°_löe_posôi⁄
)

366 
size_t
 
width
 = 
	`vãrmöÆ_ˇlcuœã_löe_width_backw¨d
(

367 
vt
, 
fú°_löe_posôi⁄
 - 1);

368 
size_t
 
t›_löe_posôi⁄
 = 
fú°_löe_posôi⁄
 - 
width
 - 1;

369 
	`VT_LINE_POSITION
(
vt
, -1Ë
t›_löe_posôi⁄
;

370 i‡(!
vt
->
vt_löe_off£t
)

371 
vt
->
vt_löe_off£t
 = vt->
vt_height
;

372 
vt
->
vt_löe_off£t
--;

373 
n_s¸ﬁls
++;

374 
fú°_löe_posôi⁄
 = 
t›_löe_posôi⁄
;

376 i‡(
n_s¸ﬁls
)

378 
	`vãrmöÆ_s¸ﬁl_døw
(
vt
, -
n_s¸ﬁls
);

381 i‡(
cou¡
 > 0)

383 
size_t
 
œ°_löe_posôi⁄
;

384 
size_t
 
œ°_löe_width
;

385 
	`vãrmöÆ_gë_œ°_visibÀ_löe_öf‹m©i⁄
(
vt
, &
œ°_löe_posôi⁄
,

386 &
œ°_löe_width
);

387 
cou¡
-- && 
œ°_löe_posôi⁄
 + 
œ°_löe_width
 < 
vt
->
vt_Àn
)

389 
size_t
 
bŸtom_löe_posôi⁄
 =

390 
œ°_löe_posôi⁄
 + 
œ°_löe_width
 + 1;

391 
	`VT_LINE_POSITION
(
vt
, 0Ë
bŸtom_löe_posôi⁄
;

392 
vt
->
vt_löe_off£t
++;

393 i‡(()
vt
->
vt_löe_off£t
 =vt->
vt_height
)

394 
vt
->
vt_löe_off£t
 = 0;

395 
n_s¸ﬁls
++;

396 
œ°_löe_posôi⁄
 = 
bŸtom_löe_posôi⁄
;

397 
œ°_löe_width
 =

398 
	`vãrmöÆ_ˇlcuœã_löe_width_f‹w¨d
(
vt
, 
œ°_löe_posôi⁄
);

400 i‡(
n_s¸ﬁls
)

402 
	`vãrmöÆ_s¸ﬁl_døw
(
vt
, 
n_s¸ﬁls
);

405 
	}
}

407 
	$vãrmöÆ_˛ór
(
vãrmöÆ_t
 *
vt
)

409 
	`li°_ôî©e
(&
vt
->
vt_hi°‹y_chunks
, 
chunk
, 
vãrmöÆ_hi°‹y_chunk_t
,

410 
lök
)

412 i‡(
chunk
 !
	`li°_èû
(&
vt
->
vt_hi°‹y_chunks
,

413 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
))

415 
	`li°_ªmove
(&
chunk
->
lök
);

416 
	`∑ge_‰ì_n
(
chunk
, 
VT_PAGES_PER_HISTORY_CHUNK
);

420 
	`mem£t
(
chunk
, 0, 
VT_CHARS_PER_HISTORY_CHUNK
);

423 
vt
->
vt_Àn
 = 0;

424 
size_t
 
i
 = 0; i < 
vt
->
vt_height
; i++)

426 
vt
->
vt_löe_widths
[
i
] = 0;

427 
vt
->
vt_löe_posôi⁄s
[
i
] = 
VT_OFFSCREEN
;

429 
vt
->
vt_löe_off£t
 = 0;

430 
vt
->
vt_curs‹_pos
 = 0;

431 
vt
->
vt_öput_pos
 = 0;

432 
	`VT_LINE_POSITION
(
vt
, 0) = 0;

433 
	}
}

435 
	$vãrmöÆ_add_chunk
(
vãrmöÆ_t
 *
vt
)

437 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
 = 
	`∑ge_Æloc_n
(
VT_PAGES_PER_HISTORY_CHUNK
);

438 i‡(!
chunk
)

440 
chunk
 =

441 
	`li°_hód
(&
vt
->
vt_hi°‹y_chunks
, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
);

442 i‡(
chunk
 ==

443 
	`li°_èû
(&
vt
->
vt_hi°‹y_chunks
, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
))

445 
	`li°_ªmove
(&
chunk
->
lök
);

448 
size_t
 
i
 = 0; i < 
vt
->
vt_height
; i++)

450 
	`KASSERT
(
vt
->
vt_löe_posôi⁄s
[
i
] >
VT_CHARS_PER_HISTORY_CHUNK
 &&

452 
vt
->
vt_löe_posôi⁄s
[
i
] -
VT_CHARS_PER_HISTORY_CHUNK
;

454 
	`KASSERT
(
vt
->
vt_öput_pos
 >
VT_CHARS_PER_HISTORY_CHUNK
 &&

455 
vt
->
vt_curs‹_pos
 >
VT_CHARS_PER_HISTORY_CHUNK
 &&

456 
vt
->
vt_Àn
 >
VT_CHARS_PER_HISTORY_CHUNK
 && "NYI");

457 
vt
->
vt_öput_pos
 -
VT_CHARS_PER_HISTORY_CHUNK
;

458 
vt
->
vt_curs‹_pos
 -
VT_CHARS_PER_HISTORY_CHUNK
;

459 
vt
->
vt_Àn
 -
VT_CHARS_PER_HISTORY_CHUNK
;

462 
	`mem£t
(
chunk
, 0, (
vãrmöÆ_hi°‹y_chunk_t
));

464 
	`li°_lök_öô
(&
chunk
->
lök
);

465 
	`li°_ö£π_èû
(&
vt
->
vt_hi°‹y_chunks
, &
chunk
->
lök
);

468 
	}
}

470 
ölöe
 
	$vãrmöÆ_Æloˇã_to_off£t
(

471 
vãrmöÆ_t
 *
vt
, 
vãrmöÆ_hi°‹y_chunk_t
 **
chunk
, 
size_t
 *
off£t
)

473 i‡(!
	`vãrmöÆ_£ek_to_off£t
(
vt
, 
chunk
, 
off£t
))

475 i‡(!
	`vãrmöÆ_add_chunk
(
vt
))

479  
	`vãrmöÆ_£ek_to_off£t
(
vt
, 
chunk
, 
off£t
);

482 
	}
}

484 
size_t
 
	$vãrmöÆ_wrôe
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, 
size_t
 
Àn
)

486 
size_t
 
wrôãn
 = 0;

488 
size_t
 
œ°_löe_width
 =

489 
	`vãrmöÆ_ˇlcuœã_löe_width_backw¨d
(
vt
, vt->
vt_Àn
);

490 
size_t
 
œ°_löe_idx
;

491 
size_t
 
œ°_löe_posôi⁄
 = 
VT_OFFSCREEN
;

492 
œ°_löe_idx
 = 
vt
->
vt_height
 - 1;;Üast_line_idx--)

494 i‡((
œ°_löe_posôi⁄
 = 
	`VT_LINE_POSITION
(
vt
, 
œ°_löe_idx
)) !=

495 
VT_OFFSCREEN
)

500 
	`KASSERT
(
œ°_löe_idx
 < 
vt
->
vt_height
);

502 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
;

503 
size_t
 
off£t
;

504 
	`vãrmöÆ_£ek_to_pos
(
vt
, vt->
vt_Àn
, &
chunk
, &
off£t
);

506 
size_t
 
œ°_löe_idx_öôül
 = (size_t)
œ°_löe_idx
;

508 
√ed_to_s¸ﬁl
 = 
œ°_löe_posôi⁄
 + 
œ°_löe_width
 =
vt
->
vt_Àn
;

509 
size_t
 
n_s¸ﬁl_downs
 = 0;

510 
Àn
--)

512 
c
 = *(
buf
++);

513 
wrôãn
++;

514 i‡(
c
 !
LF
)

516 
chunk
->
ch¨s
[
off£t
++] = 
c
;

517 
vt
->
vt_Àn
++;

518 
œ°_löe_width
++;

519 i‡(!
	`vãrmöÆ_Æloˇã_to_off£t
(
vt
, &
chunk
, &
off£t
))

520 
d⁄e
;

522 i‡(
œ°_löe_width
 =
vt
->
vt_width
)

524 
c
 = 
LF
;

526 i‡(
c
 =
LF
)

528 
chunk
->
ch¨s
[
off£t
++] = 
LF
;

529 
vt
->
vt_Àn
++;

530 i‡(!
	`vãrmöÆ_Æloˇã_to_off£t
(
vt
, &
chunk
, &
off£t
))

531 
d⁄e
;

533 i‡(
√ed_to_s¸ﬁl
)

535 
	`KASSERT
(
œ°_löe_posôi⁄
 + 
œ°_löe_width
 + 1 =
vt
->
vt_Àn
);

536 i‡(
œ°_löe_idx
 =
vt
->
vt_height
 - 1)

538 
vt
->
vt_löe_off£t
++;

539 
n_s¸ﬁl_downs
++;

540 i‡(()
vt
->
vt_löe_off£t
 =vt->
vt_height
)

541 
vt
->
vt_löe_off£t
 = 0;

542 i‡(
œ°_löe_idx_öôül
)

543 
œ°_löe_idx_öôül
--;

547 
œ°_löe_idx
++;

549 
œ°_löe_width
 = 0;

550 
œ°_löe_posôi⁄
 = 
	`VT_LINE_POSITION
(
vt
, 
œ°_löe_idx
) =

551 
vt
->
vt_Àn
;

556 
œ°_löe_idx
++;

557 
d⁄e
:

558 
vt
->
vt_öput_pos
 = vt->
vt_Àn
;

559 
vt
->
vt_curs‹_pos
 = vt->
vt_Àn
;

561 i‡(
√ed_to_s¸ﬁl
)

563 i‡(
a˘ive_vt
 =
vt
)

565 i‡(
œ°_löe_idx
 >
vt
->
vt_height
 &&

566 
n_s¸ﬁl_downs
 < 
vt
->
vt_height
)

568 
	`vãrmöÆ_s¸ﬁl_døw
(
vt
, 
n_s¸ﬁl_downs
);

569 
œ°_löe_idx
 = 
vt
->
vt_height
;

571 
	`vãrmöÆ_ªdøw_löes
(
vt
, 
œ°_löe_idx_öôül
,

572 
	`MIN
(
œ°_löe_idx
, 
vt
->
vt_height
));

576 
	`vãrmöÆ_s¸ﬁl
(
vt
, 
n_s¸ﬁl_downs
);

579  
wrôãn
;

580 
	}
}

582 
	$vãrmöÆ_‰ì_‰om_posôi⁄_to_íd
(
vãrmöÆ_t
 *
vt
, 
size_t
 
pos
)

584 
vãrmöÆ_hi°‹y_chunk_t
 *
chunk
;

585 
size_t
 
off£t
;

586 
	`vãrmöÆ_£ek_to_pos
(
vt
, vt->
vt_öput_pos
, &
chunk
, &
off£t
);

587 
chunk
 !=

588 
	`li°_èû
(&
vt
->
vt_hi°‹y_chunks
, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
))

590 
vãrmöÆ_hi°‹y_chunk_t
 *
to_ªmove
 =

591 
	`li°_èû
(&
vt
->
vt_hi°‹y_chunks
, 
vãrmöÆ_hi°‹y_chunk_t
, 
lök
);

592 
	`li°_ªmove
(&
to_ªmove
->
lök
);

593 
	`∑ge_‰ì_n
(
to_ªmove
, 
VT_PAGES_PER_HISTORY_CHUNK
);

595 
vt
->
vt_Àn
 = 
pos
;

596 
size_t
 
löe
 = 0;Üöê< 
vt
->
vt_height
;Üine++)

598 i‡(
	`VT_LINE_POSITION
(
vt
, 
löe
Ë> vt->
vt_Àn
)

600 
	`VT_LINE_POSITION
(
vt
, 
löe
Ë
VT_OFFSCREEN
;

601 
	`vãrmöÆ_ªdøw_löes
(
vt
, 
löe
,Üine + 1);

604 
	}
}

606 
	$vãrmöÆ_key_¥es£d
(
vãrmöÆ_t
 *
vt
)

608 
	`KASSERT
(
a˘ive_vt
 =
vt
);

609 
	`vãrmöÆ_s¸ﬁl_to_bŸtom
(
vt
);

610 
buf
[
LDISC_BUFFER_SIZE
];

611 
size_t
 
Àn
 =

612 
	`ldisc_gë_cuºít_löe_øw
(&
	`vãrmöÆ_to_ây
(
vt
)->
ây_ldisc
, 
buf
);

613 
size_t
 
öôül_öput_pos
 = 
vt
->
vt_öput_pos
;

614 
	`vãrmöÆ_‰ì_‰om_posôi⁄_to_íd
(
vt
, 
öôül_öput_pos
);

615 
	`vãrmöÆ_wrôe
(
vt
, 
buf
, 
Àn
);

617 
vt
->
vt_öput_pos
 = 
öôül_öput_pos
;

618 
	}
}

622 
	#VGA_SCREEN_WIDTH
 80

	)

623 
	#VGA_SCREEN_HEIGHT
 25

	)

625 
	#VGACOLOR_BLACK
 0X0

	)

626 
	#VGACOLOR_BLUE
 0X1

	)

627 
	#VGACOLOR_GREEN
 0X2

	)

628 
	#VGACOLOR_CYAN
 0X3

	)

629 
	#VGACOLOR_RED
 0X4

	)

630 
	#VGACOLOR_MAGENTA
 0X5

	)

631 
	#VGACOLOR_BROWN
 0X6

	)

632 
	#VGACOLOR_LIGHT_GRAY
 0X7

	)

633 
	#VGACOLOR_GRAY
 0X8

	)

634 
	#VGACOLOR_LIGHT_BLUE
 0X9

	)

635 
	#VGACOLOR_LIGHT_GREEN
 0XA

	)

636 
	#VGACOLOR_LIGHT_CYAN
 0XB

	)

637 
	#VGACOLOR_LIGHT_RED
 0XC

	)

638 
	#VGACOLOR_LIGHT_MAGENTA
 0XD

	)

639 
	#VGACOLOR_LIGHT_YELLOW
 0XE

	)

640 
	#VGACOLOR_WHITE
 0XF

	)

645 
vtc⁄sﬁe_t
 *
	$vtc⁄sﬁe
(
vtc⁄sﬁe_t
 *
vtc
, 
width
, 
height
,

646 
vtc_∑öt_h™dÀr_t
 
⁄_∑öt
,

647 
vtc_curs‹_h™dÀr_t
 
⁄_move
)

649 
vtc
->
width
 = width;

650 
vtc
->
height
 = height;

652 
vènsi_∑r£r_t
 
≠
;

653 
≠
.
°©e
 = 
VTSTATE_ESC
;

654 
≠
.
ödex
 = 0;

655 
vènsi_¨g_t
 
vè
[8];

656 
	`mem£t
(
≠
.
°ack
, 0, (
vènsi_¨g_t
Ë* 
VTC_ANSI_PARSER_STACK_SIZE
);

658 
vtc
->
™sù¨£r
 = 
≠
;

660 
vtc
->
©å
 = 
VTC_DEFAULT_ATTR
;

662 
vtc
->
buf„r
 = 
	`kmÆloc
(
width
 * 
height
 * (
vt˚Œ_t
));

664 
vtc
->
èbs
 = 
	`kmÆloc
(
LDISC_BUFFER_SIZE
 * ());

665 
vtc
->
èb_ödex
 = 0;

667 
vtc
->
curs‹
 = (
vtcurs‹_t
){0, 0};

669 
vtc
->
⁄_∑öt
 = on_paint;

670 
vtc
->
⁄_move
 = on_move;

672 
	`vtc⁄sﬁe_˛ór
(
vtc
, 0, 0, 
width
, 
height
 - 1);

674  
vtc
;

675 
	}
}

678 
	$vtc⁄sﬁe_dñëe
(
vtc⁄sﬁe_t
 *
vtc
)

680 
	`k‰ì
(
vtc
->
buf„r
);

681 
	`k‰ì
(
vtc
->
èbs
);

682 
	`k‰ì
(
vtc
);

683 
	}
}

688 
	$vtc⁄sﬁe_˛ór
(
vtc⁄sﬁe_t
 *
vtc
, 
‰omx
, 
‰omy
, 
tox
, 
toy
)

690 
i
 = 
‰omx
 + 
‰omy
 * 
vtc
->
width
; i < 
tox
 + 
toy
 * vtc->width; i++)

692 
vt˚Œ_t
 *
˚Œ
 = &
vtc
->
buf„r
[
i
];

694 
˚Œ
->
©å
 = 
VTC_DEFAULT_ATTR
;

695 
˚Œ
->
c
 = ' ';

697 i‡(
vtc
->
⁄_∑öt
)

699 
vtc
->
	`⁄_∑öt
(vtc, 
˚Œ
, 
i
 % vtc->
width
, i / vtc->width);

702 
	}
}

705 
	$vtc⁄sﬁe_s¸ﬁl
(
vtc⁄sﬁe_t
 *
vtc
, 
löes
)

707 i‡(
löes
 == 0)

710 
löes
 =Üöe†> 
vtc
->
height
 ? vtc->height :Üines;

713 
i
 = 0; i < ((
vtc
->
width
 * vtc->
height
Ë- (vtc->width * 
löes
));

714 
i
++)

716 
vtc
->
buf„r
[
i
] = vtc->buf„r[ò+ (vtc->
width
 * 
löes
)];

718 i‡(
vtc
->
⁄_∑öt
)

720 
vtc
->
	`⁄_∑öt
(vtc, &vtc->
buf„r
[
i
], i % vtc->
width
, i / vtc->width);

725 
i
 = ((
vtc
->
width
 * vtc->
height
Ë- (vtc->width * 
löes
));

726 
i
 < 
vtc
->
width
 * vtc->
height
; i++)

728 
vt˚Œ_t
 *
˚Œ
 = &
vtc
->
buf„r
[
i
];

729 
˚Œ
->
©å
 = 
VTC_DEFAULT_ATTR
;

730 
˚Œ
->
c
 = ' ';

732 i‡(
vtc
->
⁄_∑öt
)

734 
vtc
->
	`⁄_∑öt
(vtc, &vtc->
buf„r
[
i
], i % vtc->
width
, i / vtc->width);

739 i‡(
vtc
->
curs‹
.
y
 > 0)

741 
vtc
->
curs‹
.
y
 -
löes
;

743 i‡(
vtc
->
curs‹
.
y
 < 0)

744 
vtc
->
curs‹
.
y
 = 0;

746 i‡(
vtc
->
⁄_move
)

748 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

751 
	}
}

754 
	$vtc⁄sﬁe_√wlöe
(
vtc⁄sﬁe_t
 *
vtc
)

756 
vtc
->
curs‹
.
x
 = 0;

757 
vtc
->
curs‹
.
y
++;

759 i‡(
vtc
->
curs‹
.
y
 =vtc->
height
)

761 
	`vtc⁄sﬁe_s¸ﬁl
(
vtc
, 1);

764 i‡(
vtc
->
⁄_move
)

766 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

768 
	}
}

771 
	$vtc⁄sﬁe_≠≥nd
(
vtc⁄sﬁe_t
 *
vtc
, 
c
)

773 i‡(
c
 == '\n')

775 
	`vtc⁄sﬁe_√wlöe
(
vtc
);

777 i‡(
c
 == '\r')

779 
vtc
->
curs‹
.
x
 = 0;

781 i‡(
vtc
->
⁄_move
)

783 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

786 i‡(
c
 == '\t')

788 
n
 = 8 - (
vtc
->
curs‹
.
x
 % 8);

790 
vtc
->
èbs
[vtc->
èb_ödex
 % 
LDISC_BUFFER_SIZE
] = 
n
;

791 
vtc
->
èb_ödex
++;

793 
i
 = 0; i < 
n
; i++)

795 
	`vtc⁄sﬁe_≠≥nd
(
vtc
, ' ');

798 i‡(
c
 == '\b')

800 i‡(
vtc
->
curs‹
.
x
 > 0)

802 
vtc
->
curs‹
.
x
--;

806 
vtc
->
curs‹
.
y
--;

807 
vtc
->
curs‹
.
x
 = vtc->
width
 - 1;

810 i‡(
vtc
->
⁄_move
)

812 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

815 
i
 = (
vtc
->
width
 * vtc->
curs‹
.
y
Ë+ vtc->curs‹.
x
;

816 
vt˚Œ_t
 *
˚Œ
 = &
vtc
->
buf„r
[
i
];

817 
˚Œ
->
©å
 = 
VTC_DEFAULT_ATTR
;

818 
˚Œ
->
c
 = ' ';

819 
vtc
->
	`⁄_∑öt
(vtc, &vtc->
buf„r
[
i
], i % vtc->
width
, i / vtc->width);

823 i‡(
vtc
->
curs‹
.
x
 >vtc->
width
)

824 
	`vtc⁄sﬁe_√wlöe
(
vtc
);

826 
vt˚Œ_t
 *
˚Œ
 =

827 &
vtc
->
buf„r
[vtc->
curs‹
.
x
 + vtc->curs‹.
y
 * vtc->
width
];

828 
˚Œ
->
c
 = c;

829 
˚Œ
->
©å
 = 
vtc
->attr;

831 i‡(
vtc
->
⁄_∑öt
)

833 
vtc
->
	`⁄_∑öt
(vtc, 
˚Œ
, vtc->
curs‹
.
x
, vtc->curs‹.
y
);

836 
vtc
->
curs‹
.
x
++;

838 i‡(
vtc
->
⁄_move
)

840 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

843 
	}
}

846 
	$vtc⁄sﬁe_csi_cuu
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

848 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

850 
©å
 = 
°ack
[0].
vÆue
;

851 
vtc
->
curs‹
.
y
 = 
	`MAX
(
	`MIN
(vtc->curs‹.y - 
©å
, vtc->
height
 - 1), 1);

854 i‡(
vtc
->
⁄_move
)

856 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

858 
	}
}

861 
	$vtc⁄sﬁe_csi_cud
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

863 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

865 
©å
 = 
°ack
[0].
vÆue
;

866 
vtc
->
curs‹
.
y
 = 
	`MAX
(
	`MIN
(vtc->curs‹.y + 
©å
, vtc->
height
 - 1), 1);

869 i‡(
vtc
->
⁄_move
)

871 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

873 
	}
}

876 
	$vtc⁄sﬁe_csi_cuf
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

878 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

880 
©å
 = 
°ack
[0].
vÆue
;

881 
vtc
->
curs‹
.
x
 = 
	`MAX
(
	`MIN
(vtc->curs‹.x + 
©å
, vtc->
width
 - 1), 1);

884 i‡(
vtc
->
⁄_move
)

886 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

888 
	}
}

891 
	$vtc⁄sﬁe_csi_cub
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

893 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

895 
©å
 = 
°ack
[0].
vÆue
;

896 
vtc
->
curs‹
.
x
 = 
	`MAX
(
	`MIN
(vtc->curs‹.x - 
©å
, vtc->
width
 - 1), 1);

899 i‡(
vtc
->
⁄_move
)

901 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

903 
	}
}

907 
	$vtc⁄sﬁe_csi_˙l
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

909 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

911 
©å
 = 
°ack
[0].
vÆue
;

912 
vtc
->
curs‹
.
y
 = 
	`MAX
(
	`MIN
(vtc->curs‹.y + 
©å
, vtc->
height
 - 1), 1);

913 
vtc
->
curs‹
.
x
 = 0;

916 i‡(
vtc
->
⁄_move
)

918 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

920 
	}
}

924 
	$vtc⁄sﬁe_csi_˝l
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

926 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

928 
©å
 = 
°ack
[0].
vÆue
;

929 
vtc
->
curs‹
.
y
 = 
	`MAX
(
	`MIN
(vtc->curs‹.y - 
©å
, vtc->
height
 - 1), 1);

930 
vtc
->
curs‹
.
x
 = 0;

933 i‡(
vtc
->
⁄_move
)

935 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

937 
	}
}

940 
	$vtc⁄sﬁe_csi_cha
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

942 i‡(
cou¡
 =1 && !
°ack
[0].
em±y
)

944 
©å
 = 
°ack
[0].
vÆue
;

945 
vtc
->
curs‹
.
y
 = 
	`MAX
(
	`MIN
(
©å
, vtc->
height
 - 1), 1);

948 i‡(
vtc
->
⁄_move
)

950 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

952 
	}
}

955 
	$vtc⁄sﬁe_csi_cup
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

957 i‡(
cou¡
 =1 && 
°ack
[0].
em±y
)

959 
vtc
->
curs‹
.
x
 = 0;

960 
vtc
->
curs‹
.
y
 = 0;

962 i‡(
cou¡
 == 2)

964 i‡(
°ack
[0].
em±y
)

966 
vtc
->
curs‹
.
y
 = 0;

970 
vtc
->
curs‹
.
y
 = 
	`MIN
(
°ack
[0].
vÆue
 - 1, vtc->
height
 - 1);

973 i‡(
°ack
[1].
em±y
)

975 
vtc
->
curs‹
.
y
 = 0;

979 
vtc
->
curs‹
.
x
 = 
	`MIN
(
°ack
[1].
vÆue
 - 1, vtc->
width
 - 1);

983 i‡(
vtc
->
⁄_move
)

985 
vtc
->
	`⁄_move
(vtc, &vtc->
curs‹
);

987 
	}
}

990 
	$vtc⁄sﬁe_csi_ed
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

992 ()(
cou¡
);

994 
vtcurs‹_t
 
curs‹
 = 
vtc
->cursor;

996 i‡(
°ack
[0].
em±y
)

998 
	`vtc⁄sﬁe_˛ór
(
vtc
, 
curs‹
.
x
, curs‹.
y
, vtc->
width
, vtc->
height
 - 1);

1002 
©å
 = 
°ack
[0].
vÆue
;

1004 i‡(
©å
 == 0)

1005 
	`vtc⁄sﬁe_˛ór
(
vtc
, 
curs‹
.
x
, curs‹.
y
, vtc->
width
,

1006 
vtc
->
height
 - 1);

1007 i‡(
©å
 == 1)

1008 
	`vtc⁄sﬁe_˛ór
(
vtc
, 0, 0, 
curs‹
.
x
, curs‹.
y
);

1009 i‡(
©å
 == 2)

1010 
	`vtc⁄sﬁe_˛ór
(
vtc
, 0, 0, vtc->
width
, vtc->
height
 - 1);

1012 
	}
}

1015 
	$vtc⁄sﬁe_csi_ñ
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

1017 ()(
cou¡
);

1019 
vtcurs‹_t
 
curs‹
 = 
vtc
->cursor;

1021 i‡(
°ack
[0].
em±y
)

1023 
	`vtc⁄sﬁe_˛ór
(
vtc
, 
curs‹
.
x
, curs‹.
y
, vtc->
width
, cursor.y);

1027 
©å
 = 
°ack
[0].
vÆue
;

1029 i‡(
©å
 == 0)

1030 
	`vtc⁄sﬁe_˛ór
(
vtc
, 
curs‹
.
x
, curs‹.
y
, vtc->
width
, cursor.y);

1031 i‡(
©å
 == 1)

1032 
	`vtc⁄sﬁe_˛ór
(
vtc
, 0, 
curs‹
.
y
, curs‹.
x
, cursor.y);

1033 i‡(
©å
 == 2)

1034 
	`vtc⁄sﬁe_˛ór
(
vtc
, 0, 
curs‹
.
y
, vtc->
width
, cursor.y);

1036 
	}
}

1039 
	$vtc⁄sﬁe_csi_sgr
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

1041 
i
 = 0; i < 
cou¡
; i++)

1043 i‡(
°ack
[
i
].
em±y
 || sèck[i].
vÆue
 == 0)

1045 
vtc
->
©å
 = 
VTC_DEFAULT_ATTR
;

1049 
©å
 = 
°ack
[
i
].
vÆue
;

1051 i‡(
©å
 == 1)

1053 
vtc
->
©å
.
bright
 = 1;

1055 i‡(
©å
 >= 30 &&áttr <= 37)

1057 
vtc
->
©å
.
fg
 =áttr - 30;

1059 i‡(
©å
 >= 40 &&áttr <= 47)

1061 
vtc
->
©å
.
bg
 =áttr - 40;

1065 
	}
}

1067 
	$vtc⁄sﬁe_csi_l
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

1069 i‡(
cou¡
 != 1)

1073 i‡(
°ack
[0].
em±y
 || sèck[0].
vÆue
 != 25)

1078 
	`vga_dißbÀ_curs‹
();

1079 
	}
}

1081 
	$vtc⁄sﬁe_csi_h
(
vtc⁄sﬁe_t
 *
vtc
, 
vènsi_¨g_t
 *
°ack
, 
cou¡
)

1083 i‡(
cou¡
 != 1)

1088 i‡(
°ack
[0].
em±y
 || sèck[0].
vÆue
 != 25)

1093 
	`vga_íabÀ_curs‹
();

1094 
	}
}

1098 
	$vtc⁄sﬁe_¥o˚ss
(
vtc⁄sﬁe_t
 *
vtc
, 
c
)

1100 
vènsi_∑r£r_t
 *
∑r£r
 = &
vtc
->
™sù¨£r
;

1102 
∑r£r
->
°©e
)

1104 
VTSTATE_ESC
:

1105 i‡(
c
 == '\033')

1107 
∑r£r
->
°©e
 = 
VTSTATE_BRACKET
;

1109 
∑r£r
->
ödex
 = 0;

1111 
∑r£r
->
°ack
[∑r£r->
ödex
].
vÆue
 = 0;

1112 
∑r£r
->
°ack
[∑r£r->
ödex
].
em±y
 = 1;

1116 
∑r£r
->
°©e
 = 
VTSTATE_ESC
;

1117 
	`vtc⁄sﬁe_≠≥nd
(
vtc
, 
c
);

1121 
VTSTATE_BRACKET
:

1122 i‡(
c
 == '[')

1124 
∑r£r
->
°©e
 = 
VTSTATE_ATTR
;

1128 
∑r£r
->
°©e
 = 
VTSTATE_ESC
;

1129 
	`vtc⁄sﬁe_≠≥nd
(
vtc
, 
c
);

1132 
VTSTATE_ATTR
:

1133 i‡(
c
 >= '0' && c <= '9')

1135 
∑r£r
->
°ack
[∑r£r->
ödex
].
vÆue
 *= 10;

1136 
∑r£r
->
°ack
[∑r£r->
ödex
].
vÆue
 +(
c
 - '0');

1137 
∑r£r
->
°ack
[∑r£r->
ödex
].
em±y
 = 0;

1139 i‡(
c
 == '?')

1146 i‡((
∑r£r
->
ödex
Ë< 
VTC_ANSI_PARSER_STACK_SIZE
)

1148 
∑r£r
->
ödex
++;

1151 
∑r£r
->
°ack
[∑r£r->
ödex
].
vÆue
 = 0;

1152 
∑r£r
->
°ack
[∑r£r->
ödex
].
em±y
 = 1;

1154 
∑r£r
->
°©e
 = 
VTSTATE_ENDVAL
;

1161 i‡(
∑r£r
->
°©e
 =
VTSTATE_ENDVAL
)

1163 i‡(
c
 == ';')

1165 
∑r£r
->
°©e
 = 
VTSTATE_ATTR
;

1169 
c
)

1173 
	`vtc⁄sﬁe_csi_cuu
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1177 
	`vtc⁄sﬁe_csi_cub
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1181 
	`vtc⁄sﬁe_csi_cuf
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1185 
	`vtc⁄sﬁe_csi_cud
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1190 
	`vtc⁄sﬁe_csi_˙l
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1194 
	`vtc⁄sﬁe_csi_˝l
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1198 
	`vtc⁄sﬁe_csi_cha
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1205 
	`vtc⁄sﬁe_csi_cup
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1209 
	`vtc⁄sﬁe_csi_ed
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1213 
	`vtc⁄sﬁe_csi_ñ
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1217 
	`vtc⁄sﬁe_csi_sgr
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1220 
	`vtc⁄sﬁe_csi_l
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1223 
	`vtc⁄sﬁe_csi_h
(
vtc
, 
∑r£r
->
°ack
,Ö¨£r->
ödex
);

1227 
∑r£r
->
°©e
 = 
VTSTATE_ESC
;

1230 
	}
}

1233 
	$vtc⁄sﬁe_putch¨
(
vtc⁄sﬁe_t
 *
vtc
, 
c
Ë{ 
	`vtc⁄sﬁe_¥o˚ss
(vtc, c); 
	}
}

1236 
	$vtc⁄sﬁe_wrôe
(
vtc⁄sﬁe_t
 *
vtc
, c⁄° *
buf„r
, 
uöt32_t
 
size
)

1239 
uöt32_t
 
i
 = 0; i < 
size
; i++)

1242 
ldisc_t
 *
√w_ldisc
 = &
	`vãrmöÆ_to_ây
(
vtc
)->
ây_ldisc
;

1245 i‡(
buf„r
[
i
] ='\b' && 
√w_ldisc
->
ldisc_buf„r
[“ew_ldisc->
ldisc_hód
)] == '\t')

1249 
j
 = 0; j < 
vtc
->
èbs
[(vtc->
èb_ödex
 - 1Ë% 
LDISC_BUFFER_SIZE
]; j++)

1251 
	`vtc⁄sﬁe_¥o˚ss
(
vtc
, 
buf„r
[
i
]);

1253 
vtc
->
èb_ödex
--;

1257 
	`vtc⁄sﬁe_¥o˚ss
(
vtc
, 
buf„r
[
i
]);

1260 
	}
}

1263 
	$vtc⁄sﬁe_ªdøw
(
vtc⁄sﬁe_t
 *
vtc
)

1265 
i
 = 0; i < (
vtc
->
width
 * vtc->
height
); i++)

1267 i‡(
vtc
->
⁄_∑öt
)

1269 
vtc
->
	`⁄_∑öt
(vtc, &vtc->
buf„r
[
i
], i % vtc->
width
, i / vtc->width);

1272 
	}
}

1274 
	#VGA_COLOR
(
__fg
, 
__bg
Ë(__bg << 4 | __fg)

	)

1275 
	#VGA_ENTRY
(
__c
, 
__fg
, 
__bg
) \

1276 ((((
__bg
)&0XFË<< 4 | ((
__fg
)&0XF)Ë<< 8 | ((
__c
)&0XFF))

	)

1279 
	$vga_˚Œ
(
x
, 
y
, 
íåy
)

1281 i‡(
x
 < 
VGA_SCREEN_WIDTH
)

1283 i‡(
y
 < 
VGA_SCREEN_WIDTH
)

1285 
	`vga_wrôe_ch¨_©
(
y
, 
x
, 
íåy
);

1288 
	}
}

1290 
	gcﬁ‹s
[] = {

1291 [
VTCOLOR_BLACK
] = 
VGACOLOR_BLACK
,

1292 [
VTCOLOR_RED
] = 
VGACOLOR_RED
,

1293 [
VTCOLOR_GREEN
] = 
VGACOLOR_GREEN
,

1294 [
VTCOLOR_YELLOW
] = 
VGACOLOR_BROWN
,

1295 [
VTCOLOR_BLUE
] = 
VGACOLOR_BLUE
,

1296 [
VTCOLOR_MAGENTA
] = 
VGACOLOR_MAGENTA
,

1297 [
VTCOLOR_CYAN
] = 
VGACOLOR_CYAN
,

1298 [
VTCOLOR_GREY
] = 
VGACOLOR_LIGHT_GRAY
,

1301 
	gbrightcﬁ‹s
[] = {

1302 [
VTCOLOR_BLACK
] = 
VGACOLOR_GRAY
,

1303 [
VTCOLOR_RED
] = 
VGACOLOR_LIGHT_RED
,

1304 [
VTCOLOR_GREEN
] = 
VGACOLOR_LIGHT_GREEN
,

1305 [
VTCOLOR_YELLOW
] = 
VGACOLOR_LIGHT_YELLOW
,

1306 [
VTCOLOR_BLUE
] = 
VGACOLOR_LIGHT_BLUE
,

1307 [
VTCOLOR_MAGENTA
] = 
VGACOLOR_LIGHT_MAGENTA
,

1308 [
VTCOLOR_CYAN
] = 
VGACOLOR_LIGHT_CYAN
,

1309 [
VTCOLOR_GREY
] = 
VGACOLOR_WHITE
,

1312 
vãrmöÆ_t
 *
	ga˘ive_vt
 = 
NULL
;

1315 
	$∑öt_ˇŒback
(
vtc⁄sﬁe_t
 *
vtc
, 
vt˚Œ_t
 *
˚Œ
, 
x
, 
y
)

1317 i‡(
vtc
 !
a˘ive_vt
)

1322 i‡(
˚Œ
->
©å
.
bright
)

1324 
	`vga_˚Œ
(
x
, 
y
,

1325 
	`VGA_ENTRY
(
˚Œ
->
c
, 
brightcﬁ‹s
[˚Œ->
©å
.
fg
],

1326 
cﬁ‹s
[
˚Œ
->
©å
.
bg
]));

1330 
	`vga_˚Œ
(

1331 
x
, 
y
,

1332 
	`VGA_ENTRY
(
˚Œ
->
c
, 
cﬁ‹s
[˚Œ->
©å
.
fg
], cﬁ‹s[˚Œ->©å.
bg
]));

1334 
	}
}

1337 
	$curs‹_move_ˇŒback
(
vtc⁄sﬁe_t
 *
vtc
, 
vtcurs‹_t
 *
cur
)

1339 i‡(
vtc
 !
a˘ive_vt
)

1343 
	`vga_£t_curs‹
(
cur
->
y
, cur->
x
);

1344 
	}
}

1347 
	$vãrmöÆ_öô
(
vtc⁄sﬁe_t
 *
vt
)

1349 
	`vtc⁄sﬁe
(
vt
, 
VGA_SCREEN_WIDTH
, 
VGA_SCREEN_HEIGHT
, 
∑öt_ˇŒback
,

1350 
curs‹_move_ˇŒback
);

1351 
	}
}

1354 
	$vãrmöÆ_make_a˘ive
(
vãrmöÆ_t
 *
vt
)

1356 
a˘ive_vt
 = 
vt
;

1357 
	`vtc⁄sﬁe_ªdøw
(
vt
);

1358 
	`vga_£t_curs‹
(
vt
->
curs‹
.
y
, vt->curs‹.
x
);

1359 
	}
}

1362 
	$vãrmöÆ_key_¥es£d
(
vãrmöÆ_t
 *
vt
)

1364 
buf
[
LDISC_BUFFER_SIZE
];

1365 
size_t
 
Àn
 =

1366 
	`ldisc_gë_cuºít_löe_øw
(&
	`vãrmöÆ_to_ây
(
vt
)->
ây_ldisc
, 
buf
);

1367 
	`vtc⁄sﬁe_putch¨
(
vt
, 
buf
[
Àn
 - 1]);

1368 
	}
}

1370 
	$vãrmöÆ_s¸ﬁl_to_bŸtom
(
vãrmöÆ_t
 *
vt
Ë{ 
	`KASSERT
(0); 
	}
}

1373 
size_t
 
	$vãrmöÆ_wrôe
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, 
size_t
 
Àn
)

1375 
	`vtc⁄sﬁe_wrôe
(
vt
, 
buf
, 
Àn
);

1376  
Àn
;

1377 
	}
}

1380 
size_t
 
	$vãrmöÆ_echo_öput
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, 
size_t
 
Àn
)

1382 
	`vtc⁄sﬁe_wrôe
(
vt
, 
buf
, 
Àn
);

1383  
Àn
;

1384 
	}
}

	@kernel/entry/entry.c

2 
	~"maö/íåy.h
"

3 
	~"ty≥s.h
"

5 
	~"mu…iboŸ.h
"

7 
mu…iboŸ_èg
 *
	gmb_èg
;

9 
	$íåy
(*
boŸöfo_addr
)

11 
mb_èg
 = 
boŸöfo_addr
;

12 
	`kmaö
();

13 
	`__asm__
("cli\n\thlt");

14 
	}
}

	@kernel/fs/file.c

1 
	~"fs/fûe.h
"

2 
	~"fs/vfs.h
"

3 
	~"fs/vnode.h
"

4 
	~"kî√l.h
"

5 
	~"mm/¶ab.h
"

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

9 
¶ab_Æloˇt‹_t
 *
	gfûe_Æloˇt‹
;

11 
	$fûe_öô
()

13 
fûe_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("fûe", (
fûe_t
));

14 
	}
}

16 
	$‰ef
(
fûe_t
 *
f
)

18 
	`KASSERT
(
f
->
f_mode
 <
FMODE_MAX_VALUE
 && f->
f_vnode
);

20 
f
->
f_ªfcou¡
++;

22 i‡(
f
->
f_vnode
)

24 
	`dbg
(
DBG_FREF
, "‰ef: 0x%p, 0x%∞öÿ%u, u∞tÿ%lu\n", 
f
,

25 
f
->
f_vnode
->
vn_fs
, f->f_vnode->
vn_vno
, f->
f_ªfcou¡
);

29 
	`dbg
(
DBG_FREF
, "‰ef: 0x%∞u∞tÿ%lu\n", 
f
, f->
f_ªfcou¡
);

31 
	}
}

42 
fûe_t
 *
	$f¸óã
(
fd
, 
vnode_t
 *
vnode
, 
mode
)

44 
	`KASSERT
(!
cuΩroc
->
p_fûes
[
fd
]);

45 
fûe_t
 *
fûe
 = 
	`¶ab_obj_Æloc
(
fûe_Æloˇt‹
);

46 i‡(!
fûe
)

47  
NULL
;

48 
	`mem£t
(
fûe
, 0, (
fûe_t
));

49 
fûe
->
f_mode
 = 
mode
;

51 
	`vªf
(
fûe
->
f_vnode
 = 
vnode
);

52 i‡(
vnode
->
vn_›s
->
acquúe
)

53 
vnode
->
vn_›s
->
	`acquúe
(vnode, 
fûe
);

55 
cuΩroc
->
p_fûes
[
fd
] = 
fûe
;

56 
	`‰ef
(
fûe
);

57  
fûe
;

58 
	}
}

64 
fûe_t
 *
	$fgë
(
fd
)

66 i‡(
fd
 < 0 || fd >
NFILES
)

67  
NULL
;

68 
fûe_t
 *
fûe
 = 
cuΩroc
->
p_fûes
[
fd
];

69 i‡(
fûe
)

70 
	`‰ef
(
fûe
);

71  
fûe
;

72 
	}
}

82 
	$Âut
(
fûe_t
 **
fûï
)

84 
fûe_t
 *
fûe
 = *
fûï
;

85 *
fûï
 = 
NULL
;

87 
	`KASSERT
(
fûe
 && fûe->
f_mode
 <
FMODE_MAX_VALUE
);

88 
	`KASSERT
(
fûe
->
f_ªfcou¡
 > 0);

89 i‡(
fûe
->
f_ªfcou¡
 != 1)

90 
	`KASSERT
(
fûe
->
f_vnode
);

92 
fûe
->
f_ªfcou¡
--;

94 i‡(
fûe
->
f_vnode
)

96 
	`dbg
(
DBG_FREF
, "Âut: 0x%p, 0x%∞öÿ%u, dow¿tÿ%lu\n", 
fûe
,

97 
fûe
->
f_vnode
->
vn_fs
, fûe->f_vnode->
vn_vno
, fûe->
f_ªfcou¡
);

101 
	`dbg
(
DBG_FREF
, "Âut: 0x%∞dow¿tÿ%lu\n", 
fûe
, fûe->
f_ªfcou¡
);

104 i‡(!
fûe
->
f_ªfcou¡
)

106 i‡(
fûe
->
f_vnode
)

108 
	`vlock
(
fûe
->
f_vnode
);

109 i‡(
fûe
->
f_vnode
->
vn_›s
->
ªÀa£
)

110 
fûe
->
f_vnode
->
vn_›s
->
	`ªÀa£
(file->f_vnode, file);

111 
	`vput_locked
(&
fûe
->
f_vnode
);

113 
	`¶ab_obj_‰ì
(
fûe_Æloˇt‹
, 
fûe
);

115 
	}
}

	@kernel/fs/namev.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"kî√l.h
"

4 
	~<fs/dúít.h
>

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

9 
	~"fs/f˙é.h
"

10 
	~"fs/°©.h
"

11 
	~"fs/vfs.h
"

12 
	~"fs/vnode.h
"

32 
	$«mev_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

33 
vnode_t
 **
ªs_vnode
)

35 
	`NOT_YET_IMPLEMENTED
("VFS:Çamev_lookup");

37 
	}
}

66 c⁄° *
	$«mev_tokíize
(c⁄° **
£¨ch
, 
size_t
 *
Àn
)

68 c⁄° *
begö
;

70 i‡(*
£¨ch
 =
NULL
)

72 *
Àn
 = 0;

73  
NULL
;

76 
	`KASSERT
(
NULL
 !*
£¨ch
);

79 **
£¨ch
 == '/')

81 (*
£¨ch
)++;

86 
begö
 = *
£¨ch
;

87 *
Àn
 = 0;

88 **
£¨ch
 && **search != '/')

90 (*
Àn
)++;

91 (*
£¨ch
)++;

94 i‡(!**
£¨ch
)

96 *
£¨ch
 = 
NULL
;

99  
begö
;

100 
	}
}

150 
	$«mev_dú
(
vnode_t
 *
ba£
, c⁄° *
∑th
, vnode_à**
ªs_vnode
,

151 c⁄° **
«me
, 
size_t
 *
«mñí
)

153 
	`NOT_YET_IMPLEMENTED
("VFS:Çamev_dir");

155 
	}
}

180 
	$«mev_›í
(
vnode_t
 *
ba£
, c⁄° *
∑th
, 
oÊags
, 
mode
,

181 
devid_t
 
devid
, 
vnode
 **
ªs_vnode
)

183 
	`NOT_YET_IMPLEMENTED
("VFS:Çamev_open");

185 
	}
}

190 
	$«mev_ªsﬁve
(
vnode_t
 *
ba£
, c⁄° *
∑th
, vnode_à**
ªs_vnode
)

192  
	`«mev_›í
(
ba£
, 
∑th
, 
O_RDONLY
, 0, 0, 
ªs_vnode
);

193 
	}
}

198 
	$«mev_gë_∑ª¡
(
vnode_t
 *
dú
, vnode_à**
out
)

200 
	`vlock
(
dú
);

201 
ªt
 = 
	`«mev_lookup
(
dú
, "..", 2, 
out
);

202 
	`vu∆ock
(
dú
);

203  
ªt
;

204 
	}
}

210 
	$«mev_is_des˚nd™t
(
vnode_t
 *
a
, vnode_à*
b
)

212 
	`vªf
(
a
);

213 
vnode_t
 *
cur
 = 
a
;

214 
vnode_t
 *
√xt
 = 
NULL
;

215 
cur
 !
NULL
)

217 i‡(
cur
->
vn_vno
 =
b
->vn_vno)

219 
	`vput
(&
cur
);

222 i‡(
cur
->
vn_vno
 =cur->
vn_fs
->
fs_roŸ
->vn_vno)

225 
	`vput
(&
cur
);

230 
	`«mev_gë_∑ª¡
(
cur
, &
√xt
);

231 
vnode_t
 *
tmp
 = 
cur
;

232 
cur
 = 
√xt
;

233 
	`vput
(&
tmp
);

237 
	}
}

244 #ifde‡
__GETCWD__


254 
	$lookup_«me
(
vnode_t
 *
dú
, vnode_à*
íåy
, *
buf
, 
size_t
 
size
)

256 
	`NOT_YET_IMPLEMENTED
("GETCWD:Üookup_name");

257  -
ENOENT
;

258 
	}
}

260 
NOT_YET_IMPLEMENTED
("GETCWD: vput");

271 
ssize_t
 
	$lookup_dú∑th
(
vnode_t
 *
dú
, *
buf
, 
size_t
 
osize
)

273 
	`NOT_YET_IMPLEMENTED
("GETCWD:Üookup_dirpath");

275  -
ENOENT
;

276 
	}
}

	@kernel/fs/open.c

1 
	~"î∫o.h
"

2 
	~"fs/f˙é.h
"

3 
	~"fs/fûe.h
"

4 
	~"fs/vfs.h
"

5 
	~"fs/vfs_sysˇŒ.h
"

6 
	~"fs/vnode.h
"

7 
	~"globÆs.h
"

8 
	~"utû/debug.h
"

9 
	~<fs/vnode.h
>

21 
	$gë_em±y_fd
(*
fd
)

23 *
fd
 = 0; *fd < 
NFILES
; (*fd)++)

25 i‡(!
cuΩroc
->
p_fûes
[*
fd
])

30 *
fd
 = -1;

31  -
EMFILE
;

32 
	}
}

67 
	$do_›í
(c⁄° *
fûíame
, 
oÊags
)

69 
	`NOT_YET_IMPLEMENTED
("VFS: do_open");

71 
	}
}

	@kernel/fs/pipe.c

8 
	~"î∫o.h
"

9 
	~"globÆs.h
"

11 
	~"fs/fûe.h
"

12 
	~"fs/pùe.h
"

13 
	~"fs/°©.h
"

14 
	~"fs/vfs.h
"

15 
	~"fs/vfs_sysˇŒ.h
"

16 
	~"fs/vnode.h
"

18 
	~"mm/kmÆloc.h
"

19 
	~"mm/¶ab.h
"

21 
	~"utû/debug.h
"

22 
	~"utû/°rög.h
"

24 
	#PIPE_BUF_SIZE
 4096

	)

26 
pùe_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vnode
);

28 
pùe_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vnode
);

30 
fs_›s_t
 
	gpùe_fs›s
 = {.
ªad_vnode
 = 
pùe_ªad_vnode
,

31 .
	gdñëe_vnode
 = 
pùe_dñëe_vnode
,

32 .
	gumou¡
 = 
NULL
};

34 
fs_t
 
	gpùe_fs
 = {.
fs_dev
 = "pipe",

35 .
	gfs_ty≥
 = "pipe",

36 .
	gfs_›s
 = &
pùe_fs›s
,

37 .
	gfs_roŸ
 = 
NULL
,

38 .
	gfs_i
 = 
NULL
};

40 
pùe_ªad
(
vnode_t
 *
vnode
, 
size_t
 
pos
, *
buf
, size_à
cou¡
);

42 
pùe_wrôe
(
vnode_t
 *
vnode
, 
size_t
 
pos
, c⁄° *
buf
,

43 
size_t
 
cou¡
);

45 
pùe_°©
(
vnode_t
 *
vnode
, 
°©_t
 *
ss
);

47 
pùe_acquúe
(
vnode_t
 *
vnode
, 
fûe_t
 *
fûe
);

49 
pùe_ªÀa£
(
vnode_t
 *
vnode
, 
fûe_t
 *
fûe
);

51 
vnode_›s_t
 
	gpùe_v›s
 = {

52 .
ªad
 = 
pùe_ªad
,

53 .
	gwrôe
 = 
pùe_wrôe
,

54 .
	gmm≠
 = 
NULL
,

55 .
	gmknod
 = 
NULL
,

56 .
	glookup
 = 
NULL
,

57 .
	glök
 = 
NULL
,

58 .
	gu∆ök
 = 
NULL
,

59 .
	gmkdú
 = 
NULL
,

60 .
	grmdú
 = 
NULL
,

61 .
	gªaddú
 = 
NULL
,

62 .
	g°©
 = 
pùe_°©
,

63 .
	gacquúe
 = 
pùe_acquúe
,

64 .
	gªÀa£
 = 
pùe_ªÀa£
,

65 .
	ggë_p‰ame
 = 
NULL
,

66 .
	gfûl_p‰ame
 = 
NULL
,

67 .
	gÊush_p‰ame
 = 
NULL
,

72 
	spùe


75 *
	mpv_buf
;

81 
off_t
 
	mpv_hód
;

82 
size_t
 
	mpv_size
;

84 
	mpv_ªadîs
;

85 
	mpv_wrôîs
;

92 
kmuãx_t
 
	mpv_rdlock
;

93 
kmuãx_t
 
	mpv_wæock
;

100 
ktqueue_t
 
	mpv_ªad_waôq
;

101 
ktqueue_t
 
	mpv_wrôe_waôq
;

102 } 
	tpùe_t
;

104 
	#VNODE_TO_PIPE
(
vn
Ë((
pùe_t
 *)((vn)->
vn_i
))

	)

106 
¶ab_Æloˇt‹_t
 *
	gpùe_Æloˇt‹
 = 
NULL
;

107 
	g√xt_≤o
 = 0;

109 
	$pùe_öô
()

111 
pùe_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("pùe", (
pùe_t
));

112 
	`KASSERT
(
pùe_Æloˇt‹
);

113 
	}
}

121 
pùe_t
 *
	$pùe_¸óã
()

123 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_create");

124  
NULL
;

125 
	}
}

130 
	$pùe_de°roy
(
pùe_t
 *
pùe
)

132 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_destroy");

133 
	}
}

136 
	$pùe_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vnode
)

138 
vnode
->
vn_›s
 = &
pùe_v›s
;

139 
vnode
->
vn_mode
 = 
S_IFIFO
;

140 
vnode
->
vn_Àn
 = 0;

141 
vnode
->
vn_i
 = 
NULL
;

142 
	}
}

144 
	$pùe_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vnode
)

146 
pùe_t
 *
p
 = 
	`VNODE_TO_PIPE
(
vnode
);

147 i‡(
p
)

149 
	`pùe_de°roy
(
p
);

151 
	}
}

163 
vnode_t
 *
	$pgë
()

165 
	`NOT_YET_IMPLEMENTED
("PIPES:Öget");

166  
NULL
;

167 
	}
}

180 
	$do_pùe
(
pùefd
[2])

182 
	`NOT_YET_IMPLEMENTED
("PIPES: do_pipe");

183  -
ENOTSUP
;

184 
	}
}

200 
	$pùe_ªad
(
vnode_t
 *
vnode
, 
size_t
 
pos
, *
buf
, size_à
cou¡
)

202 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_read");

203  -
EINVAL
;

204 
	}
}

215 
	$pùe_wrôe
(
vnode_t
 *
vnode
, 
size_t
 
pos
, c⁄° *
buf
,

216 
size_t
 
cou¡
)

218 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_write");

219  -
EINVAL
;

220 
	}
}

228 
	$pùe_°©
(
vnode_t
 *
vnode
, 
°©_t
 *
ss
)

230 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_stat");

231  -
EINVAL
;

232 
	}
}

240 
	$pùe_acquúe
(
vnode_t
 *
vnode
, 
fûe_t
 *
fûe
)

242 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_acquire");

244 
	}
}

252 
	$pùe_ªÀa£
(
vnode_t
 *
vnode
, 
fûe_t
 *
fûe
)

254 
	`NOT_YET_IMPLEMENTED
("PIPES:Öipe_release");

256 
	}
}

	@kernel/fs/ramfs/ramfs.c

16 
	~"fs/ømfs/ømfs.h
"

17 
	~"î∫o.h
"

18 
	~"fs/dúít.h
"

19 
	~"fs/°©.h
"

20 
	~"fs/vfs.h
"

21 
	~"fs/vnode.h
"

22 
	~"globÆs.h
"

23 
	~"kî√l.h
"

24 
	~"mm/kmÆloc.h
"

25 
	~"mm/¶ab.h
"

26 
	~"utû/debug.h
"

27 
	~"utû/°rög.h
"

32 
ømfs_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
);

34 
ømfs_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
);

36 
ømfs_umou¡
(
fs_t
 *
fs
);

38 
fs_›s_t
 
	gømfs_›s
 = {.
ªad_vnode
 = 
ømfs_ªad_vnode
,

39 .
	gdñëe_vnode
 = 
ømfs_dñëe_vnode
,

40 .
	gumou¡
 = 
ømfs_umou¡
};

45 
ssize_t
 
ømfs_ªad
(
vnode_t
 *
fûe
, 
size_t
 
off£t
, *
buf
,

46 
size_t
 
cou¡
);

48 
ssize_t
 
ømfs_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
off£t
, c⁄° *
buf
,

49 
size_t
 
cou¡
);

52 
ssize_t
 
ømfs_¸óã
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

53 
vnode_t
 **
ªsu…
);

55 
ssize_t
 
ømfs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

56 
mode
, 
devid_t
 
devid
, 
vnode
 **
out
);

58 
ssize_t
 
ømfs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

59 
vnode_t
 **
out
);

61 
ømfs_lök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

62 
vnode_t
 *
chûd
);

64 
ssize_t
 
ømfs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
);

66 
ssize_t
 
ømfs_ª«me
(
vnode_t
 *
ﬁddú
, c⁄° *
ﬁd«me
,

67 
size_t
 
ﬁd«mñí
, 
vnode_t
 *
√wdú
,

68 c⁄° *
√w«me
, 
size_t
 
√w«mñí
);

70 
ssize_t
 
ømfs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

71 
vnode
 **
out
);

73 
ssize_t
 
ømfs_rmdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
);

75 
ssize_t
 
ømfs_ªaddú
(
vnode_t
 *
dú
, 
size_t
 
off£t
, 
dúít
 *
d
);

77 
ssize_t
 
ømfs_°©
(
vnode_t
 *
fûe
, 
°©_t
 *
buf
);

79 
ømfs_åunˇã_fûe
(
vnode_t
 *
fûe
);

81 
vnode_›s_t
 
	gømfs_dú_v›s
 = {.
ªad
 = 
NULL
,

82 .
	gwrôe
 = 
NULL
,

83 .
	gmm≠
 = 
NULL
,

84 .
	gmknod
 = 
ømfs_mknod
,

85 .
	glookup
 = 
ømfs_lookup
,

86 .
	glök
 = 
ømfs_lök
,

87 .
	gu∆ök
 = 
ømfs_u∆ök
,

88 .
	gª«me
 = 
ømfs_ª«me
,

89 .
	gmkdú
 = 
ømfs_mkdú
,

90 .
	grmdú
 = 
ømfs_rmdú
,

91 .
	gªaddú
 = 
ømfs_ªaddú
,

92 .
	g°©
 = 
ømfs_°©
,

93 .
	gacquúe
 = 
NULL
,

94 .
	gªÀa£
 = 
NULL
,

95 .
	ggë_p‰ame
 = 
NULL
,

96 .
	gfûl_p‰ame
 = 
NULL
,

97 .
	gÊush_p‰ame
 = 
NULL
,

98 .
	gåunˇã_fûe
 = 
NULL
};

100 
vnode_›s_t
 
	gømfs_fûe_v›s
 = {.
ªad
 = 
ømfs_ªad
,

101 .
	gwrôe
 = 
ømfs_wrôe
,

102 .
	gmm≠
 = 
NULL
,

103 .
	gmknod
 = 
NULL
,

104 .
	glookup
 = 
NULL
,

105 .
	glök
 = 
NULL
,

106 .
	gu∆ök
 = 
NULL
,

107 .
	gmkdú
 = 
NULL
,

108 .
	grmdú
 = 
NULL
,

109 .
	g°©
 = 
ømfs_°©
,

110 .
	gacquúe
 = 
NULL
,

111 .
	gªÀa£
 = 
NULL
,

112 .
	ggë_p‰ame
 = 
NULL
,

113 .
	gfûl_p‰ame
 = 
NULL
,

114 .
	gÊush_p‰ame
 = 
NULL
,

115 .
	gåunˇã_fûe
 = 
ømfs_åunˇã_fûe
};

120 
	sømfs_öode


122 
size_t
 
	mrf_size
;

123 
öo_t
 
	mrf_öo
;

124 *
	mrf_mem
;

125 
ssize_t
 
	mrf_mode
;

126 
ssize_t
 
	mrf_lökcou¡
;

127 } 
	tømfs_öode_t
;

129 
	#RAMFS_TYPE_DATA
 0

	)

130 
	#RAMFS_TYPE_DIR
 1

	)

131 
	#RAMFS_TYPE_CHR
 2

	)

132 
	#RAMFS_TYPE_BLK
 3

	)

134 
	#VNODE_TO_RAMFSINODE
(
vn
Ë((
ømfs_öode_t
 *)(vn)->
vn_i
)

	)

135 
	#VNODE_TO_RAMFS
(
vn
Ë((
ømfs_t
 *)(vn)->
vn_fs
->
fs_i
)

	)

136 
	#VNODE_TO_DIRENT
(
vn
Ë((
ømfs_dúít_t
 *)
	`VNODE_TO_RAMFSINODE
(vn)->
rf_mem
)

	)

141 
	#RAMFS_MAX_FILES
 64

	)

143 
	sømfs


145 
ømfs_öode_t
 *
	mrfs_öodes
[
RAMFS_MAX_FILES
];

146 } 
	tømfs_t
;

152 
	sømfs_dúít


154 
ssize_t
 
	mrd_öo
;

155 
	mrd_«me
[
NAME_LEN
];

156 } 
	tømfs_dúít_t
;

158 
	#RAMFS_MAX_DIRENT
 ((
size_t
)(
PAGE_SIZE
 / (
ømfs_dúít_t
)))

	)

161 
ssize_t
 
	$ømfs_Æloc_öode
(
fs_t
 *
fs
, 
ssize_t
 
ty≥
, 
devid_t
 
devid
)

163 
ømfs_t
 *
rfs
 = (ømfs_à*)
fs
->
fs_i
;

164 
	`KASSERT
((
RAMFS_TYPE_DATA
 =
ty≥
Ë|| (
RAMFS_TYPE_DIR
 ==Åype) ||

165 (
RAMFS_TYPE_CHR
 =
ty≥
Ë|| (
RAMFS_TYPE_BLK
 ==Åype));

167 
ssize_t
 
i
;

168 
i
 = 0; i < 
RAMFS_MAX_FILES
; i++)

170 i‡(
NULL
 =
rfs
->
rfs_öodes
[
i
])

172 
ømfs_öode_t
 *
öode
;

173 i‡(
NULL
 =(
öode
 = 
	`kmÆloc
((
ømfs_öode_t
))))

175  -
ENOSPC
;

178 i‡(
RAMFS_TYPE_CHR
 =
ty≥
 || 
RAMFS_TYPE_BLK
 ==Åype)

181 
öode
->
rf_mem
 = (*)(
uöt64_t
)
devid
;

186 i‡(
NULL
 =(
öode
->
rf_mem
 = 
	`∑ge_Æloc
()))

188 
	`k‰ì
(
öode
);

189  -
ENOSPC
;

191 
	`mem£t
(
öode
->
rf_mem
, 0, 
PAGE_SIZE
);

193 
öode
->
rf_size
 = 0;

194 
öode
->
rf_öo
 = 
i
;

195 
öode
->
rf_mode
 = 
ty≥
;

196 
öode
->
rf_lökcou¡
 = 1;

199 
rfs
->
rfs_öodes
[
i
] = 
öode
;

200  
i
;

203  -
ENOSPC
;

204 
	}
}

210 
	$ømfs_mou¡
(
fs
 *fs)

213 
ømfs_t
 *
rfs
 = 
	`kmÆloc
((ramfs_t));

214 i‡(
NULL
 =
rfs
)

216  -
ENOMEM
;

219 
	`mem£t
(
rfs
->
rfs_öodes
, 0, (rfs->rfs_inodes));

221 
fs
->
fs_i
 = 
rfs
;

222 
fs
->
fs_›s
 = &
ømfs_›s
;

225 
ssize_t
 
roŸ_öo
;

226 i‡(0 > (
roŸ_öo
 = 
	`ømfs_Æloc_öode
(
fs
, 
RAMFS_TYPE_DIR
, 0)))

228  
roŸ_öo
;

231 
¶ab_Æloˇt‹_t
 *
Æloˇt‹
 =

232 
	`¶ab_Æloˇt‹_¸óã
("ømfs_node", (
vnode_t
));

233 
fs
->
fs_vnode_Æloˇt‹
 = 
Æloˇt‹
;

234 
	`KASSERT
(
Æloˇt‹
);

236 
	`KASSERT
(0 =
roŸ_öo
);

237 
ømfs_öode_t
 *
roŸ
 = 
rfs
->
rfs_öodes
[
roŸ_öo
];

240 
ømfs_dúít_t
 *
roŸdít
 = (ømfs_dúít_à*)
roŸ
->
rf_mem
;

241 
roŸdít
->
rd_öo
 = 0;

242 
	`°r˝y
(
roŸdít
->
rd_«me
, ".");

243 
roŸdít
++;

244 
roŸdít
->
rd_öo
 = 0;

245 
	`°r˝y
(
roŸdít
->
rd_«me
, "..");

248 
roŸ
->
rf_size
 = 2 * (
ømfs_dúít_t
);

251 
rfs
->
rfs_öodes
[0] = 
roŸ
;

254 
fs
->
fs_roŸ
 = 
	`vgë
(fs, 0);

257 
	}
}

259 
	$ømfs_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
)

261 
ømfs_t
 *
rfs
 = 
	`VNODE_TO_RAMFS
(
vn
);

262 
ømfs_öode_t
 *
öode
 = 
rfs
->
rfs_öodes
[
vn
->
vn_vno
];

263 
	`KASSERT
(
öode
 && inode->
rf_öo
 =
vn
->
vn_vno
);

265 
öode
->
rf_lökcou¡
++;

267 
vn
->
vn_i
 = 
öode
;

268 
vn
->
vn_Àn
 = 
öode
->
rf_size
;

270 
öode
->
rf_mode
)

272 
RAMFS_TYPE_DATA
:

273 
vn
->
vn_mode
 = 
S_IFREG
;

274 
vn
->
vn_›s
 = &
ømfs_fûe_v›s
;

276 
RAMFS_TYPE_DIR
:

277 
vn
->
vn_mode
 = 
S_IFDIR
;

278 
vn
->
vn_›s
 = &
ømfs_dú_v›s
;

280 
RAMFS_TYPE_CHR
:

281 
vn
->
vn_mode
 = 
S_IFCHR
;

282 
vn
->
vn_›s
 = 
NULL
;

283 
vn
->
vn_devid
 = (
devid_t
)(
uöt64_t
)(
öode
->
rf_mem
);

285 
RAMFS_TYPE_BLK
:

286 
vn
->
vn_mode
 = 
S_IFBLK
;

287 
vn
->
vn_›s
 = 
NULL
;

288 
vn
->
vn_devid
 = (
devid_t
)(
uöt64_t
)(
öode
->
rf_mem
);

291 
	`∑nic
("inode %ld has unknown/invalidÅype %ld!!\n",

292 (
ssize_t
)
vn
->
vn_vno
, (ssize_t)
öode
->
rf_mode
);

294 
	}
}

296 
	$ømfs_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
)

298 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
vn
);

299 
ømfs_t
 *
rfs
 = 
	`VNODE_TO_RAMFS
(
vn
);

301 i‡(0 =--
öode
->
rf_lökcou¡
)

303 
	`KASSERT
(
rfs
->
rfs_öodes
[
vn
->
vn_vno
] =
öode
);

305 
rfs
->
rfs_öodes
[
vn
->
vn_vno
] = 
NULL
;

306 i‡(
öode
->
rf_mode
 =
RAMFS_TYPE_DATA
 ||

307 
öode
->
rf_mode
 =
RAMFS_TYPE_DIR
)

309 
	`∑ge_‰ì
(
öode
->
rf_mem
);

313 
	`k‰ì
(
öode
);

315 
	}
}

317 
ssize_t
 
	$ømfs_umou¡
(
fs_t
 *
fs
)

321 
ømfs_t
 *
rfs
 = (ømfs_à*)
fs
->
fs_i
;

323 
	`vput
(&
fs
->
fs_roŸ
);

326 
ssize_t
 
i
;

327 
i
 = 0; i < 
RAMFS_MAX_FILES
; i++)

329 i‡(
NULL
 !
rfs
->
rfs_öodes
[
i
])

331 i‡(
NULL
 !
rfs
->
rfs_öodes
[
i
]->
rf_mem
 &&

332 (
rfs
->
rfs_öodes
[
i
]->
rf_mode
 =
RAMFS_TYPE_DATA
 ||

333 
rfs
->
rfs_öodes
[
i
]->
rf_mode
 =
RAMFS_TYPE_DIR
))

335 
	`∑ge_‰ì
(
rfs
->
rfs_öodes
[
i
]->
rf_mem
);

337 
	`k‰ì
(
rfs
->
rfs_öodes
[
i
]);

342 
	}
}

344 
ssize_t
 
	$ømfs_¸óã
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

345 
vnode_t
 **
ªsu…
)

347 
vnode_t
 *
vn
;

348 
size_t
 
i
;

349 
ømfs_dúít_t
 *
íåy
;

352 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

353 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

355 i‡(!
íåy
->
rd_«me
[0])

361 i‡(
i
 =
RAMFS_MAX_DIRENT
)

363  -
ENOSPC
;

367 
ssize_t
 
öo
;

368 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_DATA
, 0)))

370  
öo
;

374 
vn
 = 
	`vgë
(
dú
->
vn_fs
, (
öo_t
)
öo
);

376 
íåy
->
rd_öo
 = 
vn
->
vn_vno
;

377 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

378 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

380 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

382 *
ªsu…
 = 
vn
;

385 
	}
}

387 
ssize_t
 
	$ømfs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

388 
mode
, 
devid_t
 
devid
, 
vnode
 **
out
)

390 
size_t
 
i
;

391 
ømfs_dúít_t
 *
íåy
;

394 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

395 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

397 i‡(!
íåy
->
rd_«me
[0])

403 i‡(
i
 =
RAMFS_MAX_DIRENT
)

405  -
ENOSPC
;

408 
ssize_t
 
öo
;

409 i‡(
	`S_ISCHR
(
mode
))

411 
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_CHR
, 
devid
);

413 i‡(
	`S_ISBLK
(
mode
))

415 
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_BLK
, 
devid
);

417 i‡(
	`S_ISREG
(
mode
))

419 
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_DATA
, 
devid
);

423 
	`∑nic
("Invalid mode!\n");

426 i‡(
öo
 < 0)

428  
öo
;

432 
íåy
->
rd_öo
 = 
öo
;

433 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

434 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

436 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

438 
vnode_t
 *
chûd
 = 
	`vgë
(
dú
->
vn_fs
, 
öo
);

440 
	`dbg
(
DBG_VFS
, "¸ótög ino(%ld), vno(%dËwôhÖ©h: %s\n", 
öo
,

441 
chûd
->
vn_vno
, 
íåy
->
rd_«me
);

443 
	`KASSERT
(
chûd
);

444 *
out
 = 
chûd
;

446 
	}
}

448 
ssize_t
 
	$ømfs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

449 
vnode_t
 **
out
)

451 
size_t
 
i
;

452 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
dú
);

453 
ømfs_dúít_t
 *
íåy
 = (ømfs_dúít_à*)
öode
->
rf_mem
;

455 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

457 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
))

459 i‡(
dú
->
vn_vno
 !
íåy
->
rd_öo
)

461 
fs_t
 *
fs
 = (
dú
)->
vn_fs
;

462 *
out
 = 
	`vgë
(
fs
, 
íåy
->
rd_öo
);

466 
	`vªf
(
dú
);

467 *
out
 = 
dú
;

473  -
ENOENT
;

474 
	}
}

476 
ssize_t
 
	$ømfs_föd_dúít
(
vnode_t
 *
dú
, c⁄° *
«me
,

477 
size_t
 
«mñí
)

479 
size_t
 
i
;

480 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
dú
);

481 
ømfs_dúít_t
 *
íåy
 = (ømfs_dúít_à*)
öode
->
rf_mem
;

483 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

485 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
))

487  
íåy
->
rd_öo
;

491  -
ENOENT
;

492 
	}
}

494 
ssize_t
 
	$ømfs_≠≥nd_dúít
(
vnode_t
 *
dú
, c⁄° *
«me
,

495 
size_t
 
«mñí
, 
vnode_t
 *
chûd
)

497 
vnode_t
 *
vn
;

498 
size_t
 
i
;

499 
ømfs_dúít_t
 *
íåy
;

501 
	`KASSERT
(
chûd
->
vn_fs
 =
dú
->vn_fs);

504 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

505 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

507 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
))

509  -
EEXIST
;

512 i‡(!
íåy
->
rd_«me
[0])

518 i‡(
i
 =
RAMFS_MAX_DIRENT
)

520  -
ENOSPC
;

524 
íåy
->
rd_öo
 = 
chûd
->
vn_vno
;

525 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«mñí
, 
NAME_LEN
 - 1));

526 
íåy
->
rd_«me
[
	`MIN
(
«mñí
, 
NAME_LEN
 - 1)] = '\0';

528 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

531 
	`VNODE_TO_RAMFSINODE
(
chûd
)->
rf_lökcou¡
++;

534 
	}
}

536 
ssize_t
 
	$ømfs_dñëe_dúít
(
vnode_t
 *
dú
, c⁄° *
«me
,

537 
size_t
 
«mñí
, 
vnode_t
 *
chûd
)

539 
found
 = 0;

540 
size_t
 
i
;

541 
ømfs_dúít_t
 *
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

542 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

544 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«mñí
))

546 
found
 = 1;

547 
íåy
->
rd_«me
[0] = '\0';

552 i‡(!
found
)

554  -
EEXIST
;

557 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 -(
ømfs_dúít_t
);

558 
	`VNODE_TO_RAMFSINODE
(
chûd
)->
rf_lökcou¡
--;

561 
	}
}

563 
	$ømfs_lök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

564 
vnode_t
 *
chûd
)

566  
	`ømfs_≠≥nd_dúít
(
dú
, 
«me
, 
«mñí
, 
chûd
);

567 
	}
}

569 
ssize_t
 
	$ømfs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

571 
ssize_t
 
ªt
;

572 
size_t
 
i
;

573 
ømfs_dúít_t
 *
íåy
;

575 
vnode_t
 *
vn
 = 
dú
;

577 
öo
 = 
	`ømfs_föd_dúít
(
dú
, 
«me
, 
«mñí
);

578 i‡(
öo
 < 0)

580  
öo
;

583 
vnode_t
 *
chûd
 = 
	`vgë_locked
(
dú
->
vn_fs
, (
öo_t
)
öo
);

584 
	`KASSERT
(!
	`S_ISDIR
(
chûd
->
vn_mode
) && "handledát VFSÜevel");

586 
ªt
 = 
	`ømfs_dñëe_dúít
(
dú
, 
«me
, 
«mñí
, 
chûd
);

587 
	`KASSERT
(
ªt
 == 0);

589 
	`vput_locked
(&
chûd
);

592 
	}
}

594 
ssize_t
 
	$ømfs_ª«me
(
vnode_t
 *
ﬁddú
, c⁄° *
ﬁd«me
,

595 
size_t
 
ﬁd«mñí
, 
vnode_t
 *
√wdú
,

596 c⁄° *
√w«me
, 
size_t
 
√w«mñí
)

598 
öo
 = 
	`ømfs_föd_dúít
(
ﬁddú
, 
ﬁd«me
, 
ﬁd«mñí
);

599 i‡(
öo
 < 0)

601  
öo
;

604 
vnode_t
 *
ﬁdvn
 = 
	`vgë_locked
(
ﬁddú
->
vn_fs
, (
öo_t
)
öo
);

605 i‡(
	`S_ISDIR
(
ﬁdvn
->
vn_mode
))

607 
	`vput_locked
(&
ﬁdvn
);

608  -
EPERM
;

610 i‡(
	`S_ISDIR
(
ﬁdvn
->
vn_mode
))

612 
	`vput_locked
(&
ﬁdvn
);

613  -
EISDIR
;

617 
öo
 = 
	`ømfs_föd_dúít
(
√wdú
, 
√w«me
, 
√w«mñí
);

618 i‡(
öo
 !-
ENOENT
)

620 i‡(
öo
 < 0)

622  
öo
;

624  -
EEXIST
;

627 
ssize_t
 
ªt
 = 
	`ømfs_≠≥nd_dúít
(
√wdú
, 
√w«me
, 
√w«mñí
, 
ﬁdvn
);

628 i‡(
ªt
 < 0)

630 
	`vput_locked
(&
ﬁdvn
);

631  
ªt
;

634 
ªt
 = 
	`ømfs_dñëe_dúít
(
ﬁddú
, 
ﬁd«me
, 
ﬁd«mñí
, 
ﬁdvn
);

635 
	`vput_locked
(&
ﬁdvn
);

637  
ªt
;

638 
	}
}

640 
ssize_t
 
	$ømfs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
,

641 
vnode
 **
out
)

643 
vnode_t
 *
vn
;

644 
size_t
 
i
;

645 
ømfs_dúít_t
 *
íåy
;

648 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

649 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

651 i‡(!
íåy
->
rd_«me
[0])

657 i‡(
i
 =
RAMFS_MAX_DIRENT
)

659  -
ENOSPC
;

663 
ssize_t
 
öo
;

664 i‡(0 > (
öo
 = 
	`ømfs_Æloc_öode
(
dú
->
vn_fs
, 
RAMFS_TYPE_DIR
, 0)))

666  
öo
;

670 
íåy
->
rd_öo
 = 
öo
;

671 
	`°∫˝y
(
íåy
->
rd_«me
, 
«me
, 
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1));

672 
íåy
->
rd_«me
[
	`MIN
(
«me_Àn
, 
NAME_LEN
 - 1)] = '\0';

674 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 +(
ømfs_dúít_t
);

677 
íåy
 = (
ømfs_dúít_t
 *)
	`VNODE_TO_RAMFS
(
dú
)->
rfs_öodes
[
öo
]->
rf_mem
;

678 
íåy
->
rd_öo
 = 
öo
;

679 
	`°r˝y
(
íåy
->
rd_«me
, ".");

680 
íåy
++;

681 
íåy
->
rd_öo
 = 
dú
->
vn_vno
;

682 
	`°r˝y
(
íåy
->
rd_«me
, "..");

685 
	`VNODE_TO_RAMFS
(
dú
)->
rfs_öodes
[
öo
]->
rf_size
 = 2 * (
ømfs_dúít_t
);

688 *
out
 = 
	`vgë
(
dú
->
vn_fs
, 
öo
);

691 
	}
}

693 
ssize_t
 
	$ømfs_rmdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«me_Àn
)

695 
ssize_t
 
ªt
;

696 
size_t
 
i
;

697 
ømfs_dúít_t
 *
íåy
;

699 
	`KASSERT
(!
	`«me_m©ch
(".", 
«me
, 
«me_Àn
) &&

700 !
	`«me_m©ch
("..", 
«me
, 
«me_Àn
));

702 
öo
 = 
	`ømfs_föd_dúít
(
dú
, 
«me
, 
«me_Àn
);

703 i‡(
öo
 < 0)

705  
öo
;

708 
vnode_t
 *
chûd
 = 
	`vgë_locked
(
dú
->
vn_fs
, (
öo_t
)
öo
);

709 i‡(!
	`S_ISDIR
(
chûd
->
vn_mode
))

711 
	`vput_locked
(&
chûd
);

712  -
ENOTDIR
;

716 
íåy
 = 
	`VNODE_TO_DIRENT
(
chûd
);

717 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

719 i‡(!
	`°rcmp
(
íåy
->
rd_«me
, ".") || !strcmp(entry->rd_name, ".."))

724 i‡(
íåy
->
rd_«me
[0])

726 
	`vput_locked
(&
chûd
);

727  -
ENOTEMPTY
;

732 
íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

733 
i
 = 0; i < 
RAMFS_MAX_DIRENT
; i++, 
íåy
++)

735 i‡(
	`«me_m©ch
(
íåy
->
rd_«me
, 
«me
, 
«me_Àn
))

737 
íåy
->
rd_«me
[0] = '\0';

741 
	`VNODE_TO_RAMFSINODE
(
dú
)->
rf_size
 -(
ømfs_dúít_t
);

743 
	`VNODE_TO_RAMFSINODE
(
chûd
)->
rf_lökcou¡
--;

744 
	`vput_locked
(&
chûd
);

747 
	}
}

749 
ssize_t
 
	$ømfs_ªad
(
vnode_t
 *
fûe
, 
size_t
 
off£t
, *
buf
,

750 
size_t
 
cou¡
)

752 
ssize_t
 
ªt
;

753 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

755 
	`KASSERT
(!
	`S_ISDIR
(
fûe
->
vn_mode
));

757 i‡(
off£t
 > 
öode
->
rf_size
)

759 
ªt
 = 0;

761 i‡(
off£t
 + 
cou¡
 > 
öode
->
rf_size
)

763 
ªt
 = 
öode
->
rf_size
 - 
off£t
;

767 
ªt
 = 
cou¡
;

770 
	`mem˝y
(
buf
, 
öode
->
rf_mem
 + 
off£t
, 
ªt
);

771  
ªt
;

772 
	}
}

774 
ssize_t
 
	$ømfs_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
off£t
, c⁄° *
buf
,

775 
size_t
 
cou¡
)

777 
ssize_t
 
ªt
;

778 
ømfs_öode_t
 *
öode
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

780 
	`KASSERT
(!
	`S_ISDIR
(
fûe
->
vn_mode
));

782 
ªt
 = 
	`MIN
((
size_t
)
cou¡
, (size_t)
PAGE_SIZE
 - 
off£t
);

783 
	`mem˝y
(
öode
->
rf_mem
 + 
off£t
, 
buf
, 
ªt
);

785 
	`KASSERT
(
fûe
->
vn_Àn
 =
öode
->
rf_size
);

786 
fûe
->
vn_Àn
 = 
	`MAX
(fûe->vn_Àn, 
off£t
 + 
ªt
);

787 
öode
->
rf_size
 = 
fûe
->
vn_Àn
;

789  
ªt
;

790 
	}
}

792 
ssize_t
 
	$ømfs_ªaddú
(
vnode_t
 *
dú
, 
size_t
 
off£t
, 
dúít
 *
d
)

794 
ssize_t
 
ªt
 = 0;

795 
ømfs_dúít_t
 *
dú_íåy
, *
èrg_íåy
;

797 
	`KASSERT
(
	`S_ISDIR
(
dú
->
vn_mode
));

798 
	`KASSERT
(0 =
off£t
 % (
ømfs_dúít_t
));

800 
dú_íåy
 = 
	`VNODE_TO_DIRENT
(
dú
);

801 
dú_íåy
 = (
ømfs_dúít_t
 *)(((*)dú_íåyË+ 
off£t
);

802 
èrg_íåy
 = 
dú_íåy
;

804 (
off£t
 < (
size_t
)(
RAMFS_MAX_DIRENT
 * (
ømfs_dúít_t
))) &&

805 (!
èrg_íåy
->
rd_«me
[0]))

807 ++
èrg_íåy
;

808 
off£t
 +(
ømfs_dúít_t
);

811 i‡(
off£t
 >(
size_t
)(
RAMFS_MAX_DIRENT
 * (
ømfs_dúít_t
)))

816 
ªt
 = (
ømfs_dúít_t
) +

817 (
èrg_íåy
 - 
dú_íåy
Ë* (
ømfs_dúít_t
);

819 
d
->
d_öo
 = 
èrg_íåy
->
rd_öo
;

820 
d
->
d_off
 = 0;

821 
	`°∫˝y
(
d
->
d_«me
, 
èrg_íåy
->
rd_«me
, 
NAME_LEN
 - 1);

822 
d
->
d_«me
[
NAME_LEN
 - 1] = '\0';

823  
ªt
;

824 
	}
}

826 
ssize_t
 
	$ømfs_°©
(
vnode_t
 *
fûe
, 
°©_t
 *
buf
)

828 
ømfs_öode_t
 *
i
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

829 
	`mem£t
(
buf
, 0, (
°©_t
));

830 
buf
->
°_mode
 = 
fûe
->
vn_mode
;

831 
buf
->
°_öo
 = (
ssize_t
)
fûe
->
vn_vno
;

832 
buf
->
°_dev
 = 0;

833 i‡(
fûe
->
vn_mode
 =
S_IFCHR
 || fûe->vn_modê=
S_IFBLK
)

835 
buf
->
°_rdev
 = (
ssize_t
)
i
->
rf_mem
;

837 
buf
->
°_∆ök
 = 
i
->
rf_lökcou¡
 - 1;

838 
buf
->
°_size
 = (
ssize_t
)
i
->
rf_size
;

839 
buf
->
°_blksize
 = (
ssize_t
)
PAGE_SIZE
;

840 
buf
->
°_blocks
 = 1;

843 
	}
}

845 
	$ømfs_åunˇã_fûe
(
vnode_t
 *
fûe
)

847 
	`KASSERT
(
	`S_ISREG
(
fûe
->
vn_mode
) && "ThisÑoutine should only be called forÑegular files");

848 
ømfs_öode_t
 *
i
 = 
	`VNODE_TO_RAMFSINODE
(
fûe
);

849 
i
->
rf_size
 = 0;

850 
fûe
->
vn_Àn
 = 0;

851 
	`mem£t
(
i
->
rf_mem
, 0, 
PAGE_SIZE
);

852 
	}
}

	@kernel/fs/s5fs/s5fs.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"kî√l.h
"

4 
	~<mm/¶ab.h
>

6 
	~"utû/debug.h
"

7 
	~"utû/¥ötf.h
"

8 
	~"utû/°rög.h
"

10 
	~"¥oc/kmuãx.h
"

12 
	~"fs/dúít.h
"

13 
	~"fs/fûe.h
"

14 
	~"fs/s5fs/s5fs.h
"

15 
	~"fs/s5fs/s5fs_subr.h
"

16 
	~"fs/°©.h
"

18 
	~"mm/kmÆloc.h
"

20 
s5_check_su≥r
(
s5_su≥r_t
 *
su≥r
);

22 
s5fs_check_ªfcou¡s
(
fs_t
 *
fs
);

24 
s5fs_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
);

26 
s5fs_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
);

28 
s5fs_umou¡
(
fs_t
 *
fs
);

30 
s5fs_sync
(
fs_t
 *
fs
);

32 
ssize_t
 
s5fs_ªad
(
vnode_t
 *
vnode
, 
size_t
 
pos
, *
buf
, size_à
Àn
);

34 
ssize_t
 
s5fs_wrôe
(
vnode_t
 *
vnode
, 
size_t
 
pos
, c⁄° *
buf
,

35 
size_t
 
Àn
);

37 
s5fs_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
);

39 
s5fs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

40 
mode
, 
devid_t
 
devid
, 
vnode
 **
out
);

42 
s5fs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

43 
vnode_t
 **
out
);

45 
s5fs_lök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

46 
vnode_t
 *
chûd
);

48 
s5fs_u∆ök
(
vnode_t
 *
vdú
, c⁄° *
«me
, 
size_t
 
«mñí
);

50 
s5fs_ª«me
(
vnode_t
 *
ﬁddú
, c⁄° *
ﬁd«me
, 
size_t
 
ﬁd«mñí
,

51 
vnode_t
 *
√wdú
, c⁄° *
√w«me
,

52 
size_t
 
√w«mñí
);

54 
s5fs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

55 
vnode
 **
out
);

57 
s5fs_rmdú
(
vnode_t
 *
∑ª¡
, c⁄° *
«me
, 
size_t
 
«mñí
);

59 
s5fs_ªaddú
(
vnode_t
 *
vnode
, 
size_t
 
pos
, 
dúít
 *
d
);

61 
s5fs_°©
(
vnode_t
 *
vnode
, 
°©_t
 *
ss
);

63 
s5fs_åunˇã_fûe
(
vnode_t
 *
vnode
);

65 
s5fs_ªÀa£
(
vnode_t
 *
vnode
, 
fûe_t
 *
fûe
);

67 
s5fs_gë_p‰ame
(
vnode_t
 *
vnode
, 
size_t
 
∑gíum
, 
f‹wrôe
,

68 
p‰ame_t
 **
pÂ
);

70 
s5fs_fûl_p‰ame
(
vnode_t
 *
vnode
, 
p‰ame_t
 *
pf
);

72 
s5fs_Êush_p‰ame
(
vnode_t
 *
vnode
, 
p‰ame_t
 *
pf
);

74 
fs_›s_t
 
	gs5fs_fs›s
 = {.
ªad_vnode
 = 
s5fs_ªad_vnode
,

75 .
	gdñëe_vnode
 = 
s5fs_dñëe_vnode
,

76 .
	gumou¡
 = 
s5fs_umou¡
,

77 .
	gsync
 = 
s5fs_sync
};

79 
vnode_›s_t
 
	gs5fs_dú_v›s
 = {.
ªad
 = 
NULL
,

80 .
	gwrôe
 = 
NULL
,

81 .
	gmm≠
 = 
NULL
,

82 .
	gmknod
 = 
s5fs_mknod
,

83 .
	glookup
 = 
s5fs_lookup
,

84 .
	glök
 = 
s5fs_lök
,

85 .
	gu∆ök
 = 
s5fs_u∆ök
,

86 .
	gª«me
 = 
s5fs_ª«me
,

87 .
	gmkdú
 = 
s5fs_mkdú
,

88 .
	grmdú
 = 
s5fs_rmdú
,

89 .
	gªaddú
 = 
s5fs_ªaddú
,

90 .
	g°©
 = 
s5fs_°©
,

91 .
	gacquúe
 = 
NULL
,

92 .
	gªÀa£
 = 
NULL
,

93 .
	ggë_p‰ame
 = 
s5fs_gë_p‰ame
,

94 .
	gfûl_p‰ame
 = 
s5fs_fûl_p‰ame
,

95 .
	gÊush_p‰ame
 = 
s5fs_Êush_p‰ame
,

96 .
	gåunˇã_fûe
 = 
NULL
};

98 
vnode_›s_t
 
	gs5fs_fûe_v›s
 = {.
ªad
 = 
s5fs_ªad
,

99 .
	gwrôe
 = 
s5fs_wrôe
,

100 .
	gmm≠
 = 
s5fs_mm≠
,

101 .
	gmknod
 = 
NULL
,

102 .
	glookup
 = 
NULL
,

103 .
	glök
 = 
NULL
,

104 .
	gu∆ök
 = 
NULL
,

105 .
	gmkdú
 = 
NULL
,

106 .
	grmdú
 = 
NULL
,

107 .
	gªaddú
 = 
NULL
,

108 .
	g°©
 = 
s5fs_°©
,

109 .
	gacquúe
 = 
NULL
,

110 .
	gªÀa£
 = 
NULL
,

111 .
	ggë_p‰ame
 = 
s5fs_gë_p‰ame
,

112 .
	gfûl_p‰ame
 = 
s5fs_fûl_p‰ame
,

113 .
	gÊush_p‰ame
 = 
s5fs_Êush_p‰ame
,

114 .
	gåunˇã_fûe
 = 
s5fs_åunˇã_fûe
};

117 
mobj_›s_t
 
	gs5fs_mobj_›s
 = {.
gë_p‰ame
 = 
NULL
,

118 .
	gfûl_p‰ame
 = 
blockdev_fûl_p‰ame
,

119 .
	gÊush_p‰ame
 = 
blockdev_Êush_p‰ame
,

120 .
	gde°ru˘‹
 = 
NULL
};

130 
	$s5fs_mou¡
(
fs_t
 *
fs
)

132 
num
;

134 
	`KASSERT
(
fs
);

136 i‡(
	`ssˇnf
(
fs
->
fs_dev
, "disk%d", &
num
) != 1)

138  -
EINVAL
;

141 
blockdev_t
 *
dev
 = 
	`blockdev_lookup
(
	`MKDEVID
(
DISK_MAJOR
, 
num
));

142 i‡(!
dev
)

143  -
EINVAL
;

145 
¶ab_Æloˇt‹_t
 *
Æloˇt‹
 =

146 
	`¶ab_Æloˇt‹_¸óã
("s5_node", (
s5_node_t
));

147 
fs
->
fs_vnode_Æloˇt‹
 = 
Æloˇt‹
;

149 
s5fs_t
 *
s5fs
 = (s5fs_à*)
	`kmÆloc
((s5fs_t));

151 i‡(!
s5fs
)

153 
	`¶ab_Æloˇt‹_de°roy
(
fs
->
fs_vnode_Æloˇt‹
);

154 
fs
->
fs_vnode_Æloˇt‹
 = 
NULL
;

155  -
ENOMEM
;

158 
	`mobj_öô
(&
s5fs
->
s5f_mobj
, 
MOBJ_FS
, &
s5fs_mobj_›s
);

159 
s5fs
->
s5f_bdev
 = 
dev
;

161 
p‰ame_t
 *
pf
;

162 
	`s5_gë_mëa_disk_block
(
s5fs
, 
S5_SUPER_BLOCK
, 0, &
pf
);

163 
	`mem˝y
(&
s5fs
->
s5f_su≥r
, 
pf
->
pf_addr
, (
s5_su≥r_t
));

164 
	`s5_ªÀa£_disk_block
(&
pf
);

166 i‡(
	`s5_check_su≥r
(&
s5fs
->
s5f_su≥r
))

168 
	`k‰ì
(
s5fs
);

169 
	`¶ab_Æloˇt‹_de°roy
(
fs
->
fs_vnode_Æloˇt‹
);

170 
fs
->
fs_vnode_Æloˇt‹
 = 
NULL
;

171  -
EINVAL
;

174 
	`kmuãx_öô
(&
s5fs
->
s5f_muãx
);

176 
s5fs
->
s5f_fs
 = 
fs
;

178 
fs
->
fs_i
 = 
s5fs
;

179 
fs
->
fs_›s
 = &
s5fs_fs›s
;

180 
fs
->
fs_roŸ
 = 
	`vgë
(fs, 
s5fs
->
s5f_su≥r
.
s5s_roŸ_öode
);

183 
	}
}

193 
	$s5fs_umou¡
(
fs_t
 *
fs
)

195 
s5fs_t
 *
s5fs
 = 
	`FS_TO_S5FS
(
fs
);

196 
blockdev_t
 *
bd
 = 
s5fs
->
s5f_bdev
;

198 i‡(
	`s5fs_check_ªfcou¡s
(
fs
))

200 
	`∑nic
(

204 
	`MAJOR
(
bd
->
bd_id
), 
	`MINOR
(bd->bd_id));

206 i‡(
	`s5_check_su≥r
(&
s5fs
->
s5f_su≥r
))

208 
	`∑nic
(

212 
	`MAJOR
(
bd
->
bd_id
), 
	`MINOR
(bd->bd_id));

215 
	`vput
(&
fs
->
fs_roŸ
);

217 
	`s5fs_sync
(
fs
);

218 
	`k‰ì
(
s5fs
);

220 
	}
}

222 
	$s5fs_sync
(
fs_t
 *
fs
)

224 
s5fs_t
 *
s5fs
 = 
	`FS_TO_S5FS
(
fs
);

225 
mobj_t
 *
mobj
 = &
s5fs
->
s5f_mobj
;

228 
p‰ame_t
 *
pf
;

229 
	`s5_gë_mëa_disk_block
(
s5fs
, 
S5_SUPER_BLOCK
, 1, &
pf
);

230 
	`mem˝y
(
pf
->
pf_addr
, &
s5fs
->
s5f_su≥r
, (
s5_su≥r_t
));

231 
	`s5_ªÀa£_disk_block
(&
pf
);

233 
	`mobj_lock
(&
s5fs
->
s5f_mobj
);

234 
	`mobj_Êush
(
mobj
);

235 
	`mobj_u∆ock
(&
s5fs
->
s5f_mobj
);

236 
	}
}

261 
	$s5fs_ªad_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
)

263 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_read_vnode");

264 
	}
}

277 
	$s5fs_dñëe_vnode
(
fs_t
 *
fs
, 
vnode_t
 *
vn
)

279 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_delete_vnode");

280 
	}
}

283 
ssize_t
 
	$s5fs_ªad
(
vnode_t
 *
vnode
, 
size_t
 
pos
, *
buf
, size_à
Àn
)

285 
	`KASSERT
(!
	`S_ISDIR
(
vnode
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

286 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

288 
	}
}

291 
ssize_t
 
	$s5fs_wrôe
(
vnode_t
 *
vnode
, 
size_t
 
pos
, c⁄° *
buf
,

292 
size_t
 
Àn
)

294 
	`KASSERT
(!
	`S_ISDIR
(
vnode
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

295 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

297 
	}
}

303 
	$s5fs_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
)

305 
	`NOT_YET_IMPLEMENTED
("VM: s5fs_mmap");

307 
	}
}

331 
	$s5fs_mknod
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

332 
mode
, 
devid_t
 
devid
, 
vnode
 **
out
)

334 
	`KASSERT
(
	`S_ISDIR
(
dú
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

335 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

337 
	}
}

354 
	$s5fs_lookup
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

355 
vnode_t
 **
ªt
)

357 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_lookup");

359 
	}
}

366 
	$s5fs_lök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

367 
vnode_t
 *
chûd
)

369 
	`KASSERT
(
	`S_ISDIR
(
dú
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

370 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

372 
	}
}

385 
	$s5fs_u∆ök
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
)

387 
	`KASSERT
(
	`S_ISDIR
(
dú
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

388 
	`KASSERT
(!
	`«me_m©ch
(".", 
«me
, 
«mñí
));

389 
	`KASSERT
(!
	`«me_m©ch
("..", 
«me
, 
«mñí
));

390 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

392 
	}
}

438 
	$s5fs_ª«me
(
vnode_t
 *
ﬁddú
, c⁄° *
ﬁd«me
, 
size_t
 
ﬁd«mñí
,

439 
vnode_t
 *
√wdú
, c⁄° *
√w«me
,

440 
size_t
 
√w«mñí
)

442 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_rename");

444 
	}
}

470 
	$s5fs_mkdú
(
vnode_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

471 
vnode
 **
out
)

473 
	`KASSERT
(
	`S_ISDIR
((
dú
)->
vn_mode
) && "should be handledátÅhe VFSÜevel");

474 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

476 
	}
}

491 
	$s5fs_rmdú
(
vnode_t
 *
∑ª¡
, c⁄° *
«me
, 
size_t
 
«mñí
)

493 
	`KASSERT
(!
	`«me_m©ch
(".", 
«me
, 
«mñí
));

494 
	`KASSERT
(!
	`«me_m©ch
("..", 
«me
, 
«mñí
));

495 
	`KASSERT
(
	`S_ISDIR
(
∑ª¡
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

496 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

498 
	}
}

516 
	$s5fs_ªaddú
(
vnode_t
 *
vnode
, 
size_t
 
pos
, 
dúít
 *
d
)

518 
	`KASSERT
(
	`S_ISDIR
(
vnode
->
vn_mode
) && "should be handledátÅhe VFSÜevel");

519 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

521 
	}
}

541 
	$s5fs_°©
(
vnode_t
 *
vnode
, 
°©_t
 *
ss
)

543 
	`NOT_YET_IMPLEMENTED
("S5FS: s5fs_stat");

545 
	}
}

556 
	$s5fs_åunˇã_fûe
(
vnode_t
 *
fûe
)

558 
	`KASSERT
(
	`S_ISREG
(
fûe
->
vn_mode
) && "ThisÑoutine should only be called forÑegular files");

559 
fûe
->
vn_Àn
 = 0;

560 
s5_node_t
* 
s5_node
 = 
	`VNODE_TO_S5NODE
(
fûe
);

561 
s5_öode_t
* 
s5_öode
 = &
s5_node
->
öode
;

563 
s5_öode
->
s5_un
.
s5_size
 = 0;

564 
s5_node
->
dútõd_öode
 = 1;

567 
	`vlock
(
fûe
);

568 
	`s5_ªmove_blocks
(
s5_node
);

569 
	`vu∆ock
(
fûe
);

570 
	}
}

577 
ölöe
 
	$s5_gë_mëa_disk_block
(
s5fs_t
 *
s5fs
, 
uöt64_t
 
blocknum
, 
f‹wrôe
,

578 
p‰ame_t
 **
pÂ
)

580 
	`mobj_lock
(&
s5fs
->
s5f_mobj
);

581 
	`mobj_föd_p‰ame
(&
s5fs
->
s5f_mobj
, 
blocknum
, 
pÂ
);

582 i‡(*
pÂ
)

585 (*
pÂ
)->
pf_dúty
 |
f‹wrôe
;

586 
	`mobj_u∆ock
(&
s5fs
->
s5f_mobj
);

589 
	`mobj_¸óã_p‰ame
(&
s5fs
->
s5f_mobj
, 
blocknum
, blocknum, 
pÂ
);

590 
p‰ame_t
 *
pf
 = *
pÂ
;

591 
pf
->
pf_addr
 = 
	`∑ge_Æloc
();

592 
	`KASSERT
(
pf
->
pf_addr
);

594 
blockdev_t
 *
bd
 = 
s5fs
->
s5f_bdev
;

595 
ªt
 = 
bd
->
bd_›s
->
	`ªad_block
(bd, 
pf
->
pf_addr
, (
blocknum_t
Ìf->
pf_loc
, 1);

596 
pf
->
pf_dúty
 |
f‹wrôe
;

597 
	`KASSERT
 (!
ªt
);

598 
	`mobj_u∆ock
(&
s5fs
->
s5f_mobj
);

599 
	`KASSERT
(!
ªt
 && *
pÂ
);

600 
	}
}

607 
ölöe
 
	$s5_gë_fûe_disk_block
(
vnode_t
 *
vnode
, 
uöt64_t
 
blocknum
, uöt64_à
loc
, 
f‹wrôe
,

608 
p‰ame_t
 **
pÂ
)

610 
	`mobj_¸óã_p‰ame
(&
vnode
->
vn_mobj
, 
blocknum
, 
loc
, 
pÂ
);

611 
p‰ame_t
 *
pf
 = *
pÂ
;

612 
pf
->
pf_addr
 = 
	`∑ge_Æloc
();

613 
	`KASSERT
(
pf
->
pf_addr
);

614 
blockdev_t
 *
bd
 = 
	`VNODE_TO_S5FS
(
vnode
)->
s5f_bdev
;

615 
ªt
 = 
bd
->
bd_›s
->
	`ªad_block
(bd, 
pf
->
pf_addr
, (
blocknum_t
Ìf->
pf_loc
, 1);

616 
pf
->
pf_dúty
 |
f‹wrôe
;

617 
	`KASSERT
 (!
ªt
);

618 
	}
}

630 
ölöe
 
	$s5_ªÀa£_disk_block
(
p‰ame_t
 **
pÂ
Ë{ 
	`p‰ame_ªÀa£
’Â); 
	}
}

656 
	$s5fs_gë_p‰ame
(
vnode_t
 *
vnode
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

657 
p‰ame_t
 **
pÂ
)

659 i‡(
vnode
->
vn_Àn
 <
∑gíum
 * 
PAGE_SIZE
)

660  -
EINVAL
;

661 
	`mobj_föd_p‰ame
(&
vnode
->
vn_mobj
, 
∑gíum
, 
pÂ
);

662 i‡(*
pÂ
)

665 (*
pÂ
)->
pf_dúty
 |
f‹wrôe
;

668 
√w
;

669 
loc
 = 
	`s5_fûe_block_to_disk_block
(
	`VNODE_TO_S5NODE
(
vnode
), 
∑gíum
, 
f‹wrôe
, &
√w
);

670 i‡(
loc
 < 0)

671  
loc
;

672 i‡(
loc
) {

674 i‡(
√w
) {

676 *
pÂ
 = 
	`s5_ˇche_™d_˛ór_block
(&
vnode
->
vn_mobj
, 
∑gíum
, 
loc
);

679 
	`s5_gë_fûe_disk_block
(
vnode
, 
∑gíum
, 
loc
, 
f‹wrôe
, 
pÂ
);

686 
	`KASSERT
(!
f‹wrôe
);

687  
	`mobj_deÁu…_gë_p‰ame
(&
vnode
->
vn_mobj
, 
∑gíum
, 
f‹wrôe
, 
pÂ
);

689 
	}
}

696 
	$s5fs_fûl_p‰ame
(
vnode_t
 *
vnode
, 
p‰ame_t
 *
pf
)

698 
	`mem£t
(
pf
->
pf_addr
, 0, 
PAGE_SIZE
);

700 
	}
}

702 
	$s5fs_Êush_p‰ame
(
vnode_t
 *
vnode
, 
p‰ame_t
 *
pf
) {

703  
	`blockdev_Êush_p‰ame
(&
	`VNODE_TO_S5FS
(
vnode
)->
s5f_mobj
, 
pf
);

704 
	}
}

709 
	$s5_check_su≥r
(
s5_su≥r_t
 *
su≥r
)

711 i‡(!(
su≥r
->
s5s_magic
 =
S5_MAGIC
 &&

712 (
su≥r
->
s5s_‰ì_öode
 < su≥r->
s5s_num_öodes
 ||

713 
su≥r
->
s5s_‰ì_öode
 =(
uöt32_t
)-1) &&

714 
su≥r
->
s5s_roŸ_öode
 < su≥r->
s5s_num_öodes
))

718 i‡(
su≥r
->
s5s_vîsi⁄
 !
S5_CURRENT_VERSION
)

720 
	`dbg
(
DBG_PRINT
,

723 
su≥r
->
s5s_vîsi⁄
, 
S5_CURRENT_VERSION
);

727 
	}
}

732 
	$ˇlcuœã_ªfcou¡s
(*
cou¡s
, 
vnode_t
 *
vnode
)

734 
ªt
;

736 
size_t
 
pos
 = 0;

737 
dúít_t
 
dúít
;

738 
vnode_t
 *
chûd
;

740 (
ªt
 = 
	`s5fs_ªaddú
(
vnode
, 
pos
, &
dúít
)) > 0)

742 
cou¡s
[
dúít
.
d_öo
]++;

743 
	`dbg
(
DBG_S5FS
, "ö¸emítög cou¡ o‡öodê%dÅÿ%d\n", 
dúít
.
d_öo
,

744 
cou¡s
[
dúít
.
d_öo
]);

745 i‡(
cou¡s
[
dúít
.
d_öo
] == 1)

747 
chûd
 = 
	`vgë_locked
(
vnode
->
vn_fs
, 
dúít
.
d_öo
);

748 i‡(
	`S_ISDIR
(
chûd
->
vn_mode
))

750 
	`ˇlcuœã_ªfcou¡s
(
cou¡s
, 
chûd
);

752 
	`vput_locked
(&
chûd
);

754 
pos
 +
ªt
;

757 
	`KASSERT
(!
ªt
);

758 
	}
}

763 
	$s5fs_check_ªfcou¡s
(
fs_t
 *
fs
)

765 
s5fs_t
 *
s5fs
 = (s5fs_à*)
fs
->
fs_i
;

766 *
ªfcou¡s
;

767 
ªt
 = 0;

769 
ªfcou¡s
 = 
	`kmÆloc
(
s5fs
->
s5f_su≥r
.
s5s_num_öodes
 * ());

770 
	`KASSERT
(
ªfcou¡s
);

771 
	`mem£t
(
ªfcou¡s
, 0, 
s5fs
->
s5f_su≥r
.
s5s_num_öodes
 * ());

773 
	`vlock
(
fs
->
fs_roŸ
);

774 
ªfcou¡s
[
fs
->
fs_roŸ
->
vn_vno
]++;

775 
	`ˇlcuœã_ªfcou¡s
(
ªfcou¡s
, 
fs
->
fs_roŸ
);

776 
ªfcou¡s
[
fs
->
fs_roŸ
->
vn_vno
]--;

778 
	`vu∆ock
(
fs
->
fs_roŸ
);

780 
	`dbg
(
DBG_PRINT
,

783 
	`MAJOR
(
s5fs
->
s5f_bdev
->
bd_id
), 
	`MINOR
(s5fs->s5f_bdev->bd_id));

785 
uöt32_t
 
i
 = 0; i < 
s5fs
->
s5f_su≥r
.
s5s_num_öodes
; i++)

787 i‡(!
ªfcou¡s
[
i
])

792 
vnode_t
 *
vn
 = 
	`vgë
(
fs
, 
i
);

793 
	`KASSERT
(
vn
);

794 
s5_node_t
 *
¢
 = 
	`VNODE_TO_S5NODE
(
vn
);

796 i‡(
ªfcou¡s
[
i
] !
¢
->
öode
.
s5_lökcou¡
)

798 
	`dbg
(
DBG_PRINT
, " Inodê%d,Éx≥˘ög %d, found %d\n", 
i
,

799 
ªfcou¡s
[
i
], 
¢
->
öode
.
s5_lökcou¡
);

800 
ªt
 = -1;

802 
	`vput
(&
vn
);

805 
	`dbg
(
DBG_PRINT
,

808 
	`MAJOR
(
s5fs
->
s5f_bdev
->
bd_id
), 
	`MINOR
(s5fs->s5f_bdev->bd_id),

809 (
ªt
 ? "UNSUCCESSFULLY" : "successfully"));

811 
	`k‰ì
(
ªfcou¡s
);

812  
ªt
;

813 
	}
}

	@kernel/fs/s5fs/s5fs_subr.c

1 
	~"fs/s5fs/s5fs_subr.h
"

2 
	~"drivîs/blockdev.h
"

3 
	~"î∫o.h
"

4 
	~"fs/s5fs/s5fs.h
"

5 
	~"fs/°©.h
"

6 
	~"fs/vfs.h
"

7 
	~"fs/vnode.h
"

8 
	~"kî√l.h
"

9 
	~"mm/p‰ame.h
"

10 
	~"¥oc/kmuãx.h
"

11 
	~"utû/debug.h
"

12 
	~"utû/°rög.h
"

13 
	~<fs/s5fs/s5fs.h
>

15 
s5_‰ì_block
(
s5fs_t
 *
s5fs
, 
blocknum_t
 
block
);

17 
s5_Æloc_block
(
s5fs_t
 *
s5fs
);

19 
ölöe
 
	$s5_lock_su≥r
(
s5fs_t
 *
s5fs
)

21 
	`kmuãx_lock
(&
s5fs
->
s5f_muãx
);

22 
	}
}

24 
ölöe
 
	$s5_u∆ock_su≥r
(
s5fs_t
 *
s5fs
)

26 
	`kmuãx_u∆ock
(&
s5fs
->
s5f_muãx
);

27 
	}
}

41 
ölöe
 
	$s5_gë_öode
(
s5fs_t
 *
s5fs
, 
öo_t
 
öo
, 
f‹wrôe
,

42 
p‰ame_t
 **
pÂ
, 
s5_öode_t
 **
öodï
)

44 
	`s5_gë_mëa_disk_block
(
s5fs
, 
	`S5_INODE_BLOCK
(
öo
), 
f‹wrôe
, 
pÂ
);

45 *
öodï
 = (
s5_öode_t
 *)(*
pÂ
)->
pf_addr
 + 
	`S5_INODE_OFFSET
(
öo
);

46 
	`KASSERT
((*
öodï
)->
s5_numbî
 =
öo
);

47 
	}
}

58 
ölöe
 
	$s5_ªÀa£_öode
(
p‰ame_t
 **
pÂ
, 
s5_öode_t
 **
öodï
)

60 
	`KASSERT
((
s5_öode_t
 *)(*
pÂ
)->
pf_addr
 +

61 
	`S5_INODE_OFFSET
((*
öodï
)->
s5_numbî
) ==

62 *
öodï
);

63 *
öodï
 = 
NULL
;

64 
	`s5_ªÀa£_disk_block
(
pÂ
);

65 
	}
}

77 
ölöe
 
	$s5_gë_fûe_block
(
s5_node_t
 *
¢
, 
size_t
 
blocknum
,

78 
f‹wrôe
, 
p‰ame_t
 **
pÂ
)

80  
¢
->
vnode
.
vn_mobj
.
mo_›s
.
	`gë_p‰ame
(&¢->vnode.vn_mobj, 
blocknum
,

81 
f‹wrôe
, 
pÂ
);

82 
	}
}

89 
ölöe
 
	$s5_ªÀa£_fûe_block
(
p‰ame_t
 **
pÂ
)

91 
	`p‰ame_ªÀa£
(
pÂ
);

92 
	}
}

131 
	$s5_fûe_block_to_disk_block
(
s5_node_t
 *
¢
, 
size_t
 
fûe_blocknum
,

132 
Æloc
, *
√wp
)

134 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_file_block_to_disk_block");

136 
	}
}

149 
p‰ame_t
 *
	$s5_ˇche_™d_˛ór_block
(
mobj_t
 *
mo
, 
block
, 
loc
) {

150 
p‰ame_t
 *
pf
;

151 
	`mobj_¸óã_p‰ame
(
mo
, 
block
, 
loc
, &
pf
);

152 
pf
->
pf_addr
 = 
	`∑ge_Æloc
();

153 
	`KASSERT
(
pf
->
pf_addr
);

154 
	`mem£t
(
pf
->
pf_addr
, 0, 
PAGE_SIZE
);

155 
pf
->
pf_dúty
 = 1;

156  
pf
;

157 
	}
}

179 
ssize_t
 
	$s5_ªad_fûe
(
s5_node_t
 *
¢
, 
size_t
 
pos
, *
buf
, size_à
Àn
)

181 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_read_file");

183 
	}
}

215 
ssize_t
 
	$s5_wrôe_fûe
(
s5_node_t
 *
¢
, 
size_t
 
pos
, c⁄° *
buf
, size_à
Àn
)

217 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_write_file");

219 
	}
}

243 
	$s5_Æloc_block
(
s5fs_t
 *
s5fs
)

245 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_alloc_block");

247 
	}
}

258 
	$s5_‰ì_block
(
s5fs_t
 *
s5fs
, 
blocknum_t
 
blockno
)

260 
	`s5_lock_su≥r
(
s5fs
);

261 
s5_su≥r_t
 *
s
 = &
s5fs
->
s5f_su≥r
;

262 
	`dbg
(
DBG_S5FS
, "‰ìög disk block %d\n", 
blockno
);

263 
	`KASSERT
(
blockno
);

264 
	`KASSERT
(
s
->
s5s_n‰ì
 < 
S5_NBLKS_PER_FNODE
);

270 i‡(
s
->
s5s_n‰ì
 =
S5_NBLKS_PER_FNODE
 - 1)

274 
p‰ame_t
 *
pf
;

275 
	`s5_gë_mëa_disk_block
(
s5fs
, 
blockno
, 1, &
pf
);

276 
	`mem˝y
(
pf
->
pf_addr
, 
s
->
s5s_‰ì_blocks
, (s->s5s_free_blocks));

277 
	`s5_ªÀa£_disk_block
(&
pf
);

279 
s
->
s5s_n‰ì
 = 0;

280 
s
->
s5s_‰ì_blocks
[
S5_NBLKS_PER_FNODE
 - 1] = 
blockno
;

284 
s
->
s5s_‰ì_blocks
[s->
s5s_n‰ì
++] = 
blockno
;

287 
	`mobj_dñëe_p‰ame
(&
s5fs
->
s5f_mobj
, 
blockno
);

290 
	`s5_u∆ock_su≥r
(
s5fs
);

291 
	}
}

310 
	$s5_Æloc_öode
(
s5fs_t
 *
s5fs
, 
uöt16_t
 
ty≥
, 
devid_t
 
devid
)

312 
	`KASSERT
((
S5_TYPE_DATA
 =
ty≥
Ë|| (
S5_TYPE_DIR
 ==Åype) ||

313 (
S5_TYPE_CHR
 =
ty≥
Ë|| (
S5_TYPE_BLK
 ==Åype));

315 
	`s5_lock_su≥r
(
s5fs
);

316 
uöt32_t
 
√w_öo
 = 
s5fs
->
s5f_su≥r
.
s5s_‰ì_öode
;

317 i‡(
√w_öo
 =(
uöt32_t
)-1)

319 
	`s5_u∆ock_su≥r
(
s5fs
);

320  -
ENOSPC
;

323 
p‰ame_t
 *
pf
;

324 
s5_öode_t
 *
öode
;

325 
	`s5_gë_öode
(
s5fs
, 
√w_öo
, 1, &
pf
, &
öode
);

327 
s5fs
->
s5f_su≥r
.
s5s_‰ì_öode
 = 
öode
->
s5_un
.
s5_√xt_‰ì
;

328 
	`KASSERT
(
öode
->
s5_un
.
s5_√xt_‰ì
 !öode->
s5_numbî
);

330 
öode
->
s5_un
.
s5_size
 = 0;

331 
öode
->
s5_ty≥
 = 
ty≥
;

332 
öode
->
s5_lökcou¡
 = 0;

333 
	`mem£t
(
öode
->
s5_dúe˘_blocks
, 0, (inode->s5_direct_blocks));

334 
öode
->
s5_ödúe˘_block
 =

335 (
S5_TYPE_CHR
 =
ty≥
 || 
S5_TYPE_BLK
 =ty≥Ë? 
devid
 : 0;

337 
	`s5_ªÀa£_öode
(&
pf
, &
öode
);

338 
	`s5_u∆ock_su≥r
(
s5fs
);

340 
	`dbg
(
DBG_S5FS
, "Æloˇãd inodê%d\n", 
√w_öo
);

341  
√w_öo
;

342 
	}
}

363 
	$s5_‰ì_öode
(
s5fs_t
 *
s5fs
, 
öo_t
 
öo
)

365 
p‰ame_t
 *
pf
;

366 
s5_öode_t
 *
öode
;

367 
	`s5_lock_su≥r
(
s5fs
);

368 
	`s5_gë_öode
(
s5fs
, 
öo
, 1, &
pf
, &
öode
);

370 
uöt32_t
 
dúe˘_blocks_to_‰ì
[
S5_NDIRECT_BLOCKS
];

371 
uöt32_t
 
ödúe˘_block_to_‰ì
;

372 i‡(
öode
->
s5_ty≥
 =
S5_TYPE_DATA
 || inode->s5_ty≥ =
S5_TYPE_DIR
)

374 
ödúe˘_block_to_‰ì
 = 
öode
->
s5_ödúe˘_block
;

375 
	`mem˝y
(
dúe˘_blocks_to_‰ì
, 
öode
->
s5_dúe˘_blocks
,

376 (
dúe˘_blocks_to_‰ì
));

380 
	`KASSERT
(
öode
->
s5_ty≥
 =
S5_TYPE_BLK
 || inode->s5_ty≥ =
S5_TYPE_CHR
);

381 
ödúe˘_block_to_‰ì
 = 0;

382 
	`mem£t
(
dúe˘_blocks_to_‰ì
, 0, (direct_blocks_to_free));

385 
öode
->
s5_un
.
s5_√xt_‰ì
 = 
s5fs
->
s5f_su≥r
.
s5s_‰ì_öode
;

386 
öode
->
s5_ty≥
 = 
S5_TYPE_FREE
;

387 
s5fs
->
s5f_su≥r
.
s5s_‰ì_öode
 = 
öode
->
s5_numbî
;

389 
	`s5_ªÀa£_öode
(&
pf
, &
öode
);

390 
	`s5_u∆ock_su≥r
(
s5fs
);

392 
i
 = 0; i < 
S5_NDIRECT_BLOCKS
; i++)

394 i‡(
dúe˘_blocks_to_‰ì
[
i
])

396 
	`s5_‰ì_block
(
s5fs
, 
dúe˘_blocks_to_‰ì
[
i
]);

399 i‡(
ödúe˘_block_to_‰ì
)

401 
uöt32_t
 
ödúe˘_blocks_to_‰ì
[
S5_NIDIRECT_BLOCKS
];

403 
	`s5_gë_mëa_disk_block
(
s5fs
, 
ödúe˘_block_to_‰ì
, 0, &
pf
);

404 
	`KASSERT
(
S5_BLOCK_SIZE
 =
PAGE_SIZE
);

405 
	`mem˝y
(
ödúe˘_blocks_to_‰ì
, 
pf
->
pf_addr
, 
S5_BLOCK_SIZE
);

406 
	`s5_ªÀa£_disk_block
(&
pf
);

408 
i
 = 0; i < 
S5_NIDIRECT_BLOCKS
; i++)

410 i‡(
ödúe˘_blocks_to_‰ì
[
i
])

412 
	`s5_‰ì_block
(
s5fs
, 
ödúe˘_blocks_to_‰ì
[
i
]);

415 
	`s5_‰ì_block
(
s5fs
, 
ödúe˘_block_to_‰ì
);

417 
	`dbg
(
DBG_S5FS
, "‰ìd inodê%d\n", 
öo
);

418 
	}
}

442 
	$s5_föd_dúít
(
s5_node_t
 *
¢
, c⁄° *
«me
, 
size_t
 
«mñí
,

443 
size_t
 *
fûïos
)

445 
	`KASSERT
(
	`S_ISDIR
(
¢
->
vnode
.
vn_mode
) && "should be handledátÅhe VFSÜevel");

446 
	`KASSERT
(
S5_BLOCK_SIZE
 =
PAGE_SIZE
 && "be wary,Åhee");

447 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

449 
	}
}

474 
	$s5_ªmove_dúít
(
s5_node_t
 *
¢
, c⁄° *
«me
, 
size_t
 
«mñí
,

475 
s5_node_t
 *
chûd
)

477 
vnode_t
 *
dú
 = &
¢
->
vnode
;

478 
s5_öode_t
 *
öode
 = &
¢
->inode;

479 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_remove_dirent");

480 
	}
}

504 
	$s5_ª∂a˚_dúít
(
s5_node_t
 *
¢
, c⁄° *
«me
, 
size_t
 
«mñí
,

505 
s5_node_t
 *
ﬁd
, s5_node_à*
√w
)

507 
vnode_t
 *
dú
 = &
¢
->
vnode
;

508 
s5_öode_t
 *
öode
 = &
¢
->inode;

509 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_replace_dirent");

510 
	}
}

528 
	$s5_lök
(
s5_node_t
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

529 
s5_node_t
 *
chûd
)

531 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
dú
->
vnode
.
vn_mobj
.
mo_muãx
));

533 
	`NOT_YET_IMPLEMENTED
("S5FS: KASSERT");

535 
	}
}

547 
	$s5_öode_blocks
(
s5_node_t
 *
¢
)

549 
	`NOT_YET_IMPLEMENTED
("S5FS: s5_inode_blocks");

551 
	}
}

559 
	$s5_ªmove_blocks
(
s5_node_t
 *
¢
)

563 
s5fs_t
* 
s5fs
 = 
	`VNODE_TO_S5FS
(&
¢
->
vnode
);

564 
s5_öode_t
* 
s5_öode
 = &
¢
->
öode
;

565 
mobj_t
 *
o
 = &
¢
->
vnode
.
vn_mobj
;

566 
i
 = 0; i < 
S5_NDIRECT_BLOCKS
; i++)

568 i‡(
s5_öode
->
s5_dúe˘_blocks
[
i
])

570 
	`s5_‰ì_block
(
s5fs
, 
s5_öode
->
s5_dúe˘_blocks
[
i
]);

571 
	`mobj_dñëe_p‰ame
(
o
, 
i
);

578 
	`mem£t
(
s5_öode
->
s5_dúe˘_blocks
, 0, (s5_inode->s5_direct_blocks));

581 i‡(
s5_öode
->
s5_ödúe˘_block
)

583 
p‰ame_t
 *
pf
;

584 
	`s5_gë_mëa_disk_block
(
s5fs
, 
s5_öode
->
s5_ödúe˘_block
, 0, &
pf
);

585 
uöt32_t
 *
blocknum_±r
 = 
pf
->
pf_addr
;

587 
i
 = 0; i < 
S5_NIDIRECT_BLOCKS
; i++)

589 i‡(
blocknum_±r
[
i
])

591 
	`s5_‰ì_block
(
s5fs
, 
blocknum_±r
[
i
]);

592 
	`mobj_dñëe_p‰ame
(
o
, 
S5_NDIRECT_BLOCKS
 + 
i
);

596 
	`s5_ªÀa£_disk_block
(&
pf
);

598 
	`s5_‰ì_block
(
s5fs
, 
s5_öode
->
s5_ödúe˘_block
);

599 
s5_öode
->
s5_ödúe˘_block
 = 0;

601 
	}
}

	@kernel/fs/vfs.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"kî√l.h
"

4 
	~"utû/°rög.h
"

5 
	~<fs/s5fs/s5fs.h
>

6 
	~<fs/vnode.h
>

8 
	~"fs/fûe.h
"

9 
	~"fs/ømfs/ømfs.h
"

11 
	~"mm/kmÆloc.h
"

12 
	~"mm/¶ab.h
"

13 
	~"utû/debug.h
"

15 #ifde‡
__S5FS__


16 
	~"fs/s5fs/s5fs.h
"

19 #ifde‡
__MOUNTING__


21 
li°_t
 
	gmou¡ed_fs_li°
;

43 
	$vfs_mou¡
(
vnode
 *
mçt
, 
fs_t
 *
fs
)

45 
	`NOT_YET_IMPLEMENTED
("MOUNTING: vfs_mount");

46  -
EINVAL
;

47 
	}
}

62 
	$vfs_umou¡
(
fs_t
 *
fs
)

64 
	`NOT_YET_IMPLEMENTED
("MOUNTING: vfs_umount");

65  -
EINVAL
;

66 
	}
}

69 
fs_t
 
	gvfs_roŸ_fs
 = {

70 .
fs_dev
 = 
VFS_ROOTFS_DEV
,

71 .
	gfs_ty≥
 = 
VFS_ROOTFS_TYPE
,

72 .
	gvnode_li°
 = 
LIST_INITIALIZER
(
vfs_roŸ_fs
.
vnode_li°
),

73 .
	gvnode_li°_muãx
 = 
KMUTEX_INITIALIZER
(
vfs_roŸ_fs
.
vnode_li°_muãx
),

74 .
	gfs_vnode_Æloˇt‹
 = 
NULL
,

75 .
	gfs_i
 = 
NULL
,

76 .
	gfs_›s
 = 
NULL
,

77 .
	gfs_roŸ
 = 
NULL
,

83 
	$vfs_öô
()

85 
îr
 = 
	`mou¡func
(&
vfs_roŸ_fs
);

86 i‡(
îr
)

88 
	`∑nic
(

91 
vfs_roŸ_fs
.
fs_ty≥
, vfs_roŸ_fs.
fs_dev
, -
îr
);

94 
	`vlock
(
vfs_roŸ_fs
.
fs_roŸ
);

95 
	`vªf
(
cuΩroc
->
p_cwd
 = 
vfs_roŸ_fs
.
fs_roŸ
);

96 
	`vu∆ock
(
vfs_roŸ_fs
.
fs_roŸ
);

98 #ifde‡
__MOUNTING__


99 
	`li°_öô
(&
mou¡ed_fs_li°
);

100 
fs
->
fs_mçt
 = 
vfs_roŸ_fs
.
fs_roŸ
;

102 
	}
}

107 
	$do_sync
()

109 
vfs_roŸ_fs
.
fs_›s
->
	`sync
(&vfs_root_fs);

110 #ifde‡
__MOUNTING__


113 
	}
}

118 
	$vfs_shutdown
()

120 
	`dbg
(
DBG_VFS
, "shutting down vfs\n");

121 
ªt
 = 0;

123 #ifde‡
__MOUNTING__


124 
	`li°_ôî©e
(&
mou¡ed_fs_li°
, 
mtfs
, 
fs_t
, 
fs_lök
)

126 
ªt
 = 
	`vfs_umou¡
(
mtfs
);

127 
	`KASSERT
(!
ªt
);

131 i‡(
	`vfs_is_ö_u£
(&
vfs_roŸ_fs
))

133 
	`∑nic
("vfs_shutdown: foundáctive vnodes inÑoot filesystem");

136 i‡(
vfs_roŸ_fs
.
fs_›s
->
umou¡
)

138 
ªt
 = 
vfs_roŸ_fs
.
fs_›s
->
	`umou¡
(&vfs_root_fs);

143 
	`vput
(&
vfs_roŸ_fs
.
fs_roŸ
);

146 i‡(
	`vfs_cou¡_a˘ive_vnodes
(&
vfs_roŸ_fs
))

148 
	`∑nic
(

152  
ªt
;

153 
	}
}

155 
	$mou¡func
(
fs_t
 *
fs
)

159 *
f°y≥
;

161 (*
mou¡func
)(
fs_t
 *);

162 } 
ty≥s
[] = {

163 #ifde‡
__S5FS__


164 {"s5fs", 
s5fs_mou¡
},

166 {"ømfs", 
ømfs_mou¡
},

169 
i
 = 0; i < (
ty≥s
) / (types[0]); i++)

171 i‡(
	`°rcmp
(
fs
->
fs_ty≥
, 
ty≥s
[
i
].
f°y≥
) == 0)

173  
ty≥s
[
i
].
	`mou¡func
(
fs
);

177  -
EINVAL
;

178 
	}
}

187 
	$vfs_is_ö_u£
(
fs_t
 *
fs
)

189 
ªt
 = 0;

191 
	`li°_ôî©e
(&
fs
->
vnode_li°
, 
vn
, 
vnode_t
, 
vn_lök
)

193 
	`vlock
(
vn
);

194 
size_t
 
ex≥˘ed_ªfcou¡
 = 
vn
->
vn_fs
->
fs_roŸ
 == vn ? 1 : 0;

195 
size_t
 
ªfcou¡
 = 
vn
->
vn_mobj
.
mo_ªfcou¡
;

196 
	`vu∆ock
(
vn
);

197 i‡(
ªfcou¡
 !
ex≥˘ed_ªfcou¡
)

199 
	`dbg
(
DBG_VFS
,

202 
vn
->
vn_vno
, vn->
vn_mobj
.
mo_ªfcou¡
, 
ªfcou¡
,

203 
ex≥˘ed_ªfcou¡
);

204 
ªt
 = -
EBUSY
;

209  
ªt
;

210 
	}
}

215 
size_t
 
	$vfs_cou¡_a˘ive_vnodes
(
fs_t
 *
fs
)

217 
size_t
 
cou¡
 = 0;

218 
	`kmuãx_lock
(&
fs
->
vnode_li°_muãx
);

219 
	`li°_ôî©e
(&
fs
->
vnode_li°
, 
vn
, 
vnode_t
, 
vn_lök
Ë{ 
cou¡
++; }

220 
	`kmuãx_u∆ock
(&
fs
->
vnode_li°_muãx
);

221  
cou¡
;

222 
	}
}

	@kernel/fs/vfs_syscall.c

1 
	~"fs/vfs_sysˇŒ.h
"

2 
	~"î∫o.h
"

3 
	~"fs/f˙é.h
"

4 
	~"fs/fûe.h
"

5 
	~"fs/l£ek.h
"

6 
	~"fs/vfs.h
"

7 
	~"fs/vnode.h
"

8 
	~"globÆs.h
"

9 
	~"kî√l.h
"

10 
	~"utû/debug.h
"

11 
	~"utû/°rög.h
"

12 
	~<limôs.h
>

27 
ssize_t
 
	$do_ªad
(
fd
, *
buf
, 
size_t
 
Àn
)

29 
	`NOT_YET_IMPLEMENTED
("VFS: do_read");

31 
	}
}

47 
ssize_t
 
	$do_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
)

49 
	`NOT_YET_IMPLEMENTED
("VFS: do_write");

51 
	}
}

64 
	$do_˛o£
(
fd
)

66 
	`NOT_YET_IMPLEMENTED
("VFS: do_close");

68 
	}
}

79 
	$do_dup
(
fd
)

81 
	`NOT_YET_IMPLEMENTED
("VFS: do_dup");

83 
	}
}

95 
	$do_dup2
(
ofd
, 
nfd
)

97 
	`NOT_YET_IMPLEMENTED
("VFS: do_dup2");

99 
	}
}

118 
	$do_mknod
(c⁄° *
∑th
, 
mode
, 
devid_t
 
devid
)

120 
	`NOT_YET_IMPLEMENTED
("VFS: do_mknod");

122 
	}
}

144 
	$do_mkdú
(c⁄° *
∑th
)

146 
	`NOT_YET_IMPLEMENTED
("VFS: do_mkdir");

148 
	}
}

166 
	$do_rmdú
(c⁄° *
∑th
)

168 
	`NOT_YET_IMPLEMENTED
("VFS: do_rmdir");

170 
	}
}

184 
	$do_u∆ök
(c⁄° *
∑th
)

186 
	`NOT_YET_IMPLEMENTED
("VFS: do_unlink");

188 
	}
}

207 
	$do_lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
)

209 
	`NOT_YET_IMPLEMENTED
("VFS: do_link");

211 
	}
}

245 
	$do_ª«me
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
)

247 
	`NOT_YET_IMPLEMENTED
("VFS: do_rename");

249 
	}
}

263 
	$do_chdú
(c⁄° *
∑th
)

265 
	`NOT_YET_IMPLEMENTED
("VFS: do_chdir");

267 
	}
}

283 
ssize_t
 
	$do_gëdít
(
fd
, 
dúít
 *
dúp
)

285 
	`NOT_YET_IMPLEMENTED
("VFS: do_getdent");

287 
	}
}

302 
off_t
 
	$do_l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
)

304 
	`NOT_YET_IMPLEMENTED
("VFS: do_lseek");

306 
	}
}

313 
	$do_°©
(c⁄° *
∑th
, 
°©_t
 *
buf
)

315 
	`NOT_YET_IMPLEMENTED
("VFS: do_stat");

317 
	}
}

319 #ifde‡
__MOUNTING__


336 
	$do_mou¡
(c⁄° *
sour˚
, c⁄° *
èrgë
, c⁄° *
ty≥
)

338 
	`NOT_YET_IMPLEMENTED
("MOUNTING: do_mount");

339  -
EINVAL
;

340 
	}
}

351 
	$do_umou¡
(c⁄° *
èrgë
)

353 
	`NOT_YET_IMPLEMENTED
("MOUNTING: do_umount");

354  -
EINVAL
;

355 
	}
}

	@kernel/fs/vnode.c

1 
	~"fs/vnode.h
"

2 
	~"î∫o.h
"

3 
	~"fs/°©.h
"

4 
	~"fs/vfs.h
"

5 
	~"kî√l.h
"

6 
	~"mm/¶ab.h
"

7 
	~"utû/debug.h
"

8 
	~"utû/°rög.h
"

9 
	~<fs/vnode_•ecüls.h
>

11 
	#MOBJ_TO_VNODE
(
o
Ë
	`CONTAINER_OF
((o), 
vnode_t
, 
vn_mobj
)

	)

13 
vnode_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

14 
p‰ame_t
 **
pÂ
);

15 
vnode_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

16 
vnode_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

17 
vnode_de°ru˘‹
(
mobj_t
 *
o
);

19 
mobj_›s_t
 
	gvnode_mobj_›s
 = {.
gë_p‰ame
 = 
vnode_gë_p‰ame
,

20 .
	gfûl_p‰ame
 = 
vnode_fûl_p‰ame
,

21 .
	gÊush_p‰ame
 = 
vnode_Êush_p‰ame
,

22 .
	gde°ru˘‹
 = 
vnode_de°ru˘‹
};

32 
	$vlock_ö_‹dî
(
vnode_t
 *
a
, vnode_à*
b
)

35 
	`KASSERT
(
a
->
vn_fs
 =
b
->vn_fs);

37 i‡(
a
->
vn_vno
 =
b
->vn_vno)

39 
	`vlock
(
a
);

44 i‡(
	`S_ISDIR
(
a
->
vn_mode
Ë&& S_ISDIR(
b
->vn_mode))

46 i‡(
	`«mev_is_des˚nd™t
(
a
, 
b
))

48 
	`vlock
(
b
);

49 
	`vlock
(
a
);

52 i‡(
	`«mev_is_des˚nd™t
(
b
, 
a
))

54 
	`vlock
(
a
);

55 
	`vlock
(
b
);

59 i‡(
	`S_ISDIR
(
a
->
vn_mode
))

61 
	`vlock
(
a
);

62 
	`vlock
(
b
);

64 i‡(
	`S_ISDIR
(
b
->
vn_mode
))

66 
	`vlock
(
b
);

67 
	`vlock
(
a
);

69 i‡(
a
->
vn_vno
 < 
b
->vn_vno)

71 
	`vlock
(
a
);

72 
	`vlock
(
b
);

76 
	`vlock
(
b
);

77 
	`vlock
(
a
);

79 
	}
}

81 
	$vu∆ock_ö_‹dî
(
vnode_t
 *
a
, vnode_à*
b
)

83 i‡(
a
->
vn_vno
 =
b
->vn_vno)

85 
	`vu∆ock
(
a
);

89 
	`vu∆ock
(
a
);

90 
	`vu∆ock
(
b
);

91 
	}
}

93 
	$awaô_vnode_lﬂded
(
vnode_t
 *
vnode
)

96 
vnode
->
vn_°©e
 !
VNODE_LOADED
)

98 
	`sched_¶ìp_⁄
(&
vnode
->
vn_waôq
);

100 
	`KASSERT
(
vnode
->
vn_°©e
 =
VNODE_LOADED
);

101 
	}
}

103 
	$nŸify_vnode_lﬂded
(
vnode_t
 *
vn
)

106 
vn
->
vn_°©e
 = 
VNODE_LOADED
;

107 
	`sched_brﬂdˇ°_⁄
(&
vn
->
vn_waôq
);

108 
	}
}

110 
	$vnode_öô
(
vnode_t
 *
vn
, 
fs_t
 *
fs
, 
öo_t
 
öo
, 
°©e
)

112 
vn
->
vn_°©e
 = 
VNODE_LOADING
;

113 
vn
->
vn_fs
 = 
fs
;

114 
vn
->
vn_vno
 = 
öo
;

115 
	`sched_queue_öô
(&
vn
->
vn_waôq
);

116 
	`mobj_öô
(&
vn
->
vn_mobj
, 
MOBJ_VNODE
, &
vnode_mobj_›s
);

117 
	`KASSERT
(
vn
->
vn_mobj
.
mo_ªfcou¡
);

118 
	}
}

120 
vnode_t
 *
	$__vgë
(
fs_t
 *
fs
, 
öo_t
 
öo
, 
gë_locked
)

122 
föd
:

123 
	`kmuãx_lock
(&
fs
->
vnode_li°_muãx
);

124 
	`li°_ôî©e
(&
fs
->
vnode_li°
, 
vn
, 
vnode_t
, 
vn_lök
)

126 i‡(
vn
->
vn_vno
 =
öo
)

128 i‡(
	`©omic_öc_nŸ_zîo
(&
vn
->
vn_mobj
.
mo_ªfcou¡
))

131 
	`kmuãx_u∆ock
(&
fs
->
vnode_li°_muãx
);

132 
	`awaô_vnode_lﬂded
(
vn
);

133 i‡(
gë_locked
)

135 
	`vlock
(
vn
);

137  
vn
;

142 
	`kmuãx_u∆ock
(&
fs
->
vnode_li°_muãx
);

143 
	`sched_yõld
();

144 
föd
;

150 
	`dbg
(
DBG_VFS
, "¸ótög vnodê%d\n", 
öo
);

151 
vnode_t
 *
vn
 = 
	`¶ab_obj_Æloc
(
fs
->
fs_vnode_Æloˇt‹
);

152 
	`KASSERT
(
vn
);

153 
	`mem£t
(
vn
, 0, (
vnode_t
));

156 
	`vnode_öô
(
vn
, 
fs
, 
öo
, 
VNODE_LOADING
);

160 
	`li°_ö£π_èû
(&
fs
->
vnode_li°
, &
vn
->
vn_lök
);

161 
	`vlock
(
vn
);

162 
	`kmuãx_u∆ock
(&
fs
->
vnode_li°_muãx
);

165 
vn
->
vn_fs
->
fs_›s
->
	`ªad_vnode
(vn->vn_fs, vn);

166 i‡(
	`S_ISCHR
(
vn
->
vn_mode
Ë|| 
	`S_ISBLK
(vn->vn_mode))

168 
	`öô_•ecül_vnode
(
vn
);

172 
	`nŸify_vnode_lﬂded
(
vn
);

173 i‡(!
gë_locked
)

175 
	`vu∆ock
(
vn
);

177  
vn
;

178 
	}
}

180 
ölöe
 
vnode_t
 *
	$vgë
(
fs_t
 *
fs
, 
öo_t
 
öo
Ë{  
	`__vgë
(fs, ino, 0); 
	}
}

182 
ölöe
 
vnode_t
 *
	$vgë_locked
(
fs_t
 *
fs
, 
öo_t
 
öo
Ë{  
	`__vgë
(fs, ino, 1); 
	}
}

184 
ölöe
 
	$vªf
(
vnode_t
 *
vn
Ë{ 
	`mobj_ªf
(&vn->
vn_mobj
); 
	}
}

186 
ölöe
 
	$vlock
(
vnode_t
 *
vn
Ë{ 
	`mobj_lock
(&vn->
vn_mobj
); 
	}
}

188 
ölöe
 
	$vu∆ock
(
vnode_t
 *
vn
Ë{ 
	`mobj_u∆ock
(&vn->
vn_mobj
); 
	}
}

190 
ölöe
 
	$vput
(
vnode
 **
v≈
)

192 
vnode_t
 *
vn
 = *
v≈
;

193 *
v≈
 = 
NULL
;

194 
mobj_t
 *
mobj
 = &
vn
->
vn_mobj
;

195 
	`mobj_put
(&
mobj
);

196 
	}
}

198 
ölöe
 
	$vput_locked
(
vnode
 **
v≈
)

200 
	`vu∆ock
(*
v≈
);

201 
	`vput
(
v≈
);

202 
	}
}

204 
	$vnode_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

205 
p‰ame_t
 **
pÂ
)

207 
vnode_t
 *
vnode
 = 
	`MOBJ_TO_VNODE
(
o
);

208 
	`KASSERT
(
vnode
->
vn_›s
->
gë_p‰ame
);

209  
vnode
->
vn_›s
->
	`gë_p‰ame
(vnode, 
∑gíum
, 
f‹wrôe
, 
pÂ
);

210 
	}
}

212 
	$vnode_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

214 
vnode_t
 *
vnode
 = 
	`MOBJ_TO_VNODE
(
o
);

215 
	`KASSERT
(
vnode
->
vn_›s
->
fûl_p‰ame
);

216  
vnode
->
vn_›s
->
	`fûl_p‰ame
(vnode, 
pf
);

217 
	}
}

219 
	$vnode_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

221 
vnode_t
 *
vnode
 = 
	`MOBJ_TO_VNODE
(
o
);

222 
	`KASSERT
(
vnode
->
vn_›s
->
Êush_p‰ame
);

223  
vnode
->
vn_›s
->
	`Êush_p‰ame
(vnode, 
pf
);

224 
	}
}

226 
	$vnode_de°ru˘‹
(
mobj_t
 *
o
)

228 
vnode_t
 *
vn
 = 
	`MOBJ_TO_VNODE
(
o
);

229 
	`dbg
(
DBG_VFS
, "de°royög vnodê%d\n", 
vn
->
vn_vno
);

232 
	`KASSERT
(!
o
->
mo_ªfcou¡
);

233 
	`vlock
(
vn
);

234 
	`KASSERT
(!
o
->
mo_ªfcou¡
);

235 
	`KASSERT
(!
	`kmuãx_has_waôîs
(&
o
->
mo_muãx
));

236 
	`mobj_Êush
(
o
);

237 i‡(
vn
->
vn_fs
->
fs_›s
->
dñëe_vnode
)

239 
vn
->
vn_fs
->
fs_›s
->
	`dñëe_vnode
(vn->vn_fs, vn);

241 
	`KASSERT
(!
	`kmuãx_has_waôîs
(&
o
->
mo_muãx
));

242 
	`vu∆ock
(
vn
);

245 
	`kmuãx_lock
(&
vn
->
vn_fs
->
vnode_li°_muãx
);

246 
	`KASSERT
(
	`li°_lök_is_löked
(&
vn
->
vn_lök
));

247 
	`li°_ªmove
(&
vn
->
vn_lök
);

248 
	`kmuãx_u∆ock
(&
vn
->
vn_fs
->
vnode_li°_muãx
);

249 
	`¶ab_obj_‰ì
(
vn
->
vn_fs
->
fs_vnode_Æloˇt‹
, vn);

250 
	}
}

	@kernel/fs/vnode_specials.c

1 
	~<î∫o.h
>

2 
	~<fs/°©.h
>

3 
	~<fs/vfs.h
>

4 
	~<fs/vnode.h
>

5 
	~<utû/debug.h
>

7 
•ecül_fûe_°©
(
vnode_t
 *
fûe
, 
°©_t
 *
ss
);

9 
ssize_t
 
ch¨dev_fûe_ªad
(
vnode_t
 *
fûe
, 
size_t
 
pos
, *
buf
,

10 
size_t
 
cou¡
);

12 
ssize_t
 
ch¨dev_fûe_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
pos
, c⁄° *
buf
,

13 
size_t
 
cou¡
);

15 
ch¨dev_fûe_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
);

17 
ch¨dev_fûe_fûl_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
);

19 
ch¨dev_fûe_Êush_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
);

21 
vnode_›s_t
 
	gch¨dev_•ec_v›s
 = {

22 .
ªad
 = 
ch¨dev_fûe_ªad
,

23 .
	gwrôe
 = 
ch¨dev_fûe_wrôe
,

24 .
	gmm≠
 = 
ch¨dev_fûe_mm≠
,

25 .
	gmknod
 = 
NULL
,

26 .
	glookup
 = 
NULL
,

27 .
	glök
 = 
NULL
,

28 .
	gu∆ök
 = 
NULL
,

29 .
	gmkdú
 = 
NULL
,

30 .
	grmdú
 = 
NULL
,

31 .
	gªaddú
 = 
NULL
,

32 .
	g°©
 = 
•ecül_fûe_°©
,

33 .
	ggë_p‰ame
 = 
NULL
,

34 .
	gfûl_p‰ame
 = 
ch¨dev_fûe_fûl_p‰ame
,

35 .
	gÊush_p‰ame
 = 
ch¨dev_fûe_Êush_p‰ame
,

38 
ssize_t
 
blockdev_fûe_ªad
(
vnode_t
 *
fûe
, 
size_t
 
pos
, *
buf
,

39 
size_t
 
cou¡
);

41 
ssize_t
 
blockdev_fûe_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
pos
, c⁄° *
buf
,

42 
size_t
 
cou¡
);

44 
blockdev_fûe_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
);

46 
blockdev_fûe_fûl_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
);

48 
blockdev_fûe_Êush_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
);

50 
vnode_›s_t
 
	gblockdev_•ec_v›s
 = {

51 .
ªad
 = 
blockdev_fûe_ªad
,

52 .
	gwrôe
 = 
blockdev_fûe_wrôe
,

53 .
	gmm≠
 = 
blockdev_fûe_mm≠
,

54 .
	gmknod
 = 
NULL
,

55 .
	glookup
 = 
NULL
,

56 .
	glök
 = 
NULL
,

57 .
	gu∆ök
 = 
NULL
,

58 .
	gmkdú
 = 
NULL
,

59 .
	grmdú
 = 
NULL
,

60 .
	gªaddú
 = 
NULL
,

61 .
	g°©
 = 
•ecül_fûe_°©
,

62 .
	ggë_p‰ame
 = 
NULL
,

63 .
	gfûl_p‰ame
 = 
blockdev_fûe_fûl_p‰ame
,

64 .
	gÊush_p‰ame
 = 
blockdev_fûe_Êush_p‰ame
,

67 
	$öô_•ecül_vnode
(
vnode_t
 *
vn
)

69 i‡(
	`S_ISCHR
(
vn
->
vn_mode
))

71 
vn
->
vn_›s
 = &
ch¨dev_•ec_v›s
;

72 
vn
->
vn_dev
.
ch¨dev
 = 
	`ch¨dev_lookup
(vn->
vn_devid
);

76 
	`KASSERT
(
	`S_ISBLK
(
vn
->
vn_mode
));

77 
vn
->
vn_›s
 = &
blockdev_•ec_v›s
;

78 
vn
->
vn_dev
.
blockdev
 = 
	`blockdev_lookup
(vn->
vn_devid
);

80 
	}
}

82 
	$•ecül_fûe_°©
(
vnode_t
 *
fûe
, 
°©_t
 *
ss
)

84 
	`KASSERT
(
fûe
->
vn_fs
->
fs_roŸ
->
vn_›s
->
°©
 !
NULL
);

86  
fûe
->
vn_fs
->
fs_roŸ
->
vn_›s
->
	`°©
(fûe, 
ss
);

87 
	}
}

110 
ssize_t
 
	$ch¨dev_fûe_ªad
(
vnode_t
 *
fûe
, 
size_t
 
pos
, *
buf
,

111 
size_t
 
cou¡
)

113 
	`NOT_YET_IMPLEMENTED
("VFS: chardev_file_read");

115 
	}
}

125 
	$ch¨dev_fûe_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
pos
, c⁄° *
buf
,

126 
size_t
 
cou¡
)

128 
	`NOT_YET_IMPLEMENTED
("VFS: chardev_file_write");

130 
	}
}

136 
	$ch¨dev_fûe_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
)

138 
	`NOT_YET_IMPLEMENTED
("VM: chardev_file_mmap");

140 
	}
}

142 
	$ch¨dev_fûe_fûl_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
)

144 
	`NOT_YET_IMPLEMENTED
("VM: chardev_file_fill_pframe");

146 
	}
}

148 
	$ch¨dev_fûe_Êush_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
)

150 
	`NOT_YET_IMPLEMENTED
("VM: chardev_file_flush_pframe");

152 
	}
}

154 
ssize_t
 
	$blockdev_fûe_ªad
(
vnode_t
 *
fûe
, 
size_t
 
pos
, *
buf
,

155 
size_t
 
cou¡
)

157  -
ENOTSUP
;

158 
	}
}

160 
	$blockdev_fûe_wrôe
(
vnode_t
 *
fûe
, 
size_t
 
pos
, c⁄° *
buf
,

161 
size_t
 
cou¡
)

163  -
ENOTSUP
;

164 
	}
}

166 
	$blockdev_fûe_mm≠
(
vnode_t
 *
fûe
, 
mobj_t
 **
ªt
Ë{  -
ENOTSUP
; 
	}
}

168 
	$blockdev_fûe_fûl_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
)

170  -
ENOTSUP
;

171 
	}
}

173 
	$blockdev_fûe_Êush_p‰ame
(
vnode_t
 *
fûe
, 
p‰ame_t
 *
pf
)

175  -
ENOTSUP
;

176 
	}
}

	@kernel/include/api/access.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	g¥oc
;

6 
	g¨g°r
;

7 
	g¨gvec
;

9 
c›y_‰om_u£r
(*
kaddr
, c⁄° *
uaddr
, 
size_t
 
nbyãs
);

11 
c›y_to_u£r
(*
uaddr
, c⁄° *
kaddr
, 
size_t
 
nbyãs
);

13 
u£r_°rdup
(
¨g°r
 *
u°r
, **
k°Ω
);

15 
u£r_vecdup
(
¨gvec
 *
uvec
, ***
kve˝
);

17 
ønge_≥rm
(
¥oc
 *
p
, c⁄° *
vaddr
, 
size_t
 
Àn
, 
≥rm
);

19 
addr_≥rm
(
¥oc
 *
p
, c⁄° *
vaddr
, 
≥rm
);

	@kernel/include/api/binfmt.h

1 #¥agm®
⁄˚


3 
	~"fs/vnode.h
"

5 (*
	tböfmt_lﬂd_func_t
)(c⁄° *
	tfûíame
, 
	tfd
,

6 *c⁄° *
	t¨gv
, *c⁄° *
	tívp
,

7 
	tuöt64_t
 *
	trù
, uöt64_à*
	tr•
);

9 
	`böfmt_add
(c⁄° *
id
, 
böfmt_lﬂd_func_t
 
lﬂdfunc
);

11 
	`böfmt_lﬂd
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
,

12 
uöt64_t
 *
rù
, uöt64_à*
r•
);

	@kernel/include/api/elf.h

20 #¥agm®
⁄˚


26 #ifde‡
__KERNEL__


27 
	~"ty≥s.h
"

30 
	~<sys/ty≥s.h
>

35 
uöt16_t
 
	tElf32_HÆf
;

36 
uöt16_t
 
	tElf64_HÆf
;

39 
uöt32_t
 
	tElf32_W‹d
;

40 
öt32_t
 
	tElf32_Sw‹d
;

41 
uöt32_t
 
	tElf64_W‹d
;

42 
öt32_t
 
	tElf64_Sw‹d
;

45 
uöt64_t
 
	tElf32_Xw‹d
;

46 
öt64_t
 
	tElf32_Sxw‹d
;

47 
uöt64_t
 
	tElf64_Xw‹d
;

48 
öt64_t
 
	tElf64_Sxw‹d
;

51 
uöt32_t
 
	tElf32_Addr
;

52 
uöt64_t
 
	tElf64_Addr
;

55 
uöt32_t
 
	tElf32_Off
;

56 
uöt64_t
 
	tElf64_Off
;

59 
uöt16_t
 
	tElf32_Se˘i⁄
;

60 
uöt16_t
 
	tElf64_Se˘i⁄
;

63 
Elf32_HÆf
 
	tElf32_Vîsym
;

64 
Elf64_HÆf
 
	tElf64_Vîsym
;

68 
	#EI_NIDENT
 (16)

	)

72 
	me_idít
[
EI_NIDENT
];

73 
Elf32_HÆf
 
	me_ty≥
;

74 
Elf32_HÆf
 
	me_machöe
;

75 
Elf32_W‹d
 
	me_vîsi⁄
;

76 
Elf32_Addr
 
	me_íåy
;

77 
Elf32_Off
 
	me_phoff
;

78 
Elf32_Off
 
	me_shoff
;

79 
Elf32_W‹d
 
	me_Êags
;

80 
Elf32_HÆf
 
	me_ehsize
;

81 
Elf32_HÆf
 
	me_phítsize
;

82 
Elf32_HÆf
 
	me_phnum
;

83 
Elf32_HÆf
 
	me_shítsize
;

84 
Elf32_HÆf
 
	me_shnum
;

85 
Elf32_HÆf
 
	me_sh°∫dx
;

86 } 
	tElf32_Ehdr
;

90 
	me_idít
[
EI_NIDENT
];

91 
Elf64_HÆf
 
	me_ty≥
;

92 
Elf64_HÆf
 
	me_machöe
;

93 
Elf64_W‹d
 
	me_vîsi⁄
;

94 
Elf64_Addr
 
	me_íåy
;

95 
Elf64_Off
 
	me_phoff
;

96 
Elf64_Off
 
	me_shoff
;

97 
Elf64_W‹d
 
	me_Êags
;

98 
Elf64_HÆf
 
	me_ehsize
;

99 
Elf64_HÆf
 
	me_phítsize
;

100 
Elf64_HÆf
 
	me_phnum
;

101 
Elf64_HÆf
 
	me_shítsize
;

102 
Elf64_HÆf
 
	me_shnum
;

103 
Elf64_HÆf
 
	me_sh°∫dx
;

104 } 
	tElf64_Ehdr
;

110 
	#EI_MAG0
 0

	)

111 
	#ELFMAG0
 0x7‡

	)

113 
	#EI_MAG1
 1

	)

114 
	#ELFMAG1
 'E'

	)

116 
	#EI_MAG2
 2

	)

117 
	#ELFMAG2
 'L'

	)

119 
	#EI_MAG3
 3

	)

120 
	#ELFMAG3
 'F'

	)

123 
	#ELFMAG
 "\177ELF"

	)

124 
	#SELFMAG
 4

	)

126 
	#EI_CLASS
 4

	)

127 
	#ELFCLASSNONE
 0

	)

128 
	#ELFCLASS32
 1

	)

129 
	#ELFCLASS64
 2

	)

130 
	#ELFCLASSNUM
 3

	)

132 
	#EI_DATA
 5

	)

133 
	#ELFDATANONE
 0

	)

134 
	#ELFDATA2LSB
 1

	)

135 
	#ELFDATA2MSB
 2

	)

136 
	#ELFDATANUM
 3

	)

138 
	#EI_VERSION
 6

	)

141 
	#EI_OSABI
 7

	)

142 
	#ELFOSABI_NONE
 0

	)

143 
	#ELFOSABI_SYSV
 0

	)

144 
	#ELFOSABI_HPUX
 1

	)

145 
	#ELFOSABI_NETBSD
 2

	)

146 
	#ELFOSABI_LINUX
 3

	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM
 97

	)

155 
	#ELFOSABI_STANDALONE
 255

	)

157 
	#EI_ABIVERSION
 8

	)

159 
	#EI_PAD
 9

	)

163 
	#ET_NONE
 0

	)

164 
	#ET_REL
 1

	)

165 
	#ET_EXEC
 2

	)

166 
	#ET_DYN
 3

	)

167 
	#ET_CORE
 4

	)

168 
	#ET_NUM
 5

	)

169 
	#ET_LOOS
 0x„00

	)

170 
	#ET_HIOS
 0x„f‡

	)

171 
	#ET_LOPROC
 0xff00

	)

172 
	#ET_HIPROC
 0xfff‡

	)

176 
	#EM_NONE
 0

	)

177 
	#EM_M32
 1

	)

178 
	#EM_SPARC
 2

	)

179 
	#EM_386
 3

	)

180 
	#EM_68K
 4

	)

181 
	#EM_88K
 5

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

188 
	#EM_VPP500
 17

	)

189 
	#EM_SPARC32PLUS
 18

	)

190 
	#EM_960
 19

	)

191 
	#EM_PPC
 20

	)

192 
	#EM_PPC64
 21

	)

193 
	#EM_S390
 22

	)

195 
	#EM_V800
 36

	)

196 
	#EM_FR20
 37

	)

197 
	#EM_RH32
 38

	)

198 
	#EM_RCE
 39

	)

199 
	#EM_ARM
 40

	)

200 
	#EM_FAKE_ALPHA
 41

	)

201 
	#EM_SH
 42

	)

202 
	#EM_SPARCV9
 43

	)

203 
	#EM_TRICORE
 44

	)

204 
	#EM_ARC
 45

	)

205 
	#EM_H8_300
 46

	)

206 
	#EM_H8_300H
 47

	)

207 
	#EM_H8S
 48

	)

208 
	#EM_H8_500
 49

	)

209 
	#EM_IA_64
 50

	)

210 
	#EM_MIPS_X
 51

	)

211 
	#EM_COLDFIRE
 52

	)

212 
	#EM_68HC12
 53

	)

213 
	#EM_MMA
 54

	)

214 
	#EM_PCP
 55

	)

215 
	#EM_NCPU
 56

	)

216 
	#EM_NDR1
 57

	)

217 
	#EM_STARCORE
 58

	)

218 
	#EM_ME16
 59

	)

219 
	#EM_ST100
 60

	)

220 
	#EM_TINYJ
 61

	)

221 
	#EM_X86_64
 62

	)

222 
	#EM_PDSP
 63

	)

224 
	#EM_FX66
 66

	)

225 
	#EM_ST9PLUS
 67

	)

226 
	#EM_ST7
 68

	)

227 
	#EM_68HC16
 69

	)

228 
	#EM_68HC11
 70

	)

229 
	#EM_68HC08
 71

	)

230 
	#EM_68HC05
 72

	)

231 
	#EM_SVX
 73

	)

232 
	#EM_ST19
 74

	)

233 
	#EM_VAX
 75

	)

234 
	#EM_CRIS
 76

	)

235 
	#EM_JAVELIN
 77

	)

236 
	#EM_FIREPATH
 78

	)

237 
	#EM_ZSP
 79

	)

238 
	#EM_MMIX
 80

	)

239 
	#EM_HUANY
 81

	)

240 
	#EM_PRISM
 82

	)

241 
	#EM_AVR
 83

	)

242 
	#EM_FR30
 84

	)

243 
	#EM_D10V
 85

	)

244 
	#EM_D30V
 86

	)

245 
	#EM_V850
 87

	)

246 
	#EM_M32R
 88

	)

247 
	#EM_MN10300
 89

	)

248 
	#EM_MN10200
 90

	)

249 
	#EM_PJ
 91

	)

250 
	#EM_OPENRISC
 92

	)

251 
	#EM_ARC_A5
 93

	)

252 
	#EM_XTENSA
 94

	)

253 
	#EM_NUM
 95

	)

259 
	#EM_ALPHA
 0x9026

	)

263 
	#EV_NONE
 0

	)

264 
	#EV_CURRENT
 1

	)

265 
	#EV_NUM
 2

	)

271 
Elf32_W‹d
 
	msh_«me
;

272 
Elf32_W‹d
 
	msh_ty≥
;

273 
Elf32_W‹d
 
	msh_Êags
;

274 
Elf32_Addr
 
	msh_addr
;

275 
Elf32_Off
 
	msh_off£t
;

276 
Elf32_W‹d
 
	msh_size
;

277 
Elf32_W‹d
 
	msh_lök
;

278 
Elf32_W‹d
 
	msh_öfo
;

279 
Elf32_W‹d
 
	msh_addølign
;

280 
Elf32_W‹d
 
	msh_ítsize
;

281 } 
	tElf32_Shdr
;

285 
Elf64_W‹d
 
	msh_«me
;

286 
Elf64_W‹d
 
	msh_ty≥
;

287 
Elf64_Xw‹d
 
	msh_Êags
;

288 
Elf64_Addr
 
	msh_addr
;

289 
Elf64_Off
 
	msh_off£t
;

290 
Elf64_Xw‹d
 
	msh_size
;

291 
Elf64_W‹d
 
	msh_lök
;

292 
Elf64_W‹d
 
	msh_öfo
;

293 
Elf64_Xw‹d
 
	msh_addølign
;

294 
Elf64_Xw‹d
 
	msh_ítsize
;

295 } 
	tElf64_Shdr
;

299 
	#SHN_UNDEF
 0

	)

300 
	#SHN_LORESERVE
 0xff00

	)

301 
	#SHN_LOPROC
 0xff00

	)

302 
	#SHN_BEFORE
 \

303 0xff00

	)

305 
	#SHN_AFTER
 \

306 0xff01

	)

308 
	#SHN_HIPROC
 0xff1‡

	)

309 
	#SHN_LOOS
 0xff20

	)

310 
	#SHN_HIOS
 0xff3‡

	)

311 
	#SHN_ABS
 0xfff1

	)

312 
	#SHN_COMMON
 0xfff2

	)

313 
	#SHN_XINDEX
 0xfff‡

	)

314 
	#SHN_HIRESERVE
 0xfff‡

	)

318 
	#SHT_NULL
 0

	)

319 
	#SHT_PROGBITS
 1

	)

320 
	#SHT_SYMTAB
 2

	)

321 
	#SHT_STRTAB
 3

	)

322 
	#SHT_RELA
 4

	)

323 
	#SHT_HASH
 5

	)

324 
	#SHT_DYNAMIC
 6

	)

325 
	#SHT_NOTE
 7

	)

326 
	#SHT_NOBITS
 8

	)

327 
	#SHT_REL
 9

	)

328 
	#SHT_SHLIB
 10

	)

329 
	#SHT_DYNSYM
 11

	)

330 
	#SHT_INIT_ARRAY
 14

	)

331 
	#SHT_FINI_ARRAY
 15

	)

332 
	#SHT_PREINIT_ARRAY
 16

	)

333 
	#SHT_GROUP
 17

	)

334 
	#SHT_SYMTAB_SHNDX
 18

	)

335 
	#SHT_NUM
 19

	)

336 
	#SHT_LOOS
 0x60000000

	)

337 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

338 
	#SHT_CHECKSUM
 0x6ffffff8

	)

339 
	#SHT_LOSUNW
 0x6fffffÁ

	)

340 
	#SHT_SUNW_move
 0x6fffffÁ

	)

341 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

342 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

343 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

344 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

345 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

346 
	#SHT_HISUNW
 0x6ffffff‡

	)

347 
	#SHT_HIOS
 0x6ffffff‡

	)

348 
	#SHT_LOPROC
 0x70000000

	)

349 
	#SHT_HIPROC
 0x7ffffff‡

	)

350 
	#SHT_LOUSER
 0x80000000

	)

351 
	#SHT_HIUSER
 0x8ffffff‡

	)

355 
	#SHF_WRITE
 (1 << 0Ë

	)

356 
	#SHF_ALLOC
 (1 << 1Ë

	)

357 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

358 
	#SHF_MERGE
 (1 << 4Ë

	)

359 
	#SHF_STRINGS
 (1 << 5Ë

	)

360 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

361 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

362 
	#SHF_OS_NONCONFORMING
 \

363 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 \

370 (1 << 30Ë

	)

372 
	#SHF_EXCLUDE
 \

373 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 \

426 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

434 
	#ELF32_ST_BIND
(
vÆ
Ë((()(vÆ)Ë>> 4)

	)

435 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆ)&0xf)

	)

436 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥)&0xf))

	)

439 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
(vÆ)

	)

440 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
(vÆ)

	)

441 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
((böd), (ty≥))

	)

445 
	#STB_LOCAL
 0

	)

446 
	#STB_GLOBAL
 1

	)

447 
	#STB_WEAK
 2

	)

448 
	#STB_NUM
 3

	)

449 
	#STB_LOOS
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_HIOS
 12

	)

466 
	#STT_LOPROC
 13

	)

467 
	#STT_HIPROC
 15

	)

473 
	#STN_UNDEF
 0

	)

477 
	#ELF32_ST_VISIBILITY
(
o
Ë((o)&0x03)

	)

480 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
(o)

	)

483 
	#STV_DEFAULT
 0

	)

484 
	#STV_INTERNAL
 1

	)

485 
	#STV_HIDDEN
 2

	)

486 
	#STV_PROTECTED
 3

	)

492 
Elf32_Addr
 
	mr_off£t
;

493 
Elf32_W‹d
 
	mr_öfo
;

494 } 
	tElf32_Rñ
;

503 
Elf64_Addr
 
	mr_off£t
;

504 
Elf64_Xw‹d
 
	mr_öfo
;

505 } 
	tElf64_Rñ
;

511 
Elf32_Addr
 
	mr_off£t
;

512 
Elf32_W‹d
 
	mr_öfo
;

513 
Elf32_Sw‹d
 
	mr_addíd
;

514 } 
	tElf32_Rña
;

518 
Elf64_Addr
 
	mr_off£t
;

519 
Elf64_Xw‹d
 
	mr_öfo
;

520 
Elf64_Sxw‹d
 
	mr_addíd
;

521 } 
	tElf64_Rña
;

525 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

526 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆ)&0xff)

	)

527 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥)&0xff))

	)

529 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

530 
	#ELF64_R_TYPE
(
i
Ë((i)&0xffffffff)

	)

531 
	#ELF64_R_INFO
(
sym
, 
ty≥
Ë((((
Elf64_Xw‹d
)(sym)Ë<< 32Ë+ (ty≥))

	)

537 
Elf32_W‹d
 
	mp_ty≥
;

538 
Elf32_Off
 
	mp_off£t
;

539 
Elf32_Addr
 
	mp_vaddr
;

540 
Elf32_Addr
 
	mp_∑ddr
;

541 
Elf32_W‹d
 
	mp_fûesz
;

542 
Elf32_W‹d
 
	mp_memsz
;

543 
Elf32_W‹d
 
	mp_Êags
;

544 
Elf32_W‹d
 
	mp_Æign
;

545 } 
	tElf32_Phdr
;

549 
Elf64_W‹d
 
	mp_ty≥
;

550 
Elf64_W‹d
 
	mp_Êags
;

551 
Elf64_Off
 
	mp_off£t
;

552 
Elf64_Addr
 
	mp_vaddr
;

553 
Elf64_Addr
 
	mp_∑ddr
;

554 
Elf64_Xw‹d
 
	mp_fûesz
;

555 
Elf64_Xw‹d
 
	mp_memsz
;

556 
Elf64_Xw‹d
 
	mp_Æign
;

557 } 
	tElf64_Phdr
;

561 
	#PT_NULL
 0

	)

562 
	#PT_LOAD
 1

	)

563 
	#PT_DYNAMIC
 2

	)

564 
	#PT_INTERP
 3

	)

565 
	#PT_NOTE
 4

	)

566 
	#PT_SHLIB
 5

	)

567 
	#PT_PHDR
 6

	)

568 
	#PT_TLS
 7

	)

569 
	#PT_NUM
 8

	)

570 
	#PT_LOOS
 0x60000000

	)

571 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

572 
	#PT_GNU_STACK
 0x6474e551

	)

573 
	#PT_GNU_RELRO
 0x6474e552

	)

574 
	#PT_LOSUNW
 0x6fffffÁ

	)

575 
	#PT_SUNWBSS
 0x6fffffÁ

	)

576 
	#PT_SUNWSTACK
 0x6ffffffb

	)

577 
	#PT_HISUNW
 0x6fffffff

	)

578 
	#PT_HIOS
 0x6ffffff‡

	)

579 
	#PT_LOPROC
 0x70000000

	)

580 
	#PT_HIPROC
 0x7ffffff‡

	)

584 
	#PF_X
 (1 << 0Ë

	)

585 
	#PF_W
 (1 << 1Ë

	)

586 
	#PF_R
 (1 << 2Ë

	)

587 
	#PF_MASKOS
 0x0ff00000

	)

588 
	#PF_MASKPROC
 0xf0000000

	)

592 
	#NT_PRSTATUS
 1

	)

593 
	#NT_FPREGSET
 2

	)

594 
	#NT_PRPSINFO
 3

	)

595 
	#NT_PRXREG
 4

	)

596 
	#NT_TASKSTRUCT
 4

	)

597 
	#NT_PLATFORM
 5

	)

598 
	#NT_AUXV
 6

	)

599 
	#NT_GWINDOWS
 7

	)

600 
	#NT_ASRS
 8

	)

601 
	#NT_PSTATUS
 10

	)

602 
	#NT_PSINFO
 13

	)

603 
	#NT_PRCRED
 14

	)

604 
	#NT_UTSNAME
 15

	)

605 
	#NT_LWPSTATUS
 16

	)

606 
	#NT_LWPSINFO
 17

	)

607 
	#NT_PRFPXREG
 20

	)

611 
	#NT_VERSION
 1

	)

617 
Elf32_Sw‹d
 
	md_èg
;

619 
Elf32_W‹d
 
	md_vÆ
;

620 
Elf32_Addr
 
	md_±r
;

621 } 
	md_un
;

622 } 
	tElf32_Dyn
;

626 
Elf64_Sxw‹d
 
	md_èg
;

628 
Elf64_Xw‹d
 
	md_vÆ
;

629 
Elf64_Addr
 
	md_±r
;

630 } 
	md_un
;

631 } 
	tElf64_Dyn
;

635 
	#DT_NULL
 0

	)

636 
	#DT_NEEDED
 1

	)

637 
	#DT_PLTRELSZ
 2

	)

638 
	#DT_PLTGOT
 3

	)

639 
	#DT_HASH
 4

	)

640 
	#DT_STRTAB
 5

	)

641 
	#DT_SYMTAB
 6

	)

642 
	#DT_RELA
 7

	)

643 
	#DT_RELASZ
 8

	)

644 
	#DT_RELAENT
 9

	)

645 
	#DT_STRSZ
 10

	)

646 
	#DT_SYMENT
 11

	)

647 
	#DT_INIT
 12

	)

648 
	#DT_FINI
 13

	)

649 
	#DT_SONAME
 14

	)

650 
	#DT_RPATH
 15

	)

651 
	#DT_SYMBOLIC
 16

	)

652 
	#DT_REL
 17

	)

653 
	#DT_RELSZ
 18

	)

654 
	#DT_RELENT
 19

	)

655 
	#DT_PLTREL
 20

	)

656 
	#DT_DEBUG
 21

	)

657 
	#DT_TEXTREL
 22

	)

658 
	#DT_JMPREL
 23

	)

659 
	#DT_BIND_NOW
 24

	)

660 
	#DT_INIT_ARRAY
 25

	)

661 
	#DT_FINI_ARRAY
 26

	)

662 
	#DT_INIT_ARRAYSZ
 27

	)

663 
	#DT_FINI_ARRAYSZ
 28

	)

664 
	#DT_RUNPATH
 29

	)

665 
	#DT_FLAGS
 30

	)

666 
	#DT_ENCODING
 32

	)

667 
	#DT_PREINIT_ARRAY
 32

	)

668 
	#DT_PREINIT_ARRAYSZ
 33

	)

669 
	#DT_NUM
 34

	)

670 
	#DT_LOOS
 0x6000000d

	)

671 
	#DT_HIOS
 0x6ffff000

	)

672 
	#DT_LOPROC
 0x70000000

	)

673 
	#DT_HIPROC
 0x7ffffff‡

	)

674 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

679 
	#DT_VALRNGLO
 0x6ffffd00

	)

680 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

681 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

682 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

683 
	#DT_CHECKSUM
 0x6ffffdf8

	)

684 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

685 
	#DT_MOVEENT
 0x6ffffdÁ

	)

686 
	#DT_MOVESZ
 0x6ffffdfb

	)

687 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

688 
	#DT_POSFLAG_1
 \

689 0x6ffffdfd

	)

691 
	#DT_SYMINSZ
 0x6ffffd„

	)

692 
	#DT_SYMINENT
 0x6ffffdf‡

	)

693 
	#DT_VALRNGHI
 0x6ffffdff

	)

694 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

695 
	#DT_VALNUM
 12

	)

702 
	#DT_ADDRRNGLO
 0x6fff„00

	)

703 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

704 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

705 
	#DT_CONFIG
 0x6fff„Á

	)

706 
	#DT_DEPAUDIT
 0x6fff„fb

	)

707 
	#DT_AUDIT
 0x6fff„f¯

	)

708 
	#DT_PLTPAD
 0x6fff„fd

	)

709 
	#DT_MOVETAB
 0x6fff„„

	)

710 
	#DT_SYMINFO
 0x6fff„f‡

	)

711 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

712 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

713 
	#DT_ADDRNUM
 10

	)

717 
	#DT_VERSYM
 0x6ffffff0

	)

719 
	#DT_RELACOUNT
 0x6ffffff9

	)

720 
	#DT_RELCOUNT
 0x6fffffÁ

	)

723 
	#DT_FLAGS_1
 0x6ffffffb

	)

724 
	#DT_VERDEF
 \

725 0x6ffffff¯

	)

727 
	#DT_VERDEFNUM
 0x6ffffffd

	)

728 
	#DT_VERNEED
 \

729 0x6fffff„

	)

731 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

732 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

733 
	#DT_VERSIONTAGNUM
 16

	)

737 
	#DT_AUXILIARY
 0x7ffffffd

	)

738 
	#DT_FILTER
 0x7ffffff‡

	)

739 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
Ë- ((
Elf32_Sw‹d
)—agË<< 1 >> 1Ë- 1)

	)

740 
	#DT_EXTRANUM
 3

	)

743 
	#DF_ORIGIN
 0x00000001

	)

744 
	#DF_SYMBOLIC
 0x00000002

	)

745 
	#DF_TEXTREL
 0x00000004

	)

746 
	#DF_BIND_NOW
 0x00000008

	)

747 
	#DF_STATIC_TLS
 0x00000010

	)

751 
	#DF_1_NOW
 0x00000001

	)

752 
	#DF_1_GLOBAL
 0x00000002

	)

753 
	#DF_1_GROUP
 0x00000004

	)

754 
	#DF_1_NODELETE
 0x00000008

	)

755 
	#DF_1_LOADFLTR
 0x00000010

	)

756 
	#DF_1_INITFIRST
 0x00000020

	)

757 
	#DF_1_NOOPEN
 0x00000040

	)

758 
	#DF_1_ORIGIN
 0x00000080

	)

759 
	#DF_1_DIRECT
 0x00000100

	)

760 
	#DF_1_TRANS
 0x00000200

	)

761 
	#DF_1_INTERPOSE
 0x00000400

	)

762 
	#DF_1_NODEFLIB
 0x00000800

	)

763 
	#DF_1_NODUMP
 0x00001000

	)

764 
	#DF_1_CONFALT
 0x00002000

	)

765 
	#DF_1_ENDFILTEE
 0x00004000

	)

766 
	#DF_1_DISPRELDNE
 0x00008000

	)

767 
	#DF_1_DISPRELPND
 0x00010000

	)

770 
	#DTF_1_PARINIT
 0x00000001

	)

771 
	#DTF_1_CONFEXP
 0x00000002

	)

774 
	#DF_P1_LAZYLOAD
 0x00000001

	)

775 
	#DF_P1_GROUPPERM
 \

776 0x00000002

	)

783 
Elf32_HÆf
 
	mvd_vîsi⁄
;

784 
Elf32_HÆf
 
	mvd_Êags
;

785 
Elf32_HÆf
 
	mvd_ndx
;

786 
Elf32_HÆf
 
	mvd_˙t
;

787 
Elf32_W‹d
 
	mvd_hash
;

788 
Elf32_W‹d
 
	mvd_aux
;

789 
Elf32_W‹d
 
	mvd_√xt
;

791 } 
	tElf32_Vîdef
;

795 
Elf64_HÆf
 
	mvd_vîsi⁄
;

796 
Elf64_HÆf
 
	mvd_Êags
;

797 
Elf64_HÆf
 
	mvd_ndx
;

798 
Elf64_HÆf
 
	mvd_˙t
;

799 
Elf64_W‹d
 
	mvd_hash
;

800 
Elf64_W‹d
 
	mvd_aux
;

801 
Elf64_W‹d
 
	mvd_√xt
;

803 } 
	tElf64_Vîdef
;

806 
	#VER_DEF_NONE
 0

	)

807 
	#VER_DEF_CURRENT
 1

	)

808 
	#VER_DEF_NUM
 2

	)

811 
	#VER_FLG_BASE
 0x1

	)

812 
	#VER_FLG_WEAK
 0x2

	)

815 
	#VER_NDX_LOCAL
 0

	)

816 
	#VER_NDX_GLOBAL
 1

	)

817 
	#VER_NDX_LORESERVE
 0xff00

	)

818 
	#VER_NDX_ELIMINATE
 0xff01

	)

824 
Elf32_W‹d
 
	mvda_«me
;

825 
Elf32_W‹d
 
	mvda_√xt
;

827 } 
	tElf32_Vîdaux
;

831 
Elf64_W‹d
 
	mvda_«me
;

832 
Elf64_W‹d
 
	mvda_√xt
;

834 } 
	tElf64_Vîdaux
;

840 
Elf32_HÆf
 
	mvn_vîsi⁄
;

841 
Elf32_HÆf
 
	mvn_˙t
;

842 
Elf32_W‹d
 
	mvn_fûe
;

844 
Elf32_W‹d
 
	mvn_aux
;

845 
Elf32_W‹d
 
	mvn_√xt
;

847 } 
	tElf32_Vî√ed
;

851 
Elf64_HÆf
 
	mvn_vîsi⁄
;

852 
Elf64_HÆf
 
	mvn_˙t
;

853 
Elf64_W‹d
 
	mvn_fûe
;

855 
Elf64_W‹d
 
	mvn_aux
;

856 
Elf64_W‹d
 
	mvn_√xt
;

858 } 
	tElf64_Vî√ed
;

861 
	#VER_NEED_NONE
 0

	)

862 
	#VER_NEED_CURRENT
 1

	)

863 
	#VER_NEED_NUM
 2

	)

869 
Elf32_W‹d
 
	mv«_hash
;

870 
Elf32_HÆf
 
	mv«_Êags
;

871 
Elf32_HÆf
 
	mv«_Ÿhî
;

872 
Elf32_W‹d
 
	mv«_«me
;

873 
Elf32_W‹d
 
	mv«_√xt
;

875 } 
	tElf32_Vî«ux
;

879 
Elf64_W‹d
 
	mv«_hash
;

880 
Elf64_HÆf
 
	mv«_Êags
;

881 
Elf64_HÆf
 
	mv«_Ÿhî
;

882 
Elf64_W‹d
 
	mv«_«me
;

883 
Elf64_W‹d
 
	mv«_√xt
;

885 } 
	tElf64_Vî«ux
;

888 
	#VER_FLG_WEAK
 0x2

	)

901 
	ma_ty≥
;

903 
	ma_vÆ
;

904 *
	ma_±r
;

905 (*
	ma_f˙
)();

906 } 
	ma_un
;

907 } 
	tElf32_auxv_t
;

911 
	ma_ty≥
;

913 
	ma_vÆ
;

914 *
	ma_±r
;

915 (*
	ma_f˙
)();

916 } 
	ma_un
;

917 } 
	tElf64_auxv_t
;

921 
	#AT_NULL
 0

	)

922 
	#AT_IGNORE
 1

	)

923 
	#AT_EXECFD
 2

	)

924 
	#AT_PHDR
 3

	)

925 
	#AT_PHENT
 4

	)

926 
	#AT_PHNUM
 5

	)

927 
	#AT_PAGESZ
 6

	)

928 
	#AT_BASE
 7

	)

929 
	#AT_FLAGS
 8

	)

930 
	#AT_ENTRY
 9

	)

931 
	#AT_NOTELF
 10

	)

932 
	#AT_UID
 11

	)

933 
	#AT_EUID
 12

	)

934 
	#AT_GID
 13

	)

935 
	#AT_EGID
 14

	)

936 
	#AT_CLKTCK
 17

	)

939 
	#AT_PLATFORM
 15

	)

940 
	#AT_HWCAP
 \

941 16

	)

946 
	#AT_FPUCW
 18

	)

949 
	#AT_DCACHEBSIZE
 19

	)

950 
	#AT_ICACHEBSIZE
 20

	)

951 
	#AT_UCACHEBSIZE
 21

	)

955 
	#AT_IGNOREPPC
 22

	)

957 
	#AT_SECURE
 23

	)

961 
	#AT_SYSINFO
 32

	)

962 
	#AT_SYSINFO_EHDR
 33

	)

966 
	#AT_L1I_CACHESHAPE
 34

	)

967 
	#AT_L1D_CACHESHAPE
 35

	)

968 
	#AT_L2_CACHESHAPE
 36

	)

969 
	#AT_L3_CACHESHAPE
 37

	)

976 
Elf32_W‹d
 
	mn_«mesz
;

977 
Elf32_W‹d
 
	mn_descsz
;

978 
Elf32_W‹d
 
	mn_ty≥
;

979 } 
	tElf32_Nhdr
;

983 
Elf64_W‹d
 
	mn_«mesz
;

984 
Elf64_W‹d
 
	mn_descsz
;

985 
Elf64_W‹d
 
	mn_ty≥
;

986 } 
	tElf64_Nhdr
;

991 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

994 
	#ELF_NOTE_GNU
 "GNU"

	)

999 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1009 
	#ELF_NOTE_ABI
 1

	)

1013 
	#ELF_NOTE_OS_LINUX
 0

	)

1014 
	#ELF_NOTE_OS_GNU
 1

	)

1015 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1016 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1021 
Elf32_Xw‹d
 
	mm_vÆue
;

1022 
Elf32_W‹d
 
	mm_öfo
;

1023 
Elf32_W‹d
 
	mm_poff£t
;

1024 
Elf32_HÆf
 
	mm_ª≥©
;

1025 
Elf32_HÆf
 
	mm_°ride
;

1026 } 
	tElf32_Move
;

1030 
Elf64_Xw‹d
 
	mm_vÆue
;

1031 
Elf64_Xw‹d
 
	mm_öfo
;

1032 
Elf64_Xw‹d
 
	mm_poff£t
;

1033 
Elf64_HÆf
 
	mm_ª≥©
;

1034 
Elf64_HÆf
 
	mm_°ride
;

1035 } 
	tElf64_Move
;

1038 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1039 
	#ELF32_M_SIZE
(
öfo
Ë(()(öfo))

	)

1040 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ ()(size))

	)

1042 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
(öfo)

	)

1043 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
(öfo)

	)

1044 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
(sym, size)

	)

1049 
	#EF_CPU32
 0x00810000

	)

1053 
	#R_68K_NONE
 0

	)

1054 
	#R_68K_32
 1

	)

1055 
	#R_68K_16
 2

	)

1056 
	#R_68K_8
 3

	)

1057 
	#R_68K_PC32
 4

	)

1058 
	#R_68K_PC16
 5

	)

1059 
	#R_68K_PC8
 6

	)

1060 
	#R_68K_GOT32
 7

	)

1061 
	#R_68K_GOT16
 8

	)

1062 
	#R_68K_GOT8
 9

	)

1063 
	#R_68K_GOT32O
 10

	)

1064 
	#R_68K_GOT16O
 11

	)

1065 
	#R_68K_GOT8O
 12

	)

1066 
	#R_68K_PLT32
 13

	)

1067 
	#R_68K_PLT16
 14

	)

1068 
	#R_68K_PLT8
 15

	)

1069 
	#R_68K_PLT32O
 16

	)

1070 
	#R_68K_PLT16O
 17

	)

1071 
	#R_68K_PLT8O
 18

	)

1072 
	#R_68K_COPY
 19

	)

1073 
	#R_68K_GLOB_DAT
 20

	)

1074 
	#R_68K_JMP_SLOT
 21

	)

1075 
	#R_68K_RELATIVE
 22

	)

1077 
	#R_68K_NUM
 23

	)

1083 
	#R_386_NONE
 0

	)

1084 
	#R_386_32
 1

	)

1085 
	#R_386_PC32
 2

	)

1086 
	#R_386_GOT32
 3

	)

1087 
	#R_386_PLT32
 4

	)

1088 
	#R_386_COPY
 5

	)

1089 
	#R_386_GLOB_DAT
 6

	)

1090 
	#R_386_JMP_SLOT
 7

	)

1091 
	#R_386_RELATIVE
 8

	)

1092 
	#R_386_GOTOFF
 9

	)

1093 
	#R_386_GOTPC
 10

	)

1094 
	#R_386_32PLT
 11

	)

1095 
	#R_386_TLS_TPOFF
 14

	)

1096 
	#R_386_TLS_IE
 \

1097 15

	)

1099 
	#R_386_TLS_GOTIE
 \

1100 16

	)

1102 
	#R_386_TLS_LE
 \

1103 17

	)

1105 
	#R_386_TLS_GD
 \

1106 18

	)

1108 
	#R_386_TLS_LDM
 \

1109 19

	)

1112 
	#R_386_16
 20

	)

1113 
	#R_386_PC16
 21

	)

1114 
	#R_386_8
 22

	)

1115 
	#R_386_PC8
 23

	)

1116 
	#R_386_TLS_GD_32
 \

1117 24

	)

1119 
	#R_386_TLS_GD_PUSH
 25

	)

1120 
	#R_386_TLS_GD_CALL
 \

1121 26

	)

1123 
	#R_386_TLS_GD_POP
 27

	)

1124 
	#R_386_TLS_LDM_32
 \

1125 28

	)

1127 
	#R_386_TLS_LDM_PUSH
 29

	)

1128 
	#R_386_TLS_LDM_CALL
 \

1129 30

	)

1131 
	#R_386_TLS_LDM_POP
 31

	)

1132 
	#R_386_TLS_LDO_32
 32

	)

1133 
	#R_386_TLS_IE_32
 \

1134 33

	)

1136 
	#R_386_TLS_LE_32
 \

1137 34

	)

1139 
	#R_386_TLS_DTPMOD32
 35

	)

1140 
	#R_386_TLS_DTPOFF32
 36

	)

1141 
	#R_386_TLS_TPOFF32
 37

	)

1143 
	#R_386_NUM
 38

	)

1149 
	#STT_SPARC_REGISTER
 13

	)

1153 
	#EF_SPARCV9_MM
 3

	)

1154 
	#EF_SPARCV9_TSO
 0

	)

1155 
	#EF_SPARCV9_PSO
 1

	)

1156 
	#EF_SPARCV9_RMO
 2

	)

1157 
	#EF_SPARC_LEDATA
 0x800000

	)

1158 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1159 
	#EF_SPARC_32PLUS
 0x000100

	)

1160 
	#EF_SPARC_SUN_US1
 0x000200

	)

1161 
	#EF_SPARC_HAL_R1
 0x000400

	)

1162 
	#EF_SPARC_SUN_US3
 0x000800

	)

1166 
	#R_SPARC_NONE
 0

	)

1167 
	#R_SPARC_8
 1

	)

1168 
	#R_SPARC_16
 2

	)

1169 
	#R_SPARC_32
 3

	)

1170 
	#R_SPARC_DISP8
 4

	)

1171 
	#R_SPARC_DISP16
 5

	)

1172 
	#R_SPARC_DISP32
 6

	)

1173 
	#R_SPARC_WDISP30
 7

	)

1174 
	#R_SPARC_WDISP22
 8

	)

1175 
	#R_SPARC_HI22
 9

	)

1176 
	#R_SPARC_22
 10

	)

1177 
	#R_SPARC_13
 11

	)

1178 
	#R_SPARC_LO10
 12

	)

1179 
	#R_SPARC_GOT10
 13

	)

1180 
	#R_SPARC_GOT13
 14

	)

1181 
	#R_SPARC_GOT22
 15

	)

1182 
	#R_SPARC_PC10
 16

	)

1183 
	#R_SPARC_PC22
 17

	)

1184 
	#R_SPARC_WPLT30
 18

	)

1185 
	#R_SPARC_COPY
 19

	)

1186 
	#R_SPARC_GLOB_DAT
 20

	)

1187 
	#R_SPARC_JMP_SLOT
 21

	)

1188 
	#R_SPARC_RELATIVE
 22

	)

1189 
	#R_SPARC_UA32
 23

	)

1193 
	#R_SPARC_PLT32
 24

	)

1194 
	#R_SPARC_HIPLT22
 25

	)

1195 
	#R_SPARC_LOPLT10
 26

	)

1196 
	#R_SPARC_PCPLT32
 27

	)

1197 
	#R_SPARC_PCPLT22
 28

	)

1198 
	#R_SPARC_PCPLT10
 29

	)

1199 
	#R_SPARC_10
 30

	)

1200 
	#R_SPARC_11
 31

	)

1201 
	#R_SPARC_64
 32

	)

1202 
	#R_SPARC_OLO10
 33

	)

1203 
	#R_SPARC_HH22
 34

	)

1204 
	#R_SPARC_HM10
 35

	)

1205 
	#R_SPARC_LM22
 36

	)

1206 
	#R_SPARC_PC_HH22
 37

	)

1207 
	#R_SPARC_PC_HM10
 38

	)

1208 
	#R_SPARC_PC_LM22
 39

	)

1209 
	#R_SPARC_WDISP16
 40

	)

1210 
	#R_SPARC_WDISP19
 41

	)

1211 
	#R_SPARC_7
 43

	)

1212 
	#R_SPARC_5
 44

	)

1213 
	#R_SPARC_6
 45

	)

1214 
	#R_SPARC_DISP64
 46

	)

1215 
	#R_SPARC_PLT64
 47

	)

1216 
	#R_SPARC_HIX22
 48

	)

1217 
	#R_SPARC_LOX10
 49

	)

1218 
	#R_SPARC_H44
 50

	)

1219 
	#R_SPARC_M44
 51

	)

1220 
	#R_SPARC_L44
 52

	)

1221 
	#R_SPARC_REGISTER
 53

	)

1222 
	#R_SPARC_UA64
 54

	)

1223 
	#R_SPARC_UA16
 55

	)

1224 
	#R_SPARC_TLS_GD_HI22
 56

	)

1225 
	#R_SPARC_TLS_GD_LO10
 57

	)

1226 
	#R_SPARC_TLS_GD_ADD
 58

	)

1227 
	#R_SPARC_TLS_GD_CALL
 59

	)

1228 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1229 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1230 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1231 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1232 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1233 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1234 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1235 
	#R_SPARC_TLS_IE_HI22
 67

	)

1236 
	#R_SPARC_TLS_IE_LO10
 68

	)

1237 
	#R_SPARC_TLS_IE_LD
 69

	)

1238 
	#R_SPARC_TLS_IE_LDX
 70

	)

1239 
	#R_SPARC_TLS_IE_ADD
 71

	)

1240 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1241 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1242 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1243 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1244 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1245 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1246 
	#R_SPARC_TLS_TPOFF32
 78

	)

1247 
	#R_SPARC_TLS_TPOFF64
 79

	)

1249 
	#R_SPARC_NUM
 80

	)

1253 
	#DT_SPARC_REGISTER
 0x70000001

	)

1254 
	#DT_SPARC_NUM
 2

	)

1258 
	#HWCAP_SPARC_FLUSH
 1

	)

1259 
	#HWCAP_SPARC_STBAR
 2

	)

1260 
	#HWCAP_SPARC_SWAP
 4

	)

1261 
	#HWCAP_SPARC_MULDIV
 8

	)

1262 
	#HWCAP_SPARC_V9
 16

	)

1263 
	#HWCAP_SPARC_ULTRA3
 32

	)

1269 
	#EF_MIPS_NOREORDER
 1

	)

1270 
	#EF_MIPS_PIC
 2

	)

1271 
	#EF_MIPS_CPIC
 4

	)

1272 
	#EF_MIPS_XGOT
 8

	)

1273 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1274 
	#EF_MIPS_ABI2
 32

	)

1275 
	#EF_MIPS_ABI_ON32
 64

	)

1276 
	#EF_MIPS_ARCH
 0xf0000000

	)

1280 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1281 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1282 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1283 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1284 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1285 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1286 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1290 
	#E_MIPS_ARCH_1
 0x00000000

	)

1291 
	#E_MIPS_ARCH_2
 0x10000000

	)

1292 
	#E_MIPS_ARCH_3
 0x20000000

	)

1293 
	#E_MIPS_ARCH_4
 0x30000000

	)

1294 
	#E_MIPS_ARCH_5
 0x40000000

	)

1295 
	#E_MIPS_ARCH_32
 0x60000000

	)

1296 
	#E_MIPS_ARCH_64
 0x70000000

	)

1300 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1301 
	#SHN_MIPS_TEXT
 0xff01

	)

1302 
	#SHN_MIPS_DATA
 0xff02

	)

1303 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1304 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1308 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1309 
	#SHT_MIPS_MSYM
 0x70000001

	)

1310 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1311 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1312 
	#SHT_MIPS_UCODE
 0x70000004

	)

1313 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1314 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1315 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1316 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1317 
	#SHT_MIPS_RELD
 0x70000009

	)

1318 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1319 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1320 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1321 
	#SHT_MIPS_SHDR
 0x70000010

	)

1322 
	#SHT_MIPS_FDESC
 0x70000011

	)

1323 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1324 
	#SHT_MIPS_DENSE
 0x70000013

	)

1325 
	#SHT_MIPS_PDESC
 0x70000014

	)

1326 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1327 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1328 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1329 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1330 
	#SHT_MIPS_LINE
 0x70000019

	)

1331 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1332 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1333 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1334 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1335 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1336 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1337 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1338 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1339 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1340 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1341 
	#SHT_MIPS_XLATE
 0x70000024

	)

1342 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1343 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1344 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1345 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1346 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1350 
	#SHF_MIPS_GPREL
 0x10000000

	)

1351 
	#SHF_MIPS_MERGE
 0x20000000

	)

1352 
	#SHF_MIPS_ADDR
 0x40000000

	)

1353 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1354 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1355 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1356 
	#SHF_MIPS_NAMES
 0x02000000

	)

1357 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1362 
	#STO_MIPS_DEFAULT
 0x0

	)

1363 
	#STO_MIPS_INTERNAL
 0x1

	)

1364 
	#STO_MIPS_HIDDEN
 0x2

	)

1365 
	#STO_MIPS_PROTECTED
 0x3

	)

1366 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1369 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1376 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1377 
Elf32_W‹d
 
	mgt_unu£d
;

1378 } 
	mgt_hódî
;

1381 
Elf32_W‹d
 
	mgt_g_vÆue
;

1382 
Elf32_W‹d
 
	mgt_byãs
;

1383 } 
	mgt_íåy
;

1384 } 
	tElf32_g±ab
;

1390 
Elf32_W‹d
 
	mri_g¥mask
;

1391 
Elf32_W‹d
 
	mri_˝rmask
[4];

1392 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1393 } 
	tElf32_RegInfo
;

1399 
	mköd
;

1401 
	msize
;

1402 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1404 
Elf32_W‹d
 
	möfo
;

1405 } 
	tElf_O±i⁄s
;

1409 
	#ODK_NULL
 0

	)

1410 
	#ODK_REGINFO
 1

	)

1411 
	#ODK_EXCEPTIONS
 2

	)

1412 
	#ODK_PAD
 3

	)

1413 
	#ODK_HWPATCH
 4

	)

1414 
	#ODK_FILL
 5

	)

1415 
	#ODK_TAGS
 6

	)

1416 
	#ODK_HWAND
 7

	)

1417 
	#ODK_HWOR
 8

	)

1421 
	#OEX_FPU_MIN
 0x1‡

	)

1422 
	#OEX_FPU_MAX
 0x1f00

	)

1423 
	#OEX_PAGE0
 0x10000

	)

1424 
	#OEX_SMM
 0x20000

	)

1425 
	#OEX_FPDBUG
 0x40000

	)

1426 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1427 
	#OEX_DISMISS
 0x80000

	)

1429 
	#OEX_FPU_INVAL
 0x10

	)

1430 
	#OEX_FPU_DIV0
 0x08

	)

1431 
	#OEX_FPU_OFLO
 0x04

	)

1432 
	#OEX_FPU_UFLO
 0x02

	)

1433 
	#OEX_FPU_INEX
 0x01

	)

1437 
	#OHW_R4KEOP
 0x1

	)

1438 
	#OHW_R8KPFETCH
 0x2

	)

1439 
	#OHW_R5KEOP
 0x4

	)

1440 
	#OHW_R5KCVTL
 0x8

	)

1442 
	#OPAD_PREFIX
 0x1

	)

1443 
	#OPAD_POSTFIX
 0x2

	)

1444 
	#OPAD_SYMBOL
 0x4

	)

1450 
Elf32_W‹d
 
	mhwp_Êags1
;

1451 
Elf32_W‹d
 
	mhwp_Êags2
;

1452 } 
	tElf_O±i⁄s_Hw
;

1456 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1457 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1461 
	#R_MIPS_NONE
 0

	)

1462 
	#R_MIPS_16
 1

	)

1463 
	#R_MIPS_32
 2

	)

1464 
	#R_MIPS_REL32
 3

	)

1465 
	#R_MIPS_26
 4

	)

1466 
	#R_MIPS_HI16
 5

	)

1467 
	#R_MIPS_LO16
 6

	)

1468 
	#R_MIPS_GPREL16
 7

	)

1469 
	#R_MIPS_LITERAL
 8

	)

1470 
	#R_MIPS_GOT16
 9

	)

1471 
	#R_MIPS_PC16
 10

	)

1472 
	#R_MIPS_CALL16
 11

	)

1473 
	#R_MIPS_GPREL32
 12

	)

1475 
	#R_MIPS_SHIFT5
 16

	)

1476 
	#R_MIPS_SHIFT6
 17

	)

1477 
	#R_MIPS_64
 18

	)

1478 
	#R_MIPS_GOT_DISP
 19

	)

1479 
	#R_MIPS_GOT_PAGE
 20

	)

1480 
	#R_MIPS_GOT_OFST
 21

	)

1481 
	#R_MIPS_GOT_HI16
 22

	)

1482 
	#R_MIPS_GOT_LO16
 23

	)

1483 
	#R_MIPS_SUB
 24

	)

1484 
	#R_MIPS_INSERT_A
 25

	)

1485 
	#R_MIPS_INSERT_B
 26

	)

1486 
	#R_MIPS_DELETE
 27

	)

1487 
	#R_MIPS_HIGHER
 28

	)

1488 
	#R_MIPS_HIGHEST
 29

	)

1489 
	#R_MIPS_CALL_HI16
 30

	)

1490 
	#R_MIPS_CALL_LO16
 31

	)

1491 
	#R_MIPS_SCN_DISP
 32

	)

1492 
	#R_MIPS_REL16
 33

	)

1493 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1494 
	#R_MIPS_PJUMP
 35

	)

1495 
	#R_MIPS_RELGOT
 36

	)

1496 
	#R_MIPS_JALR
 37

	)

1498 
	#R_MIPS_NUM
 38

	)

1502 
	#PT_MIPS_REGINFO
 0x70000000

	)

1503 
	#PT_MIPS_RTPROC
 0x70000001

	)

1504 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1508 
	#PF_MIPS_LOCAL
 0x10000000

	)

1512 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1513 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1514 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1515 
	#DT_MIPS_IVERSION
 0x70000004

	)

1516 
	#DT_MIPS_FLAGS
 0x70000005

	)

1517 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1518 
	#DT_MIPS_MSYM
 0x70000007

	)

1519 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1520 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1521 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1522 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1523 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1524 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1525 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1526 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1527 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1528 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1529 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1530 
	#DT_MIPS_DELTA_CLASS_NO
 \

1531 0x70000018

	)

1533 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1534 
	#DT_MIPS_DELTA_INSTANCE_NO
 \

1535 0x7000001®

	)

1537 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1538 
	#DT_MIPS_DELTA_RELOC_NO
 \

1539 0x7000001¯

	)

1541 
	#DT_MIPS_DELTA_SYM
 \

1542 0x7000001d

	)

1544 
	#DT_MIPS_DELTA_SYM_NO
 \

1545 0x7000001ê

	)

1547 
	#DT_MIPS_DELTA_CLASSSYM
 \

1548 0x70000020

	)

1550 
	#DT_MIPS_DELTA_CLASSSYM_NO
 \

1551 0x70000021

	)

1553 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1554 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1555 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1556 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1557 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1558 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1559 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1560 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1561 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1562 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1563 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1565 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 \

1566 0x7000002d

	)

1568 
	#DT_MIPS_PERF_SUFFIX
 \

1569 0x7000002ê

	)

1571 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1573 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1574 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1575 
	#DT_MIPS_NUM
 0x32

	)

1579 
	#RHF_NONE
 0

	)

1580 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1581 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1582 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1583 
	#RHF_NO_MOVE
 (1 << 3)

	)

1584 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1585 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1586 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1587 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1588 
	#RHF_PIXIE
 (1 << 8)

	)

1589 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1590 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1591 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1592 
	#RHF_CORD
 (1 << 12)

	)

1593 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1594 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1600 
Elf32_W‹d
 
	ml_«me
;

1601 
Elf32_W‹d
 
	ml_time_°amp
;

1602 
Elf32_W‹d
 
	ml_checksum
;

1603 
Elf32_W‹d
 
	ml_vîsi⁄
;

1604 
Elf32_W‹d
 
	ml_Êags
;

1605 } 
	tElf32_Lib
;

1609 
Elf64_W‹d
 
	ml_«me
;

1610 
Elf64_W‹d
 
	ml_time_°amp
;

1611 
Elf64_W‹d
 
	ml_checksum
;

1612 
Elf64_W‹d
 
	ml_vîsi⁄
;

1613 
Elf64_W‹d
 
	ml_Êags
;

1614 } 
	tElf64_Lib
;

1618 
	#LL_NONE
 0

	)

1619 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1620 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1621 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1622 
	#LL_EXPORTS
 (1 << 3)

	)

1623 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1624 
	#LL_DELTA
 (1 << 5)

	)

1628 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1634 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1635 
	#EF_PARISC_EXT
 0x00020000

	)

1636 
	#EF_PARISC_LSB
 0x00040000

	)

1637 
	#EF_PARISC_WIDE
 0x00080000

	)

1638 
	#EF_PARISC_NO_KABP
 \

1639 0x00100000

	)

1641 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1642 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1646 
	#EFA_PARISC_1_0
 0x020b

	)

1647 
	#EFA_PARISC_1_1
 0x0210

	)

1648 
	#EFA_PARISC_2_0
 0x0214

	)

1652 
	#SHN_PARISC_ANSI_COMMON
 \

1653 0xff00

	)

1655 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1659 
	#SHT_PARISC_EXT
 0x70000000

	)

1660 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1661 
	#SHT_PARISC_DOC
 0x70000002

	)

1665 
	#SHF_PARISC_SHORT
 0x20000000

	)

1666 
	#SHF_PARISC_HUGE
 0x40000000

	)

1667 
	#SHF_PARISC_SBP
 0x80000000

	)

1671 
	#STT_PARISC_MILLICODE
 13

	)

1673 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1674 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1678 
	#R_PARISC_NONE
 0

	)

1679 
	#R_PARISC_DIR32
 1

	)

1680 
	#R_PARISC_DIR21L
 2

	)

1681 
	#R_PARISC_DIR17R
 3

	)

1682 
	#R_PARISC_DIR17F
 4

	)

1683 
	#R_PARISC_DIR14R
 6

	)

1684 
	#R_PARISC_PCREL32
 9

	)

1685 
	#R_PARISC_PCREL21L
 10

	)

1686 
	#R_PARISC_PCREL17R
 11

	)

1687 
	#R_PARISC_PCREL17F
 12

	)

1688 
	#R_PARISC_PCREL14R
 14

	)

1689 
	#R_PARISC_DPREL21L
 18

	)

1690 
	#R_PARISC_DPREL14R
 22

	)

1691 
	#R_PARISC_GPREL21L
 26

	)

1692 
	#R_PARISC_GPREL14R
 30

	)

1693 
	#R_PARISC_LTOFF21L
 34

	)

1694 
	#R_PARISC_LTOFF14R
 38

	)

1695 
	#R_PARISC_SECREL32
 41

	)

1696 
	#R_PARISC_SEGBASE
 48

	)

1697 
	#R_PARISC_SEGREL32
 49

	)

1698 
	#R_PARISC_PLTOFF21L
 50

	)

1699 
	#R_PARISC_PLTOFF14R
 54

	)

1700 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1701 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1702 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1703 
	#R_PARISC_FPTR64
 64

	)

1704 
	#R_PARISC_PLABEL32
 65

	)

1705 
	#R_PARISC_PLABEL21L
 66

	)

1706 
	#R_PARISC_PLABEL14R
 70

	)

1707 
	#R_PARISC_PCREL64
 72

	)

1708 
	#R_PARISC_PCREL22F
 74

	)

1709 
	#R_PARISC_PCREL14WR
 75

	)

1710 
	#R_PARISC_PCREL14DR
 76

	)

1711 
	#R_PARISC_PCREL16F
 77

	)

1712 
	#R_PARISC_PCREL16WF
 78

	)

1713 
	#R_PARISC_PCREL16DF
 79

	)

1714 
	#R_PARISC_DIR64
 80

	)

1715 
	#R_PARISC_DIR14WR
 83

	)

1716 
	#R_PARISC_DIR14DR
 84

	)

1717 
	#R_PARISC_DIR16F
 85

	)

1718 
	#R_PARISC_DIR16WF
 86

	)

1719 
	#R_PARISC_DIR16DF
 87

	)

1720 
	#R_PARISC_GPREL64
 88

	)

1721 
	#R_PARISC_GPREL14WR
 91

	)

1722 
	#R_PARISC_GPREL14DR
 92

	)

1723 
	#R_PARISC_GPREL16F
 93

	)

1724 
	#R_PARISC_GPREL16WF
 94

	)

1725 
	#R_PARISC_GPREL16DF
 95

	)

1726 
	#R_PARISC_LTOFF64
 96

	)

1727 
	#R_PARISC_LTOFF14WR
 99

	)

1728 
	#R_PARISC_LTOFF14DR
 100

	)

1729 
	#R_PARISC_LTOFF16F
 101

	)

1730 
	#R_PARISC_LTOFF16WF
 102

	)

1731 
	#R_PARISC_LTOFF16DF
 103

	)

1732 
	#R_PARISC_SECREL64
 104

	)

1733 
	#R_PARISC_SEGREL64
 112

	)

1734 
	#R_PARISC_PLTOFF14WR
 115

	)

1735 
	#R_PARISC_PLTOFF14DR
 116

	)

1736 
	#R_PARISC_PLTOFF16F
 117

	)

1737 
	#R_PARISC_PLTOFF16WF
 118

	)

1738 
	#R_PARISC_PLTOFF16DF
 119

	)

1739 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1740 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1741 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1742 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1743 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1744 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1745 
	#R_PARISC_LORESERVE
 128

	)

1746 
	#R_PARISC_COPY
 128

	)

1747 
	#R_PARISC_IPLT
 129

	)

1748 
	#R_PARISC_EPLT
 130

	)

1749 
	#R_PARISC_TPREL32
 153

	)

1750 
	#R_PARISC_TPREL21L
 154

	)

1751 
	#R_PARISC_TPREL14R
 158

	)

1752 
	#R_PARISC_LTOFF_TP21L
 162

	)

1753 
	#R_PARISC_LTOFF_TP14R
 166

	)

1754 
	#R_PARISC_LTOFF_TP14F
 167

	)

1755 
	#R_PARISC_TPREL64
 216

	)

1756 
	#R_PARISC_TPREL14WR
 219

	)

1757 
	#R_PARISC_TPREL14DR
 220

	)

1758 
	#R_PARISC_TPREL16F
 221

	)

1759 
	#R_PARISC_TPREL16WF
 222

	)

1760 
	#R_PARISC_TPREL16DF
 223

	)

1761 
	#R_PARISC_LTOFF_TP64
 224

	)

1762 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1763 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1764 
	#R_PARISC_LTOFF_TP16F
 229

	)

1765 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1766 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1767 
	#R_PARISC_HIRESERVE
 255

	)

1771 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1772 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1773 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1774 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1775 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1776 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1777 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1778 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1779 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1780 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1781 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1782 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1783 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1784 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1785 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1787 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1788 
	#PT_PARISC_UNWIND
 0x70000001

	)

1792 
	#PF_PARISC_SBP
 0x08000000

	)

1794 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1795 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1796 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1797 
	#PF_HP_CODE
 0x01000000

	)

1798 
	#PF_HP_MODIFY
 0x02000000

	)

1799 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1800 
	#PF_HP_SBP
 0x08000000

	)

1806 
	#EF_ALPHA_32BIT
 1

	)

1807 
	#EF_ALPHA_CANRELAX
 2

	)

1812 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1813 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1817 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1820 
	#STO_ALPHA_NOPV
 0x80

	)

1821 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1825 
	#R_ALPHA_NONE
 0

	)

1826 
	#R_ALPHA_REFLONG
 1

	)

1827 
	#R_ALPHA_REFQUAD
 2

	)

1828 
	#R_ALPHA_GPREL32
 3

	)

1829 
	#R_ALPHA_LITERAL
 4

	)

1830 
	#R_ALPHA_LITUSE
 5

	)

1831 
	#R_ALPHA_GPDISP
 6

	)

1832 
	#R_ALPHA_BRADDR
 7

	)

1833 
	#R_ALPHA_HINT
 8

	)

1834 
	#R_ALPHA_SREL16
 9

	)

1835 
	#R_ALPHA_SREL32
 10

	)

1836 
	#R_ALPHA_SREL64
 11

	)

1837 
	#R_ALPHA_GPRELHIGH
 17

	)

1838 
	#R_ALPHA_GPRELLOW
 18

	)

1839 
	#R_ALPHA_GPREL16
 19

	)

1840 
	#R_ALPHA_COPY
 24

	)

1841 
	#R_ALPHA_GLOB_DAT
 25

	)

1842 
	#R_ALPHA_JMP_SLOT
 26

	)

1843 
	#R_ALPHA_RELATIVE
 27

	)

1844 
	#R_ALPHA_TLS_GD_HI
 28

	)

1845 
	#R_ALPHA_TLSGD
 29

	)

1846 
	#R_ALPHA_TLS_LDM
 30

	)

1847 
	#R_ALPHA_DTPMOD64
 31

	)

1848 
	#R_ALPHA_GOTDTPREL
 32

	)

1849 
	#R_ALPHA_DTPREL64
 33

	)

1850 
	#R_ALPHA_DTPRELHI
 34

	)

1851 
	#R_ALPHA_DTPRELLO
 35

	)

1852 
	#R_ALPHA_DTPREL16
 36

	)

1853 
	#R_ALPHA_GOTTPREL
 37

	)

1854 
	#R_ALPHA_TPREL64
 38

	)

1855 
	#R_ALPHA_TPRELHI
 39

	)

1856 
	#R_ALPHA_TPRELLO
 40

	)

1857 
	#R_ALPHA_TPREL16
 41

	)

1859 
	#R_ALPHA_NUM
 46

	)

1862 
	#LITUSE_ALPHA_ADDR
 0

	)

1863 
	#LITUSE_ALPHA_BASE
 1

	)

1864 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1865 
	#LITUSE_ALPHA_JSR
 3

	)

1866 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1867 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1872 
	#EF_PPC_EMB
 0x80000000

	)

1875 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1876 
	#EF_PPC_RELOCATABLE_LIB
 \

1877 0x00008000

	)

1881 
	#R_PPC_NONE
 0

	)

1882 
	#R_PPC_ADDR32
 1

	)

1883 
	#R_PPC_ADDR24
 2

	)

1884 
	#R_PPC_ADDR16
 3

	)

1885 
	#R_PPC_ADDR16_LO
 4

	)

1886 
	#R_PPC_ADDR16_HI
 5

	)

1887 
	#R_PPC_ADDR16_HA
 6

	)

1888 
	#R_PPC_ADDR14
 7

	)

1889 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1890 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1891 
	#R_PPC_REL24
 10

	)

1892 
	#R_PPC_REL14
 11

	)

1893 
	#R_PPC_REL14_BRTAKEN
 12

	)

1894 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1895 
	#R_PPC_GOT16
 14

	)

1896 
	#R_PPC_GOT16_LO
 15

	)

1897 
	#R_PPC_GOT16_HI
 16

	)

1898 
	#R_PPC_GOT16_HA
 17

	)

1899 
	#R_PPC_PLTREL24
 18

	)

1900 
	#R_PPC_COPY
 19

	)

1901 
	#R_PPC_GLOB_DAT
 20

	)

1902 
	#R_PPC_JMP_SLOT
 21

	)

1903 
	#R_PPC_RELATIVE
 22

	)

1904 
	#R_PPC_LOCAL24PC
 23

	)

1905 
	#R_PPC_UADDR32
 24

	)

1906 
	#R_PPC_UADDR16
 25

	)

1907 
	#R_PPC_REL32
 26

	)

1908 
	#R_PPC_PLT32
 27

	)

1909 
	#R_PPC_PLTREL32
 28

	)

1910 
	#R_PPC_PLT16_LO
 29

	)

1911 
	#R_PPC_PLT16_HI
 30

	)

1912 
	#R_PPC_PLT16_HA
 31

	)

1913 
	#R_PPC_SDAREL16
 32

	)

1914 
	#R_PPC_SECTOFF
 33

	)

1915 
	#R_PPC_SECTOFF_LO
 34

	)

1916 
	#R_PPC_SECTOFF_HI
 35

	)

1917 
	#R_PPC_SECTOFF_HA
 36

	)

1920 
	#R_PPC_TLS
 67

	)

1921 
	#R_PPC_DTPMOD32
 68

	)

1922 
	#R_PPC_TPREL16
 69

	)

1923 
	#R_PPC_TPREL16_LO
 70

	)

1924 
	#R_PPC_TPREL16_HI
 71

	)

1925 
	#R_PPC_TPREL16_HA
 72

	)

1926 
	#R_PPC_TPREL32
 73

	)

1927 
	#R_PPC_DTPREL16
 74

	)

1928 
	#R_PPC_DTPREL16_LO
 75

	)

1929 
	#R_PPC_DTPREL16_HI
 76

	)

1930 
	#R_PPC_DTPREL16_HA
 77

	)

1931 
	#R_PPC_DTPREL32
 78

	)

1932 
	#R_PPC_GOT_TLSGD16
 79

	)

1933 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1934 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1935 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1936 
	#R_PPC_GOT_TLSLD16
 83

	)

1937 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1938 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1939 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1940 
	#R_PPC_GOT_TPREL16
 87

	)

1941 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1942 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1943 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1944 
	#R_PPC_GOT_DTPREL16
 91

	)

1945 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

1946 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

1947 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

1950 
	#R_PPC_NUM
 95

	)

1954 
	#R_PPC_EMB_NADDR32
 101

	)

1955 
	#R_PPC_EMB_NADDR16
 102

	)

1956 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1957 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1958 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1959 
	#R_PPC_EMB_SDAI16
 106

	)

1960 
	#R_PPC_EMB_SDA2I16
 107

	)

1961 
	#R_PPC_EMB_SDA2REL
 108

	)

1962 
	#R_PPC_EMB_SDA21
 109

	)

1963 
	#R_PPC_EMB_MRKREF
 110

	)

1964 
	#R_PPC_EMB_RELSEC16
 111

	)

1965 
	#R_PPC_EMB_RELST_LO
 112

	)

1966 
	#R_PPC_EMB_RELST_HI
 113

	)

1967 
	#R_PPC_EMB_RELST_HA
 114

	)

1968 
	#R_PPC_EMB_BIT_FLD
 115

	)

1969 
	#R_PPC_EMB_RELSDA
 116

	)

1972 
	#R_PPC_DIAB_SDA21_LO
 180

	)

1973 
	#R_PPC_DIAB_SDA21_HI
 181

	)

1974 
	#R_PPC_DIAB_SDA21_HA
 182

	)

1975 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

1976 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

1977 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

1981 
	#R_PPC_TOC16
 255

	)

1984 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

1985 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

1986 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

1987 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

1988 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

1989 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

1990 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

1991 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

1992 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

1993 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

1994 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

1995 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

1996 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

1997 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

1998 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

1999 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2000 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2001 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2003 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2004 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2005 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2006 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2008 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2009 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2010 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2011 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2012 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2013 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2014 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2015 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2017 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2018 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2019 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2020 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2021 
	#R_PPC64_ADDR30
 37

	)

2022 
	#R_PPC64_ADDR64
 38

	)

2023 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2024 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2025 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2026 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2027 
	#R_PPC64_UADDR64
 43

	)

2028 
	#R_PPC64_REL64
 44

	)

2029 
	#R_PPC64_PLT64
 45

	)

2030 
	#R_PPC64_PLTREL64
 46

	)

2031 
	#R_PPC64_TOC16
 47

	)

2032 
	#R_PPC64_TOC16_LO
 48

	)

2033 
	#R_PPC64_TOC16_HI
 49

	)

2034 
	#R_PPC64_TOC16_HA
 50

	)

2035 
	#R_PPC64_TOC
 51

	)

2036 
	#R_PPC64_PLTGOT16
 52

	)

2037 
	#R_PPC64_PLTGOT16_LO
 53

	)

2038 
	#R_PPC64_PLTGOT16_HI
 54

	)

2039 
	#R_PPC64_PLTGOT16_HA
 55

	)

2041 
	#R_PPC64_ADDR16_DS
 56

	)

2042 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2043 
	#R_PPC64_GOT16_DS
 58

	)

2044 
	#R_PPC64_GOT16_LO_DS
 59

	)

2045 
	#R_PPC64_PLT16_LO_DS
 60

	)

2046 
	#R_PPC64_SECTOFF_DS
 61

	)

2047 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2048 
	#R_PPC64_TOC16_DS
 63

	)

2049 
	#R_PPC64_TOC16_LO_DS
 64

	)

2050 
	#R_PPC64_PLTGOT16_DS
 65

	)

2051 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2054 
	#R_PPC64_TLS
 67

	)

2055 
	#R_PPC64_DTPMOD64
 68

	)

2056 
	#R_PPC64_TPREL16
 69

	)

2057 
	#R_PPC64_TPREL16_LO
 70

	)

2058 
	#R_PPC64_TPREL16_HI
 71

	)

2059 
	#R_PPC64_TPREL16_HA
 72

	)

2060 
	#R_PPC64_TPREL64
 73

	)

2061 
	#R_PPC64_DTPREL16
 74

	)

2062 
	#R_PPC64_DTPREL16_LO
 75

	)

2063 
	#R_PPC64_DTPREL16_HI
 76

	)

2064 
	#R_PPC64_DTPREL16_HA
 77

	)

2065 
	#R_PPC64_DTPREL64
 78

	)

2066 
	#R_PPC64_GOT_TLSGD16
 79

	)

2067 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2068 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2069 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2070 
	#R_PPC64_GOT_TLSLD16
 83

	)

2071 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2072 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2073 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2074 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2075 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2076 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2077 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2078 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2079 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2080 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2081 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2082 
	#R_PPC64_TPREL16_DS
 95

	)

2083 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2084 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2085 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2086 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2087 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2088 
	#R_PPC64_DTPREL16_DS
 101

	)

2089 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2090 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2091 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2092 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2093 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2096 
	#R_PPC64_NUM
 107

	)

2099 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2100 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2101 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2102 
	#DT_PPC64_NUM
 3

	)

2107 
	#EF_ARM_RELEXEC
 0x01

	)

2108 
	#EF_ARM_HASENTRY
 0x02

	)

2109 
	#EF_ARM_INTERWORK
 0x04

	)

2110 
	#EF_ARM_APCS_26
 0x08

	)

2111 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2112 
	#EF_ARM_PIC
 0x20

	)

2113 
	#EF_ARM_ALIGN8
 0x40

	)

2114 
	#EF_ARM_NEW_ABI
 0x80

	)

2115 
	#EF_ARM_OLD_ABI
 0x100

	)

2119 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2120 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2121 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2122 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2124 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((Êags)&
EF_ARM_EABIMASK
)

	)

2125 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2126 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2127 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2130 
	#STT_ARM_TFUNC
 0xd

	)

2133 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2134 
	#SHF_ARM_COMDEF
 \

2135 0x80000000

	)

2139 
	#PF_ARM_SB
 \

2140 0x10000000

	)

2144 
	#R_ARM_NONE
 0

	)

2145 
	#R_ARM_PC24
 1

	)

2146 
	#R_ARM_ABS32
 2

	)

2147 
	#R_ARM_REL32
 3

	)

2148 
	#R_ARM_PC13
 4

	)

2149 
	#R_ARM_ABS16
 5

	)

2150 
	#R_ARM_ABS12
 6

	)

2151 
	#R_ARM_THM_ABS5
 7

	)

2152 
	#R_ARM_ABS8
 8

	)

2153 
	#R_ARM_SBREL32
 9

	)

2154 
	#R_ARM_THM_PC22
 10

	)

2155 
	#R_ARM_THM_PC8
 11

	)

2156 
	#R_ARM_AMP_VCALL9
 12

	)

2157 
	#R_ARM_SWI24
 13

	)

2158 
	#R_ARM_THM_SWI8
 14

	)

2159 
	#R_ARM_XPC25
 15

	)

2160 
	#R_ARM_THM_XPC22
 16

	)

2161 
	#R_ARM_COPY
 20

	)

2162 
	#R_ARM_GLOB_DAT
 21

	)

2163 
	#R_ARM_JUMP_SLOT
 22

	)

2164 
	#R_ARM_RELATIVE
 23

	)

2165 
	#R_ARM_GOTOFF
 24

	)

2166 
	#R_ARM_GOTPC
 25

	)

2167 
	#R_ARM_GOT32
 26

	)

2168 
	#R_ARM_PLT32
 27

	)

2169 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2170 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2171 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2172 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2173 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2174 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2175 
	#R_ARM_GNU_VTENTRY
 100

	)

2176 
	#R_ARM_GNU_VTINHERIT
 101

	)

2177 
	#R_ARM_THM_PC11
 102

	)

2178 
	#R_ARM_THM_PC9
 103

	)

2179 
	#R_ARM_RXPC25
 249

	)

2180 
	#R_ARM_RSBREL32
 250

	)

2181 
	#R_ARM_THM_RPC22
 251

	)

2182 
	#R_ARM_RREL32
 252

	)

2183 
	#R_ARM_RABS22
 253

	)

2184 
	#R_ARM_RPC24
 254

	)

2185 
	#R_ARM_RBASE
 255

	)

2187 
	#R_ARM_NUM
 256

	)

2192 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2193 
	#EF_IA_64_ABI64
 0x00000010

	)

2194 
	#EF_IA_64_ARCH
 0xff000000

	)

2197 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2198 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2199 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2200 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2201 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2204 
	#PF_IA_64_NORECOV
 0x80000000

	)

2207 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2208 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2211 
	#SHF_IA_64_SHORT
 0x10000000

	)

2212 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2215 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2216 
	#DT_IA_64_NUM
 1

	)

2219 
	#R_IA64_NONE
 0x00

	)

2220 
	#R_IA64_IMM14
 0x21

	)

2221 
	#R_IA64_IMM22
 0x22

	)

2222 
	#R_IA64_IMM64
 0x23

	)

2223 
	#R_IA64_DIR32MSB
 0x24

	)

2224 
	#R_IA64_DIR32LSB
 0x25

	)

2225 
	#R_IA64_DIR64MSB
 0x26

	)

2226 
	#R_IA64_DIR64LSB
 0x27

	)

2227 
	#R_IA64_GPREL22
 0x2®

	)

2228 
	#R_IA64_GPREL64I
 0x2b

	)

2229 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2230 
	#R_IA64_GPREL32LSB
 0x2d

	)

2231 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2232 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2233 
	#R_IA64_LTOFF22
 0x32

	)

2234 
	#R_IA64_LTOFF64I
 0x33

	)

2235 
	#R_IA64_PLTOFF22
 0x3®

	)

2236 
	#R_IA64_PLTOFF64I
 0x3b

	)

2237 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2238 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2239 
	#R_IA64_FPTR64I
 0x43

	)

2240 
	#R_IA64_FPTR32MSB
 0x44

	)

2241 
	#R_IA64_FPTR32LSB
 0x45

	)

2242 
	#R_IA64_FPTR64MSB
 0x46

	)

2243 
	#R_IA64_FPTR64LSB
 0x47

	)

2244 
	#R_IA64_PCREL60B
 0x48

	)

2245 
	#R_IA64_PCREL21B
 0x49

	)

2246 
	#R_IA64_PCREL21M
 0x4®

	)

2247 
	#R_IA64_PCREL21F
 0x4b

	)

2248 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2249 
	#R_IA64_PCREL32LSB
 0x4d

	)

2250 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2251 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2252 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2253 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2254 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2255 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2256 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2257 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2258 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2259 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2260 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2261 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2262 
	#R_IA64_SECREL32MSB
 0x64

	)

2263 
	#R_IA64_SECREL32LSB
 0x65

	)

2264 
	#R_IA64_SECREL64MSB
 0x66

	)

2265 
	#R_IA64_SECREL64LSB
 0x67

	)

2266 
	#R_IA64_REL32MSB
 0x6¯

	)

2267 
	#R_IA64_REL32LSB
 0x6d

	)

2268 
	#R_IA64_REL64MSB
 0x6ê

	)

2269 
	#R_IA64_REL64LSB
 0x6‡

	)

2270 
	#R_IA64_LTV32MSB
 0x74

	)

2271 
	#R_IA64_LTV32LSB
 0x75

	)

2272 
	#R_IA64_LTV64MSB
 0x76

	)

2273 
	#R_IA64_LTV64LSB
 0x77

	)

2274 
	#R_IA64_PCREL21BI
 0x79

	)

2275 
	#R_IA64_PCREL22
 0x7®

	)

2276 
	#R_IA64_PCREL64I
 0x7b

	)

2277 
	#R_IA64_IPLTMSB
 0x80

	)

2278 
	#R_IA64_IPLTLSB
 0x81

	)

2279 
	#R_IA64_COPY
 0x84

	)

2280 
	#R_IA64_SUB
 0x85

	)

2281 
	#R_IA64_LTOFF22X
 0x86

	)

2282 
	#R_IA64_LDXMOV
 0x87

	)

2283 
	#R_IA64_TPREL14
 0x91

	)

2284 
	#R_IA64_TPREL22
 0x92

	)

2285 
	#R_IA64_TPREL64I
 0x93

	)

2286 
	#R_IA64_TPREL64MSB
 0x96

	)

2287 
	#R_IA64_TPREL64LSB
 0x97

	)

2288 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2289 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2290 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2291 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2292 
	#R_IA64_DTPREL14
 0xb1

	)

2293 
	#R_IA64_DTPREL22
 0xb2

	)

2294 
	#R_IA64_DTPREL64I
 0xb3

	)

2295 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2296 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2297 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2298 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2299 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2304 
	#R_SH_NONE
 0

	)

2305 
	#R_SH_DIR32
 1

	)

2306 
	#R_SH_REL32
 2

	)

2307 
	#R_SH_DIR8WPN
 3

	)

2308 
	#R_SH_IND12W
 4

	)

2309 
	#R_SH_DIR8WPL
 5

	)

2310 
	#R_SH_DIR8WPZ
 6

	)

2311 
	#R_SH_DIR8BP
 7

	)

2312 
	#R_SH_DIR8W
 8

	)

2313 
	#R_SH_DIR8L
 9

	)

2314 
	#R_SH_SWITCH16
 25

	)

2315 
	#R_SH_SWITCH32
 26

	)

2316 
	#R_SH_USES
 27

	)

2317 
	#R_SH_COUNT
 28

	)

2318 
	#R_SH_ALIGN
 29

	)

2319 
	#R_SH_CODE
 30

	)

2320 
	#R_SH_DATA
 31

	)

2321 
	#R_SH_LABEL
 32

	)

2322 
	#R_SH_SWITCH8
 33

	)

2323 
	#R_SH_GNU_VTINHERIT
 34

	)

2324 
	#R_SH_GNU_VTENTRY
 35

	)

2325 
	#R_SH_TLS_GD_32
 144

	)

2326 
	#R_SH_TLS_LD_32
 145

	)

2327 
	#R_SH_TLS_LDO_32
 146

	)

2328 
	#R_SH_TLS_IE_32
 147

	)

2329 
	#R_SH_TLS_LE_32
 148

	)

2330 
	#R_SH_TLS_DTPMOD32
 149

	)

2331 
	#R_SH_TLS_DTPOFF32
 150

	)

2332 
	#R_SH_TLS_TPOFF32
 151

	)

2333 
	#R_SH_GOT32
 160

	)

2334 
	#R_SH_PLT32
 161

	)

2335 
	#R_SH_COPY
 162

	)

2336 
	#R_SH_GLOB_DAT
 163

	)

2337 
	#R_SH_JMP_SLOT
 164

	)

2338 
	#R_SH_RELATIVE
 165

	)

2339 
	#R_SH_GOTOFF
 166

	)

2340 
	#R_SH_GOTPC
 167

	)

2342 
	#R_SH_NUM
 256

	)

2346 
	#R_390_NONE
 0

	)

2347 
	#R_390_8
 1

	)

2348 
	#R_390_12
 2

	)

2349 
	#R_390_16
 3

	)

2350 
	#R_390_32
 4

	)

2351 
	#R_390_PC32
 5

	)

2352 
	#R_390_GOT12
 6

	)

2353 
	#R_390_GOT32
 7

	)

2354 
	#R_390_PLT32
 8

	)

2355 
	#R_390_COPY
 9

	)

2356 
	#R_390_GLOB_DAT
 10

	)

2357 
	#R_390_JMP_SLOT
 11

	)

2358 
	#R_390_RELATIVE
 12

	)

2359 
	#R_390_GOTOFF32
 13

	)

2360 
	#R_390_GOTPC
 14

	)

2361 
	#R_390_GOT16
 15

	)

2362 
	#R_390_PC16
 16

	)

2363 
	#R_390_PC16DBL
 17

	)

2364 
	#R_390_PLT16DBL
 18

	)

2365 
	#R_390_PC32DBL
 19

	)

2366 
	#R_390_PLT32DBL
 20

	)

2367 
	#R_390_GOTPCDBL
 21

	)

2368 
	#R_390_64
 22

	)

2369 
	#R_390_PC64
 23

	)

2370 
	#R_390_GOT64
 24

	)

2371 
	#R_390_PLT64
 25

	)

2372 
	#R_390_GOTENT
 26

	)

2373 
	#R_390_GOTOFF16
 27

	)

2374 
	#R_390_GOTOFF64
 28

	)

2375 
	#R_390_GOTPLT12
 29

	)

2376 
	#R_390_GOTPLT16
 30

	)

2377 
	#R_390_GOTPLT32
 31

	)

2378 
	#R_390_GOTPLT64
 32

	)

2379 
	#R_390_GOTPLTENT
 33

	)

2380 
	#R_390_PLTOFF16
 34

	)

2381 
	#R_390_PLTOFF32
 35

	)

2382 
	#R_390_PLTOFF64
 36

	)

2383 
	#R_390_TLS_LOAD
 37

	)

2384 
	#R_390_TLS_GDCALL
 \

2385 38

	)

2387 
	#R_390_TLS_LDCALL
 \

2388 39

	)

2390 
	#R_390_TLS_GD32
 \

2391 40

	)

2393 
	#R_390_TLS_GD64
 \

2394 41

	)

2396 
	#R_390_TLS_GOTIE12
 \

2397 42

	)

2399 
	#R_390_TLS_GOTIE32
 \

2400 43

	)

2402 
	#R_390_TLS_GOTIE64
 \

2403 44

	)

2405 
	#R_390_TLS_LDM32
 \

2406 45

	)

2408 
	#R_390_TLS_LDM64
 \

2409 46

	)

2411 
	#R_390_TLS_IE32
 \

2412 47

	)

2414 
	#R_390_TLS_IE64
 \

2415 48

	)

2417 
	#R_390_TLS_IEENT
 \

2418 49

	)

2420 
	#R_390_TLS_LE32
 \

2421 50

	)

2423 
	#R_390_TLS_LE64
 \

2424 51

	)

2426 
	#R_390_TLS_LDO32
 \

2427 52

	)

2429 
	#R_390_TLS_LDO64
 \

2430 53

	)

2432 
	#R_390_TLS_DTPMOD
 54

	)

2433 
	#R_390_TLS_DTPOFF
 55

	)

2434 
	#R_390_TLS_TPOFF
 \

2435 56

	)

2437 
	#R_390_20
 57

	)

2438 
	#R_390_GOT20
 58

	)

2439 
	#R_390_GOTPLT20
 59

	)

2440 
	#R_390_TLS_GOTIE20
 \

2441 60

	)

2444 
	#R_390_NUM
 61

	)

2447 
	#R_CRIS_NONE
 0

	)

2448 
	#R_CRIS_8
 1

	)

2449 
	#R_CRIS_16
 2

	)

2450 
	#R_CRIS_32
 3

	)

2451 
	#R_CRIS_8_PCREL
 4

	)

2452 
	#R_CRIS_16_PCREL
 5

	)

2453 
	#R_CRIS_32_PCREL
 6

	)

2454 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2455 
	#R_CRIS_GNU_VTENTRY
 8

	)

2456 
	#R_CRIS_COPY
 9

	)

2457 
	#R_CRIS_GLOB_DAT
 10

	)

2458 
	#R_CRIS_JUMP_SLOT
 11

	)

2459 
	#R_CRIS_RELATIVE
 12

	)

2460 
	#R_CRIS_16_GOT
 13

	)

2461 
	#R_CRIS_32_GOT
 14

	)

2462 
	#R_CRIS_16_GOTPLT
 15

	)

2463 
	#R_CRIS_32_GOTPLT
 16

	)

2464 
	#R_CRIS_32_GOTREL
 17

	)

2465 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2466 
	#R_CRIS_32_PLT_PCREL
 19

	)

2468 
	#R_CRIS_NUM
 20

	)

2471 
	#R_X86_64_NONE
 0

	)

2472 
	#R_X86_64_64
 1

	)

2473 
	#R_X86_64_PC32
 2

	)

2474 
	#R_X86_64_GOT32
 3

	)

2475 
	#R_X86_64_PLT32
 4

	)

2476 
	#R_X86_64_COPY
 5

	)

2477 
	#R_X86_64_GLOB_DAT
 6

	)

2478 
	#R_X86_64_JUMP_SLOT
 7

	)

2479 
	#R_X86_64_RELATIVE
 8

	)

2480 
	#R_X86_64_GOTPCREL
 \

2481 9

	)

2483 
	#R_X86_64_32
 10

	)

2484 
	#R_X86_64_32S
 11

	)

2485 
	#R_X86_64_16
 12

	)

2486 
	#R_X86_64_PC16
 13

	)

2487 
	#R_X86_64_8
 14

	)

2488 
	#R_X86_64_PC8
 15

	)

2489 
	#R_X86_64_DTPMOD64
 16

	)

2490 
	#R_X86_64_DTPOFF64
 17

	)

2491 
	#R_X86_64_TPOFF64
 18

	)

2492 
	#R_X86_64_TLSGD
 \

2493 19

	)

2495 
	#R_X86_64_TLSLD
 \

2496 20

	)

2498 
	#R_X86_64_DTPOFF32
 21

	)

2499 
	#R_X86_64_GOTTPOFF
 \

2500 22

	)

2502 
	#R_X86_64_TPOFF32
 23

	)

2504 
	#R_X86_64_NUM
 24

	)

2507 
	#R_MN10300_NONE
 0

	)

2508 
	#R_MN10300_32
 1

	)

2509 
	#R_MN10300_16
 2

	)

2510 
	#R_MN10300_8
 3

	)

2511 
	#R_MN10300_PCREL32
 4

	)

2512 
	#R_MN10300_PCREL16
 5

	)

2513 
	#R_MN10300_PCREL8
 6

	)

2514 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2515 
	#R_MN10300_GNU_VTENTRY
 8

	)

2516 
	#R_MN10300_24
 9

	)

2517 
	#R_MN10300_GOTPC32
 10

	)

2518 
	#R_MN10300_GOTPC16
 11

	)

2519 
	#R_MN10300_GOTOFF32
 12

	)

2520 
	#R_MN10300_GOTOFF24
 13

	)

2521 
	#R_MN10300_GOTOFF16
 14

	)

2522 
	#R_MN10300_PLT32
 15

	)

2523 
	#R_MN10300_PLT16
 16

	)

2524 
	#R_MN10300_GOT32
 17

	)

2525 
	#R_MN10300_GOT24
 18

	)

2526 
	#R_MN10300_GOT16
 19

	)

2527 
	#R_MN10300_COPY
 20

	)

2528 
	#R_MN10300_GLOB_DAT
 21

	)

2529 
	#R_MN10300_JMP_SLOT
 22

	)

2530 
	#R_MN10300_RELATIVE
 23

	)

2532 
	#R_MN10300_NUM
 24

	)

2535 
	#R_M32R_NONE
 0

	)

2536 
	#R_M32R_16
 1

	)

2537 
	#R_M32R_32
 2

	)

2538 
	#R_M32R_24
 3

	)

2539 
	#R_M32R_10_PCREL
 4

	)

2540 
	#R_M32R_18_PCREL
 5

	)

2541 
	#R_M32R_26_PCREL
 6

	)

2542 
	#R_M32R_HI16_ULO
 7

	)

2543 
	#R_M32R_HI16_SLO
 8

	)

2544 
	#R_M32R_LO16
 9

	)

2545 
	#R_M32R_SDA16
 10

	)

2546 
	#R_M32R_GNU_VTINHERIT
 11

	)

2547 
	#R_M32R_GNU_VTENTRY
 12

	)

2549 
	#R_M32R_16_RELA
 33

	)

2550 
	#R_M32R_32_RELA
 34

	)

2551 
	#R_M32R_24_RELA
 35

	)

2552 
	#R_M32R_10_PCREL_RELA
 36

	)

2553 
	#R_M32R_18_PCREL_RELA
 37

	)

2554 
	#R_M32R_26_PCREL_RELA
 38

	)

2555 
	#R_M32R_HI16_ULO_RELA
 39

	)

2556 
	#R_M32R_HI16_SLO_RELA
 40

	)

2557 
	#R_M32R_LO16_RELA
 41

	)

2558 
	#R_M32R_SDA16_RELA
 42

	)

2559 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2560 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2562 
	#R_M32R_GOT24
 48

	)

2563 
	#R_M32R_26_PLTREL
 49

	)

2564 
	#R_M32R_COPY
 50

	)

2565 
	#R_M32R_GLOB_DAT
 51

	)

2566 
	#R_M32R_JMP_SLOT
 52

	)

2567 
	#R_M32R_RELATIVE
 53

	)

2568 
	#R_M32R_GOTOFF
 54

	)

2569 
	#R_M32R_GOTPC24
 55

	)

2570 
	#R_M32R_GOT16_HI_ULO
 \

2571 56

	)

2573 
	#R_M32R_GOT16_HI_SLO
 \

2574 57

	)

2576 
	#R_M32R_GOT16_LO
 58

	)

2577 
	#R_M32R_GOTPC_HI_ULO
 \

2578 59

	)

2580 
	#R_M32R_GOTPC_HI_SLO
 \

2581 60

	)

2583 
	#R_M32R_GOTPC_LO
 \

2584 61

	)

2586 
	#R_M32R_GOTOFF_HI_ULO
 \

2587 62

	)

2589 
	#R_M32R_GOTOFF_HI_SLO
 \

2590 63

	)

2592 
	#R_M32R_GOTOFF_LO
 64

	)

2593 
	#R_M32R_NUM
 256

	)

	@kernel/include/api/exec.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	gªgs
;

7 
do_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
,

8 
ªgs
 *regs);

10 
kî√l_execve
(c⁄° *
fûíame
, *c⁄° *
¨gv
, *c⁄° *
ívp
);

12 
u£æ™d_íåy
(
ªgs
Ñegs);

	@kernel/include/api/syscall.h

1 #¥agm®
⁄˚


5 #ifde‡
__KERNEL__


6 
	~"ty≥s.h
"

9 
	~"sys/ty≥s.h
"

14 
	#INTR_SYSCALL
 0x2e

	)

18 
	#SYS_sysˇŒ
 0

	)

19 
	#SYS_exô
 1

	)

20 
	#SYS_f‹k
 2

	)

21 
	#SYS_ªad
 3

	)

22 
	#SYS_wrôe
 4

	)

23 
	#SYS_›í
 5

	)

24 
	#SYS_˛o£
 6

	)

25 
	#SYS_waôpid
 7

	)

26 
	#SYS_lök
 8

	)

27 
	#SYS_u∆ök
 9

	)

28 
	#SYS_execve
 10

	)

29 
	#SYS_chdú
 11

	)

30 
	#SYS_¶ìp
 12

	)

31 
	#SYS_l£ek
 14

	)

32 
	#SYS_sync
 15

	)

33 
	#SYS_nuke
 16

	)

34 
	#SYS_dup
 17

	)

35 
	#SYS_pùe
 18

	)

36 
	#SYS_io˘l
 19

	)

37 
	#SYS_rmdú
 21

	)

38 
	#SYS_mkdú
 22

	)

39 
	#SYS_gëdíts
 23

	)

40 
	#SYS_mm≠
 24

	)

41 
	#SYS_m¥Ÿe˘
 25

	)

42 
	#SYS_munm≠
 26

	)

43 
	#SYS_ª«me
 27

	)

44 
	#SYS_u«me
 28

	)

45 
	#SYS_thr_¸óã
 29

	)

46 
	#SYS_thr_ˇn˚l
 30

	)

47 
	#SYS_thr_exô
 31

	)

48 
	#SYS_sched_yõld
 32

	)

49 
	#SYS_thr_joö
 33

	)

50 
	#SYS_gëtid
 34

	)

51 
	#SYS_gëpid
 35

	)

52 
	#SYS_î∫o
 39

	)

53 
	#SYS_hÆt
 40

	)

54 
	#SYS_gë_‰ì_mem
 41

	)

55 
	#SYS_£t_î∫o
 42

	)

56 
	#SYS_dup2
 43

	)

57 
	#SYS_brk
 44

	)

58 
	#SYS_mou¡
 45

	)

59 
	#SYS_umou¡
 46

	)

60 
	#SYS_°©
 47

	)

61 
	#SYS_time
 48

	)

62 
	#SYS_u¶ìp
 49

	)

69 
	#SYS_debug
 9001

	)

70 
	#SYS_kshñl
 9002

	)

72 
	gªgs
;

73 
	g°©
;

75 
	s¨g°r


77 c⁄° *
	mas_°r
;

78 
size_t
 
	mas_Àn
;

79 } 
	t¨g°r_t
;

81 
	s¨gvec


83 
¨g°r_t
 *
	mav_vec
;

84 
size_t
 
	mav_Àn
;

85 } 
	t¨gvec_t
;

87 
	swaôpid_¨gs


89 
pid_t
 
	mw∑_pid
;

90 *
	mw∑_°©us
;

91 
	mw∑_›ti⁄s
;

92 } 
	twaôpid_¨gs_t
;

94 
	smm≠_¨gs


96 *
	mmma_addr
;

97 
size_t
 
	mmma_Àn
;

98 
	mmma_¥Ÿ
;

99 
	mmma_Êags
;

100 
	mmma_fd
;

101 
off_t
 
	mmma_off
;

102 } 
	tmm≠_¨gs_t
;

104 
	smunm≠_¨gs


106 *
	maddr
;

107 
size_t
 
	mÀn
;

108 } 
	tmunm≠_¨gs_t
;

110 
	s›í_¨gs


112 
¨g°r_t
 
	mfûíame
;

113 
	mÊags
;

114 
	mmode
;

115 } 
	t›í_¨gs_t
;

117 
	sªad_¨gs


119 
	mfd
;

120 *
	mbuf
;

121 
size_t
 
	mnbyãs
;

122 } 
	tªad_¨gs_t
;

124 
	swrôe_¨gs


126 
	mfd
;

127 *
	mbuf
;

128 
size_t
 
	mnbyãs
;

129 } 
	twrôe_¨gs_t
;

131 
	smkdú_¨gs


133 
¨g°r_t
 
	m∑th
;

134 
	mmode
;

135 } 
	tmkdú_¨gs_t
;

137 
	slök_¨gs


139 
¨g°r_t
 
	mto
;

140 
¨g°r_t
 
	m‰om
;

141 } 
	tlök_¨gs_t
;

143 
	sexecve_¨gs


145 
¨g°r_t
 
	mfûíame
;

146 
¨gvec_t
 
	m¨gv
;

147 
¨gvec_t
 
	mívp
;

148 } 
	texecve_¨gs_t
;

150 
	sª«me_¨gs


152 
¨g°r_t
 
	mﬁd∑th
;

153 
¨g°r_t
 
	m√w∑th
;

154 } 
	tª«me_¨gs_t
;

156 
	sgëdíts_¨gs


158 
	mfd
;

159 
dúít
 *
	mdúp
;

160 
size_t
 
	mcou¡
;

161 } 
	tgëdíts_¨gs_t
;

163 
	sl£ek_¨gs


165 
	mfd
;

166 
off_t
 
	moff£t
;

167 
	mwhí˚
;

168 } 
	tl£ek_¨gs_t
;

170 
	sdup2_¨gs


172 
	mofd
;

173 
	mnfd
;

174 } 
	tdup2_¨gs_t
;

176 #ifde‡
__MOUNTING__


177 
	smou¡_¨gs


179 
¨g°r_t
 
	m•ec
;

180 
¨g°r_t
 
	mdú
;

181 
¨g°r_t
 
	mf°y≥
;

182 } 
	tmou¡_¨gs_t
;

185 
	s°©_¨gs


187 
¨g°r_t
 
	m∑th
;

188 
°©
 *
	mbuf
;

189 } 
	t°©_¨gs_t
;

191 
	su¶ìp_¨gs


193 
u£c⁄ds_t
 
	mu£c
;

194 } 
	tu¶ìp_¨gs_t
;

196 
	gut¢ame
;

	@kernel/include/api/utsname.h

1 #¥agm®
⁄˚


3 
	#_UTSNAME_LENGTH
 128

	)

5 
	sut¢ame


7 
	msy¢ame
[
_UTSNAME_LENGTH
];

8 
	mnodíame
[
_UTSNAME_LENGTH
];

9 
	mªÀa£
[
_UTSNAME_LENGTH
];

10 
	mvîsi⁄
[
_UTSNAME_LENGTH
];

11 
	mmachöe
[
_UTSNAME_LENGTH
];

14 
u«me
(
ut¢ame
 *
buf
);

	@kernel/include/boot/config.h

1 #¥agm®
⁄˚


3 
	#IDENTITY_MAPPED_RAM_SIZE
 (1 << 16)

	)

5 
	#KERNEL_PHYS_BASE
 ((
uöçå_t
)(&
kî√l_phys_ba£
))

	)

6 
	#KERNEL_PHYS_END
 ((
uöçå_t
)(&
kî√l_phys_íd
))

	)

7 
	#KERNEL_VMA
 0xffff800000000000

	)

10 
	#PHYS_OFFSET
 0xffff880000000000

	)

12 
	#MEMORY_MAP_BASE
 0x9000

	)

	@kernel/include/boot/multiboot_macros.h

1 #¥agm®
⁄˚


4 
	#TAG_SIZE
(
x
Ë(((x)-1Ë/ 
MULTIBOOT_TAG_ALIGN
 + 1)

	)

6 
mu…iboŸ_èg
 *
mb_èg
;

	@kernel/include/config.h

7 #¥agm®
⁄˚


14 
	#DEFAULT_STACK_SIZE_PAGES
 16

	)

15 
	#DEFAULT_STACK_SIZE
 (
DEFAULT_STACK_SIZE_PAGES
 << 
PAGE_SHIFT
)

	)

16 
	#TICK_MSECS
 10

	)

26 
	#KMEM_FRAC
(
x
Ë(((xË>> 2Ë+ ((xË>> 3)Ë

	)

29 
	#PF_HASH_SIZE
 17

	)

35 
	#MAXPATHLEN
 1024

	)

36 
	#MAX_FILES
 1024

	)

37 
	#MAX_VFS
 8

	)

38 
	#MAX_VNODES
 1024

	)

39 
	#NAME_LEN
 28

	)

40 
	#NFILES
 32

	)

43 
	#VFS_ROOTFS_DEV
 "disk0"

	)

46 #ifde‡
__S5FS__


47 
	#VFS_ROOTFS_TYPE
 "s5fs"

	)

49 
	#VFS_ROOTFS_TYPE
 "ømfs"

	)

	@kernel/include/ctype.h

1 #¥agm®
⁄˚


3 #ifde‡
__KERNEL__


4 
	~"kî√l.h
"

5 
	~"ty≥s.h
"

8 
	~"°ddef.h
"

9 
	~"sys/ty≥s.h
"

21 
	#_U
 0x01

	)

22 
	#_L
 0x02

	)

23 
	#_D
 0x04

	)

24 
	#_C
 0x08

	)

25 
	#_P
 0x10

	)

26 
	#_S
 0x20

	)

27 
	#_X
 0x40

	)

28 
	#_SP
 0x80

	)

31 
	g_˘y≥
[] = {
_C
, _C, _C, _C, _C, _C,

32 
_C
, _C,

33 
_C
, _C | 
_S
, _C | _S, _C | _S, _C | _S, _C | _S,

34 
_C
, _C,

35 
_C
, _C, _C, _C, _C, _C,

36 
_C
, _C,

37 
_C
, _C, _C, _C, _C, _C,

38 
_C
, _C,

39 
_S
 | 
_SP
, 
_P
, _P, _P, _P, _P,

40 
_P
, _P,

41 
_P
, _P, _P, _P, _P, _P,

42 
_P
, _P,

43 
_D
, _D, _D, _D, _D, _D,

44 
_D
, _D,

45 
_D
, _D, 
_P
, _P, _P, _P,

46 
_P
, _P,

47 
_P
, 
_U
 | 
_X
, _U | _X, _U | _X, _U | _X, _U | _X,

48 
_U
 | 
_X
, _U,

49 
_U
, _U, _U, _U, _U, _U,

50 
_U
, _U,

51 
_U
, _U, _U, _U, _U, _U,

52 
_U
, _U,

53 
_U
, _U, _U, 
_P
, _P, _P,

54 
_P
, _P,

55 
_P
, 
_L
 | 
_X
, _L | _X, _L | _X, _L | _X, _L | _X,

56 
_L
 | 
_X
, _L,

57 
_L
, _L, _L, _L, _L, _L,

58 
_L
, _L,

59 
_L
, _L, _L, _L, _L, _L,

60 
_L
, _L,

61 
_L
, _L, _L, 
_P
, _P, _P,

62 
_P
, 
_C
,

69 
_S
 | 
_SP
, 
_P
, _P, _P, _P, _P,

70 
_P
, _P, _P, _P, _P, _P,

71 
_P
, _P, _P, _P,

72 
_P
, _P, _P, _P, _P, _P,

73 
_P
, _P, _P, _P, _P, _P,

74 
_P
, _P, _P, _P,

75 
_U
, _U, _U, _U, _U, _U,

76 
_U
, _U, _U, _U, _U, _U,

77 
_U
, _U, _U, _U,

78 
_U
, _U, _U, _U, _U, _U,

79 
_U
, 
_P
, _U, _U, _U, _U,

80 
_U
, _U, _U, 
_L
,

81 
_L
, _L, _L, _L, _L, _L,

82 
_L
, _L, _L, _L, _L, _L,

83 
_L
, _L, _L, _L,

84 
_L
, _L, _L, _L, _L, _L,

85 
_L
, 
_P
, _L, _L, _L, _L,

86 
_L
, _L, _L, _L};

88 
	#__ismask
(
x
Ë(
_˘y≥
[()()(x)])

	)

90 
	#iß um
(
c
Ë((
	`__ismask
(cË& (
_U
 | 
_L
 | 
_D
)Ë!0)

	)

91 
	#ißÕha
(
c
Ë((
	`__ismask
(cË& (
_U
 | 
_L
)Ë!0)

	)

92 
	#is˙ål
(
c
Ë((
	`__ismask
(cË& (
_C
)Ë!0)

	)

93 
	#isdigô
(
c
Ë((
	`__ismask
(cË& (
_D
)Ë!0)

	)

94 
	#isgøph
(
c
Ë((
	`__ismask
(cË& (
_P
 | 
_U
 | 
_L
 | 
_D
)Ë!0)

	)

95 
	#i¶owî
(
c
Ë((
	`__ismask
(cË& (
_L
)Ë!0)

	)

96 
	#i•röt
(
c
Ë((
	`__ismask
(cË& (
_P
 | 
_U
 | 
_L
 | 
_D
 | 
_SP
)Ë!0)

	)

97 
	#i•un˘
(
c
Ë((
	`__ismask
(cË& (
_P
)Ë!0)

	)

98 
	#is•a˚
(
c
Ë((
	`__ismask
(cË& (
_S
)Ë!0)

	)

99 
	#isuµî
(
c
Ë((
	`__ismask
(cË& (
_U
)Ë!0)

	)

100 
	#isxdigô
(
c
Ë((
	`__ismask
(cË& (
_D
 | 
_X
)Ë!0)

	)

102 
	#ißscii
(
c
Ë((()(c)Ë<0x7f)

	)

103 
	#tﬂscii
(
c
Ë((()(c)Ë& 0x7f)

	)

105 
ölöe
 
	$__tﬁowî
(
c
)

107 i‡(
	`isuµî
(
c
))

109 
c
 -= 'A' - 'a';

111  
c
;

112 
	}
}

114 
ölöe
 
	$__touµî
(
c
)

116 i‡(
	`i¶owî
(
c
))

118 
c
 -= 'a' - 'A';

120  
c
;

121 
	}
}

123 
	#tﬁowî
(
c
Ë
	`__tﬁowî
(c)

	)

124 
	#touµî
(
c
Ë
	`__touµî
(c)

	)

	@kernel/include/drivers/blockdev.h

6 #¥agm®
⁄˚


8 
	~"ty≥s.h
"

10 
	~"drivîs/dev.h
"

11 
	~"utû/li°.h
"

13 
	~"mm/mobj.h
"

14 
	~"mm/∑ge.h
"

16 
	#BLOCK_SIZE
 
PAGE_SIZE


	)

18 
	gblockdev_›s
;

23 
	sblockdev


26 
devid_t
 
	mbd_id
;

28 
blockdev_›s
 *
	mbd_›s
;

31 
li°_lök_t
 
	mbd_lök
;

32 } 
	tblockdev_t
;

34 
	sblockdev_›s


46 (*
	mªad_block
)(
blockdev_t
 *
	mbdev
, *
	mbuf
, 
blocknum_t
 
	mloc
,

47 
size_t
 
	mblock_cou¡
);

59 (*
	mwrôe_block
)(
blockdev_t
 *
	mbdev
, c⁄° *
	mbuf
, 
blocknum_t
 
	mloc
,

60 
size_t
 
	mblock_cou¡
);

61 } 
	tblockdev_›s_t
;

66 
blockdev_öô
();

73 
blockdev_ªgi°î
(
blockdev_t
 *
dev
);

82 
blockdev_t
 *
blockdev_lookup
(
devid_t
 
id
);

90 
blockdev_Êush_Æl
(
blockdev_t
 *
dev
);

93 
blockdev_fûl_p‰ame
(
mobj_t
 *
mobj
, 
p‰ame_t
 *
pf
);

94 
blockdev_Êush_p‰ame
(
mobj_t
 *
mobj
, 
p‰ame_t
 *
pf
);

	@kernel/include/drivers/chardev.h

1 #¥agm®
⁄˚


3 
	~"drivîs/dev.h
"

4 
	~"utû/li°.h
"

6 
	gvnode
;

7 
	gp‰ame
;

9 
	gch¨dev_›s
;

10 
	gmobj
;

12 
	sch¨dev


14 
devid_t
 
	mcd_id
;

15 
ch¨dev_›s
 *
	mcd_›s
;

16 
li°_lök_t
 
	mcd_lök
;

17 } 
	tch¨dev_t
;

19 
	sch¨dev_›s


21 
ssize_t
 (*
ªad
)(
ch¨dev_t
 *
	mdev
, 
size_t
 
	mpos
, *
	mbuf
, size_à
	mcou¡
);

23 
ssize_t
 (*
wrôe
)(
ch¨dev_t
 *
	mdev
, 
size_t
 
	mpos
, c⁄° *
	mbuf
, size_à
	mcou¡
);

25 (*
	mmm≠
)(
vnode
 *
	mfûe
, 
mobj
 **
	mªt
);

27 (*
	mfûl_p‰ame
)(
vnode
 *
	mfûe
, 
p‰ame
 *
	mpf
);

29 (*
	mÊush_p‰ame
)(
vnode
 *
	mfûe
, 
p‰ame
 *
	mpf
);

30 } 
	tch¨dev_›s_t
;

35 
ch¨dev_öô
();

42 
ch¨dev_ªgi°î
(
ch¨dev_t
 *
dev
);

51 
ch¨dev_t
 *
ch¨dev_lookup
(
devid_t
 
id
);

	@kernel/include/drivers/cmos.h

1 #i‚de‡
CMOS_H


2 
	#CMOS_H


	)

4 
	~"maö/io.h
"

7 
	#CMOS_ADDR
 0x70

	)

8 
	#CMOS_DATA
 0x71

	)

10 
	#CMOS_REG_SECOND
 0x00

	)

11 
	#CMOS_REG_MINUTE
 0x02

	)

12 
	#CMOS_REG_HOUR
 0x04

	)

13 
	#CMOS_REG_DAY
 0x07

	)

14 
	#CMOS_REG_MONTH
 0x08

	)

15 
	#CMOS_REG_YEAR
 0x09

	)

18 
	#CMOS_REG_CENTURY
 0x32

	)

19 
	#CMOS_REG_STAT_A
 0x0A

	)

20 
	#CMOS_REG_STAT_B
 0x0B

	)

22 
	sπc_time_t


24 
	m£c⁄d
;

25 
	mmöuã
;

26 
	mhour
;

27 
	mday
;

28 
	mm⁄th
;

29 
	myór
;

32 
	m__˚¡ury
;

33 } 
	tπc_time_t
;

35 
cmos_ªad_ªgi°î
(
ªg
);

38 
πc_time_t
 
πc_gë_time
();

	@kernel/include/drivers/dev.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

34 
	#MINOR_BITS
 8

	)

35 
	#MINOR_MASK
 ((1U << 
MINOR_BITS
Ë- 1)

	)

36 
	#MAJOR
(
devid
Ë(()((devidË>> 
MINOR_BITS
))

	)

37 
	#MINOR
(
devid
Ë(()((devid)&
MINOR_MASK
))

	)

38 
	#MKDEVID
(
maj‹
, 
mö‹
Ë((
devid_t
)(((maj‹Ë<< 
MINOR_BITS
Ë| (mö‹)))

	)

41 
	#NULL_DEVID
 (
	`MKDEVID
(0, 0))

	)

42 
	#MEM_NULL_DEVID
 (
	`MKDEVID
(1, 0))

	)

43 
	#MEM_ZERO_DEVID
 (
	`MKDEVID
(1, 1))

	)

45 
	#DISK_MAJOR
 1

	)

47 
	#MEM_MAJOR
 1

	)

48 
	#MEM_NULL_MINOR
 0

	)

49 
	#MEM_ZERO_MINOR
 1

	)

	@kernel/include/drivers/disk/ahci.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

15 
	#AHCI_PRDT_DBC_WIDTH
 22

	)

16 
	#AHCI_MAX_PRDT_SIZE
 (1 << 
AHCI_PRDT_DBC_WIDTH
)

	)

17 
	#ATA_SECTOR_SIZE
 512

	)

18 
	#AHCI_SECTORS_PER_PRDT
 (
AHCI_MAX_PRDT_SIZE
 / 
ATA_SECTOR_SIZE
)

	)

19 
	#AHCI_MAX_SECTORS_PER_COMMAND
 \

20 (1 << 16Ë

	)

21 
	#ACHI_NUM_PRDTS_PER_COMMAND_TABLE
 \

22 (
AHCI_MAX_SECTORS_PER_COMMAND
 / 
AHCI_SECTORS_PER_PRDT
)

	)

24 
	#AHCI_MAX_NUM_PORTS
 32

	)

25 
	#AHCI_COMMAND_HEADERS_PER_LIST
 32

	)

27 
	#AHCI_COMMAND_LIST_ARRAY_BASE
(
ahci_ba£
Ë◊hci_ba£)

	)

28 
	#AHCI_COMMAND_LIST_ARRAY_SIZE
 \

29 (
AHCI_MAX_NUM_PORTS
 * (
comm™d_li°_t
))

	)

31 
	#AHCI_RECEIVED_FIS_ARRAY_BASE
(
ahci_ba£
) \

32 ((
ahci_ba£
Ë+ 
AHCI_COMMAND_LIST_ARRAY_SIZE
)

	)

33 
	#AHCI_RECEIVED_FIS_ARRAY_SIZE
 \

34 (
AHCI_MAX_NUM_PORTS
 * (
ª˚ived_fis_t
))

	)

36 
	#AHCI_COMMAND_TABLE_ARRAY_BASE
(
ahci_ba£
) \

37 (
	`AHCI_RECEIVED_FIS_ARRAY_BASE
(
ahci_ba£
Ë+ 
AHCI_RECEIVED_FIS_ARRAY_SIZE
)

	)

38 
	#AHCI_COMMAND_TABLE_ARRAY_SIZE
 \

39 (
AHCI_MAX_NUM_PORTS
 * 
AHCI_COMMAND_HEADERS_PER_LIST
 * \

40 (
comm™d_èbÀ_t
))

	)

42 
	#AHCI_SIZE
 \

43 (
AHCI_COMMAND_LIST_ARRAY_SIZE
 + 
AHCI_RECEIVED_FIS_ARRAY_SIZE
 + \

44 
AHCI_COMMAND_TABLE_ARRAY_SIZE
)

	)

45 
	#AHCI_SIZE_PAGES
 ((
uöçå_t
)
	`PAGE_ALIGN_UP
(
AHCI_SIZE
Ë/ 
PAGE_SIZE
)

	)

47 
	#ALIGN_DOWN_POW_2
(
x
, 
Æign
Ë((xË& -◊lign))

	)

48 
	#ALIGN_UP_POW_2
(
x
, 
Æign
Ë(
	`ALIGN_DOWN_POW_2
((x)-1,álignË+ (Æign))

	)

56 
	efis_ty≥


58 
	mfis_ty≥_h2d_ªgi°î
 = 0x27

59 } 
	t∑cked
 
	tfis_ty≥_t
;

64 
	#ATA_READ_DMA_EXT_COMMAND
 0x25

	)

65 
	#ATA_WRITE_DMA_EXT_COMMAND
 0x35

	)

66 
	#ATA_READ_FPDMA_QUEUED_COMMAND
 0x60

	)

67 
	#ATA_WRITE_FPDMA_QUEUED_COMMAND
 0x61

	)

74 
	#ATA_DEVICE_LBA_MODE
 0x40

	)

79 
	sh2d_ªgi°î_fis


81 
uöt8_t
 
	mfis_ty≥
;

82 
	muöt8_t
 : 7;

83 
uöt8_t
 
	mc
 : 1;

85 
uöt8_t
 
	mcomm™d
;

86 
uöt8_t


87 
	m„©uªs
;

90 
uöt32_t
 
	mlba
 : 24;

92 
uöt8_t
 
	mdevi˚
;

95 
uöt32_t
 
	mlba_exp
 : 24;

96 
uöt8_t
 
	m„©uªs_exp
;

97 
uöt16_t
 
	m£˘‹_cou¡
;

100 
	muöt16_t
 : 16;

101 
	muöt32_t
 : 32;

102 } 
	t∑cked
 
	th2d_ªgi°î_fis_t
;

110 
	ucomm™d_fis
 {

111 
h2d_ªgi°î_fis_t
 
	mh2d_ªgi°î_fis
;

116 
uöt8_t
 
	msize
[64];

118 } 
	t∑cked
 
	tcomm™d_fis_t
;

122 
	sª˚ived_fis


124 
uöt8_t
 
	m_omô
[256];

126 } 
	t∑cked
 
	tª˚ived_fis_t
;

133 
	s¥d


135 
uöt64_t
 
	mdba
;

136 
	muöt32_t
 : 32;

137 
uöt32_t


138 
	mdbc
 : 22;

143 
	muöt16_t
 : 9;

144 
uöt8_t
 
	mi
 : 1;

151 } 
	t∑cked
 
	t¥d_t
;

156 
	scomm™d_èbÀ


158 
comm™d_fis_t


159 
	mcfis
;

160 
uöt8_t
 
	m_omô
[64];

161 
¥d_t
 
	m¥dt
[
ACHI_NUM_PRDTS_PER_COMMAND_TABLE
];

168 } 
	t∑cked
 
	tcomm™d_èbÀ_t
;

172 
	scomm™d_hódî


174 
uöt8_t
 
	mcÊ
 : 5;

176 
	muöt8_t
 : 1;

177 
uöt8_t
 
	mwrôe
 : 1;

178 
	muöt16_t
 : 9;

179 
uöt16_t
 
	m¥dé
;

181 
	muöt32_t
 : 32;

182 
uöt64_t
 
	m˘ba
;

184 
	muöt64_t
 : 64;

185 
	muöt64_t
 : 64;

186 } 
	t∑cked
 
	tcomm™d_hódî_t
;

191 
	scomm™d_li°


193 
comm™d_hódî_t
 
	mcomm™d_hódîs
[
AHCI_COMMAND_HEADERS_PER_LIST
];

194 } 
	t∑cked
 
	tcomm™d_li°_t
;

203 
	upx_öãºu±_°©us
 {

206 
uöt8_t
 
	mdhrs
 : 1;

209 
	muöt8_t
 : 2;

210 
uöt8_t


211 
	msdbs
 : 1;

213 
	muöt8_t
 : 1;

214 
uöt8_t
 
	mdps
 : 1;

217 
	muöt32_t
 : 26;

218 } 
	mbôs
;

219 
uöt32_t
 
	mvÆue
;

220 } 
	t∑cked
 
	tpx_öãºu±_°©us_t
;

223 
px_öãºu±_°©us_t
 
	gpx_öãºu±_°©us_˛ór
 = {.
vÆue
 =

224 (
uöt32_t
)-1};

228 
	upx_öãºu±_íabÀ
 {

229 
uöt32_t
 
	mvÆue
;

230 } 
	t∑cked
 
	tpx_öãºu±_íabÀ_t
;

234 
px_öãºu±_íabÀ_t
 
	gpx_öãºu±_íabÀ_Æl_íabÀd
 = {

235 .
vÆue
 = (
uöt32_t
)-1};

240 
	shba_ghc


244 
	muöt32_t
 : 30;

245 
uöt8_t
 
	m¢cq
 : 1;

246 
	muöt8_t
 : 1;

247 } 
∑cked
 
	mˇp
;

250 
	muöt8_t
 : 1;

251 
uöt8_t
 
	mõ
 : 1;

253 
	muöt32_t
 : 29;

254 
uöt8_t
 
	m´
 : 1;

256 } 
∑cked
 
	mghc
;

257 
uöt32_t
 
	mis
;

259 
uöt32_t
 
	mpi
;

261 
uöt32_t
 
	m_omô
[7];

262 } 
	t∑cked
 
	thba_ghc_t
;

266 
	#SATA_SIG_ATA
 0x00000101

	)

273 
	shba_p‹t


275 
uöt64_t
 
	mpx_˛b
;

277 
uöt64_t
 
	mpx_fb
;

280 
px_öãºu±_°©us_t
 
	mpx_is
;

281 
px_öãºu±_íabÀ_t
 
	mpx_õ
;

284 
uöt8_t
 
	m°
 : 1;

285 
	muöt8_t
 : 3;

286 
uöt8_t
 
	m‰e
 : 1;

288 
	muöt16_t
 : 9;

289 
uöt8_t
 
	m‰
 : 1;

291 
uöt8_t
 
	m¸
 : 1;

293 
	muöt16_t
 : 16;

294 } 
∑cked
 
	mpx_cmd
;

295 
	muöt64_t
 : 64;

296 
uöt32_t
 
	mpx_sig
;

299 
	muöt64_t
 : 64;

300 
uöt32_t
 
	mpx_£º
;

302 
uöt32_t
 
	mpx_ß˘
;

307 
uöt32_t
 
	mpx_ci
;

311 
uöt32_t
 
	m_omô
[17];

312 } 
	t∑cked
 
	thba_p‹t_t
;

318 
	shba


320 
hba_ghc_t
 
	mghc
;

321 
uöt32_t
 
	m_omô
[53];

322 
hba_p‹t_t
 
	mp‹ts
[32];

323 } 
	t∑cked
 
	thba_t
;

325 
	#PORT_INDEX
(
hba
, 
p‹t
Ë(’‹tË- (hba)->
p‹ts
)

	)

	@kernel/include/drivers/disk/sata.h

1 #¥agm®
⁄˚


3 
	#SATA_BLOCK_SIZE
 4096

	)

5 
	~<drivîs/blockdev.h
>

6 
	~<drivîs/disk/ahci.h
>

8 
ßè_öô
();

10 
	s©a_disk


12 
hba_p‹t_t
 *
	mp‹t
;

13 
blockdev_t
 
	mbdev
;

14 } 
	t©a_disk_t
;

	@kernel/include/drivers/keyboard.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

5 
	#BS
 0x08

	)

6 
	#DEL
 0x7F

	)

7 
	#ESC
 0x1B

	)

8 
	#LF
 0x0A

	)

9 
	#CR
 0x0D

	)

10 
	#SPACE
 0x20

	)

13 
	#EOT
 0x04

	)

16 
	#ETX
 0x03

	)

19 
	#SCROLL_UP
 0x0e

	)

20 
	#SCROLL_DOWN
 0x1c

	)

21 
	#SCROLL_UP_PAGE
 0x0f

	)

22 
	#SCROLL_DOWN_PAGE
 0x1d

	)

25 
	#F1
 ((
uöt8_t
)128)

	)

26 
	#F2
 ((
uöt8_t
)(
F1
 + 1))

	)

27 
	#F3
 ((
uöt8_t
)(
F1
 + 2))

	)

28 
	#F4
 ((
uöt8_t
)(
F1
 + 3))

	)

29 
	#F5
 ((
uöt8_t
)(
F1
 + 4))

	)

30 
	#F6
 ((
uöt8_t
)(
F1
 + 5))

	)

31 
	#F7
 ((
uöt8_t
)(
F1
 + 6))

	)

32 
	#F8
 ((
uöt8_t
)(
F1
 + 7))

	)

33 
	#F9
 ((
uöt8_t
)(
F1
 + 8))

	)

34 
	#F10
 ((
uöt8_t
)(
F1
 + 9))

	)

35 
	#F11
 ((
uöt8_t
)(
F1
 + 10))

	)

36 
	#F12
 ((
uöt8_t
)(
F1
 + 11))

	)

38 (*
	tkeybﬂrd_ch¨_h™dÀr_t
)(
	tuöt8_t
);

43 
	`keybﬂrd_öô
(
keybﬂrd_ch¨_h™dÀr_t
 
h™dÀr
);

	@kernel/include/drivers/memdevs.h

1 #¥agm®
⁄˚


6 
memdevs_öô
();

	@kernel/include/drivers/pcie.h

1 #¥agm®
⁄˚


3 
	~<utû/li°.h
>

5 
	#PCI_NUM_BUSES
 256

	)

6 
	#PCI_NUM_DEVICES_PER_BUS
 32

	)

7 
	#PCI_NUM_FUNCTIONS_PER_DEVICE
 8

	)

8 
	#PCI_DEVICE_FUNCTION_SIZE
 4096

	)

9 
	#PCI_CAPABILITY_PTR_MASK
 (0b11111100)

	)

10 
	#PCI_MSI_CAPABILITY_ID
 0x5

	)

14 
	#MSI_ADDRESS_FOR
(
de°ö©i⁄
) \

15 ((
uöt32_t
)((0x0FEE << 20Ë| ((
de°ö©i⁄
Ë<< 12Ë| (0b1100)))

	)

16 
	#MSI_DATA_FOR
(
ve˘‹
Ë((
uöt16_t
)(0b00000001 << 8Ë| (ve˘‹))

	)

18 
	spci_ˇ∑bûôy


20 
uöt8_t
 
	mid
;

21 
uöt8_t
 
	m√xt_ˇp
;

22 
uöt16_t
 
	mc⁄åﬁ
;

23 } 
	t∑cked
 
	tpci_ˇ∑bûôy_t
;

25 
	smsi_ˇ∑bûôy


27 
uöt8_t
 
	mid
;

28 
uöt8_t
 
	m√xt_ˇp
;

31 
uöt8_t
 
	mmsõ
 : 1;

32 
uöt8_t
 
	mmmc
 : 3;

33 
uöt8_t
 
	mmme
 : 3;

34 
uöt8_t
 
	mc64
 : 1;

35 
uöt8_t
 
	m_ª£rved
;

36 } 
	mc⁄åﬁ
;

40 
uöt32_t
 
	maddr
;

41 
uöt16_t
 
	md©a
;

42 } 
	mad32
;

45 
uöt64_t
 
	maddr
;

46 
uöt16_t
 
	md©a
;

47 } 
	mad64
;

48 } 
	maddªss_d©a
;

49 } 
	t∑cked
 
	tmsi_ˇ∑bûôy_t
;

51 
	upcõ_devi˚
 {

54 
	md©a
[
PCI_DEVICE_FUNCTION_SIZE
];

55 } 
	møw
;

58 
uöt16_t
 
	mvíd‹_id
;

59 
uöt16_t
 
	mdevi˚_id
;

60 
uöt16_t
 
	mcomm™d
;

61 
uöt16_t
 
	m°©us
;

62 
uöt8_t
 
	mªvisi⁄_id
;

63 
uöt8_t
 
	m¥og_if
;

64 
uöt8_t
 
	msub˛ass
;

65 
uöt8_t
 
	m˛ass
;

66 
uöt8_t
 
	mˇche_löe_size
;

67 
uöt8_t
 
	mœãncy_ty≥
;

68 
uöt8_t
 
	mhódî_ty≥
;

69 
uöt8_t
 
	mbi°
;

70 
uöt32_t
 
	mb¨
[6];

71 
uöt32_t
 
	mˇrdbus_cis_poöãr
;

72 
uöt16_t
 
	msubsy°em_víd‹_id
;

73 
uöt16_t
 
	msubsy°em_id
;

74 
uöt32_t
 
	mex∑nsi⁄_rom_ba£_addr
;

75 
uöt8_t
 
	mˇ∑bûôõs_±r
;

76 
uöt8_t
 
	m_ª£rved1
[7];

77 
uöt8_t
 
	möãºu±_löe
;

78 
uöt8_t
 
	möãºu±_pö
;

79 
uöt8_t
 
	mmö_gø¡
;

80 
uöt8_t
 
	mmax_œãncy
;

81 
pci_ˇ∑bûôy_t
 
	mpm_ˇ∑bûôy
;

82 
uöt16_t
 
	mpmc§
;

83 
uöt8_t
 
	mb£
;

84 
uöt8_t
 
	md©a
;

85 
pci_ˇ∑bûôy_t
 
	mmsi_ˇ∑bûôy
;

86 
uöt64_t
 
	mmesßge_addªss
;

87 
uöt16_t
 
	mmesßge_d©a
;

88 
uöt8_t
 
	m_ª£rved2
[2];

89 
pci_ˇ∑bûôy_t
 
	m≥_ˇ∑bûôy
;

90 
uöt32_t
 
	mpcõ_devi˚_ˇ∑bûôõs
;

91 
uöt16_t
 
	mdevi˚_c⁄åﬁ
;

92 
uöt16_t
 
	mdevi˚_°©us
;

93 
uöt32_t
 
	mpcõ_lök_ˇ∑bûôõs
;

94 
uöt16_t
 
	mlök_c⁄åﬁ
;

95 
uöt16_t
 
	mlök_°©us
;

96 } 
	m°™d¨d
;

97 } 
	t∑cked
 
	tpcõ_devi˚_t
;

99 
	#PCI_LOOKUP_WILDCARD
 0xff

	)

101 
	spcõ_devi˚_wøµî


103 
uöt8_t
 
	m˛ass
;

104 
uöt8_t
 
	msub˛ass
;

105 
uöt8_t
 
	möãrÁ˚
;

106 
pcõ_devi˚_t
 *
	mdev
;

107 
li°_lök_t
 
	mlök
;

108 } 
	tpcõ_devi˚_wøµî_t
;

110 
pci_öô
();

112 
pcõ_devi˚_t
 *
pcõ_lookup
(
uöt8_t
 
˛ass
, uöt8_à
sub˛ass
, uöt8_à
öãrÁ˚
);

	@kernel/include/drivers/screen.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 #ifde‡
__VGABUF___


7 
	#SCREEN_CHARACTER_WIDTH
 9

	)

8 
	#SCREEN_CHARACTER_HEIGHT
 15

	)

10 
	ucﬁ‹
 {

13 
uöt8_t
 
	mblue
;

14 
uöt8_t
 
	mgªí
;

15 
uöt8_t
 
	mªd
;

16 
uöt8_t
 
	mÆpha
;

17 } 
	mch™√ls
;

18 
uöt32_t
 
	mvÆue
;

19 } 
	t∑cked
 
	tcﬁ‹_t
;

21 
s¸ìn_öô
();

23 
size_t
 
s¸ìn_gë_width
();

25 
size_t
 
s¸ìn_gë_height
();

27 
size_t
 
s¸ìn_gë_ch¨a˘î_width
();

29 
size_t
 
s¸ìn_gë_ch¨a˘î_height
();

31 
s¸ìn_døw_°rög
(
size_t
 
x
, size_à
y
, c⁄° *
s
, size_à
Àn
,

32 
cﬁ‹_t
 
cﬁ‹
);

34 
s¸ìn_fûl
(
cﬁ‹_t
 
cﬁ‹
);

36 
s¸ìn_fûl_ª˘
(
size_t
 
x
, size_à
y
, size_à
width
, size_à
height
,

37 
cﬁ‹_t
 
cﬁ‹
);

39 
s¸ìn_døw_ª˘
(
size_t
 
x
, size_à
y
, size_à
width
, size_à
height
,

40 
cﬁ‹_t
 
cﬁ‹
);

42 
s¸ìn_c›y_ª˘
(
size_t
 
‰omx
, size_à
‰omy
, size_à
width
, size_à
height
,

43 
size_t
 
tox
, size_à
toy
);

45 
s¸ìn_Êush
();

47 
s¸ìn_¥öt_shutdown
();

51 
	#VGA_WIDTH
 ((
uöt16_t
)80)

	)

52 
	#VGA_HEIGHT
 ((
uöt16_t
)25)

	)

53 
	#VGA_LINE_SIZE
 ((
size_t
)(
VGA_WIDTH
 * (
uöt16_t
)))

	)

54 
	#VGA_AREA
 ((
uöt16_t
)(
VGA_WIDTH
 * 
VGA_HEIGHT
))

	)

55 
	#VGA_BUFFER_SIZE
 ((
uöt16_t
)(
VGA_WIDTH
 * 
VGA_HEIGHT
))

	)

56 
	#VGA_DEFAULT_ATTRIB
 0xF

	)

58 
vga_öô
();

60 
vga_wrôe_ch¨_©
(
size_t
 
row
, size_à
cﬁ
, 
uöt16_t
 
v
);

62 
vga_£t_curs‹
(
size_t
 
row
, size_à
cﬁ
);

64 
vga_˛ór_s¸ìn
();

66 
s¸ìn_¥öt_shutdown
();

68 
vga_íabÀ_curs‹
();

70 
vga_dißbÀ_curs‹
();

	@kernel/include/drivers/tty/ldisc.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

4 
	~<¥oc/kmuãx.h
>

6 
	#LDISC_BUFFER_SIZE
 128

	)

47 
	sldisc


49 
size_t
 
	mldisc_cooked
;

50 
size_t
 
	mldisc_èû
;

51 
size_t
 
	mldisc_hód
;

52 
	mldisc_fuŒ
;

56 
ktqueue_t
 
	mldisc_ªad_queue
;

57 
	mldisc_buf„r
[
LDISC_BUFFER_SIZE
];

58 } 
	tldisc_t
;

60 
ldisc_öô
(
ldisc_t
 *
ldisc
);

62 
ldisc_waô_ªad
(
ldisc_t
 *
ldisc
);

64 
size_t
 
ldisc_ªad
(
ldisc_t
 *
ldisc
, *
buf
, size_à
cou¡
);

66 
ldisc_key_¥es£d
(
ldisc_t
 *
ldisc
, 
c
);

68 
size_t
 
ldisc_gë_cuºít_löe_øw
(
ldisc_t
 *
ldisc
, *
s
);

	@kernel/include/drivers/tty/tty.h

1 #¥agm®
⁄˚


3 
	~"drivîs/ch¨dev.h
"

4 
	~"ldisc.h
"

5 
	~"vãrmöÆ.h
"

7 
	#TTY_MAJOR
 2

	)

8 
	#cd_to_ây
(
bd
) \

9 
	`CONTAINER_OF
((
bd
), 
ây_t
, 
ây_cdev
)

10 

	)

11 
	sây


13 
vãrmöÆ_t
 
	mây_vãrmöÆ
;

14 
ldisc_t
 
	mây_ldisc
;

15 
ch¨dev_t
 
	mây_cdev
;

16 
kmuãx_t
 
	mây_ªad_muãx
;

17 
kmuãx_t
 
	mây_wrôe_muãx
;

18 } 
	tây_t
;

20 
ây_öô
();

	@kernel/include/drivers/tty/vterminal.h

1 #¥agm®
⁄˚


3 
	~<drivîs/s¸ìn.h
>

4 
	~<mm/∑ge.h
>

5 
	~<ty≥s.h
>

6 
	~<utû/li°.h
>

41 #ifde‡
__VGABUF___


43 
	#VT_PAGES_PER_HISTORY_CHUNK
 1

	)

44 
	#VT_CHARS_PER_HISTORY_CHUNK
 \

45 (
VT_PAGES_PER_HISTORY_CHUNK
 * 
PAGE_SIZE
 - (
li°_lök_t
))

	)

47 
	svãrmöÆ_hi°‹y_chunk


49 
	mch¨s
[
VT_CHARS_PER_HISTORY_CHUNK
];

50 
li°_lök_t
 
	mlök
;

51 } 
	tvãrmöÆ_hi°‹y_chunk_t
;

53 
	svãrmöÆ


55 
size_t
 
	mvt_width
;

56 
size_t
 
	mvt_height
;

58 
size_t
 
	mvt_Àn
;

59 
li°_t
 
	mvt_hi°‹y_chunks
;

61 
size_t
 *
	mvt_löe_posôi⁄s
;

63 
off_t
 
	mvt_löe_off£t
;

65 
size_t
 *
	mvt_löe_widths
;

67 
size_t
 
	mvt_öput_pos
;

68 
size_t
 
	mvt_curs‹_pos
;

69 } 
	tvãrmöÆ_t
;

71 
vãrmöÆ_öô
(
vãrmöÆ_t
 *
vt
);

73 
vãrmöÆ_make_a˘ive
(
vãrmöÆ_t
 *
vt
);

75 
vãrmöÆ_s¸ﬁl
(
vãrmöÆ_t
 *
vt
, 
cou¡
);

77 
vãrmöÆ_s¸ﬁl_to_bŸtom
(
vãrmöÆ_t
 *
t
);

79 
vãrmöÆ_˛ór
(
vãrmöÆ_t
 *
vt
);

81 
size_t
 
vãrmöÆ_wrôe
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, size_à
Àn
);

83 
vãrmöÆ_key_¥es£d
(
vãrmöÆ_t
 *
vt
);

87 
	svt_curs‹


89 
	my
;

90 
	mx
;

93 
	svt_©åibuãs


95 
	mundîlöe
 : 1;

96 
	mbﬁd
 : 1;

97 
	mblök
 : 1;

98 
uöt16_t
 
	mfg
;

99 
uöt16_t
 
	mbg
;

102 
	svt_ch¨


104 
	mcodïoöt
;

105 
vt_©åibuãs
 
	m©åibs
;

108 
	svt_buf„r


110 
vt_ch¨
 
	ms¸ìn
[
VGA_HEIGHT
][
VGA_WIDTH
];

111 
size_t
 
	möput_posôi⁄
;

114 
	svãrmöÆ


116 
size_t
 
	mheight
;

117 
size_t
 
	mwidth
;

118 
vt_curs‹
 
	mcurs‹
;

119 
vt_curs‹
 
	mßved_curs‹
;

120 
vt_©åibuãs
 
	mcuºít_©åibs
;

121 
vt_buf„r
 *
	ma˘ive_buf„r
;

122 
vt_buf„r
 
	m¥i_buf„r
;

123 
vt_buf„r
 
	mÆt_buf„r
;

124 } 
	tvãrmöÆ_t
;

126 
vãrmöÆ_öô
(
vãrmöÆ_t
 *
vt
);

128 
vãrmöÆ_make_a˘ive
(
vãrmöÆ_t
 *
vt
);

130 
vãrmöÆ_s¸ﬁl
(
vãrmöÆ_t
 *
vt
, 
cou¡
);

132 
vãrmöÆ_˛ór
(
vãrmöÆ_t
 *
vt
);

134 
size_t
 
vãrmöÆ_wrôe
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, size_à
Àn
);

136 
size_t
 
vãrmöÆ_echo_öput
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, size_à
Àn
);

138 
vãrmöÆ_key_¥es£d
(
vãrmöÆ_t
 *
vt
);

140 
vãrmöÆ_s¸ﬁl_to_bŸtom
(
vãrmöÆ_t
 *
vt
);

144 
	#VTC_DEFAULT_FOREGROUND
 
VTCOLOR_GREY


	)

145 
	#VTC_DEFAULT_BACKGROUND
 
VTCOLOR_BLACK


	)

146 
	#VTC_DEFAULT_ATTR
 \

147 (
vèâr_t
Ë{ 0, 
VTC_DEFAULT_FOREGROUND
, 
VTC_DEFAULT_BACKGROUND
 }

	)

148 
	#VTC_ANSI_PARSER_STACK_SIZE
 8

	)

150 
	gvtc⁄sﬁe
;

154 
	mVTCOLOR_BLACK
,

155 
	mVTCOLOR_RED
,

156 
	mVTCOLOR_GREEN
,

157 
	mVTCOLOR_YELLOW
,

158 
	mVTCOLOR_BLUE
,

159 
	mVTCOLOR_MAGENTA
,

160 
	mVTCOLOR_CYAN
,

161 
	mVTCOLOR_GREY
,

162 } 
	tvtcﬁ‹_t
;

166 
	mVTSTATE_ESC
,

167 
	mVTSTATE_BRACKET
,

168 
	mVTSTATE_ATTR
,

169 
	mVTSTATE_ENDVAL
,

170 } 
	tvènsi_∑r£r_°©e_t
;

174 
	mvÆue
;

175 
	mem±y
;

176 } 
	tvènsi_¨g_t
;

180 
vènsi_∑r£r_°©e_t
 
	m°©e
;

181 
vènsi_¨g_t
 
	m°ack
[
VTC_ANSI_PARSER_STACK_SIZE
];

182 
	mödex
;

183 } 
	tvènsi_∑r£r_t
;

187 
	mbright
;

188 
vtcﬁ‹_t
 
	mfg
;

189 
vtcﬁ‹_t
 
	mbg
;

190 } 
	tvèâr_t
;

194 
	mc
;

195 
vèâr_t
 
	m©å
;

196 } 
	tvt˚Œ_t
;

200 
	mx
;

201 
	my
;

202 } 
	tvtcurs‹_t
;

204 (*
	tvtc_∑öt_h™dÀr_t
)(
	tvtc⁄sﬁe
 *
	tvtc
, 
	tvt˚Œ_t
 *
	t˚Œ
,

205 
	tx
, 
	ty
);

206 (*
	tvtc_curs‹_h™dÀr_t
)(
	tvtc⁄sﬁe
 *
	tvtc
, 
	tvtcurs‹_t
 *
	tcur
);

208 
	svtc⁄sﬁe


210 
width
;

211 
height
;

213 
vèâr_t
 
©å
;

214 
vènsi_∑r£r_t
 
™sù¨£r
;

216 
vt˚Œ_t
 *
buf„r
;

217 *
èbs
;

218 
èb_ödex
;

219 
vtcurs‹_t
 
curs‹
;

221 
vtc_∑öt_h™dÀr_t
 
⁄_∑öt
;

222 
vtc_curs‹_h™dÀr_t
 
⁄_move
;

223 } 
	tvtc⁄sﬁe_t
;

225 
vtc⁄sﬁe_t
 
	tvãrmöÆ_t
;

227 
vtc⁄sﬁe_t
 *
	`vtc⁄sﬁe
(vtc⁄sﬁe_à*
vtc
, 
width
, 
height
,

228 
vtc_∑öt_h™dÀr_t
 
⁄_∑öt
,

229 
vtc_curs‹_h™dÀr_t
 
⁄_move
);

230 
	`vtc⁄sﬁe_dñëe
(
vtc⁄sﬁe_t
 *
c
);

232 
	`vtc⁄sﬁe_˛ór
(
vtc⁄sﬁe_t
 *
vtc
, 
‰omx
, 
‰omy
, 
tox
, 
toy
);

233 
	`vtc⁄sﬁe_s¸ﬁl
(
vtc⁄sﬁe_t
 *
vtc
, 
löes
);

234 
	`vtc⁄sﬁe_√wlöe
(
vtc⁄sﬁe_t
 *
vtc
);

236 
	`vtc⁄sﬁe_putch¨
(
vtc⁄sﬁe_t
 *
vtc
, 
c
);

237 
	`vtc⁄sﬁe_wrôe
(
vtc⁄sﬁe_t
 *
vtc
, c⁄° *
buf„r
, 
uöt32_t
 
size
);

239 
size_t
 
	`vãrmöÆ_wrôe
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, size_à
Àn
);

241 
size_t
 
	`vãrmöÆ_echo_öput
(
vãrmöÆ_t
 *
vt
, c⁄° *
buf
, size_à
Àn
);

243 
	`vãrmöÆ_key_¥es£d
(
vãrmöÆ_t
 *
vt
);

245 
	`vãrmöÆ_s¸ﬁl_to_bŸtom
(
vãrmöÆ_t
 *
vt
);

247 
	`vãrmöÆ_öô
(
vãrmöÆ_t
 *
vt
);

249 
	`vãrmöÆ_make_a˘ive
(
vãrmöÆ_t
 *
vt
);

	@kernel/include/errno.h

1 #¥agm®
⁄˚


5 #i‚de‡
__KERNEL__


6 #i‚de‡
î∫o


7 
	#î∫o
 
_libc_î∫o


	)

9 
_libc_î∫o
;

12 
	#EPERM
 1

	)

13 
	#ENOENT
 2

	)

14 
	#ESRCH
 3

	)

15 
	#EINTR
 4

	)

16 
	#EIO
 5

	)

17 
	#ENXIO
 6

	)

18 
	#E2BIG
 7

	)

19 
	#ENOEXEC
 8

	)

20 
	#EBADF
 9

	)

21 
	#ECHILD
 10

	)

22 
	#EAGAIN
 11

	)

23 
	#ENOMEM
 12

	)

24 
	#EACCES
 13

	)

25 
	#EFAULT
 14

	)

26 
	#ENOTBLK
 15

	)

27 
	#EBUSY
 16

	)

28 
	#EEXIST
 17

	)

29 
	#EXDEV
 18

	)

30 
	#ENODEV
 19

	)

31 
	#ENOTDIR
 20

	)

32 
	#EISDIR
 21

	)

33 
	#EINVAL
 22

	)

34 
	#ENFILE
 23

	)

35 
	#EMFILE
 24

	)

36 
	#ENOTTY
 25

	)

37 
	#ETXTBSY
 26

	)

38 
	#EFBIG
 27

	)

39 
	#ENOSPC
 28

	)

40 
	#ESPIPE
 29

	)

41 
	#EROFS
 30

	)

42 
	#EMLINK
 31

	)

43 
	#EPIPE
 32

	)

44 
	#EDOM
 33

	)

45 
	#ERANGE
 34

	)

47 
	#EDEADLK
 35

	)

48 
	#ENAMETOOLONG
 36

	)

49 
	#ENOLCK
 37

	)

50 
	#ENOSYS
 38

	)

51 
	#ENOTEMPTY
 39

	)

52 
	#ELOOP
 40

	)

53 
	#EWOULDBLOCK
 
EAGAIN


	)

54 
	#ENOMSG
 42

	)

55 
	#EIDRM
 43

	)

56 
	#ECHRNG
 44

	)

57 
	#EL2NSYNC
 45

	)

58 
	#EL3HLT
 46

	)

59 
	#EL3RST
 47

	)

60 
	#ELNRNG
 48

	)

61 
	#EUNATCH
 49

	)

62 
	#ENOCSI
 50

	)

63 
	#EL2HLT
 51

	)

64 
	#EBADE
 52

	)

65 
	#EBADR
 53

	)

66 
	#EXFULL
 54

	)

67 
	#ENOANO
 55

	)

68 
	#EBADRQC
 56

	)

69 
	#EBADSLT
 57

	)

71 
	#EDEADLOCK
 
EDEADLK


	)

73 
	#EBFONT
 59

	)

74 
	#ENOSTR
 60

	)

75 
	#ENODATA
 61

	)

76 
	#ETIME
 62

	)

77 
	#ENOSR
 63

	)

78 
	#ENONET
 64

	)

79 
	#ENOPKG
 65

	)

80 
	#EREMOTE
 66

	)

81 
	#ENOLINK
 67

	)

82 
	#EADV
 68

	)

83 
	#ESRMNT
 69

	)

84 
	#ECOMM
 70

	)

85 
	#EPROTO
 71

	)

86 
	#EMULTIHOP
 72

	)

87 
	#EDOTDOT
 73

	)

88 
	#EBADMSG
 74

	)

89 
	#EOVERFLOW
 75

	)

90 
	#ENOTUNIQ
 76

	)

91 
	#EBADFD
 77

	)

92 
	#EREMCHG
 78

	)

93 
	#ELIBACC
 79

	)

94 
	#ELIBBAD
 80

	)

95 
	#ELIBSCN
 81

	)

96 
	#ELIBMAX
 82

	)

97 
	#ELIBEXEC
 83

	)

98 
	#EILSEQ
 84

	)

99 
	#ERESTART
 85

	)

100 
	#ESTRPIPE
 86

	)

101 
	#EUSERS
 87

	)

102 
	#ENOTSOCK
 88

	)

103 
	#EDESTADDRREQ
 89

	)

104 
	#EMSGSIZE
 90

	)

105 
	#EPROTOTYPE
 91

	)

106 
	#ENOPROTOOPT
 92

	)

107 
	#EPROTONOSUPPORT
 93

	)

108 
	#ESOCKTNOSUPPORT
 94

	)

109 
	#EOPNOTSUPP
 95

	)

110 
	#EPFNOSUPPORT
 96

	)

111 
	#EAFNOSUPPORT
 97

	)

112 
	#EADDRINUSE
 98

	)

113 
	#EADDRNOTAVAIL
 99

	)

114 
	#ENETDOWN
 100

	)

115 
	#ENETUNREACH
 101

	)

116 
	#ENETRESET
 102

	)

117 
	#ECONNABORTED
 103

	)

118 
	#ECONNRESET
 104

	)

119 
	#ENOBUFS
 105

	)

120 
	#EISCONN
 106

	)

121 
	#ENOTCONN
 107

	)

122 
	#ESHUTDOWN
 108

	)

123 
	#ETOOMANYREFS
 109

	)

124 
	#ETIMEDOUT
 110

	)

125 
	#ECONNREFUSED
 111

	)

126 
	#EHOSTDOWN
 112

	)

127 
	#EHOSTUNREACH
 113

	)

128 
	#EALREADY
 114

	)

129 
	#EINPROGRESS
 115

	)

130 
	#ESTALE
 116

	)

131 
	#EUCLEAN
 117

	)

132 
	#ENOTNAM
 118

	)

133 
	#ENAVAIL
 119

	)

134 
	#EISNAM
 120

	)

135 
	#EREMOTEIO
 121

	)

136 
	#EDQUOT
 122

	)

138 
	#ENOMEDIUM
 123

	)

139 
	#EMEDIUMTYPE
 124

	)

140 
	#ECANCELED
 125

	)

141 
	#ENOKEY
 126

	)

142 
	#EKEYEXPIRED
 127

	)

143 
	#EKEYREVOKED
 128

	)

144 
	#EKEYREJECTED
 129

	)

147 
	#EOWNERDEAD
 130

	)

148 
	#ENOTRECOVERABLE
 131

	)

151 
	#ENOTSUP
 
EOPNOTSUPP


	)

	@kernel/include/fs/dirent.h

4 #¥agm®
⁄˚


8 #ifde‡
__KERNEL__


9 
	~"c⁄fig.h
"

10 
	~"ty≥s.h
"

13 
	~"sys/ty≥s.h
"

14 
	~"wìnix/c⁄fig.h
"

18 
	sdúít


20 
öo_t
 
	md_öo
;

21 
off_t
 
	md_off
;

22 
	md_«me
[
NAME_LEN
];

23 } 
	tdúít_t
;

25 
	#d_fûío
 
d_öo


	)

	@kernel/include/fs/fcntl.h

5 #¥agm®
⁄˚


10 
	#O_RDONLY
 0

	)

11 
	#O_WRONLY
 1

	)

12 
	#O_RDWR
 2

	)

13 
	#O_ACCESSMODE_MASK
 (
O_RDONLY
 | 
O_WRONLY
 | 
O_RDWR
)

	)

16 
	#O_CREAT
 0x100

	)

17 
	#O_TRUNC
 0x200

	)

18 
	#O_APPEND
 0x400

	)

	@kernel/include/fs/file.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	#FMODE_READ
 1

	)

6 
	#FMODE_WRITE
 2

	)

7 
	#FMODE_APPEND
 4

	)

8 
	#FMODE_MAX_VALUE
 (
FMODE_READ
 | 
FMODE_WRITE
 | 
FMODE_APPEND
)

	)

10 
	gvnode
;

12 
	sfûe


19 
size_t
 
	mf_pos
;

27 
	mf_mode
;

32 
size_t
 
	mf_ªfcou¡
;

37 
vnode
 *
	mf_vnode
;

38 } 
	tfûe_t
;

40 
fûe
 *
f¸óã
(
fd
, 
vnode
 *vnode, 
mode
);

46 
fûe
 *
fgë
(
fd
);

51 
‰ef
(
fûe_t
 *
fûe
);

62 
Âut
(
fûe_t
 **
fûï
);

	@kernel/include/fs/lseek.h

1 #¥agm®
⁄˚


3 
	#SEEK_SET
 0

	)

4 
	#SEEK_CUR
 1

	)

5 
	#SEEK_END
 2

	)

	@kernel/include/fs/open.h

1 #¥agm®
⁄˚


3 
do_›í
(c⁄° *
fûíame
, 
Êags
);

5 
gë_em±y_fd
(*
fd
);

	@kernel/include/fs/pipe.h

8 #¥agm®
⁄˚


10 
do_pùe
(
pùefd
[2]);

	@kernel/include/fs/ramfs/ramfs.h

1 #¥agm®
⁄˚


3 
	~"fs/vfs.h
"

5 
ømfs_mou¡
(
fs
 *fs);

	@kernel/include/fs/s5fs/s5fs.h

7 #¥agm®
⁄˚


9 #ifde‡
__FSMAKER__


10 
	~<°döt.h
>

13 
	~"c⁄fig.h
"

15 
	~"drivîs/blockdev.h
"

16 
	~"fs/vfs.h
"

17 
	~"fs/vnode.h
"

18 
	~"mm/∑ge.h
"

19 
	~"¥oc/kmuãx.h
"

23 
	#S5_SUPER_BLOCK
 0

	)

24 
	#S5_IS_SUPER
(
blkno
Ë((blknoË=
S5_SUPER_BLOCK
)

	)

26 
	#S5_NBLKS_PER_FNODE
 30

	)

28 
	#S5_BLOCK_SIZE
 4096

	)

29 
	#S5_NDIRECT_BLOCKS
 28

	)

30 
	#S5_INODES_PER_BLOCK
 (
S5_BLOCK_SIZE
 / (
s5_öode_t
))

	)

31 
	#S5_DIRENTS_PER_BLOCK
 (
S5_BLOCK_SIZE
 / (
s5_dúít_t
))

	)

32 
	#S5_MAX_FILE_BLOCKS
 (
S5_NDIRECT_BLOCKS
 + 
S5_NIDIRECT_BLOCKS
)

	)

33 
	#S5_MAX_FILE_SIZE
 (
S5_MAX_FILE_BLOCKS
 * 
S5_BLOCK_SIZE
)

	)

34 
	#S5_NAME_LEN
 28

	)

36 
	#S5_TYPE_FREE
 0x0

	)

37 
	#S5_TYPE_DATA
 0x1

	)

38 
	#S5_TYPE_DIR
 0x2

	)

39 
	#S5_TYPE_CHR
 0x4

	)

40 
	#S5_TYPE_BLK
 0x8

	)

42 
	#S5_MAGIC
 071177

	)

43 
	#S5_CURRENT_VERSION
 3

	)

46 
	#S5_NIDIRECT_BLOCKS
 (
S5_BLOCK_SIZE
 / (
uöt32_t
))

	)

49 
	#S5_DATA_BLOCK
(
£ek±r
Ë((£ek±rË/ 
S5_BLOCK_SIZE
)

	)

52 
	#S5_DATA_OFFSET
(
£ek±r
Ë((£ek±rË% 
S5_BLOCK_SIZE
)

	)

55 
	#S5_INODE_BLOCK
(
öum
Ë((öumË/ 
S5_INODES_PER_BLOCK
 + 1)

	)

61 
	#S5_INODE_OFFSET
(
öum
Ë((öumË% 
S5_INODES_PER_BLOCK
)

	)

64 
	#FS_TO_S5FS
(
fs
Ë((
s5fs_t
 *)(fs)->
fs_i
)

	)

78 
	ss5_su≥r


80 
uöt32_t
 
	ms5s_magic
;

81 
uöt32_t
 
	ms5s_‰ì_öode
;

82 
uöt32_t
 
	ms5s_n‰ì
;

85 
uöt32_t
 
	ms5s_‰ì_blocks
[
S5_NBLKS_PER_FNODE
];

87 
uöt32_t
 
	ms5s_roŸ_öode
;

88 
uöt32_t
 
	ms5s_num_öodes
;

89 
uöt32_t
 
	ms5s_vîsi⁄
;

90 } 
	ts5_su≥r_t
;

93 
	ss5_öode


96 
uöt32_t
 
	ms5_√xt_‰ì
;

97 
uöt32_t
 
	ms5_size
;

98 } 
	ms5_un
;

99 
uöt32_t
 
	ms5_numbî
;

100 
uöt16_t
 
	ms5_ty≥
;

101 
öt16_t
 
	ms5_lökcou¡
;

102 
uöt32_t
 
	ms5_dúe˘_blocks
[
S5_NDIRECT_BLOCKS
];

103 
uöt32_t
 
	ms5_ödúe˘_block
;

104 } 
	ts5_öode_t
;

106 
	ss5_node


108 
vnode_t
 
	mvnode
;

109 
s5_öode_t
 
	möode
;

110 
	mdútõd_öode
;

111 } 
	ts5_node_t
;

113 
	#VNODE_TO_S5NODE
(
vn
Ë
	`CONTAINER_OF
(vn, 
s5_node_t
, 
vnode
)

	)

116 
	ss5_dúít


118 
uöt32_t
 
	ms5d_öode
;

119 
	ms5d_«me
[
S5_NAME_LEN
];

120 } 
	ts5_dúít_t
;

122 #i‚de‡
__FSMAKER__


124 
	ss5fs


126 
blockdev_t
 *
	ms5f_bdev
;

127 
s5_su≥r_t
 
	ms5f_su≥r
;

128 
kmuãx_t
 
	ms5f_muãx
;

129 
fs_t
 *
	ms5f_fs
;

130 
mobj_t
 
	ms5f_mobj
;

131 } 
	ts5fs_t
;

133 
s5fs_mou¡
(
fs
 *fs);

135 
s5_gë_mëa_disk_block
(
s5fs_t
 *
s5fs
, 
uöt64_t
 
blocknum
, 
f‹wrôe
,

136 
p‰ame_t
 **
pÂ
);

138 
s5_ªÀa£_disk_block
(
p‰ame_t
 **
pÂ
);

	@kernel/include/fs/s5fs/s5fs_privtest.h

1 #i‚de‡
__S5FS_PRIVTEST_H


2 
	#__S5FS_PRIVTEST_H


	)

4 
s5fs_°¨t
(c⁄° *
ã°roŸ
);

	@kernel/include/fs/s5fs/s5fs_subr.h

7 #¥agm®
⁄˚


9 
	~"ty≥s.h
"

10 
	~"mm/p‰ame.h
"

11 
	~"fs/s5fs/s5fs.h
"

13 
	gs5fs
;

14 
	gs5_node
;

16 
s5_Æloc_öode
(
s5fs
 *s5fs, 
uöt16_t
 
ty≥
, 
devid_t
 
devid
);

18 
s5_‰ì_öode
(
s5fs
 *s5fs, 
öo_t
 
öo
);

20 
ssize_t
 
s5_ªad_fûe
(
s5_node
 *
¢
, 
size_t
 
pos
, *
buf
, size_à
Àn
);

22 
ssize_t
 
s5_wrôe_fûe
(
s5_node
 *
¢
, 
size_t
 
pos
, c⁄° *
buf
,

23 
size_t
 
Àn
);

25 
s5_lök
(
s5_node
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

26 
s5_node
 *
chûd
);

28 
s5_föd_dúít
(
s5_node
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

29 
size_t
 *
fûïos
);

31 
s5_ªmove_dúít
(
s5_node
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

32 
s5_node
 *
ít
);

34 
s5_ª∂a˚_dúít
(
s5_node
 *
¢
, c⁄° *
«me
, 
size_t
 
«mñí
,

35 
s5_node
 *
ﬁd
, s5_nodê*
√w
);

37 
s5_fûe_block_to_disk_block
(
s5_node
 *
¢
, 
size_t
 
fûe_blocknum
,

38 
Æloc
, *
√w
);

40 
s5_öode_blocks
(
s5_node
 *
vnode
);

42 
s5_ªmove_blocks
(
s5_node
 *
vnode
);

45 
	#VNODE_TO_S5FS
(
vn
Ë((
s5fs_t
 *)((vn)->
vn_fs
->
fs_i
))

	)

47 
p‰ame_t
 *
s5_ˇche_™d_˛ór_block
(
mobj_t
 *
mo
, 
block
, 
loc
);

	@kernel/include/fs/stat.h

8 #¥agm®
⁄˚


12 
	s°©


14 
	m°_mode
;

15 
	m°_öo
;

16 
	m°_dev
;

17 
	m°_rdev
;

18 
	m°_∆ök
;

19 
	m°_uid
;

20 
	m°_gid
;

21 
	m°_size
;

22 
	m°_©ime
;

23 
	m°_mtime
;

24 
	m°_˘ime
;

25 
	m°_blksize
;

26 
	m°_blocks
;

27 } 
	t°©_t
;

31 
	#S_IFCHR
 0x0100

	)

32 
	#S_IFDIR
 0x0200

	)

33 
	#S_IFBLK
 0x0400

	)

34 
	#S_IFREG
 0x0800

	)

35 
	#S_IFLNK
 0x1000

	)

36 
	#S_IFIFO
 0x2000

	)

38 
	#_S_TYPE
(
m
Ë((m)&0xFF00)

	)

39 
	#S_ISCHR
(
m
Ë(
	`_S_TYPE
(mË=
S_IFCHR
)

	)

40 
	#S_ISDIR
(
m
Ë(
	`_S_TYPE
(mË=
S_IFDIR
)

	)

41 
	#S_ISBLK
(
m
Ë(
	`_S_TYPE
(mË=
S_IFBLK
)

	)

42 
	#S_ISREG
(
m
Ë(
	`_S_TYPE
(mË=
S_IFREG
)

	)

43 
	#S_ISLNK
(
m
Ë(
	`_S_TYPE
(mË=
S_IFLNK
)

	)

44 
	#S_ISFIFO
(
m
Ë(
	`_S_TYPE
(mË=
S_IFIFO
)

	)

	@kernel/include/fs/vfs.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	~"fs/›í.h
"

6 
	~"¥oc/kmuãx.h
"

7 
	~"utû/li°.h
"

9 
	gvnode
;

10 
	gfûe
;

11 
	gvfs
;

12 
	gfs
;

13 
	g¶ab_Æloˇt‹
;

16 
	#«me_m©ch
(
‚ame
, 
«me
, 
«mñí
) \

17 (
	`°æí
(
‚ame
Ë=
«mñí
 && !
	`°∫cmp
((‚ame), (
«me
), («mñí)))

	)

19 
	sfs_›s


25 (*
	mªad_vnode
)(
fs
 *
	mfs
, 
vnode
 *
	mvn
);

31 (*
	mdñëe_vnode
)(
fs
 *
	mfs
, 
vnode
 *
	mvn
);

39 (*
	mumou¡
)(
fs
 *
	mfs
);

41 (*
	msync
)(
fs
 *
	mfs
);

42 } 
	tfs_›s_t
;

44 #i‚de‡
STR_MAX


45 
	#STR_MAX
 32

	)

49 
	sfs


56 
	mfs_dev
[
STR_MAX
];

63 
	mfs_ty≥
[
STR_MAX
];

65 #ifde‡
__MOUNTING__


71 
vnode
 *
	mfs_mçt
;

77 
li°_lök_t
 
	mfs_lök
;

89 
fs_›s_t
 *
	mfs_›s
;

96 
vnode
 *
	mfs_roŸ
;

99 *
	mfs_i
;

101 
¶ab_Æloˇt‹
 *
	mfs_vnode_Æloˇt‹
;

102 
li°_t
 
	mvnode_li°
;

103 
kmuãx_t
 
	mvnode_li°_muãx
;

104 
kmuãx_t
 
	mvnode_ª«me_muãx
;

106 } 
	tfs_t
;

110 
fs_t
 
vfs_roŸ_fs
;

112 
do_sync
();

133 
vfs_shutdown
();

137 
«mev_lookup
(
vnode
 *
dú
, c⁄° *
«me
, 
size_t
 
«mñí
,

138 
vnode
 **
out
);

140 
«mev_dú
(
vnode
 *
ba£
, c⁄° *
∑th
, vnodê**
ªs_vnode
,

141 c⁄° **
«me
, 
size_t
 *
«mñí
);

143 
«mev_›í
(
vnode
 *
ba£
, c⁄° *
∑th
, 
oÊags
, 
mode
,

144 
devid_t
 
devid
, 
vnode
 **
ªs_vnode
);

146 
«mev_ªsﬁve
(
vnode
 *
ba£
, c⁄° *
∑th
,

147 
vnode
 **
ªs_vnode
);

149 
«mev_gë_chûd
(
vnode
 *
dú
, *
«me
, 
size_t
 
«mñí
,

150 
vnode
 **
out
);

152 
«mev_gë_∑ª¡
(
vnode
 *
dú
, vnodê**
out
);

154 
«mev_is_des˚nd™t
(
vnode
 *
a
, vnodê*
b
);

156 #ifde‡
__GETCWD__


157 
lookup_«me
(
vnode
 *
dú
, vnodê*
íåy
, *
buf
,

158 
size_t
 
size
);

159 
lookup_dú∑th
(
vnode
 *
dú
, *
buf
, 
size_t
 
size
);

162 
mou¡func
(
fs_t
 *
fs
);

	@kernel/include/fs/vfs_privtest.h

1 #¥agm®
⁄˚


3 
vfs_¥ivã°
();

	@kernel/include/fs/vfs_syscall.h

1 #¥agm®
⁄˚


3 
	~"dúít.h
"

5 
	~"ty≥s.h
"

7 
	~"fs/›í.h
"

8 
	~"fs/pùe.h
"

9 
	~"fs/°©.h
"

11 
do_˛o£
(
fd
);

13 
ssize_t
 
do_ªad
(
fd
, *
buf
, 
size_t
 
Àn
);

15 
ssize_t
 
do_wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
Àn
);

17 
do_dup
(
fd
);

19 
do_dup2
(
ofd
, 
nfd
);

21 
do_mknod
(c⁄° *
∑th
, 
mode
, 
devid_t
 
devid
);

23 
do_mkdú
(c⁄° *
∑th
);

25 
do_rmdú
(c⁄° *
∑th
);

27 
do_u∆ök
(c⁄° *
∑th
);

29 
do_lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

31 
do_ª«me
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

33 
do_chdú
(c⁄° *
∑th
);

35 
ssize_t
 
do_gëdít
(
fd
, 
dúít
 *
dúp
);

37 
off_t
 
do_l£ek
(
fd
, off_à
off£t
, 
whí˚
);

39 
do_°©
(c⁄° *
∑th
, 
°©
 *
uf
);

	@kernel/include/fs/vnode.h

9 #¥agm®
⁄˚


11 
	~"drivîs/blockdev.h
"

12 
	~"drivîs/ch¨dev.h
"

13 
	~"drivîs/dev.h
"

14 
	~"mm/mobj.h
"

15 
	~"mm/p‰ame.h
"

16 
	~"¥oc/kmuãx.h
"

17 
	~"utû/li°.h
"

19 
	gfs
;

20 
	gdúít
;

21 
	g°©
;

22 
	gfûe
;

23 
	gvnode
;

24 
	gkmuãx
;

26 
	#VNODE_LOADING
 0

	)

27 
	#VNODE_LOADED
 1

	)

29 
	svnode_›s


43 
ssize_t
 (*
ªad
)(
vnode
 *
	mfûe
, 
size_t
 
	mpos
, *
	mbuf
, size_à
	mcou¡
);

53 
ssize_t
 (*
wrôe
)(
vnode
 *
	mfûe
, 
size_t
 
	mpos
, c⁄° *
	mbuf
,

54 
size_t
 
	mcou¡
);

62 (*
	mmm≠
)(
vnode
 *
	mfûe
, 
mobj
 **
	mªt
);

72 (*
	mmknod
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
, 
	mmode
,

73 
devid_t
 
	mdevid
, 
vnode
 **
	mªt
);

81 (*
	mlookup
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
,

82 
vnode
 **
	mout
);

88 (*
	mlök
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
,

89 
vnode
 *
	mèrgë
);

95 (*
	mu∆ök
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
);

100 (*
	mª«me
)(
vnode
 *
	mﬁddú
, c⁄° *
	mﬁd«me
, 
size_t
 
	mﬁd«mñí
,

101 
vnode
 *
	m√wdú
, c⁄° *
	m√w«me
,

102 
size_t
 
	m√w«mñí
);

111 (*
	mmkdú
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
,

112 
vnode
 **
	mout
);

119 (*
	mrmdú
)(
vnode
 *
	mdú
, c⁄° *
	m«me
, 
size_t
 
	m«mñí
);

129 
ssize_t
 (*
ªaddú
)(
vnode
 *
	mdú
, 
size_t
 
	mpos
, 
dúít
 *
	md
);

137 (*
	m°©
)(
vnode
 *
	mvnode
, 
°©
 *
	mbuf
);

143 (*
	macquúe
)(
vnode
 *
	mvnode
, 
fûe
 *
	mfûe
);

151 (*
	mªÀa£
)(
vnode
 *
	mvnode
, 
fûe
 *
	mfûe
);

153 (*
	mgë_p‰ame
)(
vnode
 *
	mvnode
, 
size_t
 
	m∑gíum
, 
	mf‹wrôe
,

154 
p‰ame_t
 **
	mpÂ
);

161 (*
	mfûl_p‰ame
)(
vnode
 *
	mvnode
, 
p‰ame_t
 *
	mpf
);

168 (*
	mÊush_p‰ame
)(
vnode
 *
	mvnode
, 
p‰ame_t
 *
	mpf
);

174 (*
	måunˇã_fûe
)(
vnode
 *
	mvnode
);

175 } 
	tvnode_›s_t
;

177 
	svnode


183 
vnode_›s
 *
	mvn_›s
;

190 
fs
 *
	mvn_fs
;

192 #ifde‡
__MOUNTING__


198 
vnode
 *
	mvn_mou¡
;

206 
mobj
 
	mvn_mobj
;

213 
öo_t
 
	mvn_vno
;

218 
	mvn_mode
;

226 
size_t
 
	mvn_Àn
;

232 *
	mvn_i
;

238 
devid_t
 
	mvn_devid
;

246 
	mvn_°©e
;

251 
ktqueue_t
 
	mvn_waôq
;

254 
ch¨dev_t
 *
	mch¨dev
;

255 
blockdev_t
 *
	mblockdev
;

256 } 
	mvn_dev
;

259 
li°_lök_t
 
	mvn_lök
;

260 } 
	tvnode_t
;

262 
öô_•ecül_vnode
(
vnode_t
 *
vn
);

277 
vnode
 *
vgë
(
fs
 *fs, 
öo_t
 
vnum
);

282 
vlock
(
vnode_t
 *
vn
);

288 
vlock_ö_‹dî
(
vnode_t
 *
a
, vnode_à*
b
);

293 
vnode_t
 *
vgë_locked
(
fs
 *fs, 
öo_t
 
öo
);

298 
vput_locked
(
vnode
 **
v≈
);

303 
vu∆ock
(
vnode_t
 *
vn
);

308 
vu∆ock_ö_‹dî
(
vnode_t
 *
a
, vnode_à*
b
);

314 
vªf
(
vnode_t
 *
vn
);

328 
vput
(
vnode_t
 **
v≈
);

342 
vfs_is_ö_u£
(
fs
 *fs);

348 
size_t
 
vfs_cou¡_a˘ive_vnodes
(
fs
 *fs);

358 
vnode_¥öt
(
fs
 *fs);

	@kernel/include/fs/vnode_specials.h

	@kernel/include/globals.h

1 #¥agm®
⁄˚


3 
	~"maö/smp.h
"

4 
	~"¥oc/kthªad.h
"

5 
	~"¥oc/¥oc.h
"

7 
	#CORE_SPECIFIC_DATA
 
	`__©åibuã__
((
	`£˘i⁄
(".csd"))Ë{0}

	)

9 
c‹e_t
 
curc‹e
;

10 
¥oc_t
 *
cuΩroc
;

11 
kthªad_t
 *
cuπhr
;

	@kernel/include/kernel.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

12 *
£tup_íd
;

13 *
kî√l_°¨t
;

14 *
kî√l_°¨t_ãxt
;

15 *
kî√l_°¨t_d©a
;

16 *
kî√l_°¨t_bss
;

17 *
kî√l_íd
;

18 *
kî√l_íd_ãxt
;

19 *
kî√l_íd_d©a
;

20 *
kî√l_íd_bss
;

21 *
kî√l_°¨t_öô
;

22 *
kî√l_íd_öô
;

24 *
kî√l_phys_ba£
;

25 *
kî√l_phys_íd
;

27 
	#ölöe
 
	`__©åibuã__
((
Æways_ölöe
, 
u£d
))

	)

28 
	#n‹ëu∫
 
	`__©åibuã__
((
n‹ëu∫
))

	)

30 
	#off£tof
(
ty≥
, 
membî
) \

31 ((
uöçå_t
)((*)&((
ty≥
 *)(0))->
membî
 - (*)0))

	)

33 
	#NOT_YET_IMPLEMENTED
(
f
) \

34 
	`dbg
(
DBG_PRINT
, "NŸ yë im∂emíãd: %s, fûê%s,Üöê%d\n", 
f
, 
__FILE__
, \

35 
__LINE__
)

	)

37 #i‚de‡
MIN


38 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

40 #i‚de‡
MAX


41 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

44 
	#CONTAINER_OF
(
obj
, 
ty≥
, 
membî
) \

45 ((
ty≥
 *)((*)(
obj
)-
	`off£tof
—y≥, 
membî
)))

	)

55 
	#QUOTE_BY_NAME
(...Ë#__VA_ARGS__

	)

56 
	#QUOTE_BY_VALUE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

58 
	#QUOTE
(...Ë
	`QUOTE_BY_NAME
(
__VA_ARGS__
)

	)

61 #i‚de‡
__DRIVERS__


62 
	#__DRIVERS__


	)

64 #i‚de‡
__VFS__


65 
	#__VFS__


	)

67 #i‚de‡
__S5FS__


68 
	#__S5FS__


	)

70 #i‚de‡
__VM__


71 
	#__VM__


	)

73 #i‚de‡
__NTERMS__


74 
	#__NTERMS__
 3

	)

76 #i‚de‡
__NDISKS__


77 
	#__NDISKS__
 1

	)

	@kernel/include/limits.h

1 #¥agm®
⁄˚


3 
	#CHAR_BIT
 8

	)

4 
	#CHAR_MAX
 
UCHAR_MAX


	)

5 
	#UCHAR_MAX
 (()(~0U))

	)

6 
	#SCHAR_MAX
 ((sig√d )(
UCHAR_MAX
 >> 1))

	)

7 
	#SCHAR_MIN
 (-
SCHAR_MAX
 - 1)

	)

8 
	#USHRT_MAX
 (()(~0U))

	)

9 
	#SHRT_MAX
 ((sig√d )(
USHRT_MAX
 >> 1))

	)

10 
	#SHRT_MIN
 (-
SHRT_MAX
 - 1)

	)

11 
	#UINT_MAX
 (()(~0U))

	)

12 
	#INT_MAX
 ((sig√d )(
UINT_MAX
 >> 1))

	)

13 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

14 
	#ULONG_MAX
 (()(~0UL))

	)

15 
	#LONG_MAX
 ((sig√d )(
ULONG_MAX
 >> 1))

	)

16 
	#LONG_MIN
 (-
LONG_MAX
 - 1)

	)

18 
	#UPTR_MAX
 
ULONG_MAX


	)

	@kernel/include/main/acpi.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

5 
	sa˝i_hódî


7 
uöt32_t
 
	mah_sign
;

8 
uöt32_t
 
	mah_size
;

9 
uöt8_t
 
	mah_ªv
;

10 
uöt8_t
 
	mah_checksum
;

11 
uöt8_t
 
	mah_€mid
[6];

12 
uöt8_t
 
	mah_èbÀid
[8];

13 
uöt32_t
 
	mah_€mªv
;

14 
uöt32_t
 
	mah_¸ót‹id
;

15 
uöt32_t
 
	mah_¸ót‹ªv
;

16 } 
	t∑cked
 
	ta˝i_hódî_t
;

18 
a˝i_öô
();

20 *
a˝i_èbÀ
(
uöt32_t
 
sig«tuª
, 
ödex
);

	@kernel/include/main/apic.h

1 #¥agm®
⁄˚


3 
	~"maö/öãºu±.h
"

4 
	~"ty≥s.h
"

8 
	mDESTINATION_MODE_FIXED
 = 0,

9 
	mDESTINATION_MODE_LOWEST_PRIORITY
 = 1,

10 
	mDESTINATION_MODE_SMI
 = 2,

11 
	mDESTINATION_MODE_NMI
 = 4,

12 
	mDESTINATION_MODE_INIT
 = 5,

13 
	mDESTINATION_MODE_SIPI
 = 6

14 } 
	tùi_de°ö©i⁄_mode
;

16 
	#MAX_LAPICS
 8

	)

21 
≠ic_öô
();

24 
≠ic_cuºít_id
();

27 
≠ic_max_id
();

30 
≠ic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
);

32 
≠ic_íabÀ
();

37 
≠ic_íabÀ_≥riodic_timî
(
uöt32_t
 
‰eq
);

40 
≠ic_dißbÀ_≥riodic_timî
();

44 
≠ic_£t•ur
(
uöt8_t
 
öå
);

48 
≠ic_£tùl
(
uöt8_t
 
ùl
);

52 
uöt8_t
 
≠ic_gëùl
();

54 
≠ic_öôülized
();

60 
≠ic_eoi
();

62 
≠ic_°¨t_¥o˚ss‹
(
uöt8_t
 
èrgë
, uöt8_à
executi⁄_∑ge
);

64 
≠ic_£nd_ùi
(
uöt8_t
 
èrgë
, 
ùi_de°ö©i⁄_mode
 
de°ö©i⁄_mode
,

65 
uöt8_t
 
ve˘‹
);

67 
≠ic_brﬂdˇ°_ùi
(
ùi_de°ö©i⁄_mode
 
mode
, 
uöt8_t
 
ve˘‹
,

68 
ö˛ude_£lf
);

73 
≠ic_waô_ùi
();

	@kernel/include/main/cpuid.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

6 
	#CPUID_VENDOR_AMD
 "AuthíticAMD"

	)

7 
	#CPUID_VENDOR_INTEL
 "GíuöeI¡ñ"

	)

8 
	#CPUID_VENDOR_VIA
 "CíèurHauls"

	)

9 
	#CPUID_VENDOR_OLDTRANSMETA
 "TønsmëaCPU"

	)

10 
	#CPUID_VENDOR_TRANSMETA
 "GíuöeTMx86"

	)

11 
	#CPUID_VENDOR_CYRIX
 "CyrixIn°ód"

	)

12 
	#CPUID_VENDOR_CENTAUR
 "CíèurHauls"

	)

13 
	#CPUID_VENDOR_NEXGEN
 "NexGíDriví"

	)

14 
	#CPUID_VENDOR_UMC
 "UMC UMC UMC "

	)

15 
	#CPUID_VENDOR_SIS
 "SiS SiS SiS "

	)

16 
	#CPUID_VENDOR_NSC
 "Geodêby NSC"

	)

17 
	#CPUID_VENDOR_RISE
 "Ri£Ri£Ri£"

	)

21 
	mCPUID_FEAT_ECX_SSE3
 = 1 << 0,

22 
	mCPUID_FEAT_ECX_PCLMUL
 = 1 << 1,

23 
	mCPUID_FEAT_ECX_DTES64
 = 1 << 2,

24 
	mCPUID_FEAT_ECX_MONITOR
 = 1 << 3,

25 
	mCPUID_FEAT_ECX_DS_CPL
 = 1 << 4,

26 
	mCPUID_FEAT_ECX_VMX
 = 1 << 5,

27 
	mCPUID_FEAT_ECX_SMX
 = 1 << 6,

28 
	mCPUID_FEAT_ECX_EST
 = 1 << 7,

29 
	mCPUID_FEAT_ECX_TM2
 = 1 << 8,

30 
	mCPUID_FEAT_ECX_SSSE3
 = 1 << 9,

31 
	mCPUID_FEAT_ECX_CID
 = 1 << 10,

32 
	mCPUID_FEAT_ECX_FMA
 = 1 << 12,

33 
	mCPUID_FEAT_ECX_CX16
 = 1 << 13,

34 
	mCPUID_FEAT_ECX_ETPRD
 = 1 << 14,

35 
	mCPUID_FEAT_ECX_PDCM
 = 1 << 15,

36 
	mCPUID_FEAT_ECX_DCA
 = 1 << 18,

37 
	mCPUID_FEAT_ECX_SSE4_1
 = 1 << 19,

38 
	mCPUID_FEAT_ECX_SSE4_2
 = 1 << 20,

39 
	mCPUID_FEAT_ECX_x2APIC
 = 1 << 21,

40 
	mCPUID_FEAT_ECX_MOVBE
 = 1 << 22,

41 
	mCPUID_FEAT_ECX_POPCNT
 = 1 << 23,

42 
	mCPUID_FEAT_ECX_XSAVE
 = 1 << 26,

43 
	mCPUID_FEAT_ECX_OSXSAVE
 = 1 << 27,

44 
	mCPUID_FEAT_ECX_AVX
 = 1 << 28,

46 
	mCPUID_FEAT_EDX_FPU
 = 1 << 0,

47 
	mCPUID_FEAT_EDX_VME
 = 1 << 1,

48 
	mCPUID_FEAT_EDX_DE
 = 1 << 2,

49 
	mCPUID_FEAT_EDX_PSE
 = 1 << 3,

50 
	mCPUID_FEAT_EDX_TSC
 = 1 << 4,

51 
	mCPUID_FEAT_EDX_MSR
 = 1 << 5,

52 
	mCPUID_FEAT_EDX_PAE
 = 1 << 6,

53 
	mCPUID_FEAT_EDX_MCE
 = 1 << 7,

54 
	mCPUID_FEAT_EDX_CX8
 = 1 << 8,

55 
	mCPUID_FEAT_EDX_APIC
 = 1 << 9,

56 
	mCPUID_FEAT_EDX_SEP
 = 1 << 11,

57 
	mCPUID_FEAT_EDX_MTRR
 = 1 << 12,

58 
	mCPUID_FEAT_EDX_PGE
 = 1 << 13,

59 
	mCPUID_FEAT_EDX_MCA
 = 1 << 14,

60 
	mCPUID_FEAT_EDX_CMOV
 = 1 << 15,

61 
	mCPUID_FEAT_EDX_PAT
 = 1 << 16,

62 
	mCPUID_FEAT_EDX_PSE36
 = 1 << 17,

63 
	mCPUID_FEAT_EDX_PSN
 = 1 << 18,

64 
	mCPUID_FEAT_EDX_CLF
 = 1 << 19,

65 
	mCPUID_FEAT_EDX_DTES
 = 1 << 21,

66 
	mCPUID_FEAT_EDX_ACPI
 = 1 << 22,

67 
	mCPUID_FEAT_EDX_MMX
 = 1 << 23,

68 
	mCPUID_FEAT_EDX_FXSR
 = 1 << 24,

69 
	mCPUID_FEAT_EDX_SSE
 = 1 << 25,

70 
	mCPUID_FEAT_EDX_SSE2
 = 1 << 26,

71 
	mCPUID_FEAT_EDX_SS
 = 1 << 27,

72 
	mCPUID_FEAT_EDX_HTT
 = 1 << 28,

73 
	mCPUID_FEAT_EDX_TM1
 = 1 << 29,

74 
	mCPUID_FEAT_EDX_IA64
 = 1 << 30,

75 
	mCPUID_FEAT_EDX_PBE
 = 1 << 31

78 
	e˝uid_ªque°s


80 
	mCPUID_GETVENDORSTRING
,

81 
	mCPUID_GETFEATURES
,

82 
	mCPUID_GETTLB
,

83 
	mCPUID_GETSERIAL
,

85 
	mCPUID_INTELEXTENDED
 = 0x80000000,

86 
	mCPUID_INTELFEATURES
,

87 
	mCPUID_INTELBRANDSTRING
,

88 
	mCPUID_INTELBRANDSTRINGMORE
,

89 
	mCPUID_INTELBRANDSTRINGEND
,

92 
ölöe
 
	$˝uid
(
ªque°
, 
uöt32_t
 *
a
, uöt32_à*
b
, uöt32_à*
c
,

93 
uöt32_t
 *
d
)

95 
__asm__
 volatile("cpuid"

96 : "˜"(*
a
), "=b"(*
b
), "=c"(*
c
), "=d"(*
d
)

97 : "0"(
ªque°
));

98 
	}
}

100 
ölöe
 
	$˝uid_gë_m§
(
uöt32_t
 
m§
, uöt32_à*
lo
, uöt32_à*
hi
)

102 
__asm__
 volatile("rdmsr"

103 : "˜"(*
lo
), "=d"(*
hi
)

104 : "c"(
m§
));

105 
	}
}

107 
ölöe
 
	$˝uid_£t_m§
(
uöt32_t
 
m§
, uöt32_à
lo
, uöt32_à
hi
)

109 
__asm__
 vﬁ©ûe("wrm§" ::"a"(
lo
), "d"(
hi
), "c"(
m§
));

110 
	}
}

112 
ölöe
 
	$io_waô
()

114 
__asm__
 volatile(

118 
	}
}

	@kernel/include/main/entry.h

3 
kmaö
();

	@kernel/include/main/gdt.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	#GDT_COUNT
 16

	)

7 
	#GDT_ZERO
 0x00

	)

8 
	#GDT_KERNEL_TEXT
 0x08

	)

9 
	#GDT_KERNEL_DATA
 0x10

	)

10 
	#GDT_USER_TEXT
 0x18

	)

11 
	#GDT_USER_DATA
 0x20

	)

12 
	#GDT_TSS
 0x28

	)

14 
gdt_öô
();

16 
gdt_£t_kî√l_°ack
(*
addr
);

18 
gdt_£t_íåy
(
uöt32_t
 
£gmít
, uöt32_à
ba£
, uöt32_à
limô
,

19 
uöt8_t
 
rög
, 
exec
, 
dú
, 
rw
);

21 
gdt_˛ór
(
uöt32_t
 
£gmít
);

	@kernel/include/main/inits.h

1 #¥agm®
⁄˚


3 
sched_öô
();

5 
kshñl_öô
();

7 
fûe_öô
();

9 
pùe_öô
();

11 
vfs_öô
();

13 
sysˇŒ_öô
();

15 
ñf64_öô
();

	@kernel/include/main/interrupt.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

5 
	~"utû/debug.h
"

8 
	#INTR_DIVIDE_BY_ZERO
 0x00

	)

9 
	#INTR_INVALID_OPCODE
 0x06

	)

10 
	#INTR_GPF
 0x0d

	)

11 
	#INTR_PAGE_FAULT
 0x0e

	)

13 
	#INTR_APICTIMER
 0xf0

	)

14 
	#INTR_KEYBOARD
 0xe0

	)

16 
	#INTR_DISK_PRIMARY
 0xd0

	)

17 
	#INTR_SPURIOUS
 0x„

	)

18 
	#INTR_APICERR
 0xff

	)

19 
	#INTR_SHUTDOWN
 0xfd

	)

25 
	#IPL_LOW
 0

	)

28 
	#IPL_HIGH
 0xe0

	)

29 
	#IPL_HIGHEST
 0xff

	)

31 
	sªgs


34 
uöt64_t
 
	mr_r15
;

35 
uöt64_t
 
	mr_r14
;

36 
uöt64_t
 
	mr_r13
;

37 
uöt64_t
 
	mr_r12
;

38 
uöt64_t
 
	mr_rbp
;

39 
uöt64_t
 
	mr_rbx
;

40 
uöt64_t
 
	mr_r11
;

41 
uöt64_t
 
	mr_r10
;

42 
uöt64_t
 
	mr_r9
;

43 
uöt64_t
 
	mr_r8
;

44 
uöt64_t
 
	mr_øx
;

45 
uöt64_t
 
	mr_rcx
;

46 
uöt64_t
 
	mr_rdx
;

47 
uöt64_t
 
	mr_rsi
;

48 
uöt64_t
 
	mr_rdi
;

51 
uöt64_t
 
	mr_öå
;

54 
uöt64_t
 
	mr_îr
;

55 
uöt64_t
 
	mr_rù
;

56 
uöt64_t
 
	mr_cs
;

57 
uöt64_t
 
	mr_rÊags
;

58 
uöt64_t
 
	mr_r•
;

59 
uöt64_t
 
	mr_ss
;

60 } 
	t∑cked
 
	tªgs_t
;

62 
öå_öô
();

70 (*
	töå_h™dÀr_t
)(
	tªgs_t
 *
	tªgs
);

77 
öå_h™dÀr_t
 
	`öå_ªgi°î
(
uöt8_t
 
öå
, i¡r_h™dÀr_à
h™dÀr
);

79 
öt32_t
 
	`öå_m≠
(
uöt16_t
 
úq
, 
uöt8_t
 
öå
);

81 
ölöe
 
uöt64_t
 
	$öå_íabÀd
()

83 
uöt64_t
 
Êags
;

84 
__asm__
 volatile("pushf;Öop %0;ánd $0x200, %0;"

85 : "Ù"(
Êags
)::);

86  
Êags
;

87 
	}
}

89 
ölöe
 
	$öå_íabÀ
(Ë{ 
__asm__
 vﬁ©ûe("°i"); 
	}
}

91 
ölöe
 
	$öå_dißbÀ
(Ë{ 
__asm__
 vﬁ©ûe("˛i"); 
	}
}

97 
ölöe
 
	$öå_waô
()

105 
__asm__
 volatile("sti; hlt");

106 
	}
}

112 
uöt8_t
 
öå_£tùl
(uöt8_à
ùl
);

115 
uöt8_t
 
öå_gëùl
();

117 
dump_ªgi°îs
(
ªgs_t
 *
ªgs
);

	@kernel/include/main/io.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

6 
ölöe
 
	$outb
(
uöt16_t
 
p‹t
, 
uöt8_t
 
vÆ
)

8 
__asm__
 vﬁ©ûe("outb %0,%1" ::"a"(
vÆ
), "Nd"(
p‹t
));

9 
	}
}

11 
ölöe
 
uöt8_t
 
	$öb
(
uöt16_t
 
p‹t
)

13 
uöt8_t
 
ªt
;

14 
__asm__
 volatile("inb %1,%0"

15 : "˜"(
ªt
)

16 : "Nd"(
p‹t
));

17  
ªt
;

18 
	}
}

20 
ölöe
 
	$outw
(
uöt16_t
 
p‹t
, uöt16_à
vÆ
)

22 
__asm__
 vﬁ©ûe("outw %0,%1" ::"a"(
vÆ
), "Nd"(
p‹t
));

23 
	}
}

25 
ölöe
 
uöt16_t
 
	$öw
(
uöt16_t
 
p‹t
)

27 
uöt16_t
 
ªt
;

28 
__asm__
 volatile("inw %1,%0"

29 : "˜"(
ªt
)

30 : "Nd"(
p‹t
));

31  
ªt
;

32 
	}
}

34 
ölöe
 
	$oué
(
uöt16_t
 
p‹t
, 
uöt32_t
 
vÆ
)

36 
__asm__
 vﬁ©ûe("oué %0,%1" ::"a"(
vÆ
), "Nd"(
p‹t
));

37 
	}
}

39 
ölöe
 
uöt32_t
 
	$öl
(
uöt16_t
 
p‹t
)

41 
uöt32_t
 
ªt
;

42 
__asm__
 volatile("inl %1,%0"

43 : "˜"(
ªt
)

44 : "Nd"(
p‹t
));

45  
ªt
;

46 
	}
}

	@kernel/include/main/smp.h

1 
	~"boŸ/c⁄fig.h
"

2 
	~"mm/∑ge.h
"

3 
	~"¥oc/c‹e.h
"

11 
	#GET_CSD
(
c‹e
, 
ty≥
, 
«me
) \

12 ((
ty≥
 *)(
csd_vaddr_èbÀ
[(
c‹e
)] + 
	`PAGE_OFFSET
(&(
«me
))))

	)

14 
uöçå_t
 
csd_vaddr_èbÀ
[];

16 
m≠_ö_c‹e_•ecific_d©a
(
pml4_t
 *
pml4
);

18 
smp_öô
();

20 
c‹e_öô
();

22 
is_c‹e_•ecific_d©a
(*
addr
);

	@kernel/include/mm/kmalloc.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 *
kmÆloc
(
size_t
 
size
);

7 
k‰ì
(*
addr
);

	@kernel/include/mm/mm.h

1 #¥agm®
⁄˚


3 
	#MM_POISON
 1

	)

4 
	#MM_POISON_ALLOC
 0xBB

	)

5 
	#MM_POISON_FREE
 0xDD

	)

7 
	#USER_MEM_LOW
 0x00400000

	)

8 
	#USER_MEM_HIGH
 (1UL << 47Ë

	)

	@kernel/include/mm/mman.h

1 #¥agm®
⁄˚


7 
	#PROT_NONE
 0x0

	)

8 
	#PROT_READ
 0x1

	)

9 
	#PROT_WRITE
 0x2

	)

10 
	#PROT_EXEC
 0x4

	)

14 
	#MAP_FAILED
 ((*)-1)

	)

18 
	#MAP_SHARED
 1

	)

19 
	#MAP_PRIVATE
 2

	)

20 
	#MAP_TYPE
 3

	)

24 
	#MAP_FIXED
 4

	)

25 
	#MAP_ANON
 8

	)

	@kernel/include/mm/mobj.h

1 #¥agm®
⁄˚


3 
	~"¥oc/kmuãx.h
"

4 
	~"utû/©omic.h
"

5 
	~"utû/li°.h
"

6 
	~"utû/båì.h
"

7 
	~"mm/p‰ame.h
"

9 
	gp‰ame
;

11 
	gmobj
;

15 
	mMOBJ_VNODE
 = 1,

16 
	mMOBJ_SHADOW
,

17 
	mMOBJ_ANON
,

18 
	mMOBJ_FS
,

19 } 
	tmobj_ty≥_t
;

21 
	smobj_›s


23 (*
	mgë_p‰ame
)(
mobj
 *
	mo
, 
uöt64_t
 
	m∑gíum
, 
	mf‹wrôe
,

24 
p‰ame
 **
	mpÂ
);

26 (*
	mfûl_p‰ame
)(
mobj
 *
	mo
, 
p‰ame
 *
	mpf
);

28 (*
	mÊush_p‰ame
)(
mobj
 *
	mo
, 
p‰ame
 *
	mpf
);

30 (*
	mde°ru˘‹
)(
mobj
 *
	mo
);

31 } 
	tmobj_›s_t
;

33 
	smobj


35 
	mmo_ty≥
;

36 
mobj_›s
 
	mmo_›s
;

37 
©omic_t
 
	mmo_ªfcou¡
;

38 
li°_t
 
	mmo_p‰ames
;

39 
kmuãx_t
 
	mmo_muãx
;

40 
båì_node_t
 *
	mmo_båì
;

41 } 
	tmobj_t
;

43 
mobj_öô
(
mobj_t
 *
o
, 
ty≥
, 
mobj_›s_t
 *
›s
);

45 
mobj_lock
(
mobj_t
 *
o
);

47 
mobj_u∆ock
(
mobj_t
 *
o
);

49 
mobj_ªf
(
mobj_t
 *
o
);

51 
mobj_put
(
mobj_t
 **
›
);

53 
mobj_put_locked
(
mobj_t
 **
›
);

55 
mobj_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

56 
p‰ame
 **
pÂ
);

58 
mobj_föd_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
p‰ame
 **
pÂ
);

60 
mobj_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame
 *
pf
);

62 
mobj_Êush
(
mobj_t
 *
o
);

64 
mobj_‰ì_p‰ame
(
mobj_t
 *
o
, 
p‰ame
 **
pÂ
);

66 
mobj_dñëe_p‰ame
(
mobj_t
 *
o
, 
size_t
 
∑gíum
);

68 
mobj_deÁu…_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

69 
p‰ame
 **
pÂ
);

71 
mobj_deÁu…_de°ru˘‹
(
mobj_t
 *
o
);

73 
mobj_¸óã_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, uöt64_à
loc
, 
p‰ame_t
 **
pÂ
);

	@kernel/include/mm/page.h

1 #¥agm®
⁄˚


3 #ifde‡
__KERNEL__


4 
	~"ty≥s.h
"

6 
	~"sys/ty≥s.h
"

16 
	#PAGE_SHIFT
 12

	)

17 
	#PAGE_SIZE
 ((
uöçå_t
)(1UL << 
PAGE_SHIFT
))

	)

18 
	#PAGE_MASK
 (0xfffffffffffffff‡<< 
PAGE_SHIFT
)

	)

20 
	#PAGE_ALIGN_DOWN
(
x
Ë((*)(((
uöçå_t
)(x)&
PAGE_MASK
)))

	)

21 
	#PAGE_ALIGN_UP
(
x
) \

22 ((*)((((
uöçå_t
)(
x
Ë+ (
PAGE_SIZE
 - 1)Ë& 
PAGE_MASK
)))

	)

24 
	#PAGE_OFFSET
(
x
Ë(((
uöçå_t
)(x)Ë& ~
PAGE_MASK
)

	)

25 
	#PAGE_ALIGNED
(
x
Ë(!
	`PAGE_OFFSET
(x))

	)

27 
	#PN_TO_ADDR
(
x
Ë((*)(((
uöçå_t
)(x)Ë<< 
PAGE_SHIFT
))

	)

28 
	#ADDR_TO_PN
(
x
Ë(((
uöçå_t
)(x)Ë>> 
PAGE_SHIFT
)

	)

30 
	#PAGE_SAME
(
x
, 
y
Ë(
	`PAGE_ALIGN_DOWN
(xË=PAGE_ALIGN_DOWN(y))

	)

32 
	#PAGE_NSIZES
 8

	)

34 
	#USE_2MB_PAGES
 1

	)

35 
	#USE_1GB_PAGES
 1

	)

37 
	#PAGE_SHIFT_2MB
 21

	)

38 
	#PAGE_SIZE_2MB
 ((
uöçå_t
)(1UL << 
PAGE_SHIFT_2MB
))

	)

39 
	#PAGE_MASK_2MB
 (0xfffffffffffffff‡<< 
PAGE_SHIFT_2MB
)

	)

40 
	#PAGE_ALIGN_DOWN_2MB
(
x
Ë(((
uöçå_t
)(x)Ë& 
PAGE_MASK_2MB
)

	)

41 
	#PAGE_ALIGN_UP_2MB
(
x
Ë(
	`PAGE_ALIGN_DOWN_2MB
((x)-1Ë+ 
PAGE_SIZE_2MB
)

	)

42 
	#PAGE_OFFSET_2MB
(
x
Ë(((
uöçå_t
)(x)Ë& ~
PAGE_MASK_2MB
)

	)

43 
	#PAGE_ALIGNED_2MB
(
x
Ë((xË=
	`PAGE_ALIGN_DOWN_2MB
(x))

	)

44 
	#PAGE_SAME_2MB
(
x
, 
y
Ë(
	`PAGE_ALIGN_DOWN_2MB
(xË=PAGE_ALIGN_DOWN_2MB(y))

	)

46 
	#PAGE_SHIFT_1GB
 30

	)

47 
	#PAGE_MASK_1GB
 (0xfffffffffffffff‡<< 
PAGE_SHIFT_1GB
)

	)

48 
	#PAGE_SIZE_1GB
 ((
uöçå_t
)(1UL << 
PAGE_SHIFT_1GB
))

	)

49 
	#PAGE_ALIGN_DOWN_1GB
(
x
Ë(((
uöçå_t
)(x)Ë& 
PAGE_MASK_1GB
)

	)

50 
	#PAGE_ALIGN_UP_1GB
(
x
Ë(
	`PAGE_ALIGN_DOWN_1GB
((x)-1Ë+ 
PAGE_SIZE_1GB
)

	)

51 
	#PAGE_OFFSET_1GB
(
x
Ë(((
uöçå_t
)(x)Ë& ~
PAGE_MASK_1GB
)

	)

52 
	#PAGE_ALIGNED_1GB
(
x
Ë((xË=
	`PAGE_ALIGN_DOWN_1GB
(x))

	)

53 
	#PAGE_SAME_1GB
(
x
, 
y
Ë(
	`PAGE_ALIGN_DOWN_1GB
(xË=PAGE_ALIGN_DOWN_1GB(y))

	)

55 
	#PAGE_SHIFT_512GB
 39

	)

56 
	#PAGE_SIZE_512GB
 ((
uöçå_t
)(1UL << 
PAGE_SHIFT_512GB
))

	)

57 
	#PAGE_MASK_512GB
 (0xfffffffffffffff‡<< 
PAGE_SHIFT_512GB
)

	)

58 
	#PAGE_ALIGN_DOWN_512GB
(
x
Ë(((
uöçå_t
)(x)Ë& 
PAGE_MASK_512GB
)

	)

59 
	#PAGE_ALIGN_UP_512GB
(
x
Ë(
	`PAGE_ALIGN_DOWN_512GB
((x)-1Ë+ 
PAGE_SIZE_512GB
)

	)

61 
	#PAGE_CONTROL_FLAGS
(
x
) \

62 ((
x
Ë& (
PT_PRESENT
 | 
PT_WRITE
 | 
PT_USER
 | 
PT_WRITE_THROUGH
 | \

63 
PT_CACHE_DISABLED
 | 
PT_SIZE
 | 
PT_GLOBAL
))

	)

64 
	#PAGE_FLAGS
(
x
Ë((xË& (~
PAGE_MASK
))

	)

66 
	e∑ge_size


68 
	mps_4kb
,

69 
	mps_2mb
,

70 
	mps_1gb
,

71 
	mps_512gb
,

72 } 
	t∑ge_size_t
;

74 
	s∑ge_°©us


76 
∑ge_size_t
 
	msize
;

77 
	mm≠≥d
;

78 } 
	t∑ge_°©us_t
;

84 
∑ge_öô
();

86 *
physm≠_°¨t
();

88 *
physm≠_íd
();

97 *
∑ge_Æloc
();

99 *
∑ge_Æloc_bounded
(*
max_∑ddr
);

101 
∑ge_‰ì
(*
addr
);

109 *
∑ge_Æloc_n
(
size_t
 
≈ages
);

111 *
∑ge_Æloc_n_bounded
(
size_t
 
≈ages
, *
max_∑ddr
);

113 
∑ge_‰ì_n
(*
°¨t
, 
size_t
 
≈ages
);

115 
∑ge_add_ønge
(*
°¨t
, *
íd
);

117 
∑ge_m¨k_ª£rved
(*
∑ddr
);

119 
∑ge_öô_föish
();

124 
size_t
 
∑ge_‰ì_cou¡
();

	@kernel/include/mm/pagetable.h

1 #¥agm®
⁄˚


3 
	~"mm/∑ge.h
"

4 
	~"vm/vmm≠.h
"

6 
	#PT_PRESENT
 0x001

	)

7 
	#PT_WRITE
 0x002

	)

8 
	#PT_USER
 0x004

	)

9 
	#PT_WRITE_THROUGH
 0x008

	)

10 
	#PT_CACHE_DISABLED
 0x010

	)

11 
	#PT_ACCESSED
 0x020

	)

12 
	#PT_DIRTY
 0x040

	)

13 
	#PT_SIZE
 0x080

	)

14 
	#PT_GLOBAL
 0x100

	)

16 
	#PT_ENTRY_COUNT
 (
PAGE_SIZE
 / (
uöçå_t
))

	)

18 
	s∑ge


20 
uöt8_t
 
	md©a
[
PAGE_SIZE
];

21 } 
	t∑ge_t
;

24 
	s±


26 
uöçå_t
 
	mphys
[
PT_ENTRY_COUNT
];

27 } 
	t±_t
, 
	tpd_t
, 
	tpdp_t
, 
	tpml4_t
;

29 
	#INDEX_MASK
 0b111111111

	)

30 
	#PML4E
(
x
Ë((((
uöçå_t
)(x)Ë>> 39Ë& 
INDEX_MASK
)

	)

31 
	#PDPE
(
x
Ë((((
uöçå_t
)(x)Ë>> 30Ë& 
INDEX_MASK
)

	)

32 
	#PDE
(
x
Ë((((
uöçå_t
)(x)Ë>> 21Ë& 
INDEX_MASK
)

	)

33 
	#PTE
(
x
Ë((((
uöçå_t
)(x)Ë>> 12Ë& 
INDEX_MASK
)

	)

35 
	#PT_ENTRY_COUNT
 (
PAGE_SIZE
 / (
uöçå_t
))

	)

36 
	#PT_VADDR_SIZE
 (
PAGE_SIZE
 * 
PT_ENTRY_COUNT
)

	)

37 
	#PD_VADDR_SIZE
 (
PAGE_SIZE
 * 
PT_ENTRY_COUNT
 * PT_ENTRY_COUNT)

	)

38 
	#PDP_VADDR_SIZE
 \

39 (
PAGE_SIZE
 * 
PT_ENTRY_COUNT
 * PT_ENTRY_COUNT * PT_ENTRY_COUNT)

	)

40 
	#PML4_VADDR_SIZE
 \

41 (
PAGE_SIZE
 * 
PT_ENTRY_COUNT
 * PT_ENTRY_COUNT * PT_ENTRY_COUNT * \

42 
PT_ENTRY_COUNT
)

	)

44 
	#IS_PRESENT
(
n
Ë(“)&
PT_PRESENT
)

	)

45 
	#IS_2MB_PAGE
(
n
Ë(“)&
PT_SIZE
)

	)

46 
	#IS_1GB_PAGE
 
IS_2MB_PAGE


	)

48 
	#GDB_PT_PHYSADDR
(
±
, 
v
Ë’t->
phys
[
	`PTE
(v)] & 
PAGE_MASK
)

	)

49 
	#GDB_PD_PHYSADDR
(
pd
, 
v
Ë’d->
phys
[
	`PDE
(v)] & 
PAGE_MASK
)

	)

50 
	#GDB_PDP_PHYSADDR
(
pdp
, 
v
Ë’dp->
phys
[
	`PDPE
(v)] & 
PAGE_MASK
)

	)

51 
	#GDB_PML4_PHYSADDR
(
pml4
, 
v
Ë’ml4->
phys
[
	`PML4E
(v)] & 
PAGE_MASK
)

	)

53 
	#GDB_PHYSADDR
(
pml4
, 
v
) \

54 (
	`GDB_PT_PHYSADDR
( \

55 
	`GDB_PD_PHYSADDR
( \

56 
	`GDB_PDP_PHYSADDR
(
	`GDB_PML4_PHYSADDR
(
pml4
, (
v
)Ë+ 
PHYS_OFFSET
, \

57 (
v
)) + \

58 
PHYS_OFFSET
, \

59 (
v
)) + \

60 
PHYS_OFFSET
, \

61 (
v
)) + \

62 
PHYS_OFFSET
)

	)

63 
	#GDB_CUR_PHYSADDR
(
v
Ë
	`GDB_PHYSADDR
(
cuΩroc
->
p_pml4
, (v))

	)

65 
uöçå_t
 
±_vút_to_phys_hñ≥r
(
pml4_t
 *
pml4
, uöçå_à
vaddr
);

67 
uöçå_t
 
±_vút_to_phys
(uöçå_à
vaddr
);

69 
±_öô
();

72 
±_ãm∂©e_öô
();

74 
pml4_t
 *
±_gë
();

76 
±_£t
(
pml4_t
 *
pml4
);

78 
pml4_t
 *
˛⁄e_pml4
’ml4_à*
pml4
, 
ö˛ude_u£r_m≠pögs
);

80 
pml4_t
 *
±_¸óã
();

82 
±_de°roy
(
pml4_t
 *
pml4
);

84 
±_m≠
(
pml4_t
 *
pml4
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, 
uöt32_t
 
pdÊags
,

85 
uöt32_t
 
±Êags
);

87 
±_m≠_ønge
(
pml4_t
 *
pml4
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
,

88 
uöçå_t
 
vmax
, 
uöt32_t
 
pdÊags
, uöt32_à
±Êags
);

90 
±_unm≠
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
);

92 
±_unm≠_ønge
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
, uöçå_à
vmax
);

94 
check_övÆid_m≠pögs
(
pml4_t
 *
pml4
, 
vmm≠_t
 *
vmm≠
, *
¥om±
);

	@kernel/include/mm/pframe.h

1 #¥agm®
⁄˚


4 
	~"¥oc/kmuãx.h
"

5 
	~"ty≥s.h
"

7 
	sp‰ame


9 
size_t
 
	mpf_∑gíum
;

10 
size_t
 
	mpf_loc
;

11 *
	mpf_addr
;

12 
	mpf_dúty
;

13 
kmuãx_t
 
	mpf_muãx
;

14 
li°_lök_t
 
	mpf_lök
;

15 } 
	tp‰ame_t
;

17 
p‰ame_öô
();

19 
p‰ame_t
 *
p‰ame_¸óã
();

21 
p‰ame_ªÀa£
(
p‰ame_t
 **
pÂ
);

23 
p‰ame_‰ì
(
p‰ame_t
 **
pÂ
);

	@kernel/include/mm/slab.h

1 #¥agm®
⁄˚


3 
	~<ty≥s.h
>

6 
	#SLAB_REDZONE
 0xdódbìfdódbìf

	)

10 
	#SLAB_CHECK_FREE


	)

20 
¶ab_Æloˇt‹
 
	t¶ab_Æloˇt‹_t
;

25 
¶ab_öô
();

60 
¶ab_Æloˇt‹_t
 *
¶ab_Æloˇt‹_¸óã
(c⁄° *
«me
, 
size_t
 
size
);

67 
¶ab_Æloˇt‹_de°roy
(
¶ab_Æloˇt‹
 *
Æloˇt‹
);

77 *
¶ab_obj_Æloc
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
);

85 
¶ab_obj_‰ì
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
, *
obj
);

96 
¶ab_Æloˇt‹s_ª˛aim
(
èrgë
);

	@kernel/include/mm/tlb.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

6 
	~"mm/∑ge.h
"

10 
ölöe
 
	$éb_Êush
(
uöçå_t
 
vaddr
)

12 
__asm__
 vﬁ©ûe("övÕg (%0)" ::"r"(
vaddr
));

13 
	}
}

19 
ölöe
 
	$éb_Êush_ønge
(
uöçå_t
 
vaddr
, 
size_t
 
cou¡
)

21 
size_t
 
i
 = 0; i < 
cou¡
; i++, 
vaddr
 +
PAGE_SIZE
)

23 
	`éb_Êush
(
vaddr
);

25 
	}
}

28 
ölöe
 
	$éb_Êush_Æl
()

30 
uöçå_t
 
pdú
;

31 
__asm__
 volatile("movq %%cr3, %0"

32 : "Ù"(
pdú
));

33 
__asm__
 vﬁ©ûe("movq %0, %%¸3" ::"r"(
pdú
)

35 
	}
}

	@kernel/include/multiboot.h

23 #i‚de‡
MULTIBOOT_HEADER


24 
	#MULTIBOOT_HEADER
 1

	)

27 
	#MULTIBOOT_SEARCH
 32768

	)

28 
	#MULTIBOOT_HEADER_ALIGN
 8

	)

31 
	#MULTIBOOT2_HEADER_MAGIC
 0xe85250d6

	)

34 
	#MULTIBOOT2_BOOTLOADER_MAGIC
 0x36d76289

	)

37 
	#MULTIBOOT_MOD_ALIGN
 0x00001000

	)

40 
	#MULTIBOOT_INFO_ALIGN
 0x00000008

	)

44 
	#MULTIBOOT_TAG_ALIGN
 8

	)

45 
	#MULTIBOOT_TAG_TYPE_END
 0

	)

46 
	#MULTIBOOT_TAG_TYPE_CMDLINE
 1

	)

47 
	#MULTIBOOT_TAG_TYPE_BOOT_LOADER_NAME
 2

	)

48 
	#MULTIBOOT_TAG_TYPE_MODULE
 3

	)

49 
	#MULTIBOOT_TAG_TYPE_BASIC_MEMINFO
 4

	)

50 
	#MULTIBOOT_TAG_TYPE_BOOTDEV
 5

	)

51 
	#MULTIBOOT_TAG_TYPE_MMAP
 6

	)

52 
	#MULTIBOOT_TAG_TYPE_VBE
 7

	)

53 
	#MULTIBOOT_TAG_TYPE_FRAMEBUFFER
 8

	)

54 
	#MULTIBOOT_TAG_TYPE_ELF_SECTIONS
 9

	)

55 
	#MULTIBOOT_TAG_TYPE_APM
 10

	)

56 
	#MULTIBOOT_TAG_TYPE_EFI32
 11

	)

57 
	#MULTIBOOT_TAG_TYPE_EFI64
 12

	)

58 
	#MULTIBOOT_TAG_TYPE_SMBIOS
 13

	)

59 
	#MULTIBOOT_TAG_TYPE_ACPI_OLD
 14

	)

60 
	#MULTIBOOT_TAG_TYPE_ACPI_NEW
 15

	)

61 
	#MULTIBOOT_TAG_TYPE_NETWORK
 16

	)

62 
	#MULTIBOOT_TAG_TYPE_EFI_MMAP
 17

	)

63 
	#MULTIBOOT_TAG_TYPE_EFI_BS
 18

	)

64 
	#MULTIBOOT_TAG_TYPE_EFI32_IH
 19

	)

65 
	#MULTIBOOT_TAG_TYPE_EFI64_IH
 20

	)

66 
	#MULTIBOOT_TAG_TYPE_LOAD_BASE_ADDR
 21

	)

68 
	#MULTIBOOT_HEADER_TAG_END
 0

	)

69 
	#MULTIBOOT_HEADER_TAG_INFORMATION_REQUEST
 1

	)

70 
	#MULTIBOOT_HEADER_TAG_ADDRESS
 2

	)

71 
	#MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS
 3

	)

72 
	#MULTIBOOT_HEADER_TAG_CONSOLE_FLAGS
 4

	)

73 
	#MULTIBOOT_HEADER_TAG_FRAMEBUFFER
 5

	)

74 
	#MULTIBOOT_HEADER_TAG_MODULE_ALIGN
 6

	)

75 
	#MULTIBOOT_HEADER_TAG_EFI_BS
 7

	)

76 
	#MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI32
 8

	)

77 
	#MULTIBOOT_HEADER_TAG_ENTRY_ADDRESS_EFI64
 9

	)

78 
	#MULTIBOOT_HEADER_TAG_RELOCATABLE
 10

	)

80 
	#MULTIBOOT_ARCHITECTURE_I386
 0

	)

81 
	#MULTIBOOT_ARCHITECTURE_MIPS32
 4

	)

82 
	#MULTIBOOT_HEADER_TAG_OPTIONAL
 1

	)

84 
	#MULTIBOOT_LOAD_PREFERENCE_NONE
 0

	)

85 
	#MULTIBOOT_LOAD_PREFERENCE_LOW
 1

	)

86 
	#MULTIBOOT_LOAD_PREFERENCE_HIGH
 2

	)

88 
	#MULTIBOOT_CONSOLE_FLAGS_CONSOLE_REQUIRED
 1

	)

89 
	#MULTIBOOT_CONSOLE_FLAGS_EGA_TEXT_SUPPORTED
 2

	)

91 #i‚de‡
ASM_FILE


93 
	tmu…iboŸ_uöt8_t
;

94 
	tmu…iboŸ_uöt16_t
;

95 
	tmu…iboŸ_uöt32_t
;

96 
	tmu…iboŸ_uöt64_t
;

98 
	smu…iboŸ_hódî


101 
mu…iboŸ_uöt32_t
 
	mmagic
;

104 
mu…iboŸ_uöt32_t
 
	m¨chôe˘uª
;

107 
mu…iboŸ_uöt32_t
 
	mhódî_Àngth
;

110 
mu…iboŸ_uöt32_t
 
	mchecksum
;

113 
	smu…iboŸ_hódî_èg


115 
mu…iboŸ_uöt16_t
 
	mty≥
;

116 
mu…iboŸ_uöt16_t
 
	mÊags
;

117 
mu…iboŸ_uöt32_t
 
	msize
;

120 
	smu…iboŸ_hódî_èg_öf‹m©i⁄_ªque°


122 
mu…iboŸ_uöt16_t
 
	mty≥
;

123 
mu…iboŸ_uöt16_t
 
	mÊags
;

124 
mu…iboŸ_uöt32_t
 
	msize
;

125 
mu…iboŸ_uöt32_t
 
	mªque°s
[0];

128 
	smu…iboŸ_hódî_èg_addªss


130 
mu…iboŸ_uöt16_t
 
	mty≥
;

131 
mu…iboŸ_uöt16_t
 
	mÊags
;

132 
mu…iboŸ_uöt32_t
 
	msize
;

133 
mu…iboŸ_uöt32_t
 
	mhódî_addr
;

134 
mu…iboŸ_uöt32_t
 
	mlﬂd_addr
;

135 
mu…iboŸ_uöt32_t
 
	mlﬂd_íd_addr
;

136 
mu…iboŸ_uöt32_t
 
	mbss_íd_addr
;

139 
	smu…iboŸ_hódî_èg_íåy_addªss


141 
mu…iboŸ_uöt16_t
 
	mty≥
;

142 
mu…iboŸ_uöt16_t
 
	mÊags
;

143 
mu…iboŸ_uöt32_t
 
	msize
;

144 
mu…iboŸ_uöt32_t
 
	míåy_addr
;

147 
	smu…iboŸ_hódî_èg_c⁄sﬁe_Êags


149 
mu…iboŸ_uöt16_t
 
	mty≥
;

150 
mu…iboŸ_uöt16_t
 
	mÊags
;

151 
mu…iboŸ_uöt32_t
 
	msize
;

152 
mu…iboŸ_uöt32_t
 
	mc⁄sﬁe_Êags
;

155 
	smu…iboŸ_hódî_èg_‰amebuf„r


157 
mu…iboŸ_uöt16_t
 
	mty≥
;

158 
mu…iboŸ_uöt16_t
 
	mÊags
;

159 
mu…iboŸ_uöt32_t
 
	msize
;

160 
mu…iboŸ_uöt32_t
 
	mwidth
;

161 
mu…iboŸ_uöt32_t
 
	mheight
;

162 
mu…iboŸ_uöt32_t
 
	mdïth
;

165 
	smu…iboŸ_hódî_èg_moduÀ_Æign


167 
mu…iboŸ_uöt16_t
 
	mty≥
;

168 
mu…iboŸ_uöt16_t
 
	mÊags
;

169 
mu…iboŸ_uöt32_t
 
	msize
;

172 
	smu…iboŸ_hódî_èg_ªloˇèbÀ


174 
mu…iboŸ_uöt16_t
 
	mty≥
;

175 
mu…iboŸ_uöt16_t
 
	mÊags
;

176 
mu…iboŸ_uöt32_t
 
	msize
;

177 
mu…iboŸ_uöt32_t
 
	mmö_addr
;

178 
mu…iboŸ_uöt32_t
 
	mmax_addr
;

179 
mu…iboŸ_uöt32_t
 
	mÆign
;

180 
mu…iboŸ_uöt32_t
 
	m¥e„ªn˚
;

183 
	smu…iboŸ_cﬁ‹


185 
mu…iboŸ_uöt8_t
 
	mªd
;

186 
mu…iboŸ_uöt8_t
 
	mgªí
;

187 
mu…iboŸ_uöt8_t
 
	mblue
;

190 
	smu…iboŸ_mm≠_íåy


192 
mu…iboŸ_uöt64_t
 
	maddr
;

193 
mu…iboŸ_uöt64_t
 
	mÀn
;

194 
	#MULTIBOOT_MEMORY_AVAILABLE
 1

	)

195 
	#MULTIBOOT_MEMORY_RESERVED
 2

	)

196 
	#MULTIBOOT_MEMORY_ACPI_RECLAIMABLE
 3

	)

197 
	#MULTIBOOT_MEMORY_NVS
 4

	)

198 
	#MULTIBOOT_MEMORY_BADRAM
 5

	)

199 
mu…iboŸ_uöt32_t
 
	mty≥
;

200 
mu…iboŸ_uöt32_t
 
	mzîo
;

202 
mu…iboŸ_mm≠_íåy
 
	tmu…iboŸ_mem‹y_m≠_t
;

204 
	smu…iboŸ_èg


206 
mu…iboŸ_uöt32_t
 
	mty≥
;

207 
mu…iboŸ_uöt32_t
 
	msize
;

210 
	smu…iboŸ_èg_°rög


212 
mu…iboŸ_uöt32_t
 
	mty≥
;

213 
mu…iboŸ_uöt32_t
 
	msize
;

214 
	m°rög
[0];

217 
	smu…iboŸ_èg_moduÀ


219 
mu…iboŸ_uöt32_t
 
	mty≥
;

220 
mu…iboŸ_uöt32_t
 
	msize
;

221 
mu…iboŸ_uöt32_t
 
	mmod_°¨t
;

222 
mu…iboŸ_uöt32_t
 
	mmod_íd
;

223 
	mcmdlöe
[0];

226 
	smu…iboŸ_èg_basic_memöfo


228 
mu…iboŸ_uöt32_t
 
	mty≥
;

229 
mu…iboŸ_uöt32_t
 
	msize
;

230 
mu…iboŸ_uöt32_t
 
	mmem_lowî
;

231 
mu…iboŸ_uöt32_t
 
	mmem_uµî
;

234 
	smu…iboŸ_èg_boŸdev


236 
mu…iboŸ_uöt32_t
 
	mty≥
;

237 
mu…iboŸ_uöt32_t
 
	msize
;

238 
mu…iboŸ_uöt32_t
 
	mbiosdev
;

239 
mu…iboŸ_uöt32_t
 
	m¶i˚
;

240 
mu…iboŸ_uöt32_t
 
	m∑π
;

243 
	smu…iboŸ_èg_mm≠


245 
mu…iboŸ_uöt32_t
 
	mty≥
;

246 
mu…iboŸ_uöt32_t
 
	msize
;

247 
mu…iboŸ_uöt32_t
 
	míåy_size
;

248 
mu…iboŸ_uöt32_t
 
	míåy_vîsi⁄
;

249 
mu…iboŸ_mm≠_íåy
 
	míåõs
[0];

252 
	smu…iboŸ_vbe_öfo_block


254 
mu…iboŸ_uöt8_t
 
	mexã∫Æ_•ecifiˇti⁄
[512];

257 
	smu…iboŸ_vbe_mode_öfo_block


259 
mu…iboŸ_uöt8_t
 
	mexã∫Æ_•ecifiˇti⁄
[256];

262 
	smu…iboŸ_èg_vbe


264 
mu…iboŸ_uöt32_t
 
	mty≥
;

265 
mu…iboŸ_uöt32_t
 
	msize
;

267 
mu…iboŸ_uöt16_t
 
	mvbe_mode
;

268 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_£g
;

269 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_off
;

270 
mu…iboŸ_uöt16_t
 
	mvbe_öãrÁ˚_Àn
;

272 
mu…iboŸ_vbe_öfo_block
 
	mvbe_c⁄åﬁ_öfo
;

273 
mu…iboŸ_vbe_mode_öfo_block
 
	mvbe_mode_öfo
;

276 
	smu…iboŸ_èg_‰amebuf„r_comm⁄


278 
mu…iboŸ_uöt32_t
 
	mty≥
;

279 
mu…iboŸ_uöt32_t
 
	msize
;

281 
mu…iboŸ_uöt64_t
 
	m‰amebuf„r_addr
;

282 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_pôch
;

283 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_width
;

284 
mu…iboŸ_uöt32_t
 
	m‰amebuf„r_height
;

285 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_bµ
;

286 
	#MULTIBOOT_FRAMEBUFFER_TYPE_INDEXED
 0

	)

287 
	#MULTIBOOT_FRAMEBUFFER_TYPE_RGB
 1

	)

288 
	#MULTIBOOT_FRAMEBUFFER_TYPE_EGA_TEXT
 2

	)

289 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ty≥
;

290 
mu…iboŸ_uöt16_t
 
	mª£rved
;

293 
	smu…iboŸ_èg_‰amebuf„r


295 
mu…iboŸ_èg_‰amebuf„r_comm⁄
 
	mcomm⁄
;

300 
mu…iboŸ_uöt16_t
 
	m‰amebuf„r_∑Àâe_num_cﬁ‹s
;

301 
mu…iboŸ_cﬁ‹
 
	m‰amebuf„r_∑Àâe
[0];

305 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ªd_fõld_posôi⁄
;

306 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_ªd_mask_size
;

307 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_gªí_fõld_posôi⁄
;

308 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_gªí_mask_size
;

309 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_blue_fõld_posôi⁄
;

310 
mu…iboŸ_uöt8_t
 
	m‰amebuf„r_blue_mask_size
;

315 
	smu…iboŸ_èg_ñf_£˘i⁄s


317 
mu…iboŸ_uöt32_t
 
	mty≥
;

318 
mu…iboŸ_uöt32_t
 
	msize
;

319 
mu…iboŸ_uöt32_t
 
	mnum
;

320 
mu…iboŸ_uöt32_t
 
	mítsize
;

321 
mu…iboŸ_uöt32_t
 
	mshndx
;

322 
	m£˘i⁄s
[0];

325 
	smu…iboŸ_èg_≠m


327 
mu…iboŸ_uöt32_t
 
	mty≥
;

328 
mu…iboŸ_uöt32_t
 
	msize
;

329 
mu…iboŸ_uöt16_t
 
	mvîsi⁄
;

330 
mu…iboŸ_uöt16_t
 
	mc£g
;

331 
mu…iboŸ_uöt32_t
 
	moff£t
;

332 
mu…iboŸ_uöt16_t
 
	mc£g_16
;

333 
mu…iboŸ_uöt16_t
 
	md£g
;

334 
mu…iboŸ_uöt16_t
 
	mÊags
;

335 
mu…iboŸ_uöt16_t
 
	mc£g_Àn
;

336 
mu…iboŸ_uöt16_t
 
	mc£g_16_Àn
;

337 
mu…iboŸ_uöt16_t
 
	md£g_Àn
;

340 
	smu…iboŸ_èg_efi32


342 
mu…iboŸ_uöt32_t
 
	mty≥
;

343 
mu…iboŸ_uöt32_t
 
	msize
;

344 
mu…iboŸ_uöt32_t
 
	mpoöãr
;

347 
	smu…iboŸ_èg_efi64


349 
mu…iboŸ_uöt32_t
 
	mty≥
;

350 
mu…iboŸ_uöt32_t
 
	msize
;

351 
mu…iboŸ_uöt64_t
 
	mpoöãr
;

354 
	smu…iboŸ_èg_smbios


356 
mu…iboŸ_uöt32_t
 
	mty≥
;

357 
mu…iboŸ_uöt32_t
 
	msize
;

358 
mu…iboŸ_uöt8_t
 
	mmaj‹
;

359 
mu…iboŸ_uöt8_t
 
	mmö‹
;

360 
mu…iboŸ_uöt8_t
 
	mª£rved
[6];

361 
mu…iboŸ_uöt8_t
 
	mèbÀs
[0];

364 
	smu…iboŸ_èg_ﬁd_a˝i


366 
mu…iboŸ_uöt32_t
 
	mty≥
;

367 
mu…iboŸ_uöt32_t
 
	msize
;

368 
mu…iboŸ_uöt8_t
 
	mrsdp
[0];

371 
	smu…iboŸ_èg_√w_a˝i


373 
mu…iboŸ_uöt32_t
 
	mty≥
;

374 
mu…iboŸ_uöt32_t
 
	msize
;

375 
mu…iboŸ_uöt8_t
 
	mrsdp
[0];

378 
	smu…iboŸ_èg_√tw‹k


380 
mu…iboŸ_uöt32_t
 
	mty≥
;

381 
mu…iboŸ_uöt32_t
 
	msize
;

382 
mu…iboŸ_uöt8_t
 
	mdh˝ack
[0];

385 
	smu…iboŸ_èg_efi_mm≠


387 
mu…iboŸ_uöt32_t
 
	mty≥
;

388 
mu…iboŸ_uöt32_t
 
	msize
;

389 
mu…iboŸ_uöt32_t
 
	mdes¸_size
;

390 
mu…iboŸ_uöt32_t
 
	mdes¸_vîs
;

391 
mu…iboŸ_uöt8_t
 
	mefi_mm≠
[0];

394 
	smu…iboŸ_èg_efi32_ih


396 
mu…iboŸ_uöt32_t
 
	mty≥
;

397 
mu…iboŸ_uöt32_t
 
	msize
;

398 
mu…iboŸ_uöt32_t
 
	mpoöãr
;

401 
	smu…iboŸ_èg_efi64_ih


403 
mu…iboŸ_uöt32_t
 
	mty≥
;

404 
mu…iboŸ_uöt32_t
 
	msize
;

405 
mu…iboŸ_uöt64_t
 
	mpoöãr
;

408 
	smu…iboŸ_èg_lﬂd_ba£_addr


410 
mu…iboŸ_uöt32_t
 
	mty≥
;

411 
mu…iboŸ_uöt32_t
 
	msize
;

412 
mu…iboŸ_uöt32_t
 
	mlﬂd_ba£_addr
;

	@kernel/include/proc/context.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	~"mm/∑gëabÀ.h
"

11 *(*
	tc⁄ãxt_func_t
)(, *);

13 
	sc⁄ãxt


15 
uöçå_t
 
	mc_rù
;

16 
uöçå_t
 
	mc_r•
;

17 
uöçå_t
 
	mc_rbp
;

19 
pml4_t


20 *
	mc_pml4
;

24 
uöçå_t
 
	mc_k°ack
;

25 
size_t
 
	mc_k°acksz
;

26 } 
	tc⁄ãxt_t
;

42 
c⁄ãxt_£tup
(
c⁄ãxt_t
 *
c
, 
c⁄ãxt_func_t
 
func
, 
¨g1
, *
¨g2
,

43 *
k°ack
, 
size_t
 
k°acksz
, 
pml4_t
 *
pml4
);

45 
c⁄ãxt_£tup_øw
(
c⁄ãxt_t
 *
c
, (*
func
)(), *
k°ack
,

46 
size_t
 
k°acksz
, 
pml4_t
 *
pml4
);

53 
c⁄ãxt_make_a˘ive
(
c⁄ãxt_t
 *
c
);

62 
c⁄ãxt_swôch
(
c⁄ãxt_t
 *
ﬁdc
, c⁄ãxt_à*
√wc
);

	@kernel/include/proc/core.h

1 #¥agm®
⁄˚


3 
	~"¥oc/c⁄ãxt.h
"

4 
	~"¥oc/sched.h
"

5 
	~"¥oc/•ölock.h
"

7 
	sc‹e


9 
	mkc_id
;

10 
c⁄ãxt_t
 
	mkc_˘x
;

12 
ktqueue_t
 *
	mkc_queue
;

14 
uöçå_t
 
	mkc_csd∑ddr
;

15 } 
	tc‹e_t
;

	@kernel/include/proc/kmutex.h

1 #¥agm®
⁄˚


3 
	~"¥oc/sched.h
"

4 
	~"¥oc/•ölock.h
"

10 
	skmuãx


12 
ktqueue_t
 
	mkm_waôq
;

13 
kthªad
 *
	mkm_hﬁdî
;

14 
li°_lök_t
 
	mkm_lök
;

15 } 
	tkmuãx_t
;

17 
	#KMUTEX_INITIALIZER
(
mtx
) \

19 .
km_waôq
 = 
	`KTQUEUE_INITIALIZER
((
mtx
).km_waôq), .
km_hﬁdî
 = 
NULL
, \

20 .
km_lök
 = 
	`LIST_LINK_INITIALIZER
((
mtx
).km_link), \

21 }

	)

32 
kmuãx_öô
(
kmuãx_t
 *
mtx
);

43 
kmuãx_lock
(
kmuãx_t
 *
mtx
);

50 
kmuãx_u∆ock
(
kmuãx_t
 *
mtx
);

55 
kmuãx_has_waôîs
(
kmuãx_t
 *
mtx
);

60 
kmuãx_owns_muãx
(
kmuãx_t
 *
mtx
);

	@kernel/include/proc/kthread.h

1 #¥agm®
⁄˚


3 
	~<¥oc/c⁄ãxt.h
>

4 
	~<¥oc/sched.h
>

5 
	~<¥oc/•ölock.h
>

6 
	~<utû/li°.h
>

15 
c⁄ãxt_func_t
 
	tkthªad_func_t
;

22 
	mKT_NO_STATE
,

23 
	mKT_ON_CPU
,

24 
	mKT_RUNNABLE
,

25 
	mKT_SLEEP
,

26 
	mKT_SLEEP_CANCELLABLE
,

27 
	mKT_EXITED


28 } 
	tkthªad_°©e_t
;

33 
	skthªad


35 
c⁄ãxt_t
 
	mkt_˘x
;

36 *
	mkt_k°ack
;

37 *
	mkt_ªtvÆ
;

38 
	mkt_î∫o
;

39 
¥oc
 *
	mkt_¥oc
;

41 
	mkt_ˇn˚Œed
;

42 
ktqueue_t
 *
	mkt_wch™
;

43 
kthªad_°©e_t
 
	mkt_°©e
;

45 
li°_lök_t
 
	mkt_∂ök
;

46 
li°_lök_t


47 
	mkt_qlök
;

49 
li°_t
 
	mkt_muãxes
;

52 
uöt64_t
 
	mkt_¥ìm±i⁄_cou¡
;

53 } 
	tkthªad_t
;

62 
kthªad_öô
();

75 
kthªad_t
 *
kthªad_¸óã
(
¥oc
 *¥oc, 
kthªad_func_t
 
func
, 
¨g1
,

76 *
¨g2
);

84 
kthªad_t
 *
kthªad_˛⁄e
(kthªad_à*
thr
);

91 
kthªad_de°roy
(
kthªad_t
 *
thr
);

99 
kthªad_ˇn˚l
(
kthªad_t
 *
kthr
, *
ªtvÆ
);

106 
kthªad_exô
(*
ªtvÆ
);

	@kernel/include/proc/proc.h

1 #¥agm®
⁄˚


3 
	~"c⁄fig.h
"

4 
	~"mm/∑gëabÀ.h
"

5 
	~"¥oc/kthªad.h
"

6 
	~"ty≥s.h
"

7 
	~"vm/vmm≠.h
"

16 
	#PROC_MAX_COUNT
 65536

	)

17 
	#PROC_NAME_LEN
 256

	)

22 
	mPROC_RUNNING
,

23 
	mPROC_DEAD


24 } 
	t¥oc_°©e_t
;

27 
	s¥oc


29 
pid_t
 
	mp_pid
;

30 
	mp_«me
[
PROC_NAME_LEN
];

32 
li°_t
 
	mp_thªads
;

33 
li°_t
 
	mp_chûdªn
;

34 
¥oc
 *
	mp_µroc
;

36 
li°_lök_t
 
	mp_li°_lök
;

37 
li°_lök_t
 
	mp_chûd_lök
;

39 
	mp_°©us
;

40 
¥oc_°©e_t
 
	mp_°©e
;

42 
pml4_t
 *
	mp_pml4
;

49 
ktqueue_t
 
	mp_waô
;

52 
fûe
 *
	mp_fûes
[
NFILES
];

53 
vnode
 *
	mp_cwd
;

69 *
	mp_brk
;

70 *
	mp_°¨t_brk
;

71 
vmm≠
 *
	mp_vmm≠
;

73 } 
	t¥oc_t
;

82 
¥oc_öô
();

87 
¥oc_idÀ¥oc_öô
();

92 
öô¥oc_föish
();

100 
¥oc_t
 *
¥oc_¸óã
(c⁄° *
«me
);

107 
¥oc_de°roy
(
¥oc_t
 *
¥oc
);

114 
¥oc_thªad_exôög
(*
ªtvÆ
);

123 
¥oc_kûl
(
¥oc_t
 *
¥oc
, 
°©us
);

129 
¥oc_kûl_Æl
();

140 
do_exô
(
°©us
);

153 
pid_t
 
do_waôpid
’id_à
pid
, *
°©us
, 
›ti⁄s
);

160 
	gªgs
;

161 
do_f‹k
(
ªgs
 *regs);

170 
	#PID_IDLE
 0

	)

171 
	#PID_INIT
 1

	)

176 
¥oc_t
 
idÀ¥oc
;

190 
size_t
 
¥oc_öfo
(c⁄° *
¨g
, *
buf
, size_à
osize
);

200 
size_t
 
¥oc_li°_öfo
(c⁄° *
¨g
, *
buf
, size_à
osize
);

	@kernel/include/proc/sched.h

1 #¥agm®
⁄˚


3 
	~"¥oc/•ölock.h
"

4 
	~"utû/li°.h
"

15 
	sktqueue


17 
li°_t
 
	mtq_li°
;

18 
size_t
 
	mtq_size
;

19 } 
	tktqueue_t
;

25 
	#KTQUEUE_INITIALIZER
(
ktqueue
) \

27 .
tq_li°
 = 
	`LIST_INITIALIZER
((
ktqueue
).tq_list), \

28 }

	)

33 
	gkthªad
;

44 
sched_swôch
(
ktqueue_t
 *
queue
);

49 
c‹e_swôch
();

54 
sched_yõld
();

61 
sched_make_ru¬abÀ
(
kthªad
 *
thr
);

70 
sched_¶ìp_⁄
(
ktqueue_t
 *
q
);

80 
sched_ˇn˚ŒabÀ_¶ìp_⁄
(
ktqueue_t
 *
queue
);

89 
sched_wakeup_⁄
(
ktqueue_t
 *
q
, 
kthªad
 **
thΩ
);

96 
sched_brﬂdˇ°_⁄
(
ktqueue_t
 *
q
);

103 
sched_ˇn˚l
(
kthªad
 *
thr
);

110 
sched_queue_öô
(
ktqueue_t
 *
queue
);

118 
sched_queue_em±y
(
ktqueue_t
 *
queue
);

123 
¥ìm±i⁄_dißbÀ
();

124 
¥ìm±i⁄_íabÀ
();

125 
¥ìm±i⁄_ª£t
();

126 
¥ìm±i⁄_íabÀd
();

	@kernel/include/proc/spinlock.h

1 #¥agm®
⁄˚


3 
	s•ölock


5 vﬁ©ûê
	ms_locked
;

6 } 
	t•ölock_t
;

8 
	#SPINLOCK_INITIALIZER
(
lock
) \

10 .
s_locked
 = 0 \

11 }

	)

17 
•ölock_öô
(
•ölock_t
 *
lock
);

28 
•ölock_lock
(
•ölock_t
 *
lock
);

35 
•ölock_u∆ock
(
•ölock_t
 *
lock
);

37 
•ölock_own¶ock
(
•ölock_t
 *
lock
);

	@kernel/include/stdarg.h

1 #¥agm®
⁄˚


3 
__buûtö_va_li°
 
	tva_li°
;

5 
	#va_°¨t
(
v
, 
l
Ë
	`__buûtö_va_°¨t
(v,Ü)

	)

6 
	#va_íd
(
v
Ë
	`__buûtö_va_íd
(v)

	)

7 
	#va_¨g
(
v
, 
l
Ë
	`__buûtö_va_¨g
(v,Ü)

	)

	@kernel/include/test/driverstest.h

1 #¥agm®
⁄˚


3 
drivî°e°_maö
(, *);

	@kernel/include/test/kshell/io.h

1 #¥agm®
⁄˚


3 
	~"ã°/kshñl/kshñl.h
"

28 
kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
);

38 
kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
);

52 
kshñl_wrôe_Æl
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
);

61 
k¥ötf
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, ...);

	@kernel/include/test/kshell/kshell.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
kshñl
 
	tkshñl_t
;

7 (*
	tkshñl_cmd_func_t
)(
	tkshñl_t
 *, 
	tsize_t
 
	t¨gc
, **
	t¨gv
);

12 *
	`kshñl_¥oc_run
(
ây
, *
¨g2
);

27 
	`kshñl_add_comm™d
(c⁄° *
«me
, 
kshñl_cmd_func_t
 
comm™d
,

28 c⁄° *
desc
);

36 
kshñl_t
 *
	`kshñl_¸óã
(
uöt8_t
 
âyid
);

43 
	`kshñl_de°roy
(
kshñl_t
 *
ksh
);

52 
	`kshñl_execuã_√xt
(
kshñl_t
 *
ksh
);

	@kernel/include/test/proctest.h

1 #¥agm®
⁄˚


3 
¥o˘e°_maö
(, *);

	@kernel/include/test/s5fstest.h

1 #¥agm®
⁄˚


3 
s5f°e°_maö
(, *);

	@kernel/include/test/usertest.h

1 #¥agm®
⁄˚


3 #i‚de‡
__KERNEL__


5 
	~"sys/ty≥s.h
"

6 
	~"uni°d.h
"

9 
	~"ty≥s.h
"

12 
	~<°d¨g.h
>

14 
	#ã°_as£π
(
ex¥
, 
fmt
, 
¨gs
...) \

15 
	`_ã°_as£π
(
ex¥
, 
__FILE__
, 
__LINE__
, #ex¥, 
fmt
, ##
¨gs
)

	)

17 #i‚de‡
__KERNEL__


18 
	#ã°_f‹k_begö
() \

21 
pid_t
 
__ã°_pid
 = 
	`f‹k
(); \

22 i‡(0 =
__ã°_pid
) \

24 do

	)

26 
	#ã°_f‹k_íd
(
°©us
) \

29 
	`exô
(0); \

31 
	`waôpid
(
__ã°_pid
, 
°©us
, 0); \

34 ;

	)

37 
ã°_öô
();

39 
ã°_föi
();

41 c⁄° *
ã°_îr°r
(
îr
);

43 (*
	tã°_∑ss_func_t
)(
	tvÆ
, c⁄° *
	tfûe
, 
	tlöe
,

44 c⁄° *
	t«me
, c⁄° *
	tfmt
,

45 
	tva_li°
 
	t¨gs
);

47 (*
	tã°_Áû_func_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	t«me
,

48 c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

50 
	`_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

51 c⁄° *
fmt
, ...);

	@kernel/include/test/vfstest/vfstest.h

1 #¥agm®
⁄˚


6 
	#Ârötf
(
fd
, 
fmt
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, fmt, ##¨gs)

	)

7 
	#¥ötf
(
fmt
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, fmt, ##¨gs)

	)

10 
	#î∫o
 (
cuπhr
->
kt_î∫o
)

	)

13 
	#mÆloc
 
kmÆloc


	)

14 
	#‰ì
 
k‰ì


	)

17 
	#ksysˇŒ
(
«me
, 
f‹mÆ
, 
a˘uÆ
) \

18 
ksys_
##
«me
 
f‹mÆ
 \

20 
ªt
 = 
do_
##
«me
 
a˘uÆ
; \

21 i‡(
ªt
 < 0) \

23 
î∫o
 = -
ªt
; \

26  
ªt
; \

27 }

	)

29 
ksysˇŒ
(
˛o£
, (
fd
), (fd))

31 
ksysˇŒ
(
ªad
, (
fd
, *
buf
, 
size_t
 
nbyãs
), (fd, buf,Çbytes))

33 
ksysˇŒ
(
wrôe
, (
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
),

34 (
fd
, 
buf
, 
nbyãs
))

36 
ksysˇŒ
(
dup
, (
fd
), (fd))

38 
ksysˇŒ
(
dup2
, (
ofd
, 
nfd
), (ofd,Çfd))

40 
ksysˇŒ
(
mkdú
, (c⁄° *
∑th
), (path))

42 
ksysˇŒ
(
rmdú
, (c⁄° *
∑th
), (path))

44 
ksysˇŒ
(
lök
, (c⁄° *
ﬁd
, c⁄° *
√w
),

45 (
ﬁd
, 
√w
))

47 
ksysˇŒ
(
u∆ök
, (c⁄° *
∑th
), (path))

49 
ksysˇŒ
(
ª«me
,

50 (c⁄° *
ﬁd∑th
,

51 c⁄° *
√w∑th
),

52 (
ﬁd∑th
, 
√w∑th
))

54 
ksysˇŒ
(
chdú
, (c⁄° *
∑th
),

55 (
∑th
))

57 
ksysˇŒ
(
l£ek
,

58 (
fd
, 
off£t
,

59 
whí˚
),

60 (
fd
, 
off£t
, 
whí˚
))

62 
ksysˇŒ
(
gëdít
,

63 (
fd
,

64 
dúít
 *
dúp
),

65 (
fd
, 
dúp
))

67 
ksysˇŒ
(
°©
,

68 (c⁄° *
∑th
,

69 
°©
 *
uf
),

70 (
∑th
, 
uf
))

72 
ksysˇŒ
(
›í
,

74 *
fûíame
,

75 
Êags
),

76 (
fûíame
,

77 
Êags
))

78 
	#ksys_exô
 
do_exô


	)

80 
	$ksys_gëdíts
(

81 
fd
,

82 
dúít


83 *
dúp
,

85 
cou¡
)

87 
size_t
 
numbyã§ód
 = 0;

88 
nbr
 = 0;

89 
dúít_t
 
ãmpdúít
;

91 i‡(
cou¡
 < (
dúít_t
))

93 
cuπhr
->
kt_î∫o
 = 
EINVAL
;

97 
numbyã§ód
 < 
cou¡
)

99 i‡((
nbr
 = 
	`do_gëdít
(
fd
, &
ãmpdúít
)) < 0)

101 
cuπhr
->
kt_î∫o
 = -
nbr
;

104 i‡(
nbr
 == 0)

106  
numbyã§ód
;

108 
	`mem˝y
(
dúp
, &
ãmpdúít
, (
dúít_t
));

110 
	`KASSERT
(
nbr
 =(
dúít_t
));

112 
dúp
++;

113 
numbyã§ód
 +
nbr
;

115  
numbyã§ód
;

116 
	}
}

121 
	#mkdú
(
a
, 
b
Ë
	`ksys_mkdú
◊)

	)

122 
	#rmdú
 
ksys_rmdú


	)

123 
	#mou¡
 
ksys_mou¡


	)

124 
	#umou¡
 
ksys_umou¡


	)

125 
	#›í
(
a
, 
b
, 
c
Ë
	`ksys_›í
◊, b)

	)

126 
	#˛o£
 
ksys_˛o£


	)

127 
	#lök
 
ksys_lök


	)

128 
	#ª«me
 
ksys_ª«me


	)

129 
	#u∆ök
 
ksys_u∆ök


	)

130 
	#ªad
 
ksys_ªad


	)

131 
	#wrôe
 
ksys_wrôe


	)

132 
	#l£ek
 
ksys_l£ek


	)

133 
	#dup
 
ksys_dup


	)

134 
	#dup2
 
ksys_dup2


	)

135 
	#chdú
 
ksys_chdú


	)

136 
	#°©
(
a
, 
b
Ë
	`ksys_°©
◊, b)

	)

137 
	#gëdíts
(
a
, 
b
, 
c
Ë
	`ksys_gëdíts
◊, b, c)

	)

138 
	#exô
(
a
Ë
	`ksys_exô
◊)

	)

142 
	#RAND_MAX
 
INT_MAX


	)

143 
	#RANDOM
(
lo
, 
hi
) \

144 ((
lo
) + \

145 (((
hi
Ë- (
lo
Ë+ 1Ë* (
ønd£ed
 = (randseed * 4096 + 150889) % 714025)) / \

146 714025)

	)

148 
	gønd£ed
 = 123456L;

150 
	$ønd
()

152 
ønd£ed
 = (ønd£ed * 4096 + 150889Ë% 
RAND_MAX
;

153  
ønd£ed
;

154 
	}
}

156 
	$§™d
(
£ed
Ë{ 
ønd£ed
 = sìd; 
	}
}

	@kernel/include/types.h

1 #¥agm®
⁄˚


5 
	#NULL
 0

	)

7 
	#∑cked
 
	`__©åibuã__
((
∑cked
))

	)

9 sig√d 
	töt8_t
;

10 
	tuöt8_t
;

11 sig√d 
	töt16_t
;

12 
	tuöt16_t
;

13 sig√d 
	töt32_t
;

14 
	tuöt32_t
;

16 sig√d 
	töt64_t
;

17 
	tuöt64_t
;

18 sig√d 
	töçå_t
;

19 
	tuöçå_t
;

20 
uöt64_t
 
	tsize_t
;

21 
öt64_t
 
	tssize_t
;

22 
öt64_t
 
	toff_t
;

24 
öt32_t
 
	tpid_t
;

25 
uöt16_t
 
	tmode_t
;

26 
uöt32_t
 
	tblocknum_t
;

27 
uöt32_t
 
	töo_t
;

28 
uöt32_t
 
	tdevid_t
;

30 
uöt64_t
 
	ttime_t
;

31 
uöt64_t
 
	tu£c⁄ds_t
;

	@kernel/include/util/atomic.h

1 #i‚de‡
ATOMIC_H


2 
	#ATOMIC_H


	)

4 
	t©omic_t
;

6 
	#ATOMIC_INIT
(
i
Ë(i)

	)

8 
ölöe
 
	$__©omic_add_u∆ess
(
©omic_t
 *
a
, 
v
, 
u
)

10 
c
, 
ﬁd
;

11 
c
 = 
	`__sync_„tch_™d_add
(
a
, 0);

12 
c
 !
u
 && (
ﬁd
 = 
	`__sync_vÆ_com∑ª_™d_sw≠
(
a
, c, c + 
v
)) != c)

13 
c
 = 
ﬁd
;

14  
c
;

15 
	}
}

17 
ölöe
 
	$©omic_£t
(
©omic_t
 *
a
, 
i
Ë{ *®i; 
	}
}

19 
ölöe
 
	$©omic_öc
(
©omic_t
 *
a
Ë{ 
	`__sync_add_™d_„tch
◊, 1); 
	}
}

21 
ölöe
 
	$©omic_dec_™d_ã°
(
©omic_t
 *
a
)

23  
	`__sync_sub_™d_„tch
(
a
, 1) == 0;

24 
	}
}

26 
ölöe
 
	$©omic_öc_nŸ_zîo
(
©omic_t
 *
a
)

28  
	`__©omic_add_u∆ess
(
a
, 1, 0);

29 
	}
}

	@kernel/include/util/bits.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

6 
	#BIT
(
n
Ë(1 << (n))

	)

8 
ölöe
 
	$bô_Êù
(*
addr
, 
uöçå_t
 
bô
)

10 
uöt32_t
 *
m≠
 = (uöt32_à*)
addr
;

11 
m≠
 +(
bô
 >> 5);

12 *
m≠
 ^(
uöt32_t
)(1 << (
bô
 & 0x1f));

13 
	}
}

15 
ölöe
 
	$bô_check
(c⁄° *
addr
, 
uöçå_t
 
bô
)

17 c⁄° 
uöt32_t
 *
m≠
 = (c⁄° uöt32_à*)
addr
;

18 
m≠
 +(
bô
 >> 5);

19  (*
m≠
 & (1 << (
bô
 & 0x1f)));

20 
	}
}

22 
	#MOD_POW_2
(
x
, 
y
Ë((xË& ((y)-1))

	)

24 
	#IS_POW_2
(
x
Ë(!
	`MOD_POW_2
(x, x))

	)

26 
	#SELECT
(
c⁄dôi⁄
, 
åuevÆ
, 
Ál£vÆ
) \

27 (!!(
c⁄dôi⁄
Ë* (
åuevÆ
Ë+ !c⁄dôi⁄ * (
Ál£vÆ
))

	)

	@kernel/include/util/btree.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

21 
	#BRANCHING_FACTOR
 2

	)

22 
	#MAX_KEYS
 (2*
BRANCHING_FACTOR
Ë- 1

	)

23 
	#MAX_CHILDREN
 2*
BRANCHING_FACTOR


	)

38 
	sbåì_node


40 
	mn_keys
;

41 
	mn_chûdªn
;

42 
	mis_Àaf
;

43 
uöt64_t
 
	mkeys
[
MAX_KEYS
];

44 *
	md©a
[
MAX_KEYS
];

45 
båì_node
 *
	mchûdªn
[
MAX_CHILDREN
];

46 } 
	tbåì_node_t
;

49 
båì_öô
();

51 
båì_node_t
 *
båì_node_¸óã
();

53 
båì_ö£π
(
båì_node_t
 **
roŸ
, 
uöt64_t
 
key
, *
d©a
);

55 *
båì_£¨ch
(
båì_node_t
 *
roŸ
, 
uöt64_t
 
key
);

57 
båì_dñëe
(
båì_node_t
 **
roŸ
, 
uöt64_t
 
key
);

59 
båì_node_‰ì
(
båì_node_t
 **
node
);

61 
båì_de°roy
(
båì_node_t
 *
roŸ
);

63 
¥öt_båì
(
båì_node_t
 *
x
);

	@kernel/include/util/debug.h

1 #¥agm®
⁄˚


3 
	~"globÆs.h
"

4 
	~"maö/öãºu±.h
"

5 
	~"mm/∑ge.h
"

6 
	~"¥oc/•ölock.h
"

7 
	~"ty≥s.h
"

8 
	~<maö/≠ic.h
>

29 
	#_NORMAL_
 "\x1b[0m"

	)

30 
	#_BLACK_
 "\x1b[30;47m"

	)

31 
	#_RED_
 "\x1b[31;40m"

	)

32 
	#_GREEN_
 "\x1b[32;40m"

	)

33 
	#_YELLOW_
 "\x1b[33;40m"

	)

34 
	#_BLUE_
 "\x1b[34;40m"

	)

35 
	#_MAGENTA_
 "\x1b[35;40m"

	)

36 
	#_CYAN_
 "\x1b[36;40m"

	)

37 
	#_WHITE_
 "\x1b[37;40m"

	)

39 
	#_BRED_
 "\x1b[1;31;40m"

	)

40 
	#_BGREEN_
 "\x1b[1;32;40m"

	)

41 
	#_BYELLOW_
 "\x1b[1;33;40m"

	)

42 
	#_BBLUE_
 "\x1b[1;34;40m"

	)

43 
	#_BMAGENTA_
 "\x1b[1;35;40m"

	)

44 
	#_BCYAN_
 "\x1b[1;36;40m"

	)

45 
	#_BWHITE_
 "\x1b[1;37;40m"

	)

47 
	#DBG_MODE
(
x
Ë(1ULL << (x))

	)

52 
	#DBG_ALL
 (~0ULLË

	)

53 
	#DBG_CORE
 
	`DBG_MODE
(0Ë

	)

54 
	#DBG_MM
 
	`DBG_MODE
(1Ë

	)

55 
	#DBG_INIT
 
	`DBG_MODE
(2Ë

	)

56 
	#DBG_SCHED
 
	`DBG_MODE
(3Ë

	)

57 
	#DBG_DISK
 
	`DBG_MODE
(4Ë

	)

58 
	#DBG_TEMP
 
	`DBG_MODE
(5Ë

	)

59 
	#DBG_KMALLOC
 
	`DBG_MODE
(6Ë

	)

60 
	#DBG_PAGEALLOC
 
	`DBG_MODE
(7Ë

	)

61 
	#DBG_INTR
 
	`DBG_MODE
(8Ë

	)

62 
	#DBG_TERM
 
	`DBG_MODE
(9Ë

	)

63 
	#DBG_FORK
 
	`DBG_MODE
(10Ë

	)

64 
	#DBG_PROC
 
	`DBG_MODE
(11Ë

	)

65 
	#DBG_VNREF
 
	`DBG_MODE
(12Ë

	)

66 
	#DBG_PFRAME
 
	`DBG_MODE
(13Ë

	)

67 
	#DBG_ERROR
 
	`DBG_MODE
(14Ë

	)

68 
	#DBG_SYSCALL
 
	`DBG_MODE
(15Ë

	)

69 
	#DBG_FREF
 
	`DBG_MODE
(16Ë

	)

70 
	#DBG_PGTBL
 
	`DBG_MODE
(17Ë

	)

71 
	#DBG_BRK
 
	`DBG_MODE
(18Ë

	)

72 
	#DBG_EXEC
 
	`DBG_MODE
(19Ë

	)

73 
	#DBG_VFS
 
	`DBG_MODE
(20Ë

	)

74 
	#DBG_S5FS
 
	`DBG_MODE
(21Ë

	)

75 
	#DBG_KB
 
	`DBG_MODE
(22Ë

	)

76 
	#DBG_THR
 
	`DBG_MODE
(23Ë

	)

77 
	#DBG_PRINT
 
	`DBG_MODE
(24Ë

	)

78 
	#DBG_OSYSCALL
 
	`DBG_MODE
(25Ë

	)

79 
	#DBG_VM
 
	`DBG_MODE
(28Ë

	)

80 
	#DBG_TEST
 
	`DBG_MODE
(30Ë

	)

81 
	#DBG_TESTPASS
 
	`DBG_MODE
(31Ë

	)

82 
	#DBG_TESTFAIL
 
	`DBG_MODE
(32Ë

	)

84 
	#DBG_MEMDEV
 
	`DBG_MODE
(33Ë

	)

85 
	#DBG_ANON
 
	`DBG_MODE
(34Ë

	)

86 
	#DBG_VMMAP
 
	`DBG_MODE
(35Ë

	)

87 
	#DBG_ELF
 
	`DBG_MODE
(37Ë

	)

88 
	#DBG_USER
 
	`DBG_MODE
(38Ë

	)

89 
	#DBG_BTREE
 
	`DBG_MODE
(39Ë

	)

90 
	#DBG_DEFAULT
 
DBG_ERROR


	)

100 
	#DBG_TAB
 \

102 {"îr‹", 
DBG_ERROR
, 
_BWHITE_
}, {"ãmp", 
DBG_TEMP
, 
_NORMAL_
}, \

103 {"¥öt", 
DBG_PRINT
, 
_NORMAL_
}, {"ã°", 
DBG_TEST
, 
_RED_
}, \

104 {"ã°∑ss", 
DBG_TESTPASS
, 
_GREEN_
}, \

105 {"ã°Áû", 
DBG_TESTFAIL
, 
_RED_
}, \

106 {"¥oc", 
DBG_PROC
, 
_BLUE_
}, {"thr", 
DBG_THR
, 
_CYAN_
}, \

107 {"sched", 
DBG_SCHED
, 
_GREEN_
}, \

108 {"öô", 
DBG_INIT
, 
_NORMAL_
}, \

109 {"ãrm", 
DBG_TERM
, 
_BMAGENTA_
}, {"disk", 
DBG_DISK
, 
_YELLOW_
}, \

110 {"memdev", 
DBG_MEMDEV
, 
_BBLUE_
}, \

111 {"vfs", 
DBG_VFS
, 
_WHITE_
}, {"‰ef", 
DBG_FREF
, 
_MAGENTA_
}, \

112 {"vƒef", 
DBG_VNREF
, 
_CYAN_
}, \

113 {"s5fs", 
DBG_S5FS
, 
_BRED_
}, \

114 {"p‰ame", 
DBG_PFRAME
, 
_BMAGENTA_
}, \

115 {"™⁄", 
DBG_ANON
, 
_WHITE_
}, {"vmm≠", 
DBG_VMMAP
, 
_BGREEN_
}, \

116 {"f‹k", 
DBG_FORK
, 
_BYELLOW_
}, {"brk", 
DBG_BRK
, 
_YELLOW_
}, \

117 {"exec", 
DBG_EXEC
, 
_BRED_
}, {"ñf", 
DBG_ELF
, 
_BGREEN_
}, \

118 {"pgtbl", 
DBG_PGTBL
, 
_BBLUE_
}, {"osysˇŒ", 
DBG_OSYSCALL
, 
_BMAGENTA_
}, \

119 {"vm", 
DBG_VM
, 
_RED_
}, \

120 {"båì", 
DBG_BTREE
, 
_NORMAL_
}, \

121 {"sysˇŒ", 
DBG_SYSCALL
, 
_RED_
}, \

122 {"öå", 
DBG_INTR
, 
_BRED_
}, {"kmÆloc", 
DBG_KMALLOC
, 
_MAGENTA_
}, \

123 {"∑góŒoc", 
DBG_PAGEALLOC
, 
_WHITE_
}, {"kb", 
DBG_KB
, 
_BLUE_
}, \

124 {"c‹e", 
DBG_CORE
, 
_GREEN_
}, {"mm", 
DBG_MM
, 
_RED_
}, \

125 {"u£r", 
DBG_USER
, 
_BYELLOW_
}, \

135 {"Æl", 
DBG_ALL
, 
_NORMAL_
}, \

137 
NULL
, 0, NULL \

138 }

	)

140 
uöt64_t
 
dbg_modes
;

149 
	$size_t
 (*
	tdbg_öfofunc_t
)(c⁄° *
	td©a
, *
	tbuf
, 
	tsize_t
 
	tsize
);

151 
	#DBG_BUFFER_SIZE
 (
PAGE_SIZE
)

	)

153 
	`dbg_öô
();

155 
	$dbg_¥öt
(*
fmt
, ...Ë
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 1, 2)));

157 
	`dbg_¥ötöfo
(
dbg_öfofunc_t
 
func
, c⁄° *
d©a
);

159 c⁄° *
	`dbg_cﬁ‹
(
uöt64_t
 
d_mode
);

161 #i‡
	`deföed
(
__SMP__
Ë|| deföed(
__KPREEMPT__
)

162 
	#DEBUG_ENTER
 \

163 
uöt8_t
 
__ùl
 = 
	`≠ic_öôülized
(Ë? 
	`öå_£tùl
(
IPL_HIGH
Ë: 
IPL_LOW
; \

164 
	#DEBUG_EXIT
 \

165 i‡(
	`≠ic_öôülized
()) \

166 
	`öå_£tùl
(
__ùl
);

	)

168 
	#DEBUG_ENTER
 \

171 
	}
} 0);

	)

172 
	#DEBUG_EXIT
 \

175 } 0);

	)

178 #i‚de‡
NDEBUG


179 
	#dbg
(
mode
, ...) \

182 i‡(
	`dbg_a˘ive
(
mode
)) \

184 
DEBUG_ENTER
 \

185 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

186 
	`dbg_¥öt
("C%ld P%ld ", 
curc‹e
.
kc_id
, \

187 
cuΩroc
 ? cuΩroc->
p_pid
 : -1L); \

188 
	`dbg_¥öt
("%s:%d %s(): ", 
__FILE__
, 
__LINE__
, 
__func__
); \

189 
	`dbg_¥öt
(
__VA_ARGS__
); \

190 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

191 
DEBUG_EXIT
 \

193 } 0)

	)

195 
	#dbg_f‹˚
(
mode
, ...) \

198 
DEBUG_ENTER
 \

199 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

200 
	`dbg_¥öt
("C%ld P%ld ", 
curc‹e
.
kc_id
, \

201 
cuΩroc
 ? cuΩroc->
p_pid
 : -1L); \

202 
	`dbg_¥öt
("%s:%d %s(): ", 
__FILE__
, 
__LINE__
, 
__func__
); \

203 
	`dbg_¥öt
(
__VA_ARGS__
); \

204 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

205 
DEBUG_EXIT
 \

206 } 0)

	)

208 
	#dbgq
(
mode
, ...) \

211 i‡(
	`dbg_a˘ive
(
mode
)) \

213 
DEBUG_ENTER
 \

214 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

215 
	`dbg_¥öt
("C%ld P%ld ", 
curc‹e
.
kc_id
, \

216 
cuΩroc
 ? cuΩroc->
p_pid
 : -1L); \

217 
	`dbg_¥öt
(
__VA_ARGS__
); \

218 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

219 
DEBUG_EXIT
 \

221 } 0)

	)

223 
	#dbgöfo
(
mode
, 
func
, 
d©a
) \

226 i‡(
	`dbg_a˘ive
(
mode
)) \

228 
DEBUG_ENTER
 \

229 
	`dbg_¥öt
("%s", 
	`dbg_cﬁ‹
(
mode
)); \

230 
	`dbg_¥öt
("C%ld P%ld ", 
curc‹e
.
kc_id
, \

231 
cuΩroc
 ? cuΩroc->
p_pid
 : -1L); \

232 
	`dbg_¥ötöfo
(
func
, 
d©a
); \

233 
	`dbg_¥öt
("%s", 
_NORMAL_
); \

234 
DEBUG_EXIT
 \

236 } 0)

	)

238 
	#dbg_a˘ive
(
mode
Ë(
dbg_modes
 & (mode))

	)

240 
dbg_add_mode
(c⁄° *
mode
);

242 
dbg_add_modes
(c⁄° *
modes
);

245 
	#dbg
(
mode
, ...)

	)

246 
	#dbgq
(
mode
, ...)

	)

247 
	#dbgöfo
(
mode
, 
func
, 
d©a
)

	)

248 
	#dbg_a˘ive
(
mode
Ë0

	)

249 
	#dbg_add_mode
(
mode
)

	)

250 
	#dbg_add_modes
(
modes
)

	)

253 
n‹ëu∫
 
	$dbg_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
func
,

254 c⁄° *
fmt
, ...)

255 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 4, 5)));

257 
	#∑nic
(...Ë
	`dbg_∑nic
(
__FILE__
, 
__LINE__
, 
__func__
, 
__VA_ARGS__
)

	)

259 #i‚de‡
NDEBUG


260 
	#KASSERT
(
x
) \

263 i‡(!(
x
)) \

264 
	`∑nic
("assertion failed: %s", #x); \

265 
	}
} 0)

	)

267 
	#KASSERT_GENERIC
(
À·
, 
right
, 
com∑øt‹
, 
comp_°r
) \

270 
__À·
 = ()(
À·
); \

271 
__right
 = ()(
right
); \

272 i‡(!
	`com∑øt‹
(
__À·
, 
__right
)) \

274 
	`∑nic
("assertion failed: %s %s %s. Left: %d, Right: %d\n", #left, \

275 
comp_°r
, #right, 
__À·
, 
__right
); \

277 } 0)

	)

279 
	$equÆs
(
l
, 
r
)

281  
l
 =
r
;

282 
	}
}

284 
	$nŸequÆs
(
l
, 
r
Ë{ Ü !r; 
	}
}

286 
	$Às°h™
(
l
, 
r
Ë{ Ü <Ñ; 
	}
}

288 
	$gª©îth™
(
l
, 
r
Ë{ Ü >Ñ; 
	}
}

290 
	$Às°h™eq
(
l
, 
r
Ë{ Ü <r; 
	}
}

292 
	$gª©îth™eq
(
l
, 
r
Ë{ Ü >r; 
	}
}

294 
	#KASSERTEQ
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
equÆs
, "==")

	)

295 
	#KASSERTNEQ
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
nŸequÆs
, "!=")

	)

296 
	#KASSERT_GREATER
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
gª©îth™
, ">")

	)

297 
	#KASSERT_LESS
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
Às°h™
, "<")

	)

298 
	#KASSERT_GREQ
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
gª©îth™eq
, ">=")

	)

299 
	#KASSERT_LESSEQ
(
l
, 
r
Ë
	`KASSERT_GENERIC
÷,Ñ, 
Às°h™eq
, "<=")

	)

301 
	#KASSERT
(
x
)

	)

302 
	#KASSERTEQ
(
l
, 
r
)

	)

303 
	#KASSERT_GREATER
(
l
, 
r
)

	)

304 
	#KASSERT_LESS
(
l
, 
r
)

	)

305 
	#KASSERT_GREQ
(
l
, 
r
)

	)

306 
	#KASSERT_LESSEQ
(
l
, 
r
)

	)

	@kernel/include/util/delay.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

4 
	~"utû/debug.h
"

7 
	#LOOPS_PER_JIFFY
 (1 << 12)

	)

8 
	#HZ
 100

	)

24 
	$__dñay
(
lo›s
)

26 
__asm__
 volatile(

40 : "a"(
lo›s
));

41 
	}
}

43 
ölöe
 
	$__c⁄°_udñay
(
xlo›s
)

45 
d0
;

47 
xlo›s
 *= 4;

48 
__asm__
 volatile("mull %%edx"

49 : "=d"(
xlo›s
), "=&a"(
d0
)

50 : "1"(
xlo›s
), "0"(
LOOPS_PER_JIFFY
 * (
HZ
 / 4)));

52 
	`__dñay
(++
xlo›s
);

53 
	}
}

55 
ölöe
 
	$__udñay
(
u£cs
)

57 
	`__c⁄°_udñay
(
u£cs
 * 4295);

58 
	}
}

60 
ölöe
 
	$__ndñay
(
n£cs
)

62 
	`__c⁄°_udñay
(
n£cs
 * 5);

63 
	}
}

65 
	#udñay
(
n
) \

66 (
	`__buûtö_c⁄°™t_p
(
n
Ë? (“Ë> 20000 ? 
	`∑nic
("DelayÅooÜarge!") \

67 : 
	`__c⁄°_udñay
((
n
)*4295)) \

68 : 
	`__udñay
(
n
))

	)

70 
	#ndñay
(
n
) \

71 (
	`__buûtö_c⁄°™t_p
(
n
) \

72 ? ((
n
Ë> 20000 ? 
	`∑nic
("DñayÅoÿœrge!"Ë: 
	`__c⁄°_udñay
((n)*5)) \

73 : 
	`__ndñay
(
n
))

	)

	@kernel/include/util/gdb.h

1 #¥agm®
⁄˚


3 
	#GDB_DEFINE_HOOK
(
«me
, ...) \

4 
__py_hook_
##
	`«me
(
__VA_ARGS__
Ë{}

	)

5 
	#GDB_CALL_HOOK
(
«me
, ...Ë
__py_hook_
##
	`«me
(
__VA_ARGS__
)

	)

	@kernel/include/util/init.h

1 #¥agm®
⁄˚


3 
	#öô_func
(
func
) \

4 
	`__asm__
( \

10 ".p›£˘i⁄\n\t");

	)

11 
	#öô_dïíds
(
«me
) \

12 
	`__asm__
( \

17 ".p›£˘i⁄\n\t");

	)

19 (*
	göô_func_t
)();

21 
öô_ˇŒ_Æl
();

	@kernel/include/util/list.h

1 #¥agm®
⁄˚


3 
	~"kî√l.h
"

81 
	#LIST_INITIALIZER
(
li°
) \

83 .
l_√xt
 = &(
li°
), .
l_¥ev
 = &(list) \

84 }

	)

89 
	#LIST_LINK_INITIALIZER
(
li°_lök
) \

91 .
l_√xt
 = 
NULL
, .
l_¥ev
 = NULL \

92 }

	)

94 
	sli°


96 
li°
 *
	ml_√xt
;

97 
li°
 *
	ml_¥ev
;

98 } 
	tli°_t
, 
	tli°_lök_t
;

103 
li°_lök_öô
(
li°_lök_t
 *
lök
);

108 
li°_öô
(
li°_t
 *
li°
);

116 
li°_lök_is_löked
(c⁄° 
li°_lök_t
 *
lök
);

124 
li°_em±y
(c⁄° 
li°_t
 *
li°
);

132 
li°_as£π_ßnôy
(c⁄° 
li°_t
 *
li°
);

140 
li°_ö£π_bef‹e
(
li°_lök_t
 *
lök
,Üi°_lök_à*
to_ö£π
);

148 
li°_ö£π_hód
(
li°_t
 *
li°
, 
li°_lök_t
 *
lök
);

156 
li°_ö£π_èû
(
li°_t
 *
li°
, 
li°_lök_t
 *
lök
);

163 
li°_ªmove
(
li°_lök_t
 *
lök
);

176 
	#li°_ôem
(
lök
, 
ty≥
, 
membî
) \

177 (
ty≥
 *)((*)(
lök
)-
	`off£tof
—y≥, 
membî
))

	)

183 
	#li°_hód
(
li°
, 
ty≥
, 
membî
Ë
	`li°_ôem
(÷i°)->
l_√xt
,Åy≥, membî)

	)

189 
	#li°_èû
(
li°
, 
ty≥
, 
membî
Ë
	`li°_ôem
(÷i°)->
l_¥ev
,Åy≥, membî)

	)

197 
	#li°_√xt
(
cuºít
, 
ty≥
, 
membî
) \

198 
	`li°_hód
(&(
cuºít
)->
membî
, 
ty≥
, membî)

	)

203 
	#li°_¥ev
(
cuºít
, 
ty≥
, 
membî
) \

204 
	`li°_èû
(&(
cuºít
)->
membî
, 
ty≥
, membî)

	)

210 
	#li°_ôî©e
(
li°
, 
v¨
, 
ty≥
, 
membî
) \

211 
ty≥
 *
v¨
 = 
	`li°_hód
(
li°
,Åy≥, 
membî
), \

212 *
__√xt_
##
v¨
 = 
	`li°_√xt
(v¨, 
ty≥
, 
membî
); \

213 &
v¨
->
membî
 !(
li°
); \

214 
v¨
 = 
__√xt_
##v¨, __√xt_##v¨ = 
	`li°_√xt
(v¨, 
ty≥
, 
membî
))

	)

220 
	#li°_ôî©e_ªvî£
(
li°
, 
v¨
, 
ty≥
, 
membî
) \

221 
ty≥
 *
v¨
 = 
	`li°_èû
(
li°
,Åy≥, 
membî
), \

222 *
__√xt_
##
v¨
 = 
	`li°_¥ev
(v¨, 
ty≥
, 
membî
); \

223 &
v¨
->
membî
 !(
li°
); \

224 
v¨
 = 
__√xt_
##v¨, __√xt_##v¨ = 
	`li°_¥ev
(v¨, 
ty≥
, 
membî
))

	)

	@kernel/include/util/printf.h

56 #¥agm®
⁄˚


58 
	~"°d¨g.h
"

59 
	~<ty≥s.h
>

62 
v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

64 
vs˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

66 
¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

68 
s˙¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...);

82 
	$ùrötf
(**
°r
, 
size_t
 *
size
, *
fmt
, ...)

83 
	`__©åibuã__
((
	`f‹m©
(
¥ötf
, 3, 4)));

85 
	`vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

87 
	`ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...);

	@kernel/include/util/string.h

56 #¥agm®
⁄˚


58 
	~"°d¨g.h
"

59 
	~"ty≥s.h
"

62 
memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

64 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

66 
°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

68 
°rcmp
(c⁄° *
cs
, c⁄° *
˘
);

70 *
°r˝y
(*
de°
, c⁄° *
§c
);

72 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

74 *
mem£t
(*
s
, 
c
, 
size_t
 
cou¡
);

76 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
cou¡
);

78 
size_t
 
°æí
(c⁄° *
s
);

80 *
°rchr
(c⁄° *
s
, 
c
);

82 *
°ºchr
(c⁄° *
s
, 
c
);

84 *
°r°r
(c⁄° *
s1
, c⁄° *
s2
);

86 *
°rˇt
(*
de°
, c⁄° *
§c
);

88 *
°rdup
(c⁄° *
s
);

90 *
°πok
(*
s
, c⁄° *
d
);

93 *
°ªº‹
(
î∫um
);

	@kernel/include/util/time.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

4 
	~"utû/debug.h
"

6 
uöt64_t
 
timî_tickcou¡
;

7 
uöt64_t
 
kî√l_¥ìm±ed_cou¡
;

8 
uöt64_t
 
u£r_¥ìm±ed_cou¡
;

9 
uöt64_t
 
nŸ_¥ìm±ed_cou¡
;

10 
uöt64_t
 
idÀ_cou¡
;

11 vﬁ©ûê
uöt64_t
 
jiffõs
;

13 
time_öô
();

15 
time_•ö
(
time_t
 
ms
);

17 
time_¶ìp
(
time_t
 
ms
);

19 
do_u¶ìp
(
u£c⁄ds_t
 
u£c
);

21 
time_t
 
do_time
();

23 
size_t
 
time_°©s
(*
buf
, size_à
Àn
);

	@kernel/include/util/timer.h

1 #i‚de‡
TIMER_H


2 
	#TIMER_H


	)

4 
	~"utû/li°.h
"

6 
	stimî


8 (*
	mfun˘i⁄
)(
uöt64_t
 
	md©a
);

9 
uöt64_t
 
	md©a
;

10 
uöt64_t
 
	mexpúes
;

11 
li°_lök_t
 
	mlök
;

12 } 
	ttimî_t
;

14 
timî_öô
(
timî_t
 *
timî
);

16 
timî_add
(
timî_t
 *
timî
);

18 
timî_dñ
(
timî_t
 *
timî
);

20 
timî_mod
(
timî_t
 *
timî
, 
expúes
);

22 
timî_≥ndög
(
timî_t
 *
timî
);

24 
timî_dñ_sync
(
timî_t
 *
timî
);

26 
__timîs_fúe
();

	@kernel/include/vm/anon.h

1 #¥agm®
⁄˚


3 
	gmobj
;

5 
™⁄_öô
();

7 
mobj
 *
™⁄_¸óã
();

9 
™⁄_cou¡
;

	@kernel/include/vm/brk.h

1 #¥agm®
⁄˚


3 
do_brk
(*
addr
, **
ªt
);

	@kernel/include/vm/mmap.h

1 
	~"ty≥s.h
"

3 
	g¥oc
;

5 
do_munm≠
(*
addr
, 
size_t
 
Àn
);

7 
do_mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
,

8 **
ªt
);

	@kernel/include/vm/pagefault.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	#FAULT_PRESENT
 0x01

	)

6 
	#FAULT_WRITE
 0x02

	)

7 
	#FAULT_USER
 0x04

	)

8 
	#FAULT_RESERVED
 0x08

	)

9 
	#FAULT_EXEC
 0x10

	)

11 
h™dÀ_∑geÁu…
(
uöçå_t
 
vaddr
, uöçå_à
ˇu£
);

	@kernel/include/vm/shadow.h

1 #¥agm®
⁄˚


3 
	~"mm/mobj.h
"

5 
shadow_öô
();

7 
mobj_t
 *
shadow_¸óã
(mobj_à*
shadowed
);

9 
shadow_cﬁœp£
(
mobj_t
 *
o
);

11 
shadow_cou¡
;

	@kernel/include/vm/vmmap.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	~"utû/li°.h
"

7 
	#VMMAP_DIR_LOHI
 1

	)

8 
	#VMMAP_DIR_HILO
 2

	)

10 
	gmobj
;

11 
	g¥oc
;

12 
	gvnode
;

14 
	svmm≠


16 
li°_t
 
	mvmm_li°
;

17 
¥oc
 *
	mvmm_¥oc
;

18 } 
	tvmm≠_t
;

22 
	svm¨ó


24 
size_t
 
	mvma_°¨t
;

25 
size_t
 
	mvma_íd
;

26 
size_t
 
	mvma_off
;

32 
	mvma_¥Ÿ
;

33 
	mvma_Êags
;

36 
vmm≠
 *
	mvma_vmm≠
;

37 
mobj
 *
	mvma_obj
;

38 
li°_lök_t
 
	mvma_∂ök
;

39 } 
	tvm¨ó_t
;

41 
vmm≠_öô
();

43 
vmm≠_t
 *
vmm≠_¸óã
();

45 
vmm≠_de°roy
(
vmm≠_t
 **
m≠p
);

47 
vmm≠_cﬁœp£
(
vmm≠_t
 *
m≠
);

49 
vm¨ó_t
 *
vmm≠_lookup
(
vmm≠_t
 *
m≠
, 
size_t
 
v‚
);

51 
vmm≠_m≠
(
vmm≠_t
 *
m≠
, 
vnode
 *
fûe
, 
size_t
 
l›age
, size_à
≈ages
,

52 
¥Ÿ
, 
Êags
, 
off_t
 
off
, 
dú
, 
vm¨ó_t
 **
√w_vma
);

54 
vmm≠_ªmove
(
vmm≠_t
 *
m≠
, 
size_t
 
l›age
, size_à
≈ages
);

56 
vmm≠_is_ønge_em±y
(
vmm≠_t
 *
m≠
, 
size_t
 
°¨tv‚
, size_à
≈ages
);

58 
ssize_t
 
vmm≠_föd_ønge
(
vmm≠_t
 *
m≠
, 
size_t
 
≈ages
, 
dú
);

60 
vmm≠_ªad
(
vmm≠_t
 *
m≠
, c⁄° *
vaddr
, *
buf
, 
size_t
 
cou¡
);

62 
vmm≠_wrôe
(
vmm≠_t
 *
m≠
, *
vaddr
, c⁄° *
buf
, 
size_t
 
cou¡
);

64 
vmm≠_t
 *
vmm≠_˛⁄e
(vmm≠_à*
m≠
);

66 
size_t
 
vmm≠_m≠pög_öfo_hñ≥r
(c⁄° *
m≠
, *
buf
, size_à
size
,

67 *
¥om±
);

69 
size_t
 
vmm≠_m≠pög_öfo
(c⁄° *
m≠
, *
buf
, size_à
size
);

71 
vmm≠_ö£π
(
vmm≠_t
 *
m≠
, 
vm¨ó_t
 *
√w_vma
);

	@kernel/main/acpi.c

1 
	~"maö/a˝i.h
"

3 
	~"boŸ/c⁄fig.h
"

4 
	~"mm/∑ge.h
"

5 
	~"ty≥s.h
"

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

9 
	#XSDT_SIGNATURE
 (*(
uöt32_t
 *)"XSDT")

	)

10 
	#RSDT_SIGNATURE
 (*(
uöt32_t
 *)"RSDT")

	)

11 
	#FACP_SIGNATURE
 (*(
uöt32_t
 *)"FACP")

	)

12 
	#DSDT_SIGNATURE
 (*(
uöt32_t
 *)"DSDT")

	)

14 
	#RSDP_ALIGN
 16

	)

16 
	#EBDA_MIN_PADDR
 0x80000

	)

17 
	#EBDA_MAX_PADDR
 0xa0000

	)

18 
	#EBDA_PTR_LOC_PADDR
 0x040e

	)

20 
	#EBDA_MIN
 (
PHYS_OFFSET
 + 
EBDA_MIN_PADDR
)

	)

21 
	#EBDA_MAX
 (
PHYS_OFFSET
 + 
EBDA_MAX_PADDR
)

	)

22 
	#EBDA_PTR_LOC
 (
PHYS_OFFSET
 + 
EBDA_PTR_LOC_PADDR
)

	)

24 c⁄° 
uöt8_t
 
	grsdp_sig
[8] = {'R', 'S', 'D', ' ', 'P', 'T', 'R', ' '};

26 
	srsdp


28 
uöt8_t
 
	mΩ_sign
[8];

29 
uöt8_t
 
	mΩ_checksum
;

30 
uöt8_t
 
	mΩ_€mid
[6];

31 
uöt8_t
 
	mΩ_ªv
;

32 
uöt32_t
 
	mΩ_addr
;

33 } 
	t∑cked
 
	trsdp_t
;

35 
	srsdp_20


37 
rsdp_t
 
	mrsdp
;

38 
uöt32_t
 
	mÀngth
;

39 
uöt64_t
 
	mxsdt_addr
;

40 
uöt8_t
 
	mext_checksum
;

41 
uöt8_t
 
	mª£rved
[3];

42 } 
	t∑cked
 
	trsdp_20_t
;

44 
	srsd_èbÀ


46 
a˝i_hódî_t
 
	mπ_hódî
;

47 
uöt64_t
 
	mπ_Ÿhî
[];

48 } 
	t∑cked
 
	trsd_èbÀ_t
;

50 
uöt8_t
 
	$__a˝i_checksum
(c⁄° 
uöt8_t
 *
buf
, 
size
)

52 
uöt8_t
 
sum
 = 0;

53 
i
 = 0; i < 
size
; i++)

54 
sum
 +
buf
[
i
];

55  
sum
;

56 
	}
}

58 
rsdp_20_t
 *
	$__rsdp_£¨ch_ønge
(
uöçå_t
 
°¨t
, uöçå_à
íd
)

60 
uöçå_t
 
rsdp_ˇndid©e
 = 
°¨t
;

61 
rsdp_ˇndid©e
 <
íd
 - (
rsdp
))

63 i‡(
	`memcmp
((*)
rsdp_ˇndid©e
, 
rsdp_sig
, (rsdp_sig)) == 0 &&

64 
	`__a˝i_checksum
((
uöt8_t
 *)
rsdp_ˇndid©e
, (
rsdp_20_t
)) ==

67  (
rsdp_20_t
 *)
rsdp_ˇndid©e
;

69 
rsdp_ˇndid©e
 +
RSDP_ALIGN
;

71  
NULL
;

72 
	}
}

74 *
	$__rsdp_£¨ch
()

77 
uöçå_t
 
ebda
 =

78 ((
uöçå_t
Ë* (
uöt16_t
 *)
EBDA_PTR_LOC
 << 4Ë+ 
PHYS_OFFSET
;

79 
rsdp_20_t
 *
rsdp
 = 0;

80 i‡(
ebda
 >
EBDA_MIN
 &&Ébd®<
EBDA_MAX
 &&Ébd®% 
RSDP_ALIGN
 == 0)

83 
rsdp
 = 
	`__rsdp_£¨ch_ønge
(
ebda
, 
EBDA_MAX
);

85 i‡(!
rsdp
)

88 
rsdp
 =

89 
	`__rsdp_£¨ch_ønge
(
PHYS_OFFSET
 + 0xe0000, PHYS_OFFSET + 0x100000);

91  
rsdp
;

92 
	}
}

94 
rsdp_20_t
 *
	grsd_±r
 = 
NULL
;

95 
rsd_èbÀ_t
 *
	grsd_èbÀ
 = 
NULL
;

97 
rsd_èbÀ_t
 *
	$_a˝i_lﬂd_èbÀ
(
uöçå_t
 
∑ddr
)

99 
	`∑ge_m¨k_ª£rved
(
	`PAGE_ALIGN_DOWN
(
∑ddr
));

100  (
rsd_èbÀ_t
 *)(
PHYS_OFFSET
 + 
∑ddr
);

101 
	}
}

103 
	$a˝i_öô
()

105 i‡(
rsd_±r
 =
NULL
)

107 
rsd_±r
 = 
	`__rsdp_£¨ch
();

108 
	`KASSERT
(
rsd_±r
 && "CouldÇot findÅhe ACPI Root Descriptor Table.");

110 
rsd_èbÀ
 = 
	`_a˝i_lﬂd_èbÀ
(
rsd_±r
->
xsdt_addr
);

111 
	`KASSERT
(
XSDT_SIGNATURE
 =
rsd_èbÀ
->
π_hódî
.
ah_sign
);

112 i‡(
	`__a˝i_checksum
((*)
rsd_èbÀ
,Ñsd_èbÀ->
π_hódî
.
ah_size
))

114 
	`∑nic
("Weenix only supports ACPI 2.0 or higher");

117 
	`dbgq
(
DBG_CORE
, "--- ACPI INIT ---\n");

118 
	`dbgq
(
DBG_CORE
, "rsd∞addr: %p\n", 
rsd_±r
);

119 
	`dbgq
(
DBG_CORE
, "rsdàaddr: %p\n", 
rsd_èbÀ
);

120 
	`dbgq
(
DBG_CORE
, "ªv: %i\n", ()
rsd_±r
->
rsdp
.
Ω_ªv
);

122 
rsd_±r
->
rsdp
.
Ω_€mid
[5] = 0;

123 
	`dbgq
(
DBG_CORE
, "€m: %s\n", (*)
rsd_±r
->
rsdp
.
Ω_€mid
);

126 
	`dbgq
(
DBG_CORE
, "ents:\t");

127 
size_t
 
hódîs
 =

128 (
rsd_èbÀ
->
π_hódî
.
ah_size
 - (rsd_table->rt_header)) /

129 (
rsd_èbÀ
->
π_Ÿhî
[0]);

131 
size_t
 
i
 = 0; i < 
hódîs
; ++i)

133 
a˝i_hódî_t
 *
hódî
 =

134 &
	`_a˝i_lﬂd_èbÀ
(
rsd_èbÀ
->
π_Ÿhî
[
i
])->
π_hódî
;

135 
rsd_èbÀ
->
π_Ÿhî
[
i
] = (
uöçå_t
)
hódî
;

137 
	`dbgq
(
DBG_CORE
, "%.4†", (*)&
hódî
->
ah_sign
);

138 
	`KASSERT
(0 =
	`__a˝i_checksum
((*)
hódî
, hódî->
ah_size
));

140 
	`dbgq
(
DBG_CORE
, "\n");

142 
	}
}

144 *
	$a˝i_èbÀ
(
uöt32_t
 
sig«tuª
, 
ödex
)

146 
	`KASSERT
(
ödex
 >= 0);

148 
size_t
 
hódîs
 =

149 (
rsd_èbÀ
->
π_hódî
.
ah_size
 - (rsd_table->rt_header)) /

150 (
rsd_èbÀ
->
π_Ÿhî
[0]);

152 
size_t
 
i
 = 0; i < 
hódîs
; ++i)

154 
a˝i_hódî_t
 *
hódî
 = (a˝i_hódî_à*)
rsd_èbÀ
->
π_Ÿhî
[
i
];

155 i‡(
hódî
->
ah_sign
 =
sig«tuª
 && 0 =
ödex
--)

157  
hódî
;

160  
NULL
;

161 
	}
}

	@kernel/main/apic.c

1 
	~"ty≥s.h
"

3 
	~"boŸ/c⁄fig.h
"

5 
	~"maö/a˝i.h
"

6 
	~"maö/≠ic.h
"

7 
	~"maö/˝uid.h
"

8 
	~"maö/öãºu±.h
"

9 
	~"maö/io.h
"

11 
	#APIC_SIGNATURE
 (*(
uöt32_t
 *)"APIC")

	)

13 
	#TYPE_LAPIC
 0

	)

14 
	#TYPE_IOAPIC
 1

	)

19 
	#PIC_COMPLETE_MASK
 0xff

	)

21 
	#PIC1
 0x20

	)

22 
	#PIC1_COMMAND
 
PIC1


	)

23 
	#PIC1_DATA
 (
PIC1
 + 1)

	)

24 
	#PIC1_VECTOR
 0x20

	)

26 
	#PIC2
 0xa0

	)

27 
	#PIC2_COMMAND
 
PIC2


	)

28 
	#PIC2_DATA
 (
PIC2
 + 1)

	)

29 
	#PIC2_VECTOR
 0x28

	)

31 
	#ICW1_ICW4
 0x01

	)

32 
	#ICW1_SINGLE
 0x02

	)

33 
	#ICW1_INTERVAL4
 0x04

	)

34 
	#ICW1_LEVEL
 0x08

	)

35 
	#ICW1_INIT
 0x10

	)

37 
	#ICW4_8086
 0x01

	)

38 
	#ICW4_AUTO
 0x02

	)

39 
	#ICW4_BUF_SLAVE
 0x08

	)

40 
	#ICW4_BUF_MASTER
 0x0C

	)

41 
	#ICW4_SFNM
 0x10

	)

47 
	#SELECT_REGISTER
 0x22

	)

48 
	#IMCR_REGISTER
 0x70

	)

49 
	#ENABLE_APIC
 0x23

	)

50 
	#ENABLE_APIC_PORT
 0x01

	)

53 
	#IA32_APIC_BASE_MSR
 0x1b

	)

54 
	#IA32_APIC_BASE_MSR_ENABLE
 0x800

	)

55 
	#LOCAL_APIC_SPURIOUS_REGISTER
 0xf0

	)

56 
	#LOCAL_APIC_ENABLE_INTERRUPT
 0x100

	)

58 
	#LOCAL_APIC_ID
 0x20

	)

59 
	#LOCAL_APIC_VERSION
 0x30

	)

60 
	#LOCAL_APIC_TASKPRIOR
 0x80

	)

61 
	#LOCAL_APIC_EOI
 0xb0

	)

62 
	#LOCAL_APIC_LDR
 0xd0

	)

63 
	#LOCAL_APIC_DFR
 0xe0

	)

64 
	#LOCAL_APIC_SPURIOUS
 0xf0

	)

65 
	#LOCAL_APIC_ESR
 0x280

	)

66 
	#LOCAL_APIC_ICRL
 0x300

	)

67 
	#LOCAL_APIC_ICRH
 0x310

	)

68 
	#LOCAL_APIC_LVT_TMR
 0x320

	)

69 
	#LOCAL_APIC_LVT_PERF
 0x340

	)

70 
	#LOCAL_APIC_LVT_LINT0
 0x350

	)

71 
	#LOCAL_APIC_LVT_LINT1
 0x360

	)

72 
	#LOCAL_APIC_LVT_ERR
 0x370

	)

73 
	#LOCAL_APIC_TMRINITCNT
 0x380

	)

74 
	#LOCAL_APIC_TMRCURRCNT
 0x390

	)

75 
	#LOCAL_APIC_TMRDIV
 0x3e0

	)

76 
	#LOCAL_APIC_LAST
 0x38f

	)

77 
	#LOCAL_APIC_DISABLE
 0x10000

	)

78 
	#LOCAL_APIC_SW_ENABLE
 0x100

	)

79 
	#LOCAL_APIC_CPUFOCUS
 0x200

	)

80 
	#LOCAL_APIC_NMI
 (4 << 8)

	)

81 
	#LOCAL_APIC_TMR_PERIODIC
 0x20000

	)

82 
	#LOCAL_APIC_TMR_BASEDIV
 (1 << 20)

	)

84 
	#APIC_ADDR
 (
≠ic
->
©_addr
 + 
PHYS_OFFSET
)

	)

85 
	#APIC_REG
(
x
Ë(*(
uöt32_t
 *)(
APIC_ADDR
 + (x)))

	)

86 
	#LAPICID
 
	`APIC_REG
(
LOCAL_APIC_ID
)

	)

87 
	#LAPICVER
 
	`APIC_REG
(
LOCAL_APIC_VERSION
)

	)

88 
	#LAPICTPR
 
	`APIC_REG
(
LOCAL_APIC_TASKPRIOR
)

	)

89 
	#LAPICSPUR
 
	`APIC_REG
(
LOCAL_APIC_SPURIOUS
)

	)

90 
	#LAPICEOI
 
	`APIC_REG
(
LOCAL_APIC_EOI
)

	)

91 
	#LAPICDFR
 
	`APIC_REG
(
LOCAL_APIC_DFR
)

	)

92 
	#LAPICLDR
 
	`APIC_REG
(
LOCAL_APIC_LDR
)

	)

93 
	#LAPICLVTTMR
 
	`APIC_REG
(
LOCAL_APIC_LVT_TMR
)

	)

94 
	#LAPICLVTPERF
 
	`APIC_REG
(
LOCAL_APIC_LVT_PERF
)

	)

95 
	#LAPICLVTLINT0
 
	`APIC_REG
(
LOCAL_APIC_LVT_LINT0
)

	)

96 
	#LAPICLVTLINT1
 
	`APIC_REG
(
LOCAL_APIC_LVT_LINT1
)

	)

97 
	#LAPICLVTERR
 
	`APIC_REG
(
LOCAL_APIC_LVT_ERR
)

	)

98 
	#LAPICTIC
 
	`APIC_REG
(
LOCAL_APIC_TMRINITCNT
)

	)

99 
	#LAPICTCC
 
	`APIC_REG
(
LOCAL_APIC_TMRCURRCNT
)

	)

100 
	#LAPICTMRDIV
 
	`APIC_REG
(
LOCAL_APIC_TMRDIV
)

	)

101 
	#LAPICICRH
 
	`APIC_REG
(
LOCAL_APIC_ICRH
)

	)

102 
	#LAPICICRL
 
	`APIC_REG
(
LOCAL_APIC_ICRL
)

	)

103 
	#LAPICESR
 
	`APIC_REG
(
LOCAL_APIC_ESR
)

	)

106 
	#IOAPIC_IOWIN
 0x10

	)

109 
	#IOAPIC_ID
 0x00

	)

110 
	#IOAPIC_VER
 0x01

	)

111 
	#IOAPIC_ARB
 0x02

	)

112 
	#IOAPIC_REDTBL
 0x03

	)

114 
	#IOAPIC_ADDR
 (
iﬂpic
->
©_addr
 + 
PHYS_OFFSET
)

	)

115 
	#IOAPIC
 (*(
uöt32_t
 *)
IOAPIC_ADDR
)

	)

116 
	#IOAPICWIN
 (*(
uöt32_t
 *)(
IOAPIC_ADDR
 + 
IOAPIC_IOWIN
))

	)

119 
	#BIT_SET
(
d©a
, 
bô
) \

122 (
d©a
Ë((d©aË| (0x1 << (
bô
))); \

123 } 0);

	)

124 
	#BIT_UNSET
(
d©a
, 
bô
) \

127 (
d©a
Ë((d©aË& ~(0x1 << (
bô
))); \

128 } 0);

	)

130 
	#IRQ_TO_OFFSET
(
úq
, 
∑π
Ë((
uöt8_t
)((0x10 + (úq * 2Ë+Ö¨t)))

	)

132 
	s≠ic_èbÀ


134 
a˝i_hódî
 
	m©_hódî
;

135 
uöt32_t
 
	m©_addr
;

136 
uöt32_t
 
	m©_Êags
;

137 } 
	t∑cked
 
	t≠ic_èbÀ_t
;

139 
	sœpic_èbÀ


141 
uöt8_t
 
	m©_ty≥
;

142 
uöt8_t
 
	m©_size
;

143 
uöt8_t
 
	m©_¥ocid
;

144 
uöt8_t
 
	m©_≠icid
;

145 
uöt32_t
 
	m©_Êags
;

146 } 
	t∑cked
 
	tœpic_èbÀ_t
;

148 
	siﬂpic_èbÀ


150 
uöt8_t
 
	m©_ty≥
;

151 
uöt8_t
 
	m©_size
;

152 
uöt8_t
 
	m©_≠icid
;

153 
uöt8_t
 
	m©_ª£rved
;

154 
uöt32_t
 
	m©_addr
;

155 
uöt32_t
 
	m©_öti
;

156 } 
	t∑cked
 
	tiﬂpic_èbÀ_t
;

158 
≠ic_èbÀ_t
 *
	g≠ic
 = 
NULL
;

159 
iﬂpic_èbÀ_t
 *
	giﬂpic
 = 
NULL
;

162 
œpic_èbÀ_t
 *
	gœpics
[
MAX_LAPICS
 + 1] = {
NULL
};

163 
	gmax_≠icid
;

165 
	göôülized
 = 0;

168 
ölöe
 
	$≠ic_max_id
(Ë{  
max_≠icid
; 
	}
}

171 
ölöe
 
	$__œpic_gëid
(Ë{  (
LAPICID
 >> 24Ë& 0xff; 
	}
}

174 
ölöe
 
	$≠ic_cuºít_id
(Ë{  
	`__œpic_gëid
(); 
	}
}

176 
ölöe
 
uöt32_t
 
	$__œpic_gëvî
(Ë{  
LAPICVER
 & 0xff; 
	}
}

178 
ölöe
 
	$__œpic_£t•ur
(
uöt8_t
 
öå
)

180 
uöt32_t
 
d©a
 = 
LAPICSPUR
 | 
LOCAL_APIC_SW_ENABLE
;

181 *((
uöt8_t
 *)&
d©a
Ë
öå
;

182 
LAPICSPUR
 = 
d©a
;

183 
	}
}

186 
ölöe
 
	$__œpic_£éogiˇlid
(
uöt8_t
 
id
)

188 
LAPICLDR
 = ((
uöt32_t
)
id
) << 24;

189 
	}
}

191 
ölöe
 
uöt32_t
 
	$iﬂpic_ªad
(
uöt8_t
 
ªg_off£t
)

194 
IOAPIC
 = 
ªg_off£t
;

195  
IOAPICWIN
;

196 
	}
}

198 
ölöe
 
	$iﬂpic_wrôe
(
uöt8_t
 
ªg_off£t
, 
uöt32_t
 
vÆue
)

201 
IOAPIC
 = 
ªg_off£t
;

203 
IOAPICWIN
 = 
vÆue
;

204 
	}
}

206 
ölöe
 
uöt32_t
 
	$__iﬂpic_gëid
()

208  (
	`iﬂpic_ªad
(
IOAPIC_ID
) >> 24) & 0x0f;

209 
	}
}

211 
ölöe
 
uöt32_t
 
	$__iﬂpic_gëvî
()

213  
	`iﬂpic_ªad
(
IOAPIC_VER
) & 0xff;

214 
	}
}

216 
ölöe
 
uöt32_t
 
	$__iﬂpic_gëmaxªdú
()

218  (
	`iﬂpic_ªad
(
IOAPIC_VER
) >> 16) & 0xff;

219 
	}
}

221 
ölöe
 
	$__iﬂpic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
)

224 
uöt32_t
 
d©a
 = 
	`iﬂpic_ªad
(
	`IRQ_TO_OFFSET
(
úq
, 0));

226 ((
uöt8_t
 *)&
d©a
)[0] = 
öå
;

229 
	`BIT_SET
(
d©a
, 8);

230 
	`BIT_UNSET
(
d©a
, 9);

231 
	`BIT_UNSET
(
d©a
, 10);

233 
	`BIT_SET
(
d©a
, 11);

235 
	`BIT_UNSET
(
d©a
, 13);

237 
	`BIT_UNSET
(
d©a
, 15);

239 
	`iﬂpic_wrôe
(
	`IRQ_TO_OFFSET
(
úq
, 0), 
d©a
);

241 
d©a
 = 
	`iﬂpic_ªad
(
	`IRQ_TO_OFFSET
(
úq
, 1));

242 ((
uöt8_t
 *)&
d©a
)[3] = 0xff;

243 
	`iﬂpic_wrôe
(
	`IRQ_TO_OFFSET
(
úq
, 1), 
d©a
);

244 
	}
}

246 
ölöe
 
	$__iﬂpic_£tmask
(
uöt32_t
 
úq
, 
mask
)

248 
uöt32_t
 
d©a
 = 
	`iﬂpic_ªad
(
	`IRQ_TO_OFFSET
(
úq
, 0));

249 i‡(
mask
)

251 
	`BIT_SET
(
d©a
, 16);

255 
	`BIT_UNSET
(
d©a
, 16);

257 
	`iﬂpic_wrôe
(
	`IRQ_TO_OFFSET
(
úq
, 0), 
d©a
);

258 
	}
}

260 
uöt32_t
 
	$≠ic_exi°s
()

262 
uöt32_t
 
óx
, 
ebx
, 
ecx
, 
edx
;

263 
	`˝uid
(
CPUID_GETFEATURES
, &
óx
, &
ebx
, &
ecx
, &
edx
);

264  
edx
 & 
CPUID_FEAT_EDX_APIC
;

265 
	}
}

267 
	$≠ic_£t_ba£
(
uöt32_t
 
≠ic
)

269 
uöt32_t
 
edx
 = 0;

270 
uöt32_t
 
óx
 = (
≠ic
 & 0xfffff000Ë| 
IA32_APIC_BASE_MSR_ENABLE
;

271 
edx
 = 0;

272 
	`˝uid_£t_m§
(
IA32_APIC_BASE_MSR
, 
óx
, 
edx
);

273 
	}
}

275 
uöt32_t
 
	$≠ic_gë_ba£
()

277 
uöt32_t
 
óx
, 
edx
;

278 
	`˝uid_gë_m§
(
IA32_APIC_BASE_MSR
, &
óx
, &
edx
);

279  (
óx
 & 0xfffff000);

280 
	}
}

282 
	$__≠ic_îr
()

284 
	`dbg
(
DBG_PRINT
, "[+] APIC Eº‹: 0x%d", 
LAPICESR
);

285 
	`__asm__
("cli; hlt");

287 
	}
}

289 
	$≠ic_íabÀ
()

293 
LAPICDFR
 = 0xffffffff;

295 
	`KASSERT
(
	`≠ic_cuºít_id
() < 8);

296 
	`__œpic_£éogiˇlid
((
uöt8_t
)(1 << 
	`≠ic_cuºít_id
()));

297 
LAPICLVTTMR
 = 
LOCAL_APIC_DISABLE
;

298 
LAPICLVTPERF
 = 
LOCAL_APIC_NMI
;

299 
LAPICLVTLINT0
 = 
LOCAL_APIC_DISABLE
;

300 
LAPICLVTLINT1
 = 
LOCAL_APIC_DISABLE
;

301 
LAPICLVTERR
 = 
INTR_APICERR
;

302 
LAPICTPR
 = 0;

303 
	`≠ic_£t_ba£
(
	`≠ic_gë_ba£
());

304 
	`≠ic_£t•ur
(
INTR_SPURIOUS
);

305 
	`öå_ªgi°î
(
INTR_APICERR
, 
__≠ic_îr
);

306 
	}
}

308 
	$≠ic_dißbÀ_≥riodic_timî
()

310 
LAPICLVTTMR
 = 
LOCAL_APIC_DISABLE
;

311 
LAPICLVTPERF
 = 
LOCAL_APIC_NMI
;

312 
LAPICLVTLINT0
 = 
LOCAL_APIC_DISABLE
;

313 
LAPICLVTLINT1
 = 
LOCAL_APIC_DISABLE
;

314 
LAPICTPR
 = 0;

315 
	}
}

320 
uöt32_t
 
	$gë_˝u_bus_‰equícy
()

322 
uöt32_t
 
‰eq
 = 0;

323 i‡(!
‰eq
)

327 
LAPICTMRDIV
 = 0b1011;

332 
	`outb
(0x61, (
uöt8_t
)((
	`öb
(0x61) & 0xfd) | 1));

337 
	`outb
(0x43, 0xb2);

341 
	`outb
(0x42, 0x9b);

342 
	`öb
(0x60);

343 
	`outb
(0x42, 0x2e);

346 
uöt32_t
 
tmp
 = (uöt32_t)(
	`öb
(0x61) & 0xfe);

347 
	`outb
(0x61, (
uöt8_t
)
tmp
);

348 
	`outb
(0x61, (
uöt8_t
)(
tmp
 | 1));

350 
LAPICTIC
 = 0xffffffff;

352 !(
	`öb
(0x61) & 0x20))

355 
LAPICLVTTMR
 = 
LOCAL_APIC_DISABLE
;

358 
‰eq
 = (
LAPICTIC
 - 
LAPICTCC
) * 100;

359 
	`dbgq
(
DBG_CORE
, "CPU Bu†Fªq: %uÅick†≥∏£c⁄d\n", 
‰eq
);

361  
‰eq
;

362 
	}
}

367 
	$≠ic_íabÀ_≥riodic_timî
(
uöt32_t
 
‰eq
)

371 
uöt32_t
 
ticks_≥r_£c⁄d
 = 
	`gë_˝u_bus_‰equícy
();

373 i‡(
ticks_≥r_£c⁄d
 < 
‰eq
)

375 
	`∑nic
(

385 
uöt32_t
 
ªm
 = 
ticks_≥r_£c⁄d
 % 
‰eq
;

386 i‡(
ªm
 > (
‰eq
 / 2))

387 
ticks_≥r_£c⁄d
 +(
‰eq
 - 
ªm
);

389 
ticks_≥r_£c⁄d
 -
ªm
;

394 
uöt32_t
 
div
 = 0b0111;

395 
uöt32_t
 
tmp
 = 
ticks_≥r_£c⁄d
;

396 
i
 = 1; i < 7; i++)

399 i‡((
tmp
 >> 1Ë% 
‰eq
 != 0)

401 i‡((
tmp
 >> 1Ë< 
‰eq
)

404 
tmp
 >>= 1;

406 
div
++;

409 
uöt32_t
 
tmpdiv
 = 
div
;

412 
div
 &= 0b0111;

415 i‡(
div
 & 0b0100)

417 
div
 &= 0b0011;

418 
div
 |= 0b1011;

424 
LAPICTIC
 = 
tmp
 / 
‰eq
;

426 
LAPICTMRDIV
 = 
div
;

429 
LAPICLVTTMR
 = 
LOCAL_APIC_TMR_PERIODIC
 | 
INTR_APICTIMER
;

430 
	}
}

432 
	$≠ic_dißbÀ_8259
()

434 
	`dbgq
(
DBG_CORE
, "--- DISABLE 8259 PIC ---\n");

437 
	`outb
(
PIC1_COMMAND
, 
ICW1_INIT
 + 
ICW1_ICW4
);

438 
	`io_waô
();

439 
	`outb
(
PIC2_COMMAND
, 
ICW1_INIT
 + 
ICW1_ICW4
);

440 
	`io_waô
();

441 
	`outb
(
PIC1_DATA
, 
PIC1_VECTOR
);

442 
	`io_waô
();

443 
	`outb
(
PIC2_DATA
, 
PIC2_VECTOR
);

444 
	`io_waô
();

445 
	`outb
(
PIC1_DATA
, 0x04);

446 
	`io_waô
();

447 
	`outb
(
PIC2_DATA
, 0x02);

448 
	`io_waô
();

449 
	`outb
(
PIC1_DATA
, 
ICW4_8086
);

450 
	`io_waô
();

451 
	`outb
(
PIC2_DATA
, 
ICW4_8086
);

453 
	`dbgq
(
DBG_CORE
, "Maskingáll interrupts onÅhe i8259 PIC\n");

454 
	`outb
(
PIC1_DATA
, 
PIC_COMPLETE_MASK
);

455 
	`outb
(
PIC2_DATA
, 
PIC_COMPLETE_MASK
);

456 
	}
}

458 
	$m≠_≠ic_addr
(
uöçå_t
 
∑ddr
)

460 
	`∑ge_m¨k_ª£rved
((*)
∑ddr
);

461 
	`±_m≠
(
	`±_gë
(), 
∑ddr
,Öadd∏+ 
PHYS_OFFSET
, 
PT_WRITE
 | 
PT_PRESENT
,

462 
PT_WRITE
 | 
PT_PRESENT
);

463 
	}
}

465 
	$≠ic_öô
()

467 
uöt8_t
 *
±r
 = 
	`a˝i_èbÀ
(
APIC_SIGNATURE
, 0);

468 
≠ic
 = (
≠ic_èbÀ_t
 *)
±r
;

469 
	`KASSERT
(
NULL
 !
≠ic
 && "APICÅableÇot found in ACPI.");

471 
	`≠ic_dißbÀ_8259
();

473 
	`dbgq
(
DBG_CORE
, "--- APIC INIT ---\n");

474 
	`dbgq
(
DBG_CORE
, "loˇ»≠i¯∑ddr: 0x%x\n", 
≠ic
->
©_addr
);

475 
	`dbgq
(
DBG_CORE
, "PC-AT com∑tibÀ: %i\n", 
≠ic
->
©_Êags
 & 0x1);

476 
	`KASSERT
(
	`PAGE_ALIGNED
((*)(
uöçå_t
)
≠ic
->
©_addr
));

478 
	`KASSERT
(
≠ic
->
©_addr
 < 0xffffffff);

480 
	`m≠_≠ic_addr
(
≠ic
->
©_addr
);

483 
uöt8_t
 
off
 = (*
≠ic
);

484 
off
 < 
≠ic
->
©_hódî
.
ah_size
)

486 
uöt8_t
 
ty≥
 = *(
±r
 + 
off
);

487 
uöt8_t
 
size
 = *(
±r
 + 
off
 + 1);

488 
œpic_èbÀ_t
 *
œpic
 = 
NULL
;

489 i‡(
TYPE_LAPIC
 =
ty≥
)

491 
	`KASSERT
(
	`≠ic_exi°s
() && "Local APIC doesÇotÉxist");

492 
	`KASSERT
((
œpic_èbÀ_t
Ë=
size
);

493 
œpic
 = (
œpic_èbÀ_t
 *)(
±r
 + 
off
);

494 
	`KASSERT
(
œpic
->
©_≠icid
 < 
MAX_LAPICS
 &&

496 
œpics
[
œpic
->
©_≠icid
] =Üapic;

498 
	`∑ge_m¨k_ª£rved
(
	`PAGE_ALIGN_DOWN
((
uöçå_t
)
œpic
 - 
PHYS_OFFSET
));

499 
max_≠icid
 = 
œpic
->
©_≠icid
;

501 
	`dbgq
(
DBG_CORE
, "LAPIC:\n");

502 
	`dbgq
(
DBG_CORE
, " id: 0x%.2x\n",

503 (
uöt32_t
)
œpic
->
©_≠icid
);

504 
	`dbgq
(
DBG_CORE
, "Örocessor: 0x%.3x\n",

505 (
uöt32_t
)
œpic
->
©_¥ocid
);

506 
	`dbgq
(
DBG_CORE
, "É«bÀd: %i\n", 
≠ic
->
©_Êags
 & 0x1);

508 i‡(
TYPE_IOAPIC
 =
ty≥
)

510 
	`KASSERT
(
	`≠ic_exi°s
() && "IO APIC doesÇotÉxist");

511 
	`KASSERT
((
iﬂpic_èbÀ_t
Ë=
size
);

512 
	`KASSERT
(
NULL
 =
iﬂpic
 && "Weenix only supportsá single IO APIC");

513 
iﬂpic
 = (
iﬂpic_èbÀ_t
 *)(
±r
 + 
off
);

514 
	`∑ge_m¨k_ª£rved
(

515 
	`PAGE_ALIGN_DOWN
((
uöçå_t
)
iﬂpic
 - 
PHYS_OFFSET
));

516 
	`m≠_≠ic_addr
(
iﬂpic
->
©_addr
);

518 
	`dbgq
(
DBG_CORE
, "IOAPIC:\n");

519 
	`dbgq
(
DBG_CORE
, " id: 0x%.2x\n",

520 (
uöt32_t
)
iﬂpic
->
©_≠icid
);

521 
	`dbgq
(
DBG_CORE
, " ba£Öaddr: 0x%.8x\n", 
iﬂpic
->
©_addr
);

522 
	`dbgq
(
DBG_CORE
, " i¡òaddr: 0x%.8x\n", 
iﬂpic
->
©_öti
);

523 
	`KASSERT
(
	`PAGE_ALIGNED
((*)(
uöçå_t
)
iﬂpic
->
©_addr
));

527 
	`dbgq
(
DBG_CORE
, "Unknow¿APICÅy≥: 0x%x\n", (
uöt32_t
)
ty≥
);

529 
off
 +
size
;

531 
	`KASSERT
(
NULL
 !
œpics
[
	`≠ic_cuºít_id
()] &&

533 
	`KASSERT
(
NULL
 !
iﬂpic
 && "CouldÇot findán IO APIC");

535 
öôülized
 = 1;

536 
	}
}

538 
ölöe
 
	$≠ic_öôülized
(Ë{  
öôülized
; 
	}
}

540 
ölöe
 
uöt8_t
 
	$≠ic_gëùl
(Ë{  (
uöt8_t
)
LAPICTPR
; 
	}
}

542 
ölöe
 
	$≠ic_£tùl
(
uöt8_t
 
ùl
Ë{ 
LAPICTPR
 = i∂; 
	}
}

544 
ölöe
 
	$≠ic_£t•ur
(
uöt8_t
 
öå
)

546 
	`dbg
(
DBG_CORE
, "m≠pög spuriou†öãºu±†tÿ%u\n", 
öå
);

547 
	`__œpic_£t•ur
(
öå
);

548 
	}
}

550 
ölöe
 
	$≠ic_eoi
(Ë{ 
LAPICEOI
 = 0x0; 
	}
}

552 
	$≠ic_£åedú
(
uöt32_t
 
úq
, 
uöt8_t
 
öå
)

554 
	`dbg
(
DBG_CORE
, "ªdúe˘ög irq %uÅÿöãºu± %u\n", 
úq
, 
öå
);

555 
	`__iﬂpic_£åedú
(
úq
, 
öå
);

556 
	`__iﬂpic_£tmask
(
úq
, 0);

557 
	}
}

559 
	$≠ic_°¨t_¥o˚ss‹
(
uöt8_t
 
¥o˚ss‹
, uöt8_à
executi⁄_∑ge
)

562 
	`KASSERT
(
¥o˚ss‹
 < 8);

563 
uöt32_t
 
i¸_low
 = 0;

564 
i¸_low
 |= 0;

565 
i¸_low
 |
DESTINATION_MODE_INIT
 << 8;

566 
	`BIT_UNSET
(
i¸_low
, 11);

568 
	`BIT_SET
(
i¸_low
, 14);

569 
	`BIT_UNSET
(
i¸_low
, 15);

571 
	`dbg
(
DBG_CORE
, "Sídög IPI: ICR_LOW = 0x%.8x, ICR_HIGH = 0x%.8x\n", 
i¸_low
,

572 
¥o˚ss‹
 << 24);

573 
LAPICICRH
 = 
¥o˚ss‹
 << 24;

574 
LAPICICRL
 = 
i¸_low
;

576 
	`≠ic_waô_ùi
();

578 
i¸_low
 = 0;

579 
i¸_low
 |
executi⁄_∑ge
;

580 
i¸_low
 |
DESTINATION_MODE_SIPI
 << 8;

581 
	`BIT_UNSET
(
i¸_low
, 11);

583 
	`BIT_SET
(
i¸_low
, 14);

584 
	`BIT_UNSET
(
i¸_low
, 15);

585 
	`dbg
(
DBG_CORE
, "Sídög IPI: ICR_LOW = 0x%.8x, ICR_HIGH = 0x%.8x\n", 
i¸_low
,

586 
¥o˚ss‹
 << 24);

588 
LAPICICRH
 = 
¥o˚ss‹
 << 24;

589 
LAPICICRL
 = 
i¸_low
;

591 
	`≠ic_waô_ùi
();

592 
	}
}

594 
	$≠ic_£nd_ùi
(
uöt8_t
 
èrgë
, 
ùi_de°ö©i⁄_mode
 
mode
, uöt8_à
ve˘‹
)

601 
	`KASSERT
(
èrgë
 < 8);

603 
uöt32_t
 
i¸_low
 = 0;

604 
i¸_low
 |
ve˘‹
;

605 
i¸_low
 |
mode
 << 8;

606 
	`BIT_SET
(
i¸_low
, 11);

608 
	`BIT_SET
(
i¸_low
, 14);

610 
	`dbgq
(
DBG_CORE
, "Sending IPI: ICR_LOW = 0x%.8x, ICR_HIGH = 0x%.8x\n",

611 
i¸_low
, (1U << 
èrgë
) << 24);

615 
LAPICICRH
 = (1U << 
èrgë
) << 24;

617 
LAPICICRL
 = 
i¸_low
;

618 
	}
}

620 
	$≠ic_brﬂdˇ°_ùi
(
ùi_de°ö©i⁄_mode
 
mode
, 
uöt8_t
 
ve˘‹
,

621 
ö˛ude_£lf
)

623 
uöt32_t
 
i¸_low
 = 0;

624 
i¸_low
 |
ve˘‹
;

625 
i¸_low
 |
mode
 << 8;

626 
	`BIT_SET
(
i¸_low
, 11);

627 
	`BIT_SET
(
i¸_low
, 14);

629 i‡(!
ö˛ude_£lf
)

630 
	`BIT_SET
(
i¸_low
, 18);

631 
	`BIT_SET
(
i¸_low
, 19);

633 
LAPICICRH
 = 0;

634 
LAPICICRL
 = 
i¸_low
;

635 
	}
}

643 
	$≠ic_waô_ùi
()

646 
LAPICICRL
 & (1 << 12))

648 
	}
}

	@kernel/main/gdt.c

1 
	~"maö/gdt.h
"

2 
	~"globÆs.h
"

4 
	~"utû/debug.h
"

5 
	~"utû/¥ötf.h
"

6 
	~"utû/°rög.h
"

8 
	sgdt_íåy


10 
uöt16_t
 
	mge_limôlo
;

11 
uöt16_t
 
	mge_ba£lo
;

12 
uöt8_t
 
	mge_ba£mid
;

13 
uöt8_t
 
	mge_ac˚ss
;

14 
uöt8_t
 
	mge_Êags
;

15 
uöt8_t
 
	mge_ba£hi
;

16 } 
	t∑cked
 
	tgdt_íåy_t
;

18 
gdt_íåy_t
 
	ggdt
[
GDT_COUNT
] 
	gCORE_SPECIFIC_DATA
;

20 
	stss_íåy


22 
uöt32_t
 
	mts_ª£rved1
;

23 
uöt64_t
 
	mts_r•0
;

24 
uöt64_t
 
	mts_r•1
;

25 
uöt64_t
 
	mts_r•2
;

26 
uöt64_t
 
	mts_ª£rved2
;

27 
uöt64_t
 
	mts_i°1
;

28 
uöt64_t
 
	mts_i°2
;

29 
uöt64_t
 
	mts_i°3
;

30 
uöt64_t
 
	mts_i°4
;

31 
uöt64_t
 
	mts_i°5
;

32 
uöt64_t
 
	mts_i°6
;

33 
uöt64_t
 
	mts_i°7
;

34 
uöt64_t
 
	mts_ª£rved3
;

35 
uöt16_t
 
	mts_i›b
;

36 
uöt16_t
 
	mts_ª£rved4
;

37 } 
	t∑cked
 
	ttss_íåy_t
;

39 
	sgdt_loˇti⁄


41 
uöt16_t
 
	mgl_size
;

42 
uöt64_t
 
	mgl_off£t
;

43 } 
	t∑cked
 
	tgdt_loˇti⁄_t
;

45 
gdt_loˇti⁄_t
 
	ggdé
 = {.
gl_size
 = 
GDT_COUNT
 * (
gdt_íåy_t
),

46 .
	ggl_off£t
 = (
uöt64_t
)&
gdt
};

48 
tss_íåy_t
 
tss
 
	gCORE_SPECIFIC_DATA
;

50 
	$gdt_öô
()

52 
	`mem£t
(
gdt
, 0, (gdt));

53 
	`gdt_£t_íåy
(
GDT_KERNEL_TEXT
, 0x0, 0xFFFFF, 0, 1, 0, 1);

54 
	`gdt_£t_íåy
(
GDT_KERNEL_DATA
, 0x0, 0xFFFFF, 0, 0, 0, 1);

55 
	`gdt_£t_íåy
(
GDT_USER_TEXT
, 0x0, 0xFFFFF, 3, 1, 0, 1);

56 
	`gdt_£t_íåy
(
GDT_USER_DATA
, 0x0, 0xFFFFF, 3, 0, 0, 1);

58 
uöçå_t
 
tss_poöãr
 = (uöçå_t)&
tss
;

59 
	`gdt_£t_íåy
(
GDT_TSS
, (
uöt32_t
)
tss_poöãr
, (
tss
), 0, 1, 0, 0);

60 
gdt
[
GDT_TSS
 / 8].
ge_ac˚ss
 &= ~(0b10000);

61 
gdt
[
GDT_TSS
 / 8].
ge_ac˚ss
 |= 0b1;

62 
gdt
[
GDT_TSS
 / 8].
ge_Êags
 &= ~(0b10000000);

64 
uöt64_t
 
tss_highî_hÆf
 = ((uöt64_t)
tss_poöãr
) >> 32;

65 
	`mem˝y
(&
gdt
[
GDT_TSS
 / 8 + 1], &
tss_highî_hÆf
, 8);

67 
	`mem£t
(&
tss
, 0, (tss));

68 
tss
.
ts_i›b
 = (tss);

70 
gdt_loˇti⁄_t
 *
d©a
 = &
gdé
;

71 
£gmít
 = 
GDT_TSS
;

73 
	`dbg
(
DBG_CORE
, "Installing GDTánd TR\n");

74 
__asm__
 vﬁ©ûe("lgdà(%0);Üå %1" ::"p"(
d©a
), "m"(
£gmít
));

75 
	}
}

77 
	$gdt_£t_kî√l_°ack
(*
addr
Ë{ 
tss
.
ts_r•0
 = (
uöt64_t
Ôddr; 
	}
}

79 
	$gdt_£t_íåy
(
uöt32_t
 
£gmít
, uöt32_à
ba£
, uöt32_à
limô
,

80 
uöt8_t
 
rög
, 
exec
, 
dú
, 
rw
)

82 
	`KASSERT
(
£gmít
 < 
GDT_COUNT
 * 8 && 0 == segment % 8);

83 
	`KASSERT
(
rög
 <= 3);

84 
	`KASSERT
(
limô
 <= 0xFFFFF);

86 
ödex
 = 
£gmít
 / 8;

87 
gdt
[
ödex
].
ge_limôlo
 = (
uöt16_t
)
limô
;

88 
gdt
[
ödex
].
ge_ba£lo
 = (
uöt16_t
)
ba£
;

89 
gdt
[
ödex
].
ge_ba£mid
 = (
uöt8_t
)(
ba£
 >> 16);

90 
gdt
[
ödex
].
ge_ba£hi
 = (
uöt8_t
)(
ba£
 >> 24);

94 
gdt
[
ödex
].
ge_Êags
 = (
uöt8_t
)(0b10100000 | (
limô
 >> 16));

96 
gdt
[
ödex
].
ge_ac˚ss
 = 0b10000000;

97 
gdt
[
ödex
].
ge_ac˚ss
 |(
rög
 << 5);

98 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b10000;

99 i‡(
exec
)

101 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b1000;

103 i‡(
dú
)

105 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b100;

107 i‡(
rw
)

109 
gdt
[
ödex
].
ge_ac˚ss
 |= 0b10;

111 
	}
}

113 
	$gdt_˛ór
(
uöt32_t
 
£gmít
)

115 
	`KASSERT
(
£gmít
 < 
GDT_COUNT
 * 8 && 0 == segment % 8);

116 
	`mem£t
(&
gdt
[
£gmít
 / 8], 0, (gdt[segment / 8]));

117 
	}
}

119 
size_t
 
	$gdt_tss_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

121 
size_t
 
size
 = 
osize
;

123 
	`KASSERT
(
NULL
 =
¨g
);

125 
	`ùrötf
(&
buf
, &
size
, "TSS:\n");

126 
	`ùrötf
(&
buf
, &
size
, "k°ack: 0x%p\n", (*)
tss
.
ts_r•0
);

128  
size
;

129 
	}
}

	@kernel/main/interrupt.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"ty≥s.h
"

4 
	~<≠i/sysˇŒ.h
>

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

9 
	~"maö/≠ic.h
"

10 
	~"maö/gdt.h
"

12 
	#MAX_INTERRUPTS
 256

	)

16 
	#IDT_DESC_TRAP
 0x01

	)

17 
	#IDT_DESC_BIT16
 0x06

	)

18 
	#IDT_DESC_BIT32
 0x0E

	)

19 
	#IDT_DESC_RING0
 0x00

	)

20 
	#IDT_DESC_RING1
 0x40

	)

21 
	#IDT_DESC_RING2
 0x20

	)

22 
	#IDT_DESC_RING3
 0x60

	)

23 
	#IDT_DESC_PRESENT
 0x80

	)

25 
	#INTR
(
i§
Ë(
__öå_h™dÀr
##i§)

	)

27 
	#INTR_ERRCODE
(
i§
) \

28 
öå_h™dÀr_t
 
__öå_h™dÀr
##
i§
; \

29 
	`__asm__
(".global __intr_handler" #isr \

67 "úëq\n");

	)

69 
	#INTR_NOERRCODE
(
i§
) \

70 
öå_h™dÀr_t
 
__öå_h™dÀr
##
i§
; \

71 
	`__asm__
(".global __intr_handler" #isr \

110 "úëq\n\t");

	)

112 
	$INTR_NOERRCODE
(0)

113 
	$INTR_NOERRCODE
(1)

114 
	$INTR_NOERRCODE
(2)

115 
	$INTR_NOERRCODE
(3)

116 
	$INTR_NOERRCODE
(4)

117 
	$INTR_NOERRCODE
(5)

118 
	$INTR_NOERRCODE
(6)

119 
	$INTR_NOERRCODE
(7)

120 
	$INTR_ERRCODE
(8)

121 
	$INTR_NOERRCODE
(9)

122 
	$INTR_ERRCODE
(10)

123 
	$INTR_ERRCODE
(11)

124 
	$INTR_ERRCODE
(12)

125 
	$INTR_ERRCODE
(13)

126 
	$INTR_ERRCODE
(14)

127 
	$INTR_NOERRCODE
(15)

128 
	$INTR_NOERRCODE
(16)

129 
	$INTR_ERRCODE
(17)

130 
	$INTR_NOERRCODE
(18)

131 
	$INTR_NOERRCODE
(19)

132 
	$INTR_NOERRCODE
(20)

133 
	$INTR_NOERRCODE
(21)

134 
	$INTR_NOERRCODE
(22)

135 
	$INTR_NOERRCODE
(23)

136 
	$INTR_NOERRCODE
(24)

137 
	$INTR_NOERRCODE
(25)

138 
	$INTR_NOERRCODE
(26)

139 
	$INTR_NOERRCODE
(27)

140 
	$INTR_NOERRCODE
(28)

141 
	$INTR_NOERRCODE
(29)

142 
	$INTR_NOERRCODE
(30)

143 
	$INTR_NOERRCODE
(31)

144 
	$INTR_NOERRCODE
(32)

145 
	$INTR_NOERRCODE
(33)

146 
	$INTR_NOERRCODE
(34)

147 
	$INTR_NOERRCODE
(35)

148 
	$INTR_NOERRCODE
(36)

149 
	$INTR_NOERRCODE
(37)

150 
	$INTR_NOERRCODE
(38)

151 
	$INTR_NOERRCODE
(39)

152 
	$INTR_NOERRCODE
(40)

153 
	$INTR_NOERRCODE
(41)

154 
	$INTR_NOERRCODE
(42)

155 
	$INTR_NOERRCODE
(43)

156 
	$INTR_NOERRCODE
(44)

157 
	$INTR_NOERRCODE
(45)

158 
	$INTR_NOERRCODE
(46)

159 
	$INTR_NOERRCODE
(47)

160 
	$INTR_NOERRCODE
(48)

161 
	$INTR_NOERRCODE
(49)

162 
	$INTR_NOERRCODE
(50)

163 
	$INTR_NOERRCODE
(51)

164 
	$INTR_NOERRCODE
(52)

165 
	$INTR_NOERRCODE
(53)

166 
	$INTR_NOERRCODE
(54)

167 
	$INTR_NOERRCODE
(55)

168 
	$INTR_NOERRCODE
(56)

169 
	$INTR_NOERRCODE
(57)

170 
	$INTR_NOERRCODE
(58)

171 
	$INTR_NOERRCODE
(59)

172 
	$INTR_NOERRCODE
(60)

173 
	$INTR_NOERRCODE
(61)

174 
	$INTR_NOERRCODE
(62)

175 
	$INTR_NOERRCODE
(63)

176 
	$INTR_NOERRCODE
(64)

177 
	$INTR_NOERRCODE
(65)

178 
	$INTR_NOERRCODE
(66)

179 
	$INTR_NOERRCODE
(67)

180 
	$INTR_NOERRCODE
(68)

181 
	$INTR_NOERRCODE
(69)

182 
	$INTR_NOERRCODE
(70)

183 
	$INTR_NOERRCODE
(71)

184 
	$INTR_NOERRCODE
(72)

185 
	$INTR_NOERRCODE
(73)

186 
	$INTR_NOERRCODE
(74)

187 
	$INTR_NOERRCODE
(75)

188 
	$INTR_NOERRCODE
(76)

189 
	$INTR_NOERRCODE
(77)

190 
	$INTR_NOERRCODE
(78)

191 
	$INTR_NOERRCODE
(79)

192 
	$INTR_NOERRCODE
(80)

193 
	$INTR_NOERRCODE
(81)

194 
	$INTR_NOERRCODE
(82)

195 
	$INTR_NOERRCODE
(83)

196 
	$INTR_NOERRCODE
(84)

197 
	$INTR_NOERRCODE
(85)

198 
	$INTR_NOERRCODE
(86)

199 
	$INTR_NOERRCODE
(87)

200 
	$INTR_NOERRCODE
(88)

201 
	$INTR_NOERRCODE
(89)

202 
	$INTR_NOERRCODE
(90)

203 
	$INTR_NOERRCODE
(91)

204 
	$INTR_NOERRCODE
(92)

205 
	$INTR_NOERRCODE
(93)

206 
	$INTR_NOERRCODE
(94)

207 
	$INTR_NOERRCODE
(95)

208 
	$INTR_NOERRCODE
(96)

209 
	$INTR_NOERRCODE
(97)

210 
	$INTR_NOERRCODE
(98)

211 
	$INTR_NOERRCODE
(99)

212 
	$INTR_NOERRCODE
(100)

213 
	$INTR_NOERRCODE
(101)

214 
	$INTR_NOERRCODE
(102)

215 
	$INTR_NOERRCODE
(103)

216 
	$INTR_NOERRCODE
(104)

217 
	$INTR_NOERRCODE
(105)

218 
	$INTR_NOERRCODE
(106)

219 
	$INTR_NOERRCODE
(107)

220 
	$INTR_NOERRCODE
(108)

221 
	$INTR_NOERRCODE
(109)

222 
	$INTR_NOERRCODE
(110)

223 
	$INTR_NOERRCODE
(111)

224 
	$INTR_NOERRCODE
(112)

225 
	$INTR_NOERRCODE
(113)

226 
	$INTR_NOERRCODE
(114)

227 
	$INTR_NOERRCODE
(115)

228 
	$INTR_NOERRCODE
(116)

229 
	$INTR_NOERRCODE
(117)

230 
	$INTR_NOERRCODE
(118)

231 
	$INTR_NOERRCODE
(119)

232 
	$INTR_NOERRCODE
(120)

233 
	$INTR_NOERRCODE
(121)

234 
	$INTR_NOERRCODE
(122)

235 
	$INTR_NOERRCODE
(123)

236 
	$INTR_NOERRCODE
(124)

237 
	$INTR_NOERRCODE
(125)

238 
	$INTR_NOERRCODE
(126)

239 
	$INTR_NOERRCODE
(127)

240 
	$INTR_NOERRCODE
(128)

241 
	$INTR_NOERRCODE
(129)

242 
	$INTR_NOERRCODE
(130)

243 
	$INTR_NOERRCODE
(131)

244 
	$INTR_NOERRCODE
(132)

245 
	$INTR_NOERRCODE
(133)

246 
	$INTR_NOERRCODE
(134)

247 
	$INTR_NOERRCODE
(135)

248 
	$INTR_NOERRCODE
(136)

249 
	$INTR_NOERRCODE
(137)

250 
	$INTR_NOERRCODE
(138)

251 
	$INTR_NOERRCODE
(139)

252 
	$INTR_NOERRCODE
(140)

253 
	$INTR_NOERRCODE
(141)

254 
	$INTR_NOERRCODE
(142)

255 
	$INTR_NOERRCODE
(143)

256 
	$INTR_NOERRCODE
(144)

257 
	$INTR_NOERRCODE
(145)

258 
	$INTR_NOERRCODE
(146)

259 
	$INTR_NOERRCODE
(147)

260 
	$INTR_NOERRCODE
(148)

261 
	$INTR_NOERRCODE
(149)

262 
	$INTR_NOERRCODE
(150)

263 
	$INTR_NOERRCODE
(151)

264 
	$INTR_NOERRCODE
(152)

265 
	$INTR_NOERRCODE
(153)

266 
	$INTR_NOERRCODE
(154)

267 
	$INTR_NOERRCODE
(155)

268 
	$INTR_NOERRCODE
(156)

269 
	$INTR_NOERRCODE
(157)

270 
	$INTR_NOERRCODE
(158)

271 
	$INTR_NOERRCODE
(159)

272 
	$INTR_NOERRCODE
(160)

273 
	$INTR_NOERRCODE
(161)

274 
	$INTR_NOERRCODE
(162)

275 
	$INTR_NOERRCODE
(163)

276 
	$INTR_NOERRCODE
(164)

277 
	$INTR_NOERRCODE
(165)

278 
	$INTR_NOERRCODE
(166)

279 
	$INTR_NOERRCODE
(167)

280 
	$INTR_NOERRCODE
(168)

281 
	$INTR_NOERRCODE
(169)

282 
	$INTR_NOERRCODE
(170)

283 
	$INTR_NOERRCODE
(171)

284 
	$INTR_NOERRCODE
(172)

285 
	$INTR_NOERRCODE
(173)

286 
	$INTR_NOERRCODE
(174)

287 
	$INTR_NOERRCODE
(175)

288 
	$INTR_NOERRCODE
(176)

289 
	$INTR_NOERRCODE
(177)

290 
	$INTR_NOERRCODE
(178)

291 
	$INTR_NOERRCODE
(179)

292 
	$INTR_NOERRCODE
(180)

293 
	$INTR_NOERRCODE
(181)

294 
	$INTR_NOERRCODE
(182)

295 
	$INTR_NOERRCODE
(183)

296 
	$INTR_NOERRCODE
(184)

297 
	$INTR_NOERRCODE
(185)

298 
	$INTR_NOERRCODE
(186)

299 
	$INTR_NOERRCODE
(187)

300 
	$INTR_NOERRCODE
(188)

301 
	$INTR_NOERRCODE
(189)

302 
	$INTR_NOERRCODE
(190)

303 
	$INTR_NOERRCODE
(191)

304 
	$INTR_NOERRCODE
(192)

305 
	$INTR_NOERRCODE
(193)

306 
	$INTR_NOERRCODE
(194)

307 
	$INTR_NOERRCODE
(195)

308 
	$INTR_NOERRCODE
(196)

309 
	$INTR_NOERRCODE
(197)

310 
	$INTR_NOERRCODE
(198)

311 
	$INTR_NOERRCODE
(199)

312 
	$INTR_NOERRCODE
(200)

313 
	$INTR_NOERRCODE
(201)

314 
	$INTR_NOERRCODE
(202)

315 
	$INTR_NOERRCODE
(203)

316 
	$INTR_NOERRCODE
(204)

317 
	$INTR_NOERRCODE
(205)

318 
	$INTR_NOERRCODE
(206)

319 
	$INTR_NOERRCODE
(207)

320 
	$INTR_NOERRCODE
(208)

321 
	$INTR_NOERRCODE
(209)

322 
	$INTR_NOERRCODE
(210)

323 
	$INTR_NOERRCODE
(211)

324 
	$INTR_NOERRCODE
(212)

325 
	$INTR_NOERRCODE
(213)

326 
	$INTR_NOERRCODE
(214)

327 
	$INTR_NOERRCODE
(215)

328 
	$INTR_NOERRCODE
(216)

329 
	$INTR_NOERRCODE
(217)

330 
	$INTR_NOERRCODE
(218)

331 
	$INTR_NOERRCODE
(219)

332 
	$INTR_NOERRCODE
(220)

333 
	$INTR_NOERRCODE
(221)

334 
	$INTR_NOERRCODE
(222)

335 
	$INTR_NOERRCODE
(223)

336 
	$INTR_NOERRCODE
(224)

337 
	$INTR_NOERRCODE
(225)

338 
	$INTR_NOERRCODE
(226)

339 
	$INTR_NOERRCODE
(227)

340 
	$INTR_NOERRCODE
(228)

341 
	$INTR_NOERRCODE
(229)

342 
	$INTR_NOERRCODE
(230)

343 
	$INTR_NOERRCODE
(231)

344 
	$INTR_NOERRCODE
(232)

345 
	$INTR_NOERRCODE
(233)

346 
	$INTR_NOERRCODE
(234)

347 
	$INTR_NOERRCODE
(235)

348 
	$INTR_NOERRCODE
(236)

349 
	$INTR_NOERRCODE
(237)

350 
	$INTR_NOERRCODE
(238)

351 
	$INTR_NOERRCODE
(239)

352 
	$INTR_NOERRCODE
(240)

353 
	$INTR_NOERRCODE
(241)

354 
	$INTR_NOERRCODE
(242)

355 
	$INTR_NOERRCODE
(243)

356 
	$INTR_NOERRCODE
(244)

357 
	$INTR_NOERRCODE
(245)

358 
	$INTR_NOERRCODE
(246)

359 
	$INTR_NOERRCODE
(247)

360 
	$INTR_NOERRCODE
(248)

361 
	$INTR_NOERRCODE
(249)

362 
	$INTR_NOERRCODE
(250)

363 
	$INTR_NOERRCODE
(251)

364 
	$INTR_NOERRCODE
(252)

365 
	$INTR_NOERRCODE
(253)

366 
	$INTR_NOERRCODE
(254)

367 
	$INTR_NOERRCODE
(255)

369 
	söå_desc


371 
uöt16_t
 
off£t1
;

372 
uöt16_t
 
£À˘‹
;

373 
uöt8_t
 
i°
;

374 
uöt8_t
 
©å
;

375 
uöt16_t
 
off£t2
;

376 
uöt32_t
 
off£t3
;

377 
uöt32_t
 
zîo
;

378 } 
	t∑cked
 
	töå_desc_t
;

380 
	söå_öfo


382 
uöt16_t
 
size
;

383 
uöçå_t
 
ba£
;

384 } 
	t∑cked
 
	töå_öfo_t
;

386 
öå_desc_t
 
öå_èbÀ
[
MAX_INTERRUPTS
];

387 
öå_h™dÀr_t
 
öå_h™dÀrs
[
MAX_INTERRUPTS
];

388 
öt32_t
 
öå_m≠pögs
[
MAX_INTERRUPTS
];

390 
öå_öfo_t
 
öå_d©a
;

398 
ªgs_t
 *
_öå_ªgs
 
CORE_SPECIFIC_DATA
;

400 
ölöe
 
uöt8_t
 
	$öå_£tùl
(
uöt8_t
 
ùl
)

402 
uöt8_t
 
ﬁdùl
 = 
	`≠ic_gëùl
();

403 
	`≠ic_£tùl
(
ùl
);

404  
ﬁdùl
;

405 
	}
}

407 
ölöe
 
uöt8_t
 
	$öå_gëùl
(Ë{  
	`≠ic_gëùl
(); 
	}
}

409 
__©åibuã__
((
u£d
)Ë
	$öãºu±_h™dÀr
(
ªgs_t
 
ªgs
)

411 
öå_h™dÀr_t
 
h™dÀr
 = 
öå_h™dÀrs
[
ªgs
.
r_öå
];

412 
_öå_ªgs
 = &
ªgs
;

413 i‡(
h™dÀr
)

415 i‡((
ªgs
.
r_cs
 & 0x3) == 0x3)

420 i‡(!
	`h™dÀr
(&
ªgs
))

421 
	`≠ic_eoi
();

425 
	`∑nic
("Unh™dÀd i¡îru± 0x%x\n", ()
ªgs
.
r_öå
);

427 
_öå_ªgs
 = 
NULL
;

428 
	}
}

430 
öt32_t
 
	$öå_m≠
(
uöt16_t
 
úq
, 
uöt8_t
 
öå
)

432 
	`KASSERT
(
INTR_SPURIOUS
 !
öå
);

434 
öt32_t
 
ﬁdúq
 = 
öå_m≠pögs
[
öå
];

435 
öå_m≠pögs
[
öå
] = 
úq
;

436 
	`≠ic_£åedú
(
úq
, 
öå
);

437  
ﬁdúq
;

438 
	}
}

440 
öå_h™dÀr_t
 
	$öå_ªgi°î
(
uöt8_t
 
öå
, 
öå_h™dÀr_t
 
h™dÀr
)

442 
öå_h™dÀr_t
 
ﬁd
 = 
öå_h™dÀrs
[
öå
];

443 
öå_h™dÀrs
[
öå
] = 
h™dÀr
;

444  
ﬁd
;

445 
	}
}

448 
	$dump_ªgi°îs
(
ªgs_t
 *
ªgs
)

450 
	`dbg
(
DBG_PRINT
,

458 
ªgs
->
r_öå
,Ñegs->
r_îr
,Ñegs->
r_rù
,Ñegs->
r_cs
,Ñegs->
r_rÊags
,

459 
ªgs
->
r_r•
,Ñegs->
r_ss
,Ñegs->
r_rdi
,Ñegs->
r_rsi
,Ñegs->
r_rdx
,

460 
ªgs
->
r_rcx
,Ñegs->
r_øx
,Ñegs->
r_r8
,Ñegs->
r_r9
,Ñegs->
r_r10
,

461 
ªgs
->
r_r11
,Ñegs->
r_rbx
,Ñegs->
r_rbp
,Ñegs->
r_r12
,Ñegs->
r_r13
,

462 
ªgs
->
r_r14
,Ñegs->
r_r15
);

463 
	}
}

465 
	$__öå_gpf_h™dÀr
(
ªgs_t
 *
ªgs
)

468 i‡((
ªgs
->
r_cs
 & 0x3) == 0x3)

471 
	`do_exô
(
EFAULT
);

475 
	`dump_ªgi°îs
(
ªgs
);

476 
	`∑nic
("\n\nTriggeredá General Protection Fault\n");

479 
	}
}

481 
	$__öå_divide_by_zîo_h™dÀr
(
ªgs_t
 *
ªgs
)

484 i‡((
ªgs
->
r_cs
 & 0x3) == 0x3)

486 
	`do_exô
(
EPERM
);

490 
	`dump_ªgi°îs
(
ªgs
);

491 
	`∑nic
("\n\nTriggeredá Divide by ZeroÉxception\n");

494 
	}
}

496 
	$__öå_övÆ_›code_h™dÀr
(
ªgs_t
 *
ªgs
)

499 i‡((
ªgs
->
r_cs
 & 0x3) == 0x3)

501 
	`do_exô
(
EPERM
);

505 
	`dump_ªgi°îs
(
ªgs
);

506 
	`∑nic
("\n\nTriggeredá General Protection Fault!\n");

509 
	}
}

511 
	$__öå_•urious
(
ªgs_t
 *
ªgs
)

513 
	`dbg
(
DBG_CORE
, "ignoring spurious interrupt\n");

515 
	}
}

517 
	$__öå_£t_íåy
(
uöt8_t
 
i§
, 
uöçå_t
 
addr
, uöt8_à
£g
,

518 
uöt8_t
 
Êags
)

521 
öå_èbÀ
[
i§
].
off£t1
 = (
uöt16_t
)((
addr
)&0xffff);

522 
öå_èbÀ
[
i§
].
off£t2
 = (
uöt16_t
)(((
addr
) >> 16) & 0xffff);

523 
öå_èbÀ
[
i§
].
off£t3
 = (
uöt32_t
)((
addr
) >> 32);

524 
öå_èbÀ
[
i§
].
zîo
 = 0;

525 
öå_èbÀ
[
i§
].
©å
 = 
Êags
;

526 
öå_èbÀ
[
i§
].
£À˘‹
 = 
£g
;

527 
öå_èbÀ
[
i§
].
i°
 = 0;

528 
	}
}

530 
__öå_£t_íåõs
();

532 
	$öå_öô
()

534 
öôed
 = 0;

535 
öå_öfo_t
 *
d©a
 = &
öå_d©a
;

537 i‡(!
öôed
)

540 
öôed
 = 1;

543 
d©a
->
size
 = (
öå_desc_t
Ë* 
MAX_INTERRUPTS
 - 1;

544 
d©a
->
ba£
 = (
uöçå_t
)
öå_èbÀ
;

546 
	`mem£t
(
öå_h™dÀrs
, 0, (intr_handlers));

547 
	`mem£t
(
öå_m≠pögs
, -1, (intr_mappings));

549 
	`__öå_£t_íåõs
();

551 
	`__asm__
("lidà(%0)" ::"p"(
d©a
));

553 
	`öå_ªgi°î
(
INTR_SPURIOUS
, 
__öå_•urious
);

554 
	`öå_ªgi°î
(
INTR_DIVIDE_BY_ZERO
, 
__öå_divide_by_zîo_h™dÀr
);

555 
	`öå_ªgi°î
(
INTR_GPF
, 
__öå_gpf_h™dÀr
);

556 
	`öå_ªgi°î
(
INTR_INVALID_OPCODE
, 
__öå_övÆ_›code_h™dÀr
);

557 
	}
}

559 
	$__öå_£t_íåõs
()

561 
	`__öå_£t_íåy
(0, (
uöçå_t
)&
	`INTR
(0), 
GDT_KERNEL_TEXT
,

562 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

563 
	`__öå_£t_íåy
(1, (
uöçå_t
)&
	`INTR
(1), 
GDT_KERNEL_TEXT
,

564 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

565 
	`__öå_£t_íåy
(2, (
uöçå_t
)&
	`INTR
(2), 
GDT_KERNEL_TEXT
,

566 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

567 
	`__öå_£t_íåy
(3, (
uöçå_t
)&
	`INTR
(3), 
GDT_KERNEL_TEXT
,

568 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

569 
	`__öå_£t_íåy
(4, (
uöçå_t
)&
	`INTR
(4), 
GDT_KERNEL_TEXT
,

570 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

571 
	`__öå_£t_íåy
(5, (
uöçå_t
)&
	`INTR
(5), 
GDT_KERNEL_TEXT
,

572 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

573 
	`__öå_£t_íåy
(6, (
uöçå_t
)&
	`INTR
(6), 
GDT_KERNEL_TEXT
,

574 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

575 
	`__öå_£t_íåy
(7, (
uöçå_t
)&
	`INTR
(7), 
GDT_KERNEL_TEXT
,

576 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

577 
	`__öå_£t_íåy
(8, (
uöçå_t
)&
	`INTR
(8), 
GDT_KERNEL_TEXT
,

578 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

579 
	`__öå_£t_íåy
(9, (
uöçå_t
)&
	`INTR
(9), 
GDT_KERNEL_TEXT
,

580 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

581 
	`__öå_£t_íåy
(10, (
uöçå_t
)&
	`INTR
(10), 
GDT_KERNEL_TEXT
,

582 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

583 
	`__öå_£t_íåy
(11, (
uöçå_t
)&
	`INTR
(11), 
GDT_KERNEL_TEXT
,

584 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

585 
	`__öå_£t_íåy
(12, (
uöçå_t
)&
	`INTR
(12), 
GDT_KERNEL_TEXT
,

586 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

587 
	`__öå_£t_íåy
(13, (
uöçå_t
)&
	`INTR
(13), 
GDT_KERNEL_TEXT
,

588 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

589 
	`__öå_£t_íåy
(14, (
uöçå_t
)&
	`INTR
(14), 
GDT_KERNEL_TEXT
,

590 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

591 
	`__öå_£t_íåy
(15, (
uöçå_t
)&
	`INTR
(15), 
GDT_KERNEL_TEXT
,

592 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

593 
	`__öå_£t_íåy
(16, (
uöçå_t
)&
	`INTR
(16), 
GDT_KERNEL_TEXT
,

594 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

595 
	`__öå_£t_íåy
(17, (
uöçå_t
)&
	`INTR
(17), 
GDT_KERNEL_TEXT
,

596 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

597 
	`__öå_£t_íåy
(18, (
uöçå_t
)&
	`INTR
(18), 
GDT_KERNEL_TEXT
,

598 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

599 
	`__öå_£t_íåy
(19, (
uöçå_t
)&
	`INTR
(19), 
GDT_KERNEL_TEXT
,

600 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

601 
	`__öå_£t_íåy
(20, (
uöçå_t
)&
	`INTR
(20), 
GDT_KERNEL_TEXT
,

602 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

603 
	`__öå_£t_íåy
(21, (
uöçå_t
)&
	`INTR
(21), 
GDT_KERNEL_TEXT
,

604 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

605 
	`__öå_£t_íåy
(22, (
uöçå_t
)&
	`INTR
(22), 
GDT_KERNEL_TEXT
,

606 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

607 
	`__öå_£t_íåy
(23, (
uöçå_t
)&
	`INTR
(23), 
GDT_KERNEL_TEXT
,

608 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

609 
	`__öå_£t_íåy
(24, (
uöçå_t
)&
	`INTR
(24), 
GDT_KERNEL_TEXT
,

610 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

611 
	`__öå_£t_íåy
(25, (
uöçå_t
)&
	`INTR
(25), 
GDT_KERNEL_TEXT
,

612 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

613 
	`__öå_£t_íåy
(26, (
uöçå_t
)&
	`INTR
(26), 
GDT_KERNEL_TEXT
,

614 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

615 
	`__öå_£t_íåy
(27, (
uöçå_t
)&
	`INTR
(27), 
GDT_KERNEL_TEXT
,

616 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

617 
	`__öå_£t_íåy
(28, (
uöçå_t
)&
	`INTR
(28), 
GDT_KERNEL_TEXT
,

618 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

619 
	`__öå_£t_íåy
(29, (
uöçå_t
)&
	`INTR
(29), 
GDT_KERNEL_TEXT
,

620 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

621 
	`__öå_£t_íåy
(30, (
uöçå_t
)&
	`INTR
(30), 
GDT_KERNEL_TEXT
,

622 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

623 
	`__öå_£t_íåy
(31, (
uöçå_t
)&
	`INTR
(31), 
GDT_KERNEL_TEXT
,

624 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

625 
	`__öå_£t_íåy
(32, (
uöçå_t
)&
	`INTR
(32), 
GDT_KERNEL_TEXT
,

626 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

627 
	`__öå_£t_íåy
(33, (
uöçå_t
)&
	`INTR
(33), 
GDT_KERNEL_TEXT
,

628 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

629 
	`__öå_£t_íåy
(34, (
uöçå_t
)&
	`INTR
(34), 
GDT_KERNEL_TEXT
,

630 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

631 
	`__öå_£t_íåy
(35, (
uöçå_t
)&
	`INTR
(35), 
GDT_KERNEL_TEXT
,

632 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

633 
	`__öå_£t_íåy
(36, (
uöçå_t
)&
	`INTR
(36), 
GDT_KERNEL_TEXT
,

634 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

635 
	`__öå_£t_íåy
(37, (
uöçå_t
)&
	`INTR
(37), 
GDT_KERNEL_TEXT
,

636 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

637 
	`__öå_£t_íåy
(38, (
uöçå_t
)&
	`INTR
(38), 
GDT_KERNEL_TEXT
,

638 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

639 
	`__öå_£t_íåy
(39, (
uöçå_t
)&
	`INTR
(39), 
GDT_KERNEL_TEXT
,

640 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

641 
	`__öå_£t_íåy
(40, (
uöçå_t
)&
	`INTR
(40), 
GDT_KERNEL_TEXT
,

642 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

643 
	`__öå_£t_íåy
(41, (
uöçå_t
)&
	`INTR
(41), 
GDT_KERNEL_TEXT
,

644 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

645 
	`__öå_£t_íåy
(42, (
uöçå_t
)&
	`INTR
(42), 
GDT_KERNEL_TEXT
,

646 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

647 
	`__öå_£t_íåy
(43, (
uöçå_t
)&
	`INTR
(43), 
GDT_KERNEL_TEXT
,

648 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

649 
	`__öå_£t_íåy
(44, (
uöçå_t
)&
	`INTR
(44), 
GDT_KERNEL_TEXT
,

650 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

651 
	`__öå_£t_íåy
(45, (
uöçå_t
)&
	`INTR
(45), 
GDT_KERNEL_TEXT
,

652 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

655 
	`__öå_£t_íåy
(

656 46, (
uöçå_t
)&
	`INTR
(46), 
GDT_KERNEL_TEXT
,

657 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_TRAP
 | 
IDT_DESC_RING3
);

659 
	`__öå_£t_íåy
(47, (
uöçå_t
)&
	`INTR
(47), 
GDT_KERNEL_TEXT
,

660 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

661 
	`__öå_£t_íåy
(48, (
uöçå_t
)&
	`INTR
(48), 
GDT_KERNEL_TEXT
,

662 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

663 
	`__öå_£t_íåy
(49, (
uöçå_t
)&
	`INTR
(49), 
GDT_KERNEL_TEXT
,

664 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

665 
	`__öå_£t_íåy
(50, (
uöçå_t
)&
	`INTR
(50), 
GDT_KERNEL_TEXT
,

666 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

667 
	`__öå_£t_íåy
(51, (
uöçå_t
)&
	`INTR
(51), 
GDT_KERNEL_TEXT
,

668 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

669 
	`__öå_£t_íåy
(52, (
uöçå_t
)&
	`INTR
(52), 
GDT_KERNEL_TEXT
,

670 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

671 
	`__öå_£t_íåy
(53, (
uöçå_t
)&
	`INTR
(53), 
GDT_KERNEL_TEXT
,

672 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

673 
	`__öå_£t_íåy
(54, (
uöçå_t
)&
	`INTR
(54), 
GDT_KERNEL_TEXT
,

674 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

675 
	`__öå_£t_íåy
(55, (
uöçå_t
)&
	`INTR
(55), 
GDT_KERNEL_TEXT
,

676 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

677 
	`__öå_£t_íåy
(56, (
uöçå_t
)&
	`INTR
(56), 
GDT_KERNEL_TEXT
,

678 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

679 
	`__öå_£t_íåy
(57, (
uöçå_t
)&
	`INTR
(57), 
GDT_KERNEL_TEXT
,

680 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

681 
	`__öå_£t_íåy
(58, (
uöçå_t
)&
	`INTR
(58), 
GDT_KERNEL_TEXT
,

682 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

683 
	`__öå_£t_íåy
(59, (
uöçå_t
)&
	`INTR
(59), 
GDT_KERNEL_TEXT
,

684 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

685 
	`__öå_£t_íåy
(60, (
uöçå_t
)&
	`INTR
(60), 
GDT_KERNEL_TEXT
,

686 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

687 
	`__öå_£t_íåy
(61, (
uöçå_t
)&
	`INTR
(61), 
GDT_KERNEL_TEXT
,

688 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

689 
	`__öå_£t_íåy
(62, (
uöçå_t
)&
	`INTR
(62), 
GDT_KERNEL_TEXT
,

690 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

691 
	`__öå_£t_íåy
(63, (
uöçå_t
)&
	`INTR
(63), 
GDT_KERNEL_TEXT
,

692 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

693 
	`__öå_£t_íåy
(64, (
uöçå_t
)&
	`INTR
(64), 
GDT_KERNEL_TEXT
,

694 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

695 
	`__öå_£t_íåy
(65, (
uöçå_t
)&
	`INTR
(65), 
GDT_KERNEL_TEXT
,

696 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

697 
	`__öå_£t_íåy
(66, (
uöçå_t
)&
	`INTR
(66), 
GDT_KERNEL_TEXT
,

698 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

699 
	`__öå_£t_íåy
(67, (
uöçå_t
)&
	`INTR
(67), 
GDT_KERNEL_TEXT
,

700 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

701 
	`__öå_£t_íåy
(68, (
uöçå_t
)&
	`INTR
(68), 
GDT_KERNEL_TEXT
,

702 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

703 
	`__öå_£t_íåy
(69, (
uöçå_t
)&
	`INTR
(69), 
GDT_KERNEL_TEXT
,

704 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

705 
	`__öå_£t_íåy
(60, (
uöçå_t
)&
	`INTR
(70), 
GDT_KERNEL_TEXT
,

706 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

707 
	`__öå_£t_íåy
(71, (
uöçå_t
)&
	`INTR
(71), 
GDT_KERNEL_TEXT
,

708 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

709 
	`__öå_£t_íåy
(72, (
uöçå_t
)&
	`INTR
(72), 
GDT_KERNEL_TEXT
,

710 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

711 
	`__öå_£t_íåy
(73, (
uöçå_t
)&
	`INTR
(73), 
GDT_KERNEL_TEXT
,

712 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

713 
	`__öå_£t_íåy
(74, (
uöçå_t
)&
	`INTR
(74), 
GDT_KERNEL_TEXT
,

714 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

715 
	`__öå_£t_íåy
(75, (
uöçå_t
)&
	`INTR
(75), 
GDT_KERNEL_TEXT
,

716 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

717 
	`__öå_£t_íåy
(76, (
uöçå_t
)&
	`INTR
(76), 
GDT_KERNEL_TEXT
,

718 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

719 
	`__öå_£t_íåy
(77, (
uöçå_t
)&
	`INTR
(77), 
GDT_KERNEL_TEXT
,

720 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

721 
	`__öå_£t_íåy
(78, (
uöçå_t
)&
	`INTR
(78), 
GDT_KERNEL_TEXT
,

722 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

723 
	`__öå_£t_íåy
(79, (
uöçå_t
)&
	`INTR
(79), 
GDT_KERNEL_TEXT
,

724 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

725 
	`__öå_£t_íåy
(70, (
uöçå_t
)&
	`INTR
(80), 
GDT_KERNEL_TEXT
,

726 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

727 
	`__öå_£t_íåy
(81, (
uöçå_t
)&
	`INTR
(81), 
GDT_KERNEL_TEXT
,

728 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

729 
	`__öå_£t_íåy
(82, (
uöçå_t
)&
	`INTR
(82), 
GDT_KERNEL_TEXT
,

730 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

731 
	`__öå_£t_íåy
(83, (
uöçå_t
)&
	`INTR
(83), 
GDT_KERNEL_TEXT
,

732 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

733 
	`__öå_£t_íåy
(84, (
uöçå_t
)&
	`INTR
(84), 
GDT_KERNEL_TEXT
,

734 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

735 
	`__öå_£t_íåy
(85, (
uöçå_t
)&
	`INTR
(85), 
GDT_KERNEL_TEXT
,

736 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

737 
	`__öå_£t_íåy
(86, (
uöçå_t
)&
	`INTR
(86), 
GDT_KERNEL_TEXT
,

738 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

739 
	`__öå_£t_íåy
(87, (
uöçå_t
)&
	`INTR
(87), 
GDT_KERNEL_TEXT
,

740 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

741 
	`__öå_£t_íåy
(88, (
uöçå_t
)&
	`INTR
(88), 
GDT_KERNEL_TEXT
,

742 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

743 
	`__öå_£t_íåy
(89, (
uöçå_t
)&
	`INTR
(89), 
GDT_KERNEL_TEXT
,

744 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

745 
	`__öå_£t_íåy
(90, (
uöçå_t
)&
	`INTR
(90), 
GDT_KERNEL_TEXT
,

746 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

747 
	`__öå_£t_íåy
(91, (
uöçå_t
)&
	`INTR
(91), 
GDT_KERNEL_TEXT
,

748 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

749 
	`__öå_£t_íåy
(92, (
uöçå_t
)&
	`INTR
(92), 
GDT_KERNEL_TEXT
,

750 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

751 
	`__öå_£t_íåy
(93, (
uöçå_t
)&
	`INTR
(93), 
GDT_KERNEL_TEXT
,

752 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

753 
	`__öå_£t_íåy
(94, (
uöçå_t
)&
	`INTR
(94), 
GDT_KERNEL_TEXT
,

754 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

755 
	`__öå_£t_íåy
(95, (
uöçå_t
)&
	`INTR
(95), 
GDT_KERNEL_TEXT
,

756 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

757 
	`__öå_£t_íåy
(96, (
uöçå_t
)&
	`INTR
(96), 
GDT_KERNEL_TEXT
,

758 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

759 
	`__öå_£t_íåy
(97, (
uöçå_t
)&
	`INTR
(97), 
GDT_KERNEL_TEXT
,

760 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

761 
	`__öå_£t_íåy
(98, (
uöçå_t
)&
	`INTR
(98), 
GDT_KERNEL_TEXT
,

762 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

763 
	`__öå_£t_íåy
(99, (
uöçå_t
)&
	`INTR
(99), 
GDT_KERNEL_TEXT
,

764 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

765 
	`__öå_£t_íåy
(100, (
uöçå_t
)&
	`INTR
(100), 
GDT_KERNEL_TEXT
,

766 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

767 
	`__öå_£t_íåy
(101, (
uöçå_t
)&
	`INTR
(101), 
GDT_KERNEL_TEXT
,

768 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

769 
	`__öå_£t_íåy
(102, (
uöçå_t
)&
	`INTR
(102), 
GDT_KERNEL_TEXT
,

770 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

771 
	`__öå_£t_íåy
(103, (
uöçå_t
)&
	`INTR
(103), 
GDT_KERNEL_TEXT
,

772 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

773 
	`__öå_£t_íåy
(104, (
uöçå_t
)&
	`INTR
(104), 
GDT_KERNEL_TEXT
,

774 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

775 
	`__öå_£t_íåy
(105, (
uöçå_t
)&
	`INTR
(105), 
GDT_KERNEL_TEXT
,

776 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

777 
	`__öå_£t_íåy
(106, (
uöçå_t
)&
	`INTR
(106), 
GDT_KERNEL_TEXT
,

778 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

779 
	`__öå_£t_íåy
(107, (
uöçå_t
)&
	`INTR
(107), 
GDT_KERNEL_TEXT
,

780 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

781 
	`__öå_£t_íåy
(108, (
uöçå_t
)&
	`INTR
(108), 
GDT_KERNEL_TEXT
,

782 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

783 
	`__öå_£t_íåy
(109, (
uöçå_t
)&
	`INTR
(109), 
GDT_KERNEL_TEXT
,

784 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

785 
	`__öå_£t_íåy
(110, (
uöçå_t
)&
	`INTR
(110), 
GDT_KERNEL_TEXT
,

786 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

787 
	`__öå_£t_íåy
(111, (
uöçå_t
)&
	`INTR
(111), 
GDT_KERNEL_TEXT
,

788 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

789 
	`__öå_£t_íåy
(112, (
uöçå_t
)&
	`INTR
(112), 
GDT_KERNEL_TEXT
,

790 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

791 
	`__öå_£t_íåy
(113, (
uöçå_t
)&
	`INTR
(113), 
GDT_KERNEL_TEXT
,

792 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

793 
	`__öå_£t_íåy
(114, (
uöçå_t
)&
	`INTR
(114), 
GDT_KERNEL_TEXT
,

794 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

795 
	`__öå_£t_íåy
(115, (
uöçå_t
)&
	`INTR
(115), 
GDT_KERNEL_TEXT
,

796 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

797 
	`__öå_£t_íåy
(116, (
uöçå_t
)&
	`INTR
(116), 
GDT_KERNEL_TEXT
,

798 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

799 
	`__öå_£t_íåy
(117, (
uöçå_t
)&
	`INTR
(117), 
GDT_KERNEL_TEXT
,

800 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

801 
	`__öå_£t_íåy
(118, (
uöçå_t
)&
	`INTR
(118), 
GDT_KERNEL_TEXT
,

802 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

803 
	`__öå_£t_íåy
(119, (
uöçå_t
)&
	`INTR
(119), 
GDT_KERNEL_TEXT
,

804 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

805 
	`__öå_£t_íåy
(120, (
uöçå_t
)&
	`INTR
(120), 
GDT_KERNEL_TEXT
,

806 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

807 
	`__öå_£t_íåy
(121, (
uöçå_t
)&
	`INTR
(121), 
GDT_KERNEL_TEXT
,

808 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

809 
	`__öå_£t_íåy
(122, (
uöçå_t
)&
	`INTR
(122), 
GDT_KERNEL_TEXT
,

810 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

811 
	`__öå_£t_íåy
(123, (
uöçå_t
)&
	`INTR
(123), 
GDT_KERNEL_TEXT
,

812 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

813 
	`__öå_£t_íåy
(124, (
uöçå_t
)&
	`INTR
(124), 
GDT_KERNEL_TEXT
,

814 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

815 
	`__öå_£t_íåy
(125, (
uöçå_t
)&
	`INTR
(125), 
GDT_KERNEL_TEXT
,

816 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

817 
	`__öå_£t_íåy
(126, (
uöçå_t
)&
	`INTR
(126), 
GDT_KERNEL_TEXT
,

818 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

819 
	`__öå_£t_íåy
(127, (
uöçå_t
)&
	`INTR
(127), 
GDT_KERNEL_TEXT
,

820 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

821 
	`__öå_£t_íåy
(128, (
uöçå_t
)&
	`INTR
(128), 
GDT_KERNEL_TEXT
,

822 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

823 
	`__öå_£t_íåy
(129, (
uöçå_t
)&
	`INTR
(129), 
GDT_KERNEL_TEXT
,

824 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

825 
	`__öå_£t_íåy
(130, (
uöçå_t
)&
	`INTR
(130), 
GDT_KERNEL_TEXT
,

826 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

827 
	`__öå_£t_íåy
(131, (
uöçå_t
)&
	`INTR
(131), 
GDT_KERNEL_TEXT
,

828 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

829 
	`__öå_£t_íåy
(132, (
uöçå_t
)&
	`INTR
(132), 
GDT_KERNEL_TEXT
,

830 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

831 
	`__öå_£t_íåy
(133, (
uöçå_t
)&
	`INTR
(133), 
GDT_KERNEL_TEXT
,

832 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

833 
	`__öå_£t_íåy
(134, (
uöçå_t
)&
	`INTR
(134), 
GDT_KERNEL_TEXT
,

834 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

835 
	`__öå_£t_íåy
(135, (
uöçå_t
)&
	`INTR
(135), 
GDT_KERNEL_TEXT
,

836 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

837 
	`__öå_£t_íåy
(136, (
uöçå_t
)&
	`INTR
(136), 
GDT_KERNEL_TEXT
,

838 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

839 
	`__öå_£t_íåy
(137, (
uöçå_t
)&
	`INTR
(137), 
GDT_KERNEL_TEXT
,

840 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

841 
	`__öå_£t_íåy
(138, (
uöçå_t
)&
	`INTR
(138), 
GDT_KERNEL_TEXT
,

842 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

843 
	`__öå_£t_íåy
(139, (
uöçå_t
)&
	`INTR
(139), 
GDT_KERNEL_TEXT
,

844 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

845 
	`__öå_£t_íåy
(140, (
uöçå_t
)&
	`INTR
(140), 
GDT_KERNEL_TEXT
,

846 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

847 
	`__öå_£t_íåy
(141, (
uöçå_t
)&
	`INTR
(141), 
GDT_KERNEL_TEXT
,

848 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

849 
	`__öå_£t_íåy
(142, (
uöçå_t
)&
	`INTR
(142), 
GDT_KERNEL_TEXT
,

850 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

851 
	`__öå_£t_íåy
(143, (
uöçå_t
)&
	`INTR
(143), 
GDT_KERNEL_TEXT
,

852 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

853 
	`__öå_£t_íåy
(144, (
uöçå_t
)&
	`INTR
(144), 
GDT_KERNEL_TEXT
,

854 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

855 
	`__öå_£t_íåy
(145, (
uöçå_t
)&
	`INTR
(145), 
GDT_KERNEL_TEXT
,

856 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

857 
	`__öå_£t_íåy
(146, (
uöçå_t
)&
	`INTR
(146), 
GDT_KERNEL_TEXT
,

858 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

859 
	`__öå_£t_íåy
(147, (
uöçå_t
)&
	`INTR
(147), 
GDT_KERNEL_TEXT
,

860 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

861 
	`__öå_£t_íåy
(148, (
uöçå_t
)&
	`INTR
(148), 
GDT_KERNEL_TEXT
,

862 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

863 
	`__öå_£t_íåy
(149, (
uöçå_t
)&
	`INTR
(149), 
GDT_KERNEL_TEXT
,

864 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

865 
	`__öå_£t_íåy
(150, (
uöçå_t
)&
	`INTR
(150), 
GDT_KERNEL_TEXT
,

866 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

867 
	`__öå_£t_íåy
(151, (
uöçå_t
)&
	`INTR
(151), 
GDT_KERNEL_TEXT
,

868 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

869 
	`__öå_£t_íåy
(152, (
uöçå_t
)&
	`INTR
(152), 
GDT_KERNEL_TEXT
,

870 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

871 
	`__öå_£t_íåy
(153, (
uöçå_t
)&
	`INTR
(153), 
GDT_KERNEL_TEXT
,

872 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

873 
	`__öå_£t_íåy
(154, (
uöçå_t
)&
	`INTR
(154), 
GDT_KERNEL_TEXT
,

874 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

875 
	`__öå_£t_íåy
(155, (
uöçå_t
)&
	`INTR
(155), 
GDT_KERNEL_TEXT
,

876 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

877 
	`__öå_£t_íåy
(156, (
uöçå_t
)&
	`INTR
(156), 
GDT_KERNEL_TEXT
,

878 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

879 
	`__öå_£t_íåy
(157, (
uöçå_t
)&
	`INTR
(157), 
GDT_KERNEL_TEXT
,

880 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

881 
	`__öå_£t_íåy
(158, (
uöçå_t
)&
	`INTR
(158), 
GDT_KERNEL_TEXT
,

882 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

883 
	`__öå_£t_íåy
(159, (
uöçå_t
)&
	`INTR
(159), 
GDT_KERNEL_TEXT
,

884 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

885 
	`__öå_£t_íåy
(160, (
uöçå_t
)&
	`INTR
(160), 
GDT_KERNEL_TEXT
,

886 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

887 
	`__öå_£t_íåy
(161, (
uöçå_t
)&
	`INTR
(161), 
GDT_KERNEL_TEXT
,

888 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

889 
	`__öå_£t_íåy
(162, (
uöçå_t
)&
	`INTR
(162), 
GDT_KERNEL_TEXT
,

890 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

891 
	`__öå_£t_íåy
(163, (
uöçå_t
)&
	`INTR
(163), 
GDT_KERNEL_TEXT
,

892 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

893 
	`__öå_£t_íåy
(164, (
uöçå_t
)&
	`INTR
(164), 
GDT_KERNEL_TEXT
,

894 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

895 
	`__öå_£t_íåy
(165, (
uöçå_t
)&
	`INTR
(165), 
GDT_KERNEL_TEXT
,

896 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

897 
	`__öå_£t_íåy
(166, (
uöçå_t
)&
	`INTR
(166), 
GDT_KERNEL_TEXT
,

898 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

899 
	`__öå_£t_íåy
(167, (
uöçå_t
)&
	`INTR
(167), 
GDT_KERNEL_TEXT
,

900 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

901 
	`__öå_£t_íåy
(168, (
uöçå_t
)&
	`INTR
(168), 
GDT_KERNEL_TEXT
,

902 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

903 
	`__öå_£t_íåy
(169, (
uöçå_t
)&
	`INTR
(169), 
GDT_KERNEL_TEXT
,

904 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

905 
	`__öå_£t_íåy
(160, (
uöçå_t
)&
	`INTR
(170), 
GDT_KERNEL_TEXT
,

906 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

907 
	`__öå_£t_íåy
(171, (
uöçå_t
)&
	`INTR
(171), 
GDT_KERNEL_TEXT
,

908 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

909 
	`__öå_£t_íåy
(172, (
uöçå_t
)&
	`INTR
(172), 
GDT_KERNEL_TEXT
,

910 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

911 
	`__öå_£t_íåy
(173, (
uöçå_t
)&
	`INTR
(173), 
GDT_KERNEL_TEXT
,

912 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

913 
	`__öå_£t_íåy
(174, (
uöçå_t
)&
	`INTR
(174), 
GDT_KERNEL_TEXT
,

914 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

915 
	`__öå_£t_íåy
(175, (
uöçå_t
)&
	`INTR
(175), 
GDT_KERNEL_TEXT
,

916 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

917 
	`__öå_£t_íåy
(176, (
uöçå_t
)&
	`INTR
(176), 
GDT_KERNEL_TEXT
,

918 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

919 
	`__öå_£t_íåy
(177, (
uöçå_t
)&
	`INTR
(177), 
GDT_KERNEL_TEXT
,

920 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

921 
	`__öå_£t_íåy
(178, (
uöçå_t
)&
	`INTR
(178), 
GDT_KERNEL_TEXT
,

922 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

923 
	`__öå_£t_íåy
(179, (
uöçå_t
)&
	`INTR
(179), 
GDT_KERNEL_TEXT
,

924 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

925 
	`__öå_£t_íåy
(170, (
uöçå_t
)&
	`INTR
(180), 
GDT_KERNEL_TEXT
,

926 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

927 
	`__öå_£t_íåy
(181, (
uöçå_t
)&
	`INTR
(181), 
GDT_KERNEL_TEXT
,

928 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

929 
	`__öå_£t_íåy
(182, (
uöçå_t
)&
	`INTR
(182), 
GDT_KERNEL_TEXT
,

930 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

931 
	`__öå_£t_íåy
(183, (
uöçå_t
)&
	`INTR
(183), 
GDT_KERNEL_TEXT
,

932 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

933 
	`__öå_£t_íåy
(184, (
uöçå_t
)&
	`INTR
(184), 
GDT_KERNEL_TEXT
,

934 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

935 
	`__öå_£t_íåy
(185, (
uöçå_t
)&
	`INTR
(185), 
GDT_KERNEL_TEXT
,

936 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

937 
	`__öå_£t_íåy
(186, (
uöçå_t
)&
	`INTR
(186), 
GDT_KERNEL_TEXT
,

938 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

939 
	`__öå_£t_íåy
(187, (
uöçå_t
)&
	`INTR
(187), 
GDT_KERNEL_TEXT
,

940 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

941 
	`__öå_£t_íåy
(188, (
uöçå_t
)&
	`INTR
(188), 
GDT_KERNEL_TEXT
,

942 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

943 
	`__öå_£t_íåy
(189, (
uöçå_t
)&
	`INTR
(189), 
GDT_KERNEL_TEXT
,

944 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

945 
	`__öå_£t_íåy
(190, (
uöçå_t
)&
	`INTR
(190), 
GDT_KERNEL_TEXT
,

946 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

947 
	`__öå_£t_íåy
(191, (
uöçå_t
)&
	`INTR
(191), 
GDT_KERNEL_TEXT
,

948 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

949 
	`__öå_£t_íåy
(192, (
uöçå_t
)&
	`INTR
(192), 
GDT_KERNEL_TEXT
,

950 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

951 
	`__öå_£t_íåy
(193, (
uöçå_t
)&
	`INTR
(193), 
GDT_KERNEL_TEXT
,

952 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

953 
	`__öå_£t_íåy
(194, (
uöçå_t
)&
	`INTR
(194), 
GDT_KERNEL_TEXT
,

954 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

955 
	`__öå_£t_íåy
(195, (
uöçå_t
)&
	`INTR
(195), 
GDT_KERNEL_TEXT
,

956 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

957 
	`__öå_£t_íåy
(196, (
uöçå_t
)&
	`INTR
(196), 
GDT_KERNEL_TEXT
,

958 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

959 
	`__öå_£t_íåy
(197, (
uöçå_t
)&
	`INTR
(197), 
GDT_KERNEL_TEXT
,

960 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

961 
	`__öå_£t_íåy
(198, (
uöçå_t
)&
	`INTR
(198), 
GDT_KERNEL_TEXT
,

962 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

963 
	`__öå_£t_íåy
(199, (
uöçå_t
)&
	`INTR
(199), 
GDT_KERNEL_TEXT
,

964 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

965 
	`__öå_£t_íåy
(200, (
uöçå_t
)&
	`INTR
(200), 
GDT_KERNEL_TEXT
,

966 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

967 
	`__öå_£t_íåy
(201, (
uöçå_t
)&
	`INTR
(201), 
GDT_KERNEL_TEXT
,

968 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

969 
	`__öå_£t_íåy
(202, (
uöçå_t
)&
	`INTR
(202), 
GDT_KERNEL_TEXT
,

970 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

971 
	`__öå_£t_íåy
(203, (
uöçå_t
)&
	`INTR
(203), 
GDT_KERNEL_TEXT
,

972 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

973 
	`__öå_£t_íåy
(204, (
uöçå_t
)&
	`INTR
(204), 
GDT_KERNEL_TEXT
,

974 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

975 
	`__öå_£t_íåy
(205, (
uöçå_t
)&
	`INTR
(205), 
GDT_KERNEL_TEXT
,

976 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

977 
	`__öå_£t_íåy
(206, (
uöçå_t
)&
	`INTR
(206), 
GDT_KERNEL_TEXT
,

978 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

979 
	`__öå_£t_íåy
(207, (
uöçå_t
)&
	`INTR
(207), 
GDT_KERNEL_TEXT
,

980 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

981 
	`__öå_£t_íåy
(208, (
uöçå_t
)&
	`INTR
(208), 
GDT_KERNEL_TEXT
,

982 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

983 
	`__öå_£t_íåy
(209, (
uöçå_t
)&
	`INTR
(209), 
GDT_KERNEL_TEXT
,

984 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

985 
	`__öå_£t_íåy
(210, (
uöçå_t
)&
	`INTR
(210), 
GDT_KERNEL_TEXT
,

986 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

987 
	`__öå_£t_íåy
(211, (
uöçå_t
)&
	`INTR
(211), 
GDT_KERNEL_TEXT
,

988 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

989 
	`__öå_£t_íåy
(212, (
uöçå_t
)&
	`INTR
(212), 
GDT_KERNEL_TEXT
,

990 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

991 
	`__öå_£t_íåy
(213, (
uöçå_t
)&
	`INTR
(213), 
GDT_KERNEL_TEXT
,

992 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

993 
	`__öå_£t_íåy
(214, (
uöçå_t
)&
	`INTR
(214), 
GDT_KERNEL_TEXT
,

994 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

995 
	`__öå_£t_íåy
(215, (
uöçå_t
)&
	`INTR
(215), 
GDT_KERNEL_TEXT
,

996 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

997 
	`__öå_£t_íåy
(216, (
uöçå_t
)&
	`INTR
(216), 
GDT_KERNEL_TEXT
,

998 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

999 
	`__öå_£t_íåy
(217, (
uöçå_t
)&
	`INTR
(217), 
GDT_KERNEL_TEXT
,

1000 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1001 
	`__öå_£t_íåy
(218, (
uöçå_t
)&
	`INTR
(218), 
GDT_KERNEL_TEXT
,

1002 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1003 
	`__öå_£t_íåy
(219, (
uöçå_t
)&
	`INTR
(219), 
GDT_KERNEL_TEXT
,

1004 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1005 
	`__öå_£t_íåy
(220, (
uöçå_t
)&
	`INTR
(220), 
GDT_KERNEL_TEXT
,

1006 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1007 
	`__öå_£t_íåy
(221, (
uöçå_t
)&
	`INTR
(221), 
GDT_KERNEL_TEXT
,

1008 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1009 
	`__öå_£t_íåy
(222, (
uöçå_t
)&
	`INTR
(222), 
GDT_KERNEL_TEXT
,

1010 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1011 
	`__öå_£t_íåy
(223, (
uöçå_t
)&
	`INTR
(223), 
GDT_KERNEL_TEXT
,

1012 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1013 
	`__öå_£t_íåy
(224, (
uöçå_t
)&
	`INTR
(224), 
GDT_KERNEL_TEXT
,

1014 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1015 
	`__öå_£t_íåy
(225, (
uöçå_t
)&
	`INTR
(225), 
GDT_KERNEL_TEXT
,

1016 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1017 
	`__öå_£t_íåy
(226, (
uöçå_t
)&
	`INTR
(226), 
GDT_KERNEL_TEXT
,

1018 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1019 
	`__öå_£t_íåy
(227, (
uöçå_t
)&
	`INTR
(227), 
GDT_KERNEL_TEXT
,

1020 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1021 
	`__öå_£t_íåy
(228, (
uöçå_t
)&
	`INTR
(228), 
GDT_KERNEL_TEXT
,

1022 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1023 
	`__öå_£t_íåy
(229, (
uöçå_t
)&
	`INTR
(229), 
GDT_KERNEL_TEXT
,

1024 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1025 
	`__öå_£t_íåy
(230, (
uöçå_t
)&
	`INTR
(230), 
GDT_KERNEL_TEXT
,

1026 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1027 
	`__öå_£t_íåy
(231, (
uöçå_t
)&
	`INTR
(231), 
GDT_KERNEL_TEXT
,

1028 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1029 
	`__öå_£t_íåy
(232, (
uöçå_t
)&
	`INTR
(232), 
GDT_KERNEL_TEXT
,

1030 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1031 
	`__öå_£t_íåy
(233, (
uöçå_t
)&
	`INTR
(233), 
GDT_KERNEL_TEXT
,

1032 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1033 
	`__öå_£t_íåy
(234, (
uöçå_t
)&
	`INTR
(234), 
GDT_KERNEL_TEXT
,

1034 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1035 
	`__öå_£t_íåy
(235, (
uöçå_t
)&
	`INTR
(235), 
GDT_KERNEL_TEXT
,

1036 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1037 
	`__öå_£t_íåy
(236, (
uöçå_t
)&
	`INTR
(236), 
GDT_KERNEL_TEXT
,

1038 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1039 
	`__öå_£t_íåy
(237, (
uöçå_t
)&
	`INTR
(237), 
GDT_KERNEL_TEXT
,

1040 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1041 
	`__öå_£t_íåy
(238, (
uöçå_t
)&
	`INTR
(238), 
GDT_KERNEL_TEXT
,

1042 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1043 
	`__öå_£t_íåy
(239, (
uöçå_t
)&
	`INTR
(239), 
GDT_KERNEL_TEXT
,

1044 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1045 
	`__öå_£t_íåy
(240, (
uöçå_t
)&
	`INTR
(240), 
GDT_KERNEL_TEXT
,

1046 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1047 
	`__öå_£t_íåy
(241, (
uöçå_t
)&
	`INTR
(241), 
GDT_KERNEL_TEXT
,

1048 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1049 
	`__öå_£t_íåy
(242, (
uöçå_t
)&
	`INTR
(242), 
GDT_KERNEL_TEXT
,

1050 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1051 
	`__öå_£t_íåy
(243, (
uöçå_t
)&
	`INTR
(243), 
GDT_KERNEL_TEXT
,

1052 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1053 
	`__öå_£t_íåy
(244, (
uöçå_t
)&
	`INTR
(244), 
GDT_KERNEL_TEXT
,

1054 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1055 
	`__öå_£t_íåy
(245, (
uöçå_t
)&
	`INTR
(245), 
GDT_KERNEL_TEXT
,

1056 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1057 
	`__öå_£t_íåy
(246, (
uöçå_t
)&
	`INTR
(246), 
GDT_KERNEL_TEXT
,

1058 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1059 
	`__öå_£t_íåy
(247, (
uöçå_t
)&
	`INTR
(247), 
GDT_KERNEL_TEXT
,

1060 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1061 
	`__öå_£t_íåy
(248, (
uöçå_t
)&
	`INTR
(248), 
GDT_KERNEL_TEXT
,

1062 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1063 
	`__öå_£t_íåy
(249, (
uöçå_t
)&
	`INTR
(249), 
GDT_KERNEL_TEXT
,

1064 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1065 
	`__öå_£t_íåy
(250, (
uöçå_t
)&
	`INTR
(250), 
GDT_KERNEL_TEXT
,

1066 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1067 
	`__öå_£t_íåy
(251, (
uöçå_t
)&
	`INTR
(251), 
GDT_KERNEL_TEXT
,

1068 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1069 
	`__öå_£t_íåy
(252, (
uöçå_t
)&
	`INTR
(252), 
GDT_KERNEL_TEXT
,

1070 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1071 
	`__öå_£t_íåy
(253, (
uöçå_t
)&
	`INTR
(253), 
GDT_KERNEL_TEXT
,

1072 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1073 
	`__öå_£t_íåy
(254, (
uöçå_t
)&
	`INTR
(254), 
GDT_KERNEL_TEXT
,

1074 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1075 
	`__öå_£t_íåy
(255, (
uöçå_t
)&
	`INTR
(255), 
GDT_KERNEL_TEXT
,

1076 
IDT_DESC_PRESENT
 | 
IDT_DESC_BIT32
 | 
IDT_DESC_RING0
);

1077 
	}
}

	@kernel/main/kmain.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"ty≥s.h
"

4 
	~<≠i/exec.h
>

5 
	~<drivîs/s¸ìn.h
>

6 
	~<drivîs/ây/ây.h
>

7 
	~<drivîs/ây/vãrmöÆ.h
>

8 
	~<maö/io.h
>

9 
	~<mm/mm.h
>

10 
	~<mm/¶ab.h
>

11 
	~<ã°/kshñl/kshñl.h
>

12 
	~<utû/time.h
>

13 
	~<vm/™⁄.h
>

14 
	~<vm/shadow.h
>

16 
	~"utû/debug.h
"

17 
	~"utû/gdb.h
"

18 
	~"utû/¥ötf.h
"

19 
	~"utû/°rög.h
"

21 
	~"maö/a˝i.h
"

22 
	~"maö/≠ic.h
"

23 
	~"maö/öôs.h
"

25 
	~"drivîs/dev.h
"

26 
	~"drivîs/pcõ.h
"

28 
	~"≠i/sysˇŒ.h
"

30 
	~"fs/f˙é.h
"

31 
	~"fs/vfs.h
"

32 
	~"fs/vfs_sysˇŒ.h
"

33 
	~"fs/vnode.h
"

35 
	~"ã°/drivî°e°.h
"

37 
	~"utû/båì.h
"

39 
	$GDB_DEFINE_HOOK
(
boŸ
)

41 
	$GDB_DEFINE_HOOK
(
öôülized
)

43 
	$GDB_DEFINE_HOOK
(
shutdown
)

45 
	`öô¥oc_°¨t
();

47 (*
	töô_func_t
)();

48 
öô_func_t
 
öô_funcs
[] = {

49 
dbg_öô
,

50 
öå_öô
,

51 
∑ge_öô
,

52 
±_öô
,

53 
a˝i_öô
,

54 
≠ic_öô
,

55 
c‹e_öô
,

56 
¶ab_öô
,

57 
p‰ame_öô
,

58 
pci_öô
,

59 
vga_öô
,

60 #ifde‡
__VM__


61 
™⁄_öô
,

62 
shadow_öô
,

64 
vmm≠_öô
,

65 
¥oc_öô
,

66 
kthªad_öô
,

67 #ifde‡
__DRIVERS__


68 
ch¨dev_öô
,

69 
blockdev_öô
,

71 
kshñl_öô
,

72 
fûe_öô
,

73 
pùe_öô
,

74 
sysˇŒ_öô
,

75 
ñf64_öô
,

77 
¥oc_idÀ¥oc_öô
,

78 
båì_öô
,

79 
	}
};

85 
	$kmaö
()

87 
	`GDB_CALL_HOOK
(
boŸ
);

89 
size_t
 
i
 = 0; i < (
öô_funcs
) / (init_funcs[0]); i++)

90 
öô_funcs
[
i
]();

92 
	`öô¥oc_°¨t
();

93 
	`∑nic
("\nReturnedÅo kmain()\n");

94 
	}
}

103 
	$make_devi˚s
()

105 
°©us
 = 
	`do_mkdú
("/dev");

106 
	`KASSERT
(!
°©us
 || sètu†=-
EEXIST
);

108 
°©us
 = 
	`do_mknod
("/dev/nuŒ", 
S_IFCHR
, 
MEM_NULL_DEVID
);

109 
	`KASSERT
(!
°©us
 || sètu†=-
EEXIST
);

110 
°©us
 = 
	`do_mknod
("/dev/zîo", 
S_IFCHR
, 
MEM_ZERO_DEVID
);

111 
	`KASSERT
(!
°©us
 || sètu†=-
EEXIST
);

113 
∑th
[32] = {0};

114 
i
 = 0; i < 
__NTERMS__
; i++)

116 
	`¢¥ötf
(
∑th
, ’©h), "/dev/ây%ld", 
i
);

117 
	`dbg
(
DBG_INIT
, "Cª©ögÅty mknod wôhÖ©h %s\n", 
∑th
);

118 
°©us
 = 
	`do_mknod
(
∑th
, 
S_IFCHR
, 
	`MKDEVID
(
TTY_MAJOR
, 
i
));

119 
	`KASSERT
(!
°©us
 || sètu†=-
EEXIST
);

122 
i
 = 0; i < 
__NDISKS__
; i++)

124 
	`¢¥ötf
(
∑th
, ’©h), "/dev/hda%ld", 
i
);

125 
	`dbg
(
DBG_INIT
, "Cª©ög disk mknod wôhÖ©h %s\n", 
∑th
);

126 
°©us
 = 
	`do_mknod
(
∑th
, 
S_IFBLK
, 
	`MKDEVID
(
DISK_MAJOR
, 
i
));

127 
	`KASSERT
(!
°©us
 || sètu†=-
EEXIST
);

129 
	}
}

154 *
	$öô¥oc_run
(
¨g1
, *
¨g2
)

156 #ifde‡
__VFS__


157 
	`dbg
(
DBG_INIT
, "Initializing VFS...\n");

158 
	`vfs_öô
();

159 
	`make_devi˚s
();

163 
°©us
;

165 #ifde‡
__VM__


166 
	`do_›í
("/dev/ây0", 
O_RDONLY
);

167 
	`do_›í
("/dev/ây0", 
O_WRONLY
);

168 
	`do_›í
("/dev/ây0", 
O_WRONLY
);

170 *c⁄° 
¨gvec
[] = {
NULL
};

171 *c⁄° 
ívvec
[] = {
NULL
};

172 
	`kî√l_execve
("/sbö/öô", 
¨gvec
, 
ívvec
);

174 #ñi‡
deföed
 
__DRIVERS__


175 #i‚de‡
__S5FS__


178 
	`drivî°e°_maö
(0, 
NULL
);

181 
«me
[32] = {0};

182 
i
 = 0; i < 
__NTERMS__
; i++)

184 
	`¢¥ötf
(
«me
, “ame), "kshñl%ld", 
i
);

185 
¥oc_t
 *
¥oc
 = 
	`¥oc_¸óã
("ksh");

186 
	`KASSERT
(
¥oc
);

187 
kthªad_t
 *
thªad
 = 
	`kthªad_¸óã
(
¥oc
, 
kshñl_¥oc_run
, 
i
, 
NULL
);

188 
	`KASSERT
(
thªad
);

189 
	`sched_make_ru¬abÀ
(
thªad
);

193 
	`do_waôpid
(-1, &
°©us
, 0Ë!-
ECHILD
)

196 #ifde‡
__VFS__


198 
	`vput
(&
cuΩroc
->
p_cwd
);

202  
NULL
;

203 
	}
}

217 
	$öô¥oc_°¨t
()

220 
	`dbg
(
DBG_INIT
, "Creating initÖroc\n");

222 
¥oc_t
 *
¥oc
 = 
	`¥oc_¸óã
("init");

223 
	`KASSERT
(
¥oc
 &&Öroc->
p_pid
 =
PID_INIT
);

224 
kthªad_t
 *
thªad
 = 
	`kthªad_¸óã
(
¥oc
, 
öô¥oc_run
, 0, 
NULL
);

225 
	`KASSERT
(
thªad
);

227 
	`sched_make_ru¬abÀ
(
thªad
);

229 
	`KASSERT
(!
	`öå_íabÀd
());

230 
	`¥ìm±i⁄_dißbÀ
();

232 
	`c⁄ãxt_make_a˘ive
(&
curc‹e
.
kc_˘x
);

233 
	`∑nic
("\nReturnedÅo initproc_start()\n");

236 
	}
}

238 
	$öô¥oc_föish
()

240 #ifde‡
__VFS__


241 i‡(
	`vfs_shutdown
())

242 
	`∑nic
("vfs shutdown FAILED!!\n");

246 #ifde‡
__DRIVERS__


247 
	`s¸ìn_¥öt_shutdown
();

253 
__asm__
 volatile("cli; hlt;");

256 
	`∑nic
("shouldÇot get here");

257 
	}
}

	@kernel/main/smp.c

1 
	~"globÆs.h
"

2 
	~"ty≥s.h
"

3 
	~<maö/gdt.h
>

5 
	~"maö/≠ic.h
"

6 
	~"maö/öôs.h
"

8 
	~"mm/éb.h
"

10 
	~"utû/°rög.h
"

11 
	~"utû/time.h
"

13 
	gsmp_¥o˚ss‹_cou¡
;

15 
uöçå_t
 
smp_öôüliz©i⁄_°¨t
;

16 
uöçå_t
 
smp_öôüliz©i⁄_íd
;

17 
	#smp_öôüliz©i⁄_°¨t
 ((
uöçå_t
)(&
smp_öôüliz©i⁄_°¨t
))

	)

18 
	#smp_öôüliz©i⁄_íd
 ((
uöçå_t
)(&
smp_öôüliz©i⁄_íd
))

	)

19 
	#smp_öôüliz©i⁄_size
 \

20 (
smp_öôüliz©i⁄_íd
 - 
smp_öôüliz©i⁄_°¨t
)

	)

22 
smp_°¨t_¥o˚ss‹
(
uöt8_t
 
≠ic_id
);

23 
smp_°›_¥o˚ss‹
(
ªgs_t
 *
ªgs
);

25 *
csd_°¨t
;

26 *
csd_íd
;

27 
	#CSD_START
 ((
uöçå_t
)&
csd_°¨t
)

	)

28 
	#CSD_END
 ((
uöçå_t
)&
csd_íd
)

	)

29 
	#CSD_PAGES
 (
uöçå_t
)((
CSD_END
 - 
CSD_START
Ë>> 
PAGE_SHIFT
)

	)

31 
c‹e_t
 
curc‹e
 
	gCORE_SPECIFIC_DATA
;

32 
uöçå_t
 
	gcsd_vaddr_èbÀ
[
MAX_LAPICS
] = {
NULL
};

34 
	$m≠_ö_c‹e_•ecific_d©a
(
pml4_t
 *
pml4
)

36 
	`±_m≠_ønge
(
pml4
, 
curc‹e
.
kc_csd∑ddr
, 
CSD_START
, 
CSD_END
,

37 
PT_PRESENT
 | 
PT_WRITE
, PT_PRESENT | PT_WRITE);

38 
uöçå_t
 
m≠≥d_∑ddr
 = 
	`±_vút_to_phys_hñ≥r
(
pml4
, (uöçå_t)&
curc‹e
);

39 
uöçå_t
 
ex≥˘ed_∑ddr
 =

40 (
uöçå_t
)
	`GET_CSD
(
curc‹e
.
kc_id
, 
c‹e_t
, curc‹eË- 
PHYS_OFFSET
;

41 
uöçå_t
 
ex≥˘ed_∑ddr2
 =

42 
	`±_vút_to_phys_hñ≥r
(
	`±_gë
(), (
uöçå_t
)&
curc‹e
);

43 
	`KASSERT
(
m≠≥d_∑ddr
 =
ex≥˘ed_∑ddr
);

44 
	`KASSERT
(
ex≥˘ed_∑ddr
 =
ex≥˘ed_∑ddr2
);

45 
	}
}

47 
	$is_c‹e_•ecific_d©a
(*
addr
)

49  (
uöçå_t
)
addr
 >
CSD_START
 && (uöçå_tÔdd∏< 
CSD_END
;

50 
	}
}

52 
	$c‹e_öô
()

55 
	`±_öô
();

56 
	`±_£t
(
	`±_¸óã
());

58 
uöçå_t
 
csd_∑ddr
 = (uöçå_t)
	`∑ge_Æloc_n
(
CSD_PAGES
);

59 i‡(!
csd_∑ddr
)

60 
	`∑nic
("notÉnough memory for core-specific data!");

61 
csd_vaddr_èbÀ
[
	`≠ic_cuºít_id
()] =

62 
csd_∑ddr
;

63 
csd_∑ddr
 -
PHYS_OFFSET
;

65 
	`dbg
(
DBG_CORE
, "m≠pög i¿c‹ê•ecifi¯d©®tÿ0x%p\n", (*)
csd_∑ddr
);

66 
	`±_m≠_ønge
(
	`±_gë
(), 
csd_∑ddr
, 
CSD_START
, 
CSD_END
, 
PT_PRESENT
 | 
PT_WRITE
,

67 
PT_PRESENT
 | 
PT_WRITE
);

68 
	`éb_Êush_Æl
();

70 
	`mem£t
((*)
CSD_START
, 0, 
CSD_END
 - CSD_START);

72 
curc‹e
.
kc_id
 = 
	`≠ic_cuºít_id
();

73 
curc‹e
.
kc_queue
 = 
NULL
;

74 
curc‹e
.
kc_csd∑ddr
 = 
csd_∑ddr
;

76 
	`öå_öô
();

77 
	`gdt_öô
();

79 
	`≠ic_íabÀ
();

80 
	`time_öô
();

81 
	`sched_öô
();

83 *
°ack
 = 
	`∑ge_Æloc
();

84 
	`KASSERT
(
°ack
 !
NULL
);

86 
	`c⁄ãxt_£tup_øw
(&
curc‹e
.
kc_˘x
, 
c‹e_swôch
, 
°ack
, 
PAGE_SIZE
, 
	`±_gë
());

87 
	}
}

89 
__©åibuã__
((
u£d
)Ë
	$smp_¥o˚ss‹_íåy
()

91 
	`c‹e_öô
();

92 
	`dbg_f‹˚
(
DBG_CORE
, "°¨ãd C%ld!\n", 
curc‹e
.
kc_id
);

93 
smp_¥o˚ss‹_cou¡
++;

95 
	`KASSERT
(!
	`öå_íabÀd
());

96 
	`¥ìm±i⁄_dißbÀ
();

97 
	`¥oc_idÀ¥oc_öô
();

98 
	`c⁄ãxt_make_a˘ive
(&
curc‹e
.
kc_˘x
);

99 
	}
}

105 
	$smp_öô
()

107 
	`NOT_YET_IMPLEMENTED
("SMP: smp_init");

108 
	}
}

111 
	$smp_°¨t_¥o˚ss‹
(
uöt8_t
 
≠ic_id
)

114 
	`dbg_f‹˚
(
DBG_CORE
, "BoŸög C%d\n", 
≠ic_id
);

116 
	`mem˝y
((*)
PHYS_OFFSET
, (*)
smp_öôüliz©i⁄_°¨t
,

117 
smp_öôüliz©i⁄_size
);

121 
¥ev_cou¡
 = 
smp_¥o˚ss‹_cou¡
;

122 
	`≠ic_°¨t_¥o˚ss‹
(
≠ic_id
, 0);

124 
smp_¥o˚ss‹_cou¡
 =
¥ev_cou¡
)

126 
	}
}

128 
	$smp_°›_¥o˚ss‹
(
ªgs_t
 *
ªgs
)

130 
buf
[2048];

131 
	`time_°©s
(
buf
, (buf));

133 
	`dbg_f‹˚
(
DBG_CORE
, "\n%s\nhÆãd cÀ™ly!\n\n", 
buf
);

135 
__asm__
 volatile("cli; hlt;");

138 
	}
}

	@kernel/mm/mobj.c

1 
	~"î∫o.h
"

3 
	~"mm/mobj.h
"

4 
	~"mm/p‰ame.h
"

6 
	~"utû/debug.h
"

7 
	~<utû/°rög.h
>

16 
	$mobj_öô
(
mobj_t
 *
o
, 
ty≥
, 
mobj_›s_t
 *
›s
)

18 
o
->
mo_ty≥
 = 
ty≥
;

20 
	`mem˝y
(&
o
->
mo_›s
, 
›s
, (
mobj_›s_t
));

22 i‡(!
o
->
mo_›s
.
gë_p‰ame
)

24 
o
->
mo_›s
.
gë_p‰ame
 = 
mobj_deÁu…_gë_p‰ame
;

25 
	`KASSERT
(
o
->
mo_›s
.
fûl_p‰ame
);

26 
	`KASSERT
(
o
->
mo_›s
.
Êush_p‰ame
);

28 i‡(!
o
->
mo_›s
.
de°ru˘‹
)

30 
o
->
mo_›s
.
de°ru˘‹
 = 
mobj_deÁu…_de°ru˘‹
;

33 
	`kmuãx_öô
(&
o
->
mo_muãx
);

35 
o
->
mo_ªfcou¡
 = 
	`ATOMIC_INIT
(1);

36 
	`li°_öô
(&
o
->
mo_p‰ames
);

38 
o
->
mo_båì
 = 
NULL
;

39 
	}
}

44 
ölöe
 
	$mobj_lock
(
mobj_t
 *
o
Ë{ 
	`kmuãx_lock
(&o->
mo_muãx
); 
	}
}

49 
ölöe
 
	$mobj_u∆ock
(
mobj_t
 *
o
Ë{ 
	`kmuãx_u∆ock
(&o->
mo_muãx
); 
	}
}

54 
	$mobj_ªf
(
mobj_t
 *
o
)

56 
	`©omic_öc
(&
o
->
mo_ªfcou¡
);

57 
	}
}

59 
	$mobj_put_locked
(
mobj_t
 **
›
)

61 
	`mobj_u∆ock
(*
›
);

62 
	`mobj_put
(
›
);

63 
	}
}

69 
	$mobj_put
(
mobj_t
 **
›
)

71 
mobj_t
 *
o
 = *
›
;

72 
	`KASSERT
(
o
->
mo_ªfcou¡
);

73 *
›
 = 
NULL
;

75 
	`dbg
(
DBG_ERROR
, "cou¡: %d\n", 
o
->
mo_ªfcou¡
);

76 i‡(
	`©omic_dec_™d_ã°
(&
o
->
mo_ªfcou¡
))

78 
	`dbg
(
DBG_ERROR
, "cou¡: %d\n", 
o
->
mo_ªfcou¡
);

80 
	`KASSERT
(!
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

81 
o
->
mo_›s
.
	`de°ru˘‹
(o);

85 
	`dbg
(
DBG_ERROR
, "cou¡: %d\n", 
o
->
mo_ªfcou¡
);

87 
	}
}

94 
	$mobj_föd_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
p‰ame_t
 **
pÂ
)

96 *
pÂ
 = 
NULL
;

98 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

99 
p‰ame_t
 *
pf
 = 
NULL
;

100 i‡(
o
->
mo_båì
)

101 
pf
 = (
p‰ame_t
 *)
	`båì_£¨ch
(
o
->
mo_båì
, 
∑gíum
);

102 i‡(
pf
 !
NULL
)

104 
	`kmuãx_lock
(&
pf
->
pf_muãx
);

105 *
pÂ
 = 
pf
;

109 *
pÂ
 = 
NULL
;

110 
	}
}

116 
	$mobj_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

117 
p‰ame_t
 **
pÂ
)

119 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

120 *
pÂ
 = 
NULL
;

121 
ªt
 = 
o
->
mo_›s
.
	`gë_p‰ame
(o, 
∑gíum
, 
f‹wrôe
, 
pÂ
);

122 
	`KASSERT
((!*
pÂ
 && 
ªt
Ë|| 
	`kmuãx_owns_muãx
(&(*pÂ)->
pf_muãx
));

123  
ªt
;

124 
	}
}

130 
	$mobj_¸óã_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, uöt64_à
loc
, 
p‰ame_t
 **
pÂ
)

132 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

133 
p‰ame_t
 *
pf
 = 
	`p‰ame_¸óã
();

134 i‡(
pf
)

136 
	`kmuãx_lock
(&
pf
->
pf_muãx
);

138 
pf
->
pf_∑gíum
 = 
∑gíum
;

139 
pf
->
pf_loc
 = 
loc
;

140 
	`li°_ö£π_èû
(&
o
->
mo_p‰ames
, &
pf
->
pf_lök
);

141 
	`båì_ö£π
(&
o
->
mo_båì
, 
∑gíum
, (*)
pf
);

143 
	`KASSERT
(!
pf
 || 
	`kmuãx_owns_muãx
(&pf->
pf_muãx
));

144 *
pÂ
 = 
pf
;

145 
	}
}

168 
	$mobj_deÁu…_gë_p‰ame
(
mobj_t
 *
o
, 
uöt64_t
 
∑gíum
, 
f‹wrôe
,

169 
p‰ame_t
 **
pÂ
)

171 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

172 *
pÂ
 = 
NULL
;

173 
p‰ame_t
 *
pf
 = 
NULL
;

174 
	`mobj_föd_p‰ame
(
o
, 
∑gíum
, &
pf
);

175 i‡(!
pf
)

177 
	`mobj_¸óã_p‰ame
(
o
, 
∑gíum
, 0, &
pf
);

179 i‡(!
pf
)

181  -
ENOMEM
;

183 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
pf
->
pf_muãx
));

184 i‡(!
pf
->
pf_addr
)

186 
	`KASSERT
(!
pf
->
pf_dúty
 &&

188 
pf
->
pf_addr
 = 
	`∑ge_Æloc
();

189 i‡(!
pf
->
pf_addr
)

191  -
ENOMEM
;

194 
	`dbg
(
DBG_PFRAME
, "fûlögÖ‰amê0x%∞(mobj 0x%∞∑gê%lu)\n", 
pf
, 
o
,

195 
pf
->
pf_∑gíum
);

196 
	`KASSERT
(
o
->
mo_›s
.
fûl_p‰ame
);

197 
ªt
 = 
o
->
mo_›s
.
	`fûl_p‰ame
(o, 
pf
);

198 i‡(
ªt
)

200 
	`∑ge_‰ì
(
pf
->
pf_addr
);

201 
pf
->
pf_addr
 = 
NULL
;

202 
	`kmuãx_u∆ock
(&
pf
->
pf_muãx
);

203  
ªt
;

206 
pf
->
pf_dúty
 |
f‹wrôe
;

207 *
pÂ
 = 
pf
;

209 
	}
}

218 
	$mobj_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

220 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

221 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
pf
->
pf_muãx
));

222 
	`KASSERT
(
pf
->
pf_addr
 && "cannot flushá frameÇot in memory!");

223 
	`dbg
(
DBG_PFRAME
, "p‡0x%p, mobj 0x%p,Öagê%lu\n", 
pf
, 
o
,Öf->
pf_∑gíum
);

224 i‡(
pf
->
pf_dúty
)

226 
	`KASSERT
(
o
->
mo_›s
.
Êush_p‰ame
);

227 
ªt
 = 
o
->
mo_›s
.
	`Êush_p‰ame
(o, 
pf
);

228 i‡(
ªt
)

229  
ªt
;

230 
pf
->
pf_dúty
 = 0;

232 
	`KASSERT
(!
pf
->
pf_dúty
);

234 
	}
}

242 
	$mobj_Êush
(
mobj_t
 *
o
)

244 
ªt
 = 0;

245 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

246 
	`li°_ôî©e
(&
o
->
mo_p‰ames
, 
pf
, 
p‰ame_t
, 
pf_lök
)

248 
	`kmuãx_lock
(&
pf
->
pf_muãx
);

249 i‡(
pf
->
pf_addr
)

251 
ªt
 |
	`mobj_Êush_p‰ame
(
o
, 
pf
);

253 
	`p‰ame_ªÀa£
(&
pf
);

255  
ªt
;

256 
	}
}

266 
	$mobj_‰ì_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 **
pÂ
)

268 
p‰ame_t
 *
pf
 = *
pÂ
;

270 i‡(
pf
->
pf_addr
)

272 
ªt
 = 
	`mobj_Êush_p‰ame
(
o
, 
pf
);

273 i‡(
ªt
)

274  
ªt
;

279 i‡(
pf
->
pf_addr
)

281 
	`∑ge_‰ì
(
pf
->
pf_addr
);

282 
pf
->
pf_addr
 = 
NULL
;

285 *
pÂ
 = 
NULL
;

286 
	`li°_ªmove
(&
pf
->
pf_lök
);

288 
	`båì_dñëe
(&
o
->
mo_båì
, 
pf
->
pf_∑gíum
);

290 
	`p‰ame_‰ì
(&
pf
);

292 
	}
}

294 
	$mobj_dñëe_p‰ame
(
mobj_t
 *
o
, 
size_t
 
∑gíum
)

296 
p‰ame_t
 *
pf
 = (p‰ame_à*)
	`båì_£¨ch
(
o
->
mo_båì
, 
∑gíum
);

297 i‡(
pf
)

299 
	`kmuãx_lock
(&
pf
->
pf_muãx
);

300 
	`li°_ªmove
(&
pf
->
pf_lök
);

301 
	`båì_dñëe
(&
o
->
mo_båì
, 
pf
->
pf_∑gíum
);

302 
pf
->
pf_dúty
 = 0;

303 i‡(
pf
->
pf_addr
)

305 
	`∑ge_‰ì
(
pf
->
pf_addr
);

306 
pf
->
pf_addr
 = 
NULL
;

308 
	`p‰ame_‰ì
(&
pf
);

311 
	}
}

316 
	$mobj_deÁu…_de°ru˘‹
(
mobj_t
 *
o
)

318 
	`mobj_lock
(
o
);

319 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
o
->
mo_muãx
));

321 
ªt
 = 0;

322 
	`li°_ôî©e
(&
o
->
mo_p‰ames
, 
pf
, 
p‰ame_t
, 
pf_lök
)

324 
	`kmuãx_lock
(&
pf
->
pf_muãx
);

325 
ªt
 |
	`mobj_‰ì_p‰ame
(
o
, &
pf
);

328 
	`KASSERT
(!
o
->
mo_båì
);

330 i‡(
ªt
)

332 
	`dbg
(
DBG_MM
,

338 
	`KASSERT
(!
	`kmuãx_has_waôîs
(&
o
->
mo_muãx
));

339 
	`mobj_u∆ock
(
o
);

340 
	}
}

	@kernel/mm/page.c

3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

5 
	~<boŸ/mu…iboŸ_ma¸os.h
>

7 
	~"boŸ/c⁄fig.h
"

9 
	~"mm/mm.h
"

10 
	~"mm/∑ge.h
"

12 
	~"utû/debug.h
"

13 
	~"utû/gdb.h
"

14 
	~"utû/°rög.h
"

16 
	~"mu…iboŸ.h
"

30 
uöçå_t
 
	tbåì_w‹d
;

32 
	#BTREE_ROW_START_INDEX
(
‹dî
) \

33 (((
uöçå_t
)1 << (
max_‹dî
 - (
‹dî
))Ë- 1)

	)

34 
	#BTREE_ROW_END_INDEX
(
‹dî
Ë((
	`BTREE_ROW_START_INDEX
(‹dîË<< 1Ë| 1)

	)

35 
	#BTREE_INDEX_TO_ADDR
(
idx
, 
‹dî
) \

36 (((1 << (
‹dî
)Ë* ((
idx
)-
	`BTREE_ROW_START_INDEX
(‹dî))Ë<< 
PAGE_SHIFT
)

	)

37 
	#BTREE_ADDR_TO_INDEX
(
addr
, 
‹dî
) \

38 (
	`BTREE_ROW_START_INDEX
(
‹dî
) + \

39 ((((
uöçå_t
)(
addr
)Ë>> 
PAGE_SHIFT
Ë/ (1 << (
‹dî
))))

	)

41 
	#BTREE_LEAF_START_INDEX
 
	`BTREE_ROW_START_INDEX
(0)

	)

42 
	#BTREE_ADDR_TO_LEAF_INDEX
(
addr
Ë
	`BTREE_ADDR_TO_INDEX
◊ddr, 0)

	)

43 
	#BTREE_LEAF_INDEX_TO_ADDR
(
idx
Ë
	`BTREE_INDEX_TO_ADDR
(idx, 0)

	)

45 
	#BTREE_NUM_BITS
 ((
båì_w‹d
Ë<< 3)

	)

46 
	#BTREE_WORD_POS
(
idx
Ë((idxË/ 
BTREE_NUM_BITS
)

	)

47 
	#BTREE_BIT_POS
(
idx
Ë((idxË& (
BTREE_NUM_BITS
 - 1))

	)

48 
	#BTREE_AVAILABILITY_MASK
(
idx
) \

49 ((
uöçå_t
)1 << (
BTREE_NUM_BITS
 - 1 - 
	`BTREE_BIT_POS
(
idx
)))

	)

53 
	#BTREE_SIBLING
(
idx
Ë((idx)-1 + (((idx)&1Ë<< 1))

	)

69 
	#BTREE_LEFT_SIBLING
(
idx
Ë((idxË+ (((idx)&1Ë- 1))

	)

71 
	#BTREE_PARENT
(
idx
Ë(((idx)-1Ë>> 1)

	)

72 
	#BTREE_LEFT_CHILD
(
idx
Ë(((idxË<< 1Ë+ 1)

	)

73 
	#BTREE_RIGHT_CHILD
(
idx
Ë(((idxË+ 1Ë<< 1)

	)

74 
	#BTREE_IS_LEFT_CHILD
(
idx
Ë((idx)&1)

	)

75 
	#BTREE_IS_RIGHT_CHILD
(
idx
Ë(!
	`BTREE_IS_LEFT_CHILD
(idx))

	)

77 
	#BTREE_IS_AVAILABLE
(
idx
) \

78 (
båì
[
	`BTREE_WORD_POS
(
idx
)] & 
	`BTREE_AVAILABILITY_MASK
(idx))

	)

79 
	#BTREE_MARK_AVAILABLE
(
idx
) \

80 (
båì
[
	`BTREE_WORD_POS
(
idx
)] |
	`BTREE_AVAILABILITY_MASK
(idx))

	)

81 
	#BTREE_MARK_UNAVAILABLE
(
idx
) \

82 (
båì
[
	`BTREE_WORD_POS
(
idx
)] &~
	`BTREE_AVAILABILITY_MASK
(idx))

	)

93 
	$GDB_DEFINE_HOOK
(
∑ge_Æloc
, *
addr
, 
size_t
 
≈ages
)

95 
	$GDB_DEFINE_HOOK
(
∑ge_‰ì
, *
addr
, 
size_t
 
≈ages
)

97 
size_t
 
∑ge_‰ìcou¡
;

100 
size_t


101 
max_∑ges
;

102 
size_t
 
max_‹dî
;

104 
båì_w‹d
 *
båì
;

105 
uöçå_t
 *
mö_avaûabÀ_idx_by_‹dî
;

106 
size_t
 *
cou¡_avaûabÀ_by_‹dî
;

108 *
ty≥_°rögs
[] = {"ERROR:Åype = 0", "Available", "Reserved",

109 "ACPI Re˛aimabÀ", "ACPI NVS", "GRUB Bad Ram"
	}
};

110 
size_t
 
	gty≥_cou¡
 = (
ty≥_°rögs
) / (type_strings[0]);

112 
ölöe
 *
	$physm≠_°¨t
(Ë{  (*)
PHYS_OFFSET
; 
	}
}

114 
ölöe
 *
	$physm≠_íd
()

116  (*)(
PHYS_OFFSET
 + (
max_∑ges
 << 
PAGE_SHIFT
));

117 
	}
}

119 #unde‡
DEBUG_PHYSICAL_PAGING


121 
ölöe
 
	$_båì_ex≥nsive_ßnôy_check
()

123 #ifde‡
DEBUG_PHYSICAL_PAGING


124 
size_t
 
avaûabÀ
 = 0;

125 
‹dî
 = 0; ordî <
max_‹dî
; order++)

127 
checked_fú°
 = 0;

128 
‹dî_cou¡
 = 0;

129 
uöçå_t
 
max
 = 
	`BTREE_ROW_END_INDEX
(
‹dî
);

131 
uöçå_t
 
idx
 = 
	`BTREE_ROW_START_INDEX
(
‹dî
); idx < 
max
; idx++)

133 i‡(
	`BTREE_IS_AVAILABLE
(
idx
))

135 i‡(!
checked_fú°
)

137 
	`KASSERT
(
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] =
idx
);

138 
checked_fú°
 = 1;

140 
avaûabÀ
 +(1 << 
‹dî
);

141 
‹dî_cou¡
++;

142 
	`KASSERT
(
	`BTREE_INDEX_TO_ADDR
(
idx
 + 1, 
‹dî
Ë<
	`physm≠_íd
());

145 i‡(!
checked_fú°
)

147 
	`KASSERT
(
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] =
max
);

149 
	`KASSERT
(
cou¡_avaûabÀ_by_‹dî
[
‹dî
] =
‹dî_cou¡
);

151 
	`KASSERT
(
avaûabÀ
 =
∑ge_‰ìcou¡
);

153 
	}
}

155 
	$∑ge_öô
()

157 
uöçå_t
 
øm
 = 0;

158 
uöçå_t
 
mem‹y_avaûabÀ_f‹_u£
 = 0;

163 
	`KASSERT
(
	`PAGE_ALIGNED
(
mb_èg
Ë&& (
uöçå_t
)mb_èg =
KERNEL_PHYS_END
);

165 
mu…iboŸ_èg
 *
èg
 = 
mb_èg
 + 1;

166 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
;Åag +
	`TAG_SIZE
—ag->
size
))

168 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
)

172 
mu…iboŸ_èg_mm≠
 *
mm≠
 = (mu…iboŸ_èg_mm≠ *)
èg
;

173 
	`dbg
(
DBG_PAGEALLOC
, "Physical memory map (%dÉntries):\n",

174 
mm≠
->
size
 / mm≠->
íåy_size
);

175 
i
 = 0; i < 
mm≠
->
size
 / mm≠->
íåy_size
; i++)

177 
mu…iboŸ_mm≠_íåy
 *
íåy
 = &
mm≠
->
íåõs
[
i
];

178 
	`dbgq
(
DBG_MM
, "\t[0x%p-0x%p) (%llu bytes): %s\n",

179 (*)
íåy
->
addr
, (*)”¡ry->add∏+É¡ry->
Àn
),

180 
íåy
->
Àn
,

181 
íåy
->
ty≥
 < 
ty≥_cou¡
 ? 
ty≥_°rögs
[entry->type]

183 i‡(
íåy
->
ty≥
 !
MULTIBOOT_MEMORY_AVAILABLE
)

188 i‡(
íåy
->
addr
 < 
KERNEL_PHYS_END
 &&

189 
íåy
->
addr
 +É¡ry->
Àn
 > 
KERNEL_PHYS_END
)

191 
mem‹y_avaûabÀ_f‹_u£
 =

192 
íåy
->
addr
 +É¡ry->
Àn
 - 
KERNEL_PHYS_END
;

195 i‡(
íåy
->
addr
 +É¡ry->
Àn
 > 
øm
)

197 
øm
 = 
íåy
->
addr
 +É¡ry->
Àn
;

204 
max_∑ges
 = 
øm
 >> 
PAGE_SHIFT
;

205 
max_‹dî
 = 0;

206 
size_t
 
≈ages
 = 
max_∑ges
;

207 
≈ages
)

209 
max_‹dî
++;

210 
≈ages
 >>= 1;

217 
size_t
 
båì_size
;

218 
size_t
 
mëad©a_size
;

219 
max_‹dî
)

223 
båì_size
 = 1UL << (
max_‹dî
 - 2);

224 
mëad©a_size
 = (
uöçå_t
Ë* (
max_‹dî
 + 1) +

225 (
size_t
Ë* (
max_‹dî
 + 1);

227 i‡(
mem‹y_avaûabÀ_f‹_u£
 >
båì_size
 + 
mëad©a_size
)

231 i‡(
max_∑ges
 ==

232 (
øm
 >> 
PAGE_SHIFT
))

234 
	`dbg
(
DBG_PAGEALLOC
,

237 (*)(
båì_size
 + 
mëad©a_size
), (*)
øm
,

238 (*)
mem‹y_avaûabÀ_f‹_u£
);

240 
max_‹dî
--;

241 
max_∑ges
 = 1UL << 
max_‹dî
;

243 i‡(
max_∑ges
 !=

244 (
øm
 >> 
PAGE_SHIFT
))

246 
	`dbg
(
DBG_PAGEALLOC
, "Supporting only upÅo 0x%p B of RAM!",

247 (*)(
max_∑ges
 << 
PAGE_SHIFT
));

250 
båì
 = (
båì_w‹d


251 *)(
KERNEL_PHYS_END
 +

252 
PAGE_SIZE
);

253 
	`mem£t
(
båì
, 0, 
båì_size
);

255 
mö_avaûabÀ_idx_by_‹dî
 = (
uöçå_t
 *)((uöçå_t)
båì
 + 
båì_size
);

256 
‹dî
 = 0; ordî <
max_‹dî
; order++)

258 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] = 
	`BTREE_ROW_END_INDEX
(order);

261 
cou¡_avaûabÀ_by_‹dî
 =

262 
mö_avaûabÀ_idx_by_‹dî
 + (
uöçå_t
Ë* (
max_‹dî
 + 1);

263 
	`mem£t
(
cou¡_avaûabÀ_by_‹dî
, 0, (
size_t
Ë* (
max_‹dî
 + 1));

265 
∑ge_‰ìcou¡
 = 0;

267 
uöçå_t
 
ª£rved_øm_°¨t
 = 
KERNEL_PHYS_BASE
;

268 
uöçå_t
 
ª£rved_øm_íd
 =

269 
KERNEL_PHYS_END
 + 
PAGE_SIZE
 + 
båì_size
 + 
mëad©a_size
;

271 
mu…iboŸ_èg
 *
èg
 = 
mb_èg
 + 1;

272 
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_END
;Åag +
	`TAG_SIZE
—ag->
size
))

274 i‡(
èg
->
ty≥
 !
MULTIBOOT_TAG_TYPE_MMAP
)

278 
mu…iboŸ_èg_mm≠
 *
mm≠
 = (mu…iboŸ_èg_mm≠ *)
èg
;

279 
i
 = 0; i < 
mm≠
->
size
 / mm≠->
íåy_size
; i++)

281 
mu…iboŸ_mm≠_íåy
 *
íåy
 = &
mm≠
->
íåõs
[
i
];

282 i‡(
íåy
->
ty≥
 !
MULTIBOOT_MEMORY_AVAILABLE
)

286 
uöçå_t
 
addr
 = 
íåy
->addr;

287 
uöçå_t
 
Àn
 = 
íåy
->len;

289 i‡(
addr
 >
ª£rved_øm_°¨t
 &&ádd∏< 
ª£rved_øm_íd
)

291 i‡(
Àn
 <
ª£rved_øm_íd
 - 
addr
)

295 
Àn
 -
ª£rved_øm_íd
 - 
addr
;

296 
addr
 = 
ª£rved_øm_íd
;

298 i‡(
addr
 < 
ª£rved_øm_°¨t
 &&ádd∏+ 
Àn
 >Ñeserved_ram_start)

300 
Àn
 = 
ª£rved_øm_°¨t
 - 
addr
;

304 i‡(
addr
 < 
ª£rved_øm_°¨t
)

309 
	`∑ge_add_ønge
((*)
addr
, (*)◊dd∏+ 
Àn
));

313 
	`∑ge_m¨k_ª£rved
(0);

315 
size_t
 
byãs
 = 
∑ge_‰ìcou¡
 << 
PAGE_SHIFT
;

316 
size_t
 
gigabyãs
 = (
byãs
 >> 30);

317 
byãs
 -(
gigabyãs
 << 30);

318 
size_t
 
megabyãs
 = (
byãs
 >> 20);

319 
byãs
 -(
megabyãs
 << 20);

320 
size_t
 
kûobyãs
 = (
byãs
 >> 10);

321 
byãs
 -(
kûobyãs
 << 10);

322 
	`KASSERT
(
byãs
 == 0);

324 
	`dbg
(
DBG_PAGEALLOC
,

327 
gigabyãs
, 
megabyãs
, 
kûobyãs
, 
	`physm≠_°¨t
(), 
	`physm≠_íd
());

328 
	`_båì_ex≥nsive_ßnôy_check
();

329 
	}
}

331 
	$∑ge_öô_föish
()

333 
båì
 = (
båì_w‹d
 *)((
uöçå_t
)båì + 
PHYS_OFFSET
);

334 
mö_avaûabÀ_idx_by_‹dî
 =

335 (
uöçå_t
 *)((uöçå_t)
mö_avaûabÀ_idx_by_‹dî
 + 
PHYS_OFFSET
);

336 
cou¡_avaûabÀ_by_‹dî
 =

337 (
uöçå_t
 *)((uöçå_t)
cou¡_avaûabÀ_by_‹dî
 + 
PHYS_OFFSET
);

338 
	}
}

340 
	$_båì_upd©e_mëad©a_a·î_ªmovÆ
(
size_t
 
‹dî
, size_à
idx
)

343 i‡(
cou¡_avaûabÀ_by_‹dî
[
‹dî
])

345 i‡(
idx
 =
mö_avaûabÀ_idx_by_‹dî
[
‹dî
])

347 
uöçå_t
 
w‹d_idx
 = 
	`BTREE_WORD_POS
(
idx
);

348 i‡(
båì
[
w‹d_idx
] &&

349 
w‹d_idx
 =
	`BTREE_WORD_POS
(
	`BTREE_ROW_START_INDEX
(
‹dî
)))

357 
båì_w‹d
 
c›y
 =

358 
båì
[
w‹d_idx
] &

359 ((1UL << (
BTREE_NUM_BITS
 - 
	`BTREE_BIT_POS
(
idx
))) - 1);

360 
bô_idx
 = 
BTREE_NUM_BITS
;

361 
c›y
 !0 && 
bô_idx
 > 
	`BTREE_BIT_POS
(
idx
))

363 
bô_idx
--;

364 
c›y
 = copy >> 1;

366 i‡(
	`BTREE_IS_AVAILABLE
(
w‹d_idx
 * 
BTREE_NUM_BITS
 + 
bô_idx
))

368 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] =

369 
w‹d_idx
 * 
BTREE_NUM_BITS
 + 
bô_idx
;

372 
w‹d_idx
++;

374 !
båì
[
w‹d_idx
])

375 
w‹d_idx
++;

376 
båì_w‹d
 
c›y
 = 
båì
[
w‹d_idx
];

377 
bô_idx
 = 
BTREE_NUM_BITS
;

378 
c›y
 != 0)

380 
bô_idx
--;

381 
c›y
 = copy >> 1;

383 
uöçå_t
 
mö_avaûabÀ
 = 
w‹d_idx
 * 
BTREE_NUM_BITS
 + 
bô_idx
;

384 i‡(
mö_avaûabÀ
 > 
	`BTREE_ROW_END_INDEX
(
‹dî
))

386 
mö_avaûabÀ
 = 
	`BTREE_ROW_END_INDEX
(
‹dî
);

388 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] = 
mö_avaûabÀ
;

393 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] = 
	`BTREE_ROW_END_INDEX
(order);

395 
	}
}

397 
	$_båì_m¨k_avaûabÀ
(
uöçå_t
 
idx
, 
size_t
 
‹dî
)

399 
	`KASSERT
(!
	`BTREE_IS_AVAILABLE
(
idx
));

400 
	`BTREE_MARK_AVAILABLE
(
idx
);

402 
uöçå_t
 
°¨t
 = 
	`BTREE_INDEX_TO_ADDR
(
idx
, 
‹dî
);

403 
uöçå_t
 
íd
 = 
	`BTREE_INDEX_TO_ADDR
(
idx
 + 1, 
‹dî
);

404 
	`dbg
(
DBG_MM
, "m¨kögávaûabÀ (0x%p, 0x%p)\n", (*)
°¨t
, (*)
íd
);

405 
	`KASSERT
(!(0xb1000 >
°¨t
 && 0xb1000 < 
íd
));

407 
cou¡_avaûabÀ_by_‹dî
[
‹dî
]++;

408 i‡(
idx
 < 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
])

410 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] = 
idx
;

413 
idx
 > 0 && 
	`BTREE_IS_AVAILABLE
(
	`BTREE_SIBLING
(idx)))

415 
	`BTREE_MARK_UNAVAILABLE
(
idx
);

416 
	`BTREE_MARK_UNAVAILABLE
(
	`BTREE_SIBLING
(
idx
));

418 
cou¡_avaûabÀ_by_‹dî
[
‹dî
] -= 2;

419 
	`_båì_upd©e_mëad©a_a·î_ªmovÆ
(
‹dî
, 
	`BTREE_LEFT_SIBLING
(
idx
));

421 
idx
 = 
	`BTREE_PARENT
(idx);

422 
‹dî
++;

423 
	`BTREE_MARK_AVAILABLE
(
idx
);

424 
cou¡_avaûabÀ_by_‹dî
[
‹dî
]++;

425 i‡(
idx
 < 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
])

427 
mö_avaûabÀ_idx_by_‹dî
[
‹dî
] = 
idx
;

430 
	}
}

432 
	$_båì_m¨k_ønge_avaûabÀ
(
uöçå_t
 
Àaf_idx
, 
size_t
 
≈ages
)

439 
≈ages
)

441 
uöçå_t
 
idx
 = 
Àaf_idx
;

442 
size_t
 
‹dî
 = 0;

443 
	`BTREE_IS_LEFT_CHILD
(
idx
Ë&& (2UL << 
‹dî
Ë<
≈ages
)

445 
idx
 = 
	`BTREE_PARENT
(idx);

446 
‹dî
++;

448 
	`_båì_m¨k_avaûabÀ
(
idx
, 
‹dî
);

449 
≈ages
 -1 << 
‹dî
;

450 
Àaf_idx
 +1 << 
‹dî
;

452 
	}
}

454 
	$∑ge_add_ønge
(*
°¨t
, *
íd
)

456 
	`dbg
(
DBG_MM
, "Pagêsy°emáddögÑ™gê[0x%p, 0x%p)\n", 
°¨t
, 
íd
);

457 
	`KASSERT
(
íd
 > 
°¨t
);

458 i‡(
°¨t
 == 0)

460 
°¨t
 = 
	`PAGE_ALIGN_UP
(1);

461 i‡(
íd
 <
°¨t
)

466 
°¨t
 = 
	`PAGE_ALIGN_UP
(start);

467 
íd
 = 
	`PAGE_ALIGN_DOWN
(end);

468 
size_t
 
≈ages
 = ((
uöçå_t
)
íd
 - (uöçå_t)
°¨t
Ë>> 
PAGE_SHIFT
;

469 
	`_båì_m¨k_ønge_avaûabÀ
(
	`BTREE_ADDR_TO_LEAF_INDEX
(
°¨t
), 
≈ages
);

470 
∑ge_‰ìcou¡
 +
≈ages
;

471 
	`_båì_ex≥nsive_ßnôy_check
();

472 
	}
}

474 *
	$∑ge_Æloc
(Ë{  
	`∑ge_Æloc_n
(1); 
	}
}

476 *
	$∑ge_Æloc_bounded
(*
max_∑ddr
)

478  
	`∑ge_Æloc_n_bounded
(1, 
max_∑ddr
);

479 
	}
}

481 
	$∑ge_‰ì
(*
addr
Ë{ 
	`∑ge_‰ì_n
◊ddr, 1); 
	}
}

483 *
	$_båì_Æloc
(
size_t
 
≈ages
, 
uöçå_t
 
idx
, size_à
smÆÀ°_‹dî
,

484 
size_t
 
a˘uÆ_‹dî
)

486 
a˘uÆ_‹dî
 !
smÆÀ°_‹dî
)

488 
	`BTREE_MARK_UNAVAILABLE
(
idx
);

489 
cou¡_avaûabÀ_by_‹dî
[
a˘uÆ_‹dî
]--;

490 
	`_båì_upd©e_mëad©a_a·î_ªmovÆ
(
a˘uÆ_‹dî
, 
idx
);

492 
idx
 = 
	`BTREE_LEFT_CHILD
(idx);

493 
	`BTREE_MARK_AVAILABLE
(
idx
);

494 
	`BTREE_MARK_AVAILABLE
(
	`BTREE_SIBLING
(
idx
));

495 
a˘uÆ_‹dî
--;

497 
cou¡_avaûabÀ_by_‹dî
[
a˘uÆ_‹dî
] += 2;

498 i‡(
idx
 < 
mö_avaûabÀ_idx_by_‹dî
[
a˘uÆ_‹dî
])

500 
mö_avaûabÀ_idx_by_‹dî
[
a˘uÆ_‹dî
] = 
idx
;

502 
	`_båì_ex≥nsive_ßnôy_check
();

506 
	`BTREE_MARK_UNAVAILABLE
(
idx
);

507 
cou¡_avaûabÀ_by_‹dî
[
a˘uÆ_‹dî
]--;

508 
	`_båì_upd©e_mëad©a_a·î_ªmovÆ
(
a˘uÆ_‹dî
, 
idx
);

510 
uöçå_t
 
Æloˇãd_idx
 = 
idx
;

511 
size_t
 
Æloˇãd_‹dî
 = 
a˘uÆ_‹dî
;

512 
Æloˇãd_‹dî
-- > 0)

513 
Æloˇãd_idx
 = 
	`BTREE_LEFT_CHILD
(allocated_idx);

515 
	`KASSERT
(
	`BTREE_LEAF_INDEX_TO_ADDR
(
Æloˇãd_idx
));

520 
	`_båì_m¨k_ønge_avaûabÀ
(
Æloˇãd_idx
 + 
≈ages
,

521 (1 << 
smÆÀ°_‹dî
Ë- 
≈ages
);

536 
∑ge_‰ìcou¡
 -
≈ages
;

538 
uöçå_t
 
addr
 = 
	`BTREE_LEAF_INDEX_TO_ADDR
(
Æloˇãd_idx
);

539 
	`dbgq
(
DBG_MM
, "page_alloc_n(%lu): [0x%p, 0x%p)\t\t%luÖagesÑemain\n",

540 
≈ages
, (*)(
PHYS_OFFSET
 + 
addr
),

541 (*)(
PHYS_OFFSET
 + 
addr
 + (
≈ages
 << 
PAGE_SHIFT
)), 
∑ge_‰ìcou¡
);

542 
	`_båì_ex≥nsive_ßnôy_check
();

543  (*)(
addr
 + 
PHYS_OFFSET
);

544 
	}
}

546 *
	$∑ge_Æloc_n
(
size_t
 
≈ages
)

548  
	`∑ge_Æloc_n_bounded
(
≈ages
, (*)~0UL);

549 
	}
}

553 *
	$∑ge_Æloc_n_bounded
(
size_t
 
≈ages
, *
max_∑ddr
)

555 
	`KASSERT
(
≈ages
 > 0 &&Ç∑ge†<(1UL << 
max_‹dî
));

556 i‡(
≈ages
 > 
∑ge_‰ìcou¡
)

565 
uöçå_t
 
max_∑ge_numbî
 =

566 ((
uöçå_t
)
max_∑ddr
 >> 
PAGE_SHIFT
Ë- 
≈ages
 + 1;

569 
size_t
 
smÆÀ°_‹dî
 = 0;

570 (1UL << 
smÆÀ°_‹dî
Ë< 
≈ages
)

571 
smÆÀ°_‹dî
++;

573 
size_t
 
a˘uÆ_‹dî
 = 
smÆÀ°_‹dî
;á˘uÆ_‹dî <
max_‹dî
;

574 
a˘uÆ_‹dî
++)

576 i‡(!
cou¡_avaûabÀ_by_‹dî
[
a˘uÆ_‹dî
])

580 
uöçå_t
 
idx
 = 
mö_avaûabÀ_idx_by_‹dî
[
a˘uÆ_‹dî
];

581 
	`KASSERT
(
idx
 >
	`BTREE_ROW_START_INDEX
(
a˘uÆ_‹dî
) &&

582 
idx
 < 
	`BTREE_ROW_END_INDEX
(
a˘uÆ_‹dî
));

583 i‡((
idx
 - 
	`BTREE_ROW_START_INDEX
(
a˘uÆ_‹dî
)) * (1 <<áctual_order) <

584 
max_∑ge_numbî
)

586 
	`KASSERT
((
idx
 - 
	`BTREE_ROW_START_INDEX
(
a˘uÆ_‹dî
)) *

587 (1 << 
a˘uÆ_‹dî
) <

588 
max_∑ges
);

590 *
ªt
 = 
	`_båì_Æloc
(
≈ages
, 
idx
, 
smÆÀ°_‹dî
, 
a˘uÆ_‹dî
);

591 
	`KASSERT
(((
uöçå_t
)
ªt
 + (
≈ages
 << 
PAGE_SHIFT
)) <=

592 (
uöçå_t
)
	`physm≠_íd
());

593  
ªt
;

597 
	}
}

599 
	$∑ge_‰ì_n
(*
addr
, 
size_t
 
≈ages
)

601 
	`dbgq
(
DBG_MM
, "∑ge_‰ì_n(%lu): [0x%p, 0x%p)\t\t%luÖage†ªmaö\n", 
≈ages
,

602 
addr
, (*)((
uöçå_t
Ôdd∏+ (
≈ages
 << 
PAGE_SHIFT
)),

603 
∑ge_‰ìcou¡
);

604 
	`GDB_CALL_HOOK
(
∑ge_‰ì
, 
addr
, 
≈ages
);

605 
	`KASSERT
(
≈ages
 > 0 &&Ç∑ge†<(1UL << 
max_‹dî
Ë&& 
	`PAGE_ALIGNED
(
addr
));

606 
uöçå_t
 
idx
 = 
	`BTREE_ADDR_TO_LEAF_INDEX
((uöçå_t)
addr
 - 
PHYS_OFFSET
);

607 
	`KASSERT
(
idx
 + 
≈ages
 - 
BTREE_LEAF_START_INDEX
 <
max_∑ges
);

608 
	`_båì_m¨k_ønge_avaûabÀ
(
idx
, 
≈ages
);

609 
∑ge_‰ìcou¡
 +
≈ages
;

610 
	`_båì_ex≥nsive_ßnôy_check
();

611 
	}
}

613 
	$∑ge_m¨k_ª£rved
(*
∑ddr
)

615 i‡((
uöçå_t
)
∑ddr
 > (
max_∑ges
 << 
PAGE_SHIFT
))

618 
	`dbgq
(
DBG_MM
, "page_mark_reserved(0x%p): [0x%p, 0x%p)\n",

619 (*)((
uöçå_t
)
∑ddr
 + 
PHYS_OFFSET
),

620 (*)((
uöçå_t
)
∑ddr
 + 
PHYS_OFFSET
),

621 (*)((
uöçå_t
)
∑ddr
 + 
PHYS_OFFSET
 + 
PAGE_SIZE
));

623 
	`KASSERT
(
	`PAGE_ALIGNED
(
∑ddr
));

624 
uöçå_t
 
idx
 = 
	`BTREE_ADDR_TO_LEAF_INDEX
(
∑ddr
);

625 
size_t
 
‹dî
 = 0;

626 
idx
 && !
	`BTREE_IS_AVAILABLE
(idx))

628 
idx
 = 
	`BTREE_PARENT
(idx);

629 
‹dî
++;

631 i‡(!
	`BTREE_IS_AVAILABLE
(
idx
))

636 
	`BTREE_MARK_UNAVAILABLE
(
idx
);

637 
cou¡_avaûabÀ_by_‹dî
[
‹dî
]--;

638 
	`_båì_upd©e_mëad©a_a·î_ªmovÆ
(
‹dî
, 
idx
);

640 
uöçå_t
 
u«vaûabÀ_Àaf_idx
 = 
	`BTREE_ADDR_TO_LEAF_INDEX
(
∑ddr
);

641 
uöçå_t
 
°ûl_avaûabÀ_Àaf_idx_°¨t
 =

642 
	`BTREE_ADDR_TO_LEAF_INDEX
(
	`BTREE_INDEX_TO_ADDR
(
idx
, 
‹dî
));

643 
uöçå_t
 
°ûl_avaûabÀ_Àaf_idx_íd
 =

644 
	`BTREE_ADDR_TO_LEAF_INDEX
(
	`BTREE_INDEX_TO_ADDR
(
idx
 + 1, 
‹dî
));

646 
	`_båì_m¨k_ønge_avaûabÀ
(

647 
°ûl_avaûabÀ_Àaf_idx_°¨t
,

648 
u«vaûabÀ_Àaf_idx
 - 
°ûl_avaûabÀ_Àaf_idx_°¨t
);

649 
	`_båì_m¨k_ønge_avaûabÀ
(

650 
u«vaûabÀ_Àaf_idx
 + 1,

651 
°ûl_avaûabÀ_Àaf_idx_íd
 - 
u«vaûabÀ_Àaf_idx
 - 1);

653 
∑ge_‰ìcou¡
--;

655 
	`_båì_ex≥nsive_ßnôy_check
();

656 
	}
}

658 
size_t
 
	$∑ge_‰ì_cou¡
(Ë{  
∑ge_‰ìcou¡
; 
	}
}

	@kernel/mm/pagetable.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"kî√l.h
"

4 
	~"ty≥s.h
"

6 
	~"mm/mm.h
"

7 
	~"mm/p‰ame.h
"

8 
	~"mm/mobj.h
"

10 
	~"utû/debug.h
"

11 
	~"utû/°rög.h
"

13 
	~"vm/∑geÁu….h
"

17 
	mUNMAPPED
,

18 
	mPAGE_4KB
,

19 
	mPAGE_2MB
,

20 
	mPAGE_1GB


21 } 
	tvaddr_m≠_°©us
;

23 
pml4_t
 *
	gglobÆ_kî√l_⁄ly_pml4
;

25 
	$±_£t
(
pml4_t
 *
pml4
)

27 
	`KASSERT
((*)
pml4
 >
	`physm≠_°¨t
());

28 
uöçå_t
 
phys_addr
 = 
	`±_vút_to_phys
((uöçå_t)
pml4
);

29 
__asm__
 vﬁ©ûe("movq %0, %%¸3" ::"r"(
phys_addr
)

31 
	}
}

39 
ölöe
 
pml4_t
 *
	$±_gë
()

41 
uöçå_t
 
pml4
;

42 
__asm__
 volatile("movq %%cr3, %0"

43 : "Ù"(
pml4
));

44  (
pml4_t
 *)(
pml4
 + 
PHYS_OFFSET
);

45 
	}
}

47 
vaddr_m≠_°©us
 
	$_vaddr_°©us
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
)

49 
uöt64_t
 
idx
;

50 
pml4_t
 *
èbÀ
 = 
pml4
;

52 
idx
 = 
	`PML4E
(
vaddr
);

53 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

55  
UNMAPPED
;

57 
èbÀ
 = (
pdp_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

60 
idx
 = 
	`PDPE
(
vaddr
);

61 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

63  
UNMAPPED
;

65 i‡(
	`IS_1GB_PAGE
(
èbÀ
->
phys
[
idx
]))

67  
PAGE_1GB
;

69 
èbÀ
 = (
pd_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

72 
idx
 = 
	`PDE
(
vaddr
);

73 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

75  
UNMAPPED
;

77 i‡(
	`IS_2MB_PAGE
(
èbÀ
->
phys
[
idx
]))

79  
PAGE_2MB
;

81 
èbÀ
 = (
±_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

84 
idx
 = 
	`PTE
(
vaddr
);

85 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

87  
UNMAPPED
;

89  
PAGE_4KB
;

90 
	}
}

92 
uöçå_t
 
	$±_vút_to_phys_hñ≥r
(
pml4_t
 *
èbÀ
, 
uöçå_t
 
vaddr
)

94 i‡(
vaddr
 >(
uöçå_t
)
	`physm≠_°¨t
() &&

95 
vaddr
 < (
uöçå_t
)
	`physm≠_íd
())

97  
vaddr
 - 
PHYS_OFFSET
;

100 
uöt64_t
 
idx
;

103 
idx
 = 
	`PML4E
(
vaddr
);

104 
	`KASSERT
(
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]));

105 
èbÀ
 = (
pdp_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

108 
idx
 = 
	`PDPE
(
vaddr
);

109 
	`KASSERT
(
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]));

110 i‡(
USE_1GB_PAGES
 && 
	`IS_1GB_PAGE
(
èbÀ
->
phys
[
idx
]))

112  
	`PAGE_ALIGN_DOWN_1GB
(
èbÀ
->
phys
[
idx
]Ë+ 
	`PAGE_OFFSET_1GB
(
vaddr
);

114 
èbÀ
 = (
pd_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

117 
idx
 = 
	`PDE
(
vaddr
);

118 
	`KASSERT
(
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]));

119 i‡(
USE_2MB_PAGES
 && 
	`IS_2MB_PAGE
(
èbÀ
->
phys
[
idx
]))

121  
	`PAGE_ALIGN_DOWN_2MB
(
èbÀ
->
phys
[
idx
]Ë+ 
	`PAGE_OFFSET_2MB
(
vaddr
);

123 
èbÀ
 = (
±_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

126 
idx
 = 
	`PTE
(
vaddr
);

128 
	`KASSERT
(
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]));

130  (
uöçå_t
)
	`PAGE_ALIGN_DOWN
(
èbÀ
->
phys
[
idx
]Ë+ 
	`PAGE_OFFSET
(
vaddr
);

131 
	}
}

133 
uöçå_t
 
	$±_vút_to_phys
(
uöçå_t
 
vaddr
)

135 i‡(
vaddr
 >(
uöçå_t
)
	`physm≠_°¨t
() &&

136 
vaddr
 < (
uöçå_t
)
	`physm≠_íd
())

141  
vaddr
 - 
PHYS_OFFSET
;

143  
	`±_vút_to_phys_hñ≥r
(
	`±_gë
(), 
vaddr
);

144 
	}
}

146 
	$_fûl_±
(
±_t
 *
±
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, uöçå_à
vmax
)

148 
uöçå_t
 
idx
 = 
	`PTE
(
vaddr
); idx < 
PT_ENTRY_COUNT
 && vadd∏< 
vmax
;

149 
idx
++, 
∑ddr
 +
PAGE_SIZE
, 
vaddr
 += PAGE_SIZE)

151 
±
->
phys
[
idx
] = (
uöçå_t
)
∑ddr
 | 
PT_PRESENT
 | 
PT_WRITE
;

153 
	}
}

155 
	$_fûl_pd
(
pd_t
 *
pd
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, uöçå_à
vmax
,

156 
uöçå_t
 
max_∑ddr
)

158 
uöçå_t
 
idx
 = 
	`PDE
(
vaddr
); idx < 
PT_ENTRY_COUNT
 && vadd∏< 
vmax
;

159 
idx
++, 
∑ddr
 +
PT_VADDR_SIZE
, 
vaddr
 += PT_VADDR_SIZE)

161 
	`KASSERT
(!
	`IS_PRESENT
(
pd
->
phys
[
idx
]));

162 #i‡
USE_2MB_PAGES


163 i‡(
vmax
 - 
vaddr
 >
PT_VADDR_SIZE
)

165 
pd
->
phys
[
idx
] = 
∑ddr
 | 
PT_PRESENT
 | 
PT_WRITE
 | 
PT_SIZE
;

170 
uöçå_t
 
±
 = (uöçå_t)
	`∑ge_Æloc_bounded
((*)
max_∑ddr
);

171 i‡(!
±
)

175 
±
 -
PHYS_OFFSET
;

177 
	`mem£t
((*)
±
, 0, 
PAGE_SIZE
);

178 
pd
->
phys
[
idx
] = 
±
 | 
PT_PRESENT
 | 
PT_WRITE
;

179 
	`_fûl_±
((
±_t
 *)
±
, 
∑ddr
, 
vaddr
, 
vmax
);

182 
	}
}

184 
	$_fûl_pdp
(
pdp_t
 *
pdp
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, uöçå_à
vmax
,

185 
uöçå_t
 
max_∑ddr
)

187 
uöçå_t
 
idx
 = 
	`PDPE
(
vaddr
); idx < 
PT_ENTRY_COUNT
 && vadd∏< 
vmax
;

188 
idx
++, 
∑ddr
 +
PD_VADDR_SIZE
, 
vaddr
 += PD_VADDR_SIZE)

190 
	`KASSERT
(!
	`IS_PRESENT
(
pdp
->
phys
[
idx
]));

191 #i‡
USE_1GB_PAGES


192 i‡(
vmax
 - 
vaddr
 >
PD_VADDR_SIZE
)

194 
pdp
->
phys
[
idx
] = 
∑ddr
 | 
PT_PRESENT
 | 
PT_WRITE
 | 
PT_SIZE
;

199 
uöçå_t
 
pd
 = (uöçå_t)
	`∑ge_Æloc_bounded
((*)
max_∑ddr
);

200 i‡(!
pd
)

204 
pd
 -
PHYS_OFFSET
;

206 
	`mem£t
((*)
pd
, 0, 
PAGE_SIZE
);

207 
pdp
->
phys
[
idx
] = 
pd
 | 
PT_PRESENT
 | 
PT_WRITE
;

208 i‡(
	`_fûl_pd
((
pd_t
 *)
pd
, 
∑ddr
, 
vaddr
, 
vmax
, 
max_∑ddr
))

214 
	}
}

216 
	$_fûl_pml4
(
pml4_t
 *
pml4
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, uöçå_à
vmax
,

217 
uöçå_t
 
max_∑ddr
)

219 
uöçå_t
 
idx
 = 
	`PML4E
(
vaddr
); idx < 
PT_ENTRY_COUNT
 && vadd∏< 
vmax
;

220 
idx
++, 
∑ddr
 +
PDP_VADDR_SIZE
, 
vaddr
 += PDP_VADDR_SIZE)

222 
	`KASSERT
(!
	`IS_PRESENT
(
pml4
->
phys
[
idx
]));

224 
uöçå_t
 
pdp
 = (uöçå_t)
	`∑ge_Æloc_bounded
((*)
max_∑ddr
);

225 i‡(!
pdp
)

229 
pdp
 -
PHYS_OFFSET
;

231 
	`mem£t
((*)
pdp
, 0, 
PAGE_SIZE
);

232 
pml4
->
phys
[
idx
] = 
pdp
 | 
PT_PRESENT
 | 
PT_WRITE
;

233 i‡(
	`_fûl_pdp
((
pdp_t
 *)
pdp
, 
∑ddr
, 
vaddr
, 
vmax
, 
max_∑ddr
))

239 
	}
}

241 
	$±_m≠
(
pml4_t
 *
pml4
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
, 
uöt32_t
 
pdÊags
,

242 
uöt32_t
 
±Êags
)

244  
	`±_m≠_ønge
(
pml4
, 
∑ddr
, 
vaddr
, vadd∏+ 
PAGE_SIZE
, 
pdÊags
,

245 
±Êags
);

246 
	}
}

248 
	$±_m≠_ønge
(
pml4_t
 *
pml4
, 
uöçå_t
 
∑ddr
, uöçå_à
vaddr
,

249 
uöçå_t
 
vmax
, 
uöt32_t
 
pdÊags
, uöt32_à
±Êags
)

251 
	`dbg
(
DBG_PGTBL
, "[0x%p, 0x%pËm≠≥dÅÿ0x%p;Öml4: 0x%p\n", (*)
vaddr
,

252 (*)
vmax
, (*)
∑ddr
, 
pml4
);

253 
	`KASSERT
(
	`PAGE_ALIGNED
(
∑ddr
Ë&& PAGE_ALIGNED(
vaddr
Ë&& PAGE_ALIGNED(
vmax
));

254 
	`KASSERT
(
vmax
 > 
vaddr
 && (
±Êags
 & 
PAGE_MASK
) == 0 &&

255 (
pdÊags
 & 
PAGE_MASK
) == 0);

256 
	`KASSERT
((
pdÊags
 & 
PT_USER
Ë=(
±Êags
 & PT_USER));

257 
	`KASSERT
(!(
pdÊags
 & 
PT_SIZE
Ë&& !(
±Êags
 & PT_SIZE));

259 
vaddr
 < 
vmax
)

261 
uöt64_t
 
size
 = 
vmax
 - 
vaddr
;

263 
uöt64_t
 
idx
 = 
	`PML4E
(
vaddr
);

264 
pml4_t
 *
èbÀ
 = 
pml4
;

266 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

268 
uöçå_t
 
∑ge
 = (uöçå_t)
	`∑ge_Æloc
();

269 i‡(!
∑ge
)

271  -
ENOMEM
;

273 
	`mem£t
((*)
∑ge
, 0, 
PAGE_SIZE
);

274 
	`KASSERT
(
	`±_vút_to_phys
(
∑ge
Ë=∑gê- 
PHYS_OFFSET
);

275 
	`KASSERT
(*(
uöçå_t
 *)
∑ge
 == 0);

276 
èbÀ
->
phys
[
idx
] = (
∑ge
 - 
PHYS_OFFSET
Ë| 
pdÊags
;

282 
èbÀ
->
phys
[
idx
] |
pdÊags
;

284 
èbÀ
 = (
pdp_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

287 
idx
 = 
	`PDPE
(
vaddr
);

288 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

290 #i‡
USE_1GB_PAGES


291 i‡(
	`PAGE_ALIGNED_1GB
(
vaddr
Ë&& 
size
 > 
PAGE_SIZE_1GB
)

293 
èbÀ
->
phys
[
idx
] = (
uöçå_t
)
∑ddr
 | 
±Êags
 | 
PT_SIZE
;

294 
∑ddr
 +
PAGE_SIZE_1GB
;

295 
vaddr
 +
PAGE_SIZE_1GB
;

299 
uöçå_t
 
∑ge
 = (uöçå_t)
	`∑ge_Æloc
();

300 i‡(!
∑ge
)

302  -
ENOMEM
;

304 
	`mem£t
((*)
∑ge
, 0, 
PAGE_SIZE
);

305 
èbÀ
->
phys
[
idx
] = (
∑ge
 - 
PHYS_OFFSET
Ë| 
pdÊags
;

307 i‡(
	`IS_1GB_PAGE
(
èbÀ
->
phys
[
idx
]))

309 i‡(
	`PAGE_SAME_1GB
(
èbÀ
->
phys
[
idx
], 
∑ddr
) &&

310 
	`PAGE_OFFSET_1GB
(
∑ddr
Ë=PAGE_OFFSET_1GB(
vaddr
) &&

311 
	`PAGE_CONTROL_FLAGS
(
èbÀ
->
phys
[
idx
]Ë- 
PT_SIZE
 =
pdÊags
)

313 
vaddr
 = 
	`PAGE_ALIGN_UP_1GB
(vaddr + 1);

316 
pd_t
 *
pd
 = 
	`∑ge_Æloc
();

317 i‡(!
pd
)

319  -
ENOMEM
;

321 
i
 = 0; i < 
PT_ENTRY_COUNT
; i++)

323 
pd
->
phys
[
i
] =

324 
èbÀ
->
phys
[
idx
] +

325 
i
 * 
PAGE_SIZE_2MB
;

327 
èbÀ
->
phys
[
idx
] =

328 ((
uöçå_t
)
pd
 - 
PHYS_OFFSET
) |

329 
pdÊags
;

333 
èbÀ
->
phys
[
idx
] |
pdÊags
;

335 
èbÀ
 = (
pd_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

338 
idx
 = 
	`PDE
(
vaddr
);

339 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

341 #i‡
USE_2MB_PAGES


342 i‡(
	`PAGE_ALIGNED_2MB
(
vaddr
Ë&& 
size
 > 
PAGE_SIZE_2MB
)

344 
èbÀ
->
phys
[
idx
] = (
uöçå_t
)
∑ddr
 | 
±Êags
 | 
PT_SIZE
;

345 
∑ddr
 +
PAGE_SIZE_2MB
;

346 
vaddr
 +
PAGE_SIZE_2MB
;

350 
uöçå_t
 
∑ge
 = (uöçå_t)
	`∑ge_Æloc
();

351 i‡(!
∑ge
)

353  -
ENOMEM
;

355 
	`mem£t
((*)
∑ge
, 0, 
PAGE_SIZE
);

356 
èbÀ
->
phys
[
idx
] = (
∑ge
 - 
PHYS_OFFSET
Ë| 
pdÊags
;

358 i‡(
	`IS_2MB_PAGE
(
èbÀ
->
phys
[
idx
]))

360 i‡(
	`PAGE_SAME_2MB
(
èbÀ
->
phys
[
idx
], 
∑ddr
) &&

361 
	`PAGE_OFFSET_2MB
(
∑ddr
Ë=PAGE_OFFSET_2MB(
vaddr
) &&

362 
	`PAGE_CONTROL_FLAGS
(
èbÀ
->
phys
[
idx
]Ë- 
PT_SIZE
 =
±Êags
)

364 
vaddr
 = 
	`PAGE_ALIGN_UP_2MB
(vaddr + 1);

367 
±_t
 *
±
 = 
	`∑ge_Æloc
();

368 i‡(!
±
)

370  -
ENOMEM
;

372 
i
 = 0; i < 
PT_ENTRY_COUNT
; i++)

374 
±
->
phys
[
i
] = 
èbÀ
->phys[
idx
] + i * 
PAGE_SIZE
 -

375 
PT_SIZE
;

377 
èbÀ
->
phys
[
idx
] =

378 ((
uöçå_t
)
±
 - 
PHYS_OFFSET
Ë| 
pdÊags
;

382 
èbÀ
->
phys
[
idx
] |
pdÊags
;

384 
èbÀ
 = (
±_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

388 
idx
 = 
	`PTE
(
vaddr
);

389 
èbÀ
->
phys
[
idx
] = (
uöçå_t
)
∑ddr
 | 
±Êags
;

391 
	`KASSERT
(
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]));

393 
∑ddr
 +
PAGE_SIZE
;

394 
vaddr
 +
PAGE_SIZE
;

398 
	}
}

400 
	$_±_Áu…_h™dÀr
(
ªgs_t
 *
ªgs
)

402 
uöçå_t
 
vaddr
;

404 
__asm__
 volatile("movq %%cr2, %0"

405 : "Ù"(
vaddr
));

406 
uöçå_t
 
ˇu£
 = 
ªgs
->
r_îr
;

409 i‡(
ˇu£
 & 
FAULT_USER
)

411 
	`h™dÀ_∑geÁu…
(
vaddr
, 
ˇu£
);

415 
	`dump_ªgi°îs
(
ªgs
);

416 
	`∑nic
("\nKî√»∑gêÁu…áàvadd∏0x%p\n", (*)
vaddr
);

419 
	}
}

421 
	$±_öô
()

423 
öôed
 = 0;

424 i‡(!
öôed
)

426 
öôed
 = 1;

433 
uöçå_t
 
max_∑ddr
 = (1UL << 22);

434 
pml4_t
 *
pml4
 = 
	`∑ge_Æloc_bounded
((*)
max_∑ddr
);

435 i‡(!
pml4
)

436 
	`∑nic
("ran out of memory inÖt_init");

437 
pml4
 = (
pml4_t
 *)((
uöçå_t
Ìml4 - 
PHYS_OFFSET
);

438 
	`KASSERT
((
uöçå_t
)
pml4
 < 
max_∑ddr
);

439 
	`mem£t
(
pml4
, 0, 
PAGE_SIZE
);

442 i‡(
	`_fûl_pml4
(
pml4
, 
KERNEL_PHYS_BASE
, 
KERNEL_VMA
 + KERNEL_PHYS_BASE,

443 
KERNEL_VMA
 + 
KERNEL_PHYS_END
, 
max_∑ddr
))

444 
	`∑nic
("ran out of memory inÖt_init");

447 i‡(
	`_fûl_pml4
(
pml4
, 0, (
uöçå_t
)
	`physm≠_°¨t
(),

448 (
uöçå_t
)
	`physm≠_íd
(), 
max_∑ddr
))

449 
	`∑nic
("ran out of memory inÖt_init");

451 
	`∑ge_öô_föish
();

455 
	`±_£t
((
pml4_t
 *)((
uöçå_t
)
pml4
 + 
PHYS_OFFSET
));

456 
globÆ_kî√l_⁄ly_pml4
 = (
pml4_t
 *)((
uöçå_t
)
pml4
 + 
PHYS_OFFSET
);

458 
	`öå_ªgi°î
(
INTR_PAGE_FAULT
, 
_±_Áu…_h™dÀr
);

460 
	`±_£t
(
globÆ_kî√l_⁄ly_pml4
);

461 
	}
}

463 
±_t
 *
	$˛⁄e_±
(
±_t
 *
±
)

465 
±_t
 *
˛⁄e
 = 
	`∑ge_Æloc
();

466 
	`dbg
(
DBG_PRINT
, "˛⁄ögÖà© 0x%∞tÿ0x%p\n", 
±
, 
˛⁄e
);

467 i‡(
˛⁄e
)

469 
	`mem˝y
(
˛⁄e
, 
±
, 
PAGE_SIZE
);

471  
˛⁄e
;

472 
	}
}

474 
pd_t
 *
	$˛⁄e_pd
(
pd_t
 *
pd
)

476 
pd_t
 *
˛⁄e
 = 
	`∑ge_Æloc
();

477 
	`dbg
(
DBG_PRINT
, "˛⁄ögÖdáà0x%∞tÿ0x%p\n", 
pd
, 
˛⁄e
);

478 i‡(!
˛⁄e
)

480  
NULL
;

482 
	`mem£t
(
˛⁄e
, 0, 
PAGE_SIZE
);

484 
i
 = 0; i < 
PT_ENTRY_COUNT
; i++)

487 i‡(
pd
->
phys
[
i
])

489 i‡(
	`IS_2MB_PAGE
(
pd
->
phys
[
i
]))

491 
˛⁄e
->
phys
[
i
] = 
pd
->phys[i];

494 
±_t
 *
˛⁄ed_±
 =

495 
	`˛⁄e_±
((
±_t
 *)((
pd
->
phys
[
i
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
));

496 i‡(!
˛⁄ed_±
)

498  
NULL
;

500 
˛⁄e
->
phys
[
i
] = (((
uöçå_t
)
˛⁄ed_±
Ë- 
PHYS_OFFSET
) |

501 
	`PAGE_FLAGS
(
pd
->
phys
[
i
]);

505 
˛⁄e
->
phys
[
i
] = 0;

508  
˛⁄e
;

509 
	}
}

511 
pdp_t
 *
	$˛⁄e_pdp
(
pdp_t
 *
pdp
)

513 
pdp_t
 *
˛⁄e
 = 
	`∑ge_Æloc
();

514 
	`dbg
(
DBG_PRINT
, "˛⁄ögÖd∞© 0x%∞tÿ0x%p\n", 
pdp
, 
˛⁄e
);

515 i‡(!
˛⁄e
)

517  
NULL
;

519 
	`mem£t
(
˛⁄e
, 0, 
PAGE_SIZE
);

521 
i
 = 0; i < 
PT_ENTRY_COUNT
; i++)

524 i‡(
pdp
->
phys
[
i
])

526 i‡(
	`IS_1GB_PAGE
(
pdp
->
phys
[
i
]))

528 
˛⁄e
->
phys
[
i
] = 
pdp
->phys[i];

531 
pd_t
 *
˛⁄ed_pd
 =

532 
	`˛⁄e_pd
((
pd_t
 *)((
pdp
->
phys
[
i
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
));

533 i‡(!
˛⁄ed_pd
)

535  
NULL
;

537 
˛⁄e
->
phys
[
i
] = (((
uöçå_t
)
˛⁄ed_pd
Ë- 
PHYS_OFFSET
) |

538 
	`PAGE_FLAGS
(
pdp
->
phys
[
i
]);

542 
˛⁄e
->
phys
[
i
] = 0;

545  
˛⁄e
;

546 
	}
}

548 
pml4_t
 *
	$˛⁄e_pml4
(
pml4_t
 *
pml4
, 
ö˛ude_u£r_m≠pögs
)

550 
pml4_t
 *
˛⁄e
 = 
	`∑ge_Æloc
();

551 
	`dbg
(
DBG_PRINT
, "˛⁄ögÖml4áà0x%∞tÿ0x%p\n", 
pml4
, 
˛⁄e
);

552 i‡(!
˛⁄e
)

554  
NULL
;

556 
	`mem£t
(
˛⁄e
, 0, 
PAGE_SIZE
);

558 
uöçå_t
 
i
 = 
ö˛ude_u£r_m≠pögs
 ? 0 : 
PT_ENTRY_COUNT
 / 2;

559 
i
 < 
PT_ENTRY_COUNT
; i++)

562 i‡(
pml4
->
phys
[
i
])

564 
pdp_t
 *
˛⁄ed_pdp
 =

565 
	`˛⁄e_pdp
((
pdp_t
 *)((
pml4
->
phys
[
i
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
));

566 i‡(!
˛⁄ed_pdp
)

568 
	`±_de°roy
(
˛⁄e
);

569  
NULL
;

571 
˛⁄e
->
phys
[
i
] = (((
uöçå_t
)
˛⁄ed_pdp
Ë- 
PHYS_OFFSET
) |

572 
	`PAGE_FLAGS
(
pml4
->
phys
[
i
]);

576 
˛⁄e
->
phys
[
i
] = 0;

579  
˛⁄e
;

580 
	}
}

582 
pml4_t
 *
	$±_¸óã
(Ë{  
	`˛⁄e_pml4
(
	`±_gë
(), 0); 
	}
}

584 
	$±_de°roy_hñ≥r
(
±_t
 *
±
, 
dïth
)

587 i‡(
dïth
 != 1)

589 
uöçå_t
 
i
 = 0; i < 
PT_ENTRY_COUNT
; i++)

591 i‡(!
±
->
phys
[
i
] || (
PT_SIZE
 &Öt->phys[i]))

595 
	`KASSERT
(
	`IS_PRESENT
(
±
->
phys
[
i
]Ë&& (±->phys[i] & 
PAGE_MASK
));

596 
	`±_de°roy_hñ≥r
((
±_t
 *)((
±
->
phys
[
i
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
),

597 
dïth
 - 1);

598 
±
->
phys
[
i
] = 0;

601 
	`∑ge_‰ì
(
±
);

602 
	}
}

604 
	$±_de°roy
(
pml4_t
 *
pml4
Ë{ 
	`±_de°roy_hñ≥r
’ml4, 4); 
	}
}

606 
	$±_unm≠
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
)

608 
	`±_unm≠_ønge
(
pml4
, 
vaddr
, vadd∏+ 
PAGE_SIZE
);

609 
	}
}

611 
	$±_unm≠_ønge
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
, uöçå_à
vmax
)

615 
	`dbg
(
DBG_PGTBL
, "vút[0x%p, 0x%p);Öml4: 0x%p\n", (*)
vaddr
,

616 (*)
vmax
, 
pml4
);

617 
	`KASSERT
(
	`PAGE_ALIGNED
(
vaddr
Ë&& PAGE_ALIGNED(
vmax
) && vmax > vaddr);

619 
uöçå_t
 
vaddr_°¨t
 = 
vaddr
;

621 
vaddr
 < 
vmax
)

623 
uöt64_t
 
size
 = 
vmax
 - 
vaddr
;

625 
uöt64_t
 
idx
 = 
	`PML4E
(
vaddr
);

626 
pml4_t
 *
èbÀ
 = 
pml4
;

628 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

630 
vaddr
 = 
	`PAGE_ALIGN_UP_512GB
(vaddr + 1);

633 
èbÀ
 = (
pdp_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

636 
idx
 = 
	`PDPE
(
vaddr
);

637 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

639 
vaddr
 = 
	`PAGE_ALIGN_UP_1GB
(vaddr + 1);

643 i‡(
	`IS_1GB_PAGE
(
èbÀ
->
phys
[
idx
]))

645 i‡(
	`PAGE_ALIGNED_1GB
(
vaddr
Ë&& 
size
 >
PAGE_SIZE_1GB
)

647 
èbÀ
->
phys
[
idx
] = 0;

648 
vaddr
 +
PAGE_SIZE_1GB
;

652 
pd_t
 *
pd
 = 
	`∑ge_Æloc
();

653 i‡(!
pd
)

655 
	`∑nic
(

659 
uöt64_t
 
unm≠_°¨t
 = 
	`PDE
(
vaddr
);

660 
uöt64_t
 
unm≠_íd
 =

661 
	`PAGE_SAME_1GB
(
vaddr
, 
vmax
Ë? 
	`PDE
(vmax) : 512;

662 
i
 = 0; i < 
unm≠_°¨t
; i++)

664 
pd
->
phys
[
i
] = 
èbÀ
->phys[
idx
] +

665 
i
 * 
PAGE_SIZE_2MB
;

668 
	`mem£t
(&
pd
->
phys
[
unm≠_°¨t
], 0,

669 (
uöt64_t
Ë* (
unm≠_íd
 - 
unm≠_°¨t
));

670 
vaddr
 +(
unm≠_íd
 - 
unm≠_°¨t
Ë* 
PAGE_SIZE_2MB
;

671 
uöçå_t
 
i
 = 
unm≠_íd
; unm≠_íd < 
PT_ENTRY_COUNT
; i++)

673 
pd
->
phys
[
i
] = 
èbÀ
->phys[
idx
] +

674 
i
 * 
PAGE_SIZE_2MB
;

677 
èbÀ
->
phys
[
idx
] = ((
uöçå_t
)
pd
 - 
PHYS_OFFSET
) |

678 
	`PAGE_CONTROL_FLAGS
(
èbÀ
->
phys
[
idx
]);

682 
èbÀ
 = (
pd_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

685 
idx
 = 
	`PDE
(
vaddr
);

686 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

688 
vaddr
 = 
	`PAGE_ALIGN_UP_2MB
(vaddr + 1);

691 i‡(
	`IS_2MB_PAGE
(
èbÀ
->
phys
[
idx
]))

693 i‡(
	`PAGE_ALIGNED_2MB
(
vaddr
Ë&& 
size
 >
PAGE_SIZE_2MB
)

695 
èbÀ
->
phys
[
idx
] = 0;

696 
vaddr
 +
PAGE_SIZE_2MB
;

700 
±_t
 *
±
 = 
	`∑ge_Æloc
();

701 i‡(!
±
)

703 
	`∑nic
(

707 
uöt64_t
 
unm≠_°¨t
 = 
	`PTE
(
vaddr
);

708 
uöt64_t
 
unm≠_íd
 =

709 
	`PAGE_SAME_2MB
(
vaddr
, 
vmax
Ë? 
	`PTE
(vmax) : 512;

710 
i
 = 0; i < 
unm≠_°¨t
; i++)

712 
±
->
phys
[
i
] = 
èbÀ
->phys[
idx
] + i * 
PAGE_SIZE
 -

713 
PT_SIZE
;

715 
	`mem£t
(&
±
->
phys
[
unm≠_°¨t
], 0,

716 (
uöt64_t
Ë* (
unm≠_íd
 - 
unm≠_°¨t
));

717 
vaddr
 +(
unm≠_íd
 - 
unm≠_°¨t
Ë* 
PAGE_SIZE
;

718 
uöçå_t
 
i
 = 
unm≠_íd
; unm≠_íd < 
PT_ENTRY_COUNT
; i++)

720 
±
->
phys
[
i
] = 
èbÀ
->phys[
idx
] + i * 
PAGE_SIZE
 -

721 
PT_SIZE
;

723 
èbÀ
->
phys
[
idx
] =

724 ((
uöçå_t
)
±
 - 
PHYS_OFFSET
) |

725 (
	`PAGE_CONTROL_FLAGS
(
èbÀ
->
phys
[
idx
]Ë- 
PT_SIZE
);

729 
èbÀ
 = (
±_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

732 
idx
 = 
	`PTE
(
vaddr
);

733 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

735 
vaddr
 +
PAGE_SIZE
;

738 
èbÀ
->
phys
[
idx
] = 0;

740 
vaddr
 +
PAGE_SIZE
;

742 
	`KASSERT
(
	`_vaddr_°©us
(
pml4
, 
vaddr_°¨t
Ë=
UNMAPPED
);

743 
	}
}

745 *
	gíåy_°rögs
[] = {

752 
ölöe
 
	$_vaddr_°©us_dëaûed
(
pml4_t
 *
pml4
, 
uöçå_t
 
vaddr
)

754 
uöçå_t
 
idx
;

755 
pml4_t
 *
èbÀ
 = 
pml4
;

757 
idx
 = 
	`PML4E
(
vaddr
);

758 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

762 
èbÀ
 = (
pdp_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

765 
idx
 = 
	`PDPE
(
vaddr
);

766 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

770 i‡(
	`IS_1GB_PAGE
(
èbÀ
->
phys
[
idx
]))

774 
èbÀ
 = (
pd_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

777 
idx
 = 
	`PDE
(
vaddr
);

778 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

782 i‡(
	`IS_2MB_PAGE
(
èbÀ
->
phys
[
idx
]))

786 
èbÀ
 = (
±_t
 *)(—abÀ->
phys
[
idx
] & 
PAGE_MASK
Ë+ 
PHYS_OFFSET
);

789 
idx
 = 
	`PTE
(
vaddr
);

790 i‡(!
	`IS_PRESENT
(
èbÀ
->
phys
[
idx
]))

795 
	}
}

797 
	$check_övÆid_m≠pögs
(
pml4_t
 *
pml4
, 
vmm≠_t
 *
vmm≠
, *
¥om±
)

802 
uöçå_t
 
vaddr
 = 
USER_MEM_LOW
;

803 
vaddr
 < 
USER_MEM_HIGH
)

805 
°©e
 = 
	`_vaddr_°©us_dëaûed
(
pml4
, 
vaddr
);

806 i‡(
°©e
 > 0)

808 
uöçå_t
 
∑ddr
 = 
	`±_vút_to_phys_hñ≥r
(
pml4
, 
vaddr
);

810 
vm¨ó_t
 *
vma
 = 
	`vmm≠_lookup
(
vmm≠
, 
	`ADDR_TO_PN
(
vaddr
));

811 i‡(!
vma
)

813 
	`dbg
(
DBG_PGTBL
,

816 
¥om±
, 
pml4
, (*)
vaddr
, (*)
∑ddr
);

817 
	`±_unm≠
(
pml4
, 
vaddr
);

821 
p‰ame_t
 *
pf
 = 
NULL
;

822 
uöçå_t
 
∑gíum
 =

823 
vma
->
vma_off
 + (
	`ADDR_TO_PN
(
vaddr
Ë- vma->
vma_°¨t
);

825 
	`mobj_lock
(
vma
->
vma_obj
);

826 
ªt
 = 
	`mobj_gë_p‰ame
(
vma
->
vma_obj
, 
∑gíum
, 0, &
pf
);

827 
	`mobj_u∆ock
(
vma
->
vma_obj
);

828 i‡(
ªt
)

830 
	`dbg
(
DBG_PGTBL
,

833 
¥om±
, 
pml4
, (*)
vaddr
, (*)
∑ddr
);

834 
	`±_unm≠
(
pml4
, 
vaddr
);

838 
uöçå_t
 
pf_∑ddr
 =

839 
	`±_vút_to_phys_hñ≥r
(
pml4
, (
uöçå_t
)
pf
->
pf_addr
);

840 i‡(
pf_∑ddr
 !
∑ddr
)

842 
	`dbg
(
DBG_PGTBL
,

845 
¥om±
, 
pml4
, (*)
vaddr
, (*)
∑ddr
,

846 (*)
pf_∑ddr
, 
vma
->
vma_obj
, 
pf
->
pf_∑gíum
);

847 
	`±_unm≠
(
pml4
, 
vaddr
);

852 
°©e
)

856 
vaddr
 = (
uöçå_t
)
	`PAGE_ALIGN_UP
(vaddr + 1);

859 
vaddr
 = (
uöçå_t
)
	`PAGE_ALIGN_UP_2MB
(vaddr + 1);

862 
vaddr
 = (
uöçå_t
)
	`PAGE_ALIGN_UP_1GB
(vaddr + 1);

865 
vaddr
 = (
uöçå_t
)
	`PAGE_ALIGN_UP_512GB
(vaddr + 1);

870 
	`∑nic
("shouldÇot get here!");

873 
	}
}

	@kernel/mm/pframe.c

1 
	~"globÆs.h
"

3 
	~"mm/p‰ame.h
"

4 
	~"mm/¶ab.h
"

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

9 
¶ab_Æloˇt‹_t
 *
	gp‰ame_Æloˇt‹
;

11 
	$p‰ame_öô
()

13 
p‰ame_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("p‰ame", (
p‰ame_t
));

14 
	`KASSERT
(
p‰ame_Æloˇt‹
);

15 
	}
}

20 
p‰ame_t
 *
	$p‰ame_¸óã
()

22 
p‰ame_t
 *
pf
 = 
	`¶ab_obj_Æloc
(
p‰ame_Æloˇt‹
);

23 i‡(!
pf
)

25  
NULL
;

27 
	`mem£t
(
pf
, 0, (
p‰ame_t
));

28 
	`kmuãx_öô
(&
pf
->
pf_muãx
);

29 
	`li°_lök_öô
(&
pf
->
pf_lök
);

30  
pf
;

31 
	}
}

39 
	$p‰ame_‰ì
(
p‰ame_t
 **
pÂ
)

41 
	`KASSERT
(
	`kmuãx_owns_muãx
(&(*
pÂ
)->
pf_muãx
));

42 
	`KASSERT
(!(*
pÂ
)->
pf_addr
);

43 
	`KASSERT
(!(*
pÂ
)->
pf_dúty
);

44 
	`KASSERT
(!
	`li°_lök_is_löked
(&(*
pÂ
)->
pf_lök
));

45 
	`kmuãx_u∆ock
(&(*
pÂ
)->
pf_muãx
);

46 
	`¶ab_obj_‰ì
(
p‰ame_Æloˇt‹
, *
pÂ
);

47 *
pÂ
 = 
NULL
;

48 
	}
}

53 
	$p‰ame_ªÀa£
(
p‰ame_t
 **
pÂ
)

55 
p‰ame_t
 *
pf
 = *
pÂ
;

56 
	`KASSERT
(
	`kmuãx_owns_muãx
(&
pf
->
pf_muãx
));

57 *
pÂ
 = 
NULL
;

58 
	`kmuãx_u∆ock
(&
pf
->
pf_muãx
);

59 
	}
}

	@kernel/mm/slab.c

18 
	~"mm/¶ab.h
"

19 
	~"mm/mm.h
"

20 
	~"mm/∑ge.h
"

21 
	~"ty≥s.h
"

22 
	~"utû/debug.h
"

23 
	~"utû/gdb.h
"

24 
	~"utû/°rög.h
"

26 #ifde‡
SLAB_REDZONE


27 
	#‰⁄t_rz
(
obj
Ë(*(
uöçå_t
 *)(obj))

	)

28 
	#ª¨_rz
(
ˇche
, 
obj
) \

29 (*(
uöçå_t
 *)(((uöçå_t)(
obj
)Ë+ (
ˇche
)->
ß_objsize
 - \

30 (
uöçå_t
)))

	)

32 
	#VERIFY_REDZONES
(
ˇche
, 
obj
) \

35 i‡(
	`‰⁄t_rz
(
obj
Ë!
SLAB_REDZONE
) \

36 
	`∑nic
("alloc:Ñed-zone check failed: *(0x%p)=0x%.8lx\n", \

37 (*)&
	`‰⁄t_rz
(
obj
), front_rz(obj)); \

38 i‡(
	`ª¨_rz
(
ˇche
, 
obj
Ë!
SLAB_REDZONE
) \

39 
	`∑nic
("alloc:Ñed-zone check failed: *(0x%p)=0x%.8lx\n", \

40 (*)&
	`ª¨_rz
(
ˇche
, 
obj
),Ñear_rz(cache, obj)); \

41 } 0);

	)

45 
	s¶ab


47 
¶ab
 *
	ms_√xt
;

48 
size_t
 
	ms_öu£
;

49 *
	ms_‰ì
;

50 *
	ms_addr
;

53 
	s¶ab_Æloˇt‹


55 c⁄° *
	mß_«me
;

56 
size_t
 
	mß_objsize
;

57 
¶ab
 *
	mß_¶abs
;

58 
size_t
 
	mß_‹dî
;

59 
size_t
 
	mß_¶ab_nobjs
;

60 
¶ab_Æloˇt‹
 *
	mß_√xt
;

61 } 
	t¶ab_Æloˇt‹_t
;

65 
	s¶ab_buf˘l


68 *
	msb_√xt
;

69 
¶ab
 *
	msb_¶ab
;

70 } 
	mu
;

71 #ifde‡
SLAB_CHECK_FREE


72 
uöt8_t
 
	msb_‰ì
;

74 } 
	t¶ab_buf˘l_t
;

75 
	#sb_√xt
 
u
.
sb_√xt


	)

76 
	#sb_¶ab
 
u
.
sb_¶ab


	)

79 
	#obj_buf˘l
(
Æloˇt‹
, 
obj
) \

80 ((
¶ab_buf˘l_t
 *)(((
uöçå_t
)(
obj
)Ë+ (
Æloˇt‹
)->
ß_objsize
))

	)

82 
	#buf˘l_obj
(
Æloˇt‹
, 
buf
) \

83 ((*)(((
uöçå_t
)(
buf
)Ë- (
Æloˇt‹
)->
ß_objsize
))

	)

85 
	#√xt_obj
(
Æloˇt‹
, 
obj
) \

86 ((*)(((
uöçå_t
)(
obj
)Ë+ (
Æloˇt‹
)->
ß_objsize
 + \

87 (
¶ab_buf˘l_t
)))

	)

89 
	$GDB_DEFINE_HOOK
(
¶ab_obj_Æloc
, *
addr
, 
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

91 
	$GDB_DEFINE_HOOK
(
¶ab_obj_‰ì
, *
addr
, 
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

94 
¶ab_Æloˇt‹_t
 *
¶ab_Æloˇt‹s
 = 
NULL
;

97 
¶ab_Æloˇt‹_t
 
¶ab_Æloˇt‹_Æloˇt‹
;

104 
	#SLAB_MAX_ORDER
 5

	)

111 
size_t
 
	$_¶ab_size
(
size_t
 
objsize
, size_à
nobjs
)

113  (
nobjs
 * (
objsize
 + (
¶ab_buf˘l_t
)Ë+ (
¶ab
));

114 
	}
}

122 
size_t
 
	$_¶ab_nobjs
(
size_t
 
objsize
, size_à
‹dî
)

124  (((
PAGE_SIZE
 << 
‹dî
Ë- (
¶ab
)) /

125 (
objsize
 + (
¶ab_buf˘l_t
)));

126 
	}
}

128 
size_t
 
	$_¶ab_wa°e
(
size_t
 
objsize
, size_à
‹dî
)

134  ((
PAGE_SIZE
 << 
‹dî
) -

135 
	`_¶ab_size
(
objsize
, 
	`_¶ab_nobjs
(objsize, 
‹dî
)));

136 
	}
}

138 
	$_ˇlc_¶ab_size
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

140 
size_t
 
be°_‹dî
;

141 
size_t
 
be°_wa°e
;

142 
size_t
 
‹dî
;

143 
size_t
 
mö‹dî
;

144 
size_t
 
mösize
;

145 
size_t
 
wa°e
;

148 
mösize
 = 
	`_¶ab_size
(
Æloˇt‹
->
ß_objsize
, 1);

149 
mö‹dî
 = 0; mö‹dî < 
PAGE_NSIZES
; minorder++)

151 i‡((
PAGE_SIZE
 << 
mö‹dî
Ë>
mösize
)

156 i‡(
mö‹dî
 =
PAGE_NSIZES
)

157 
	`∑nic
("unableÅo find minorder\n");

160 
be°_‹dî
 = 
mö‹dî
;

161 
be°_wa°e
 = 
	`_¶ab_wa°e
(
Æloˇt‹
->
ß_objsize
, 
mö‹dî
);

163 
	`dbg
(
DBG_MM
, "ˇlc_¶ab_size: mö‹dî %lu, wa°ê%lu\n", 
mö‹dî
,

164 
be°_wa°e
);

170 
‹dî
 = 
mö‹dî
 + 1; ordî < 
SLAB_MAX_ORDER
; order++)

172 i‡((
wa°e
 = 
	`_¶ab_wa°e
(
Æloˇt‹
->
ß_objsize
, 
‹dî
)Ë< 
be°_wa°e
)

174 
be°_wa°e
 = 
wa°e
;

175 
be°_‹dî
 = 
‹dî
;

176 
	`dbg
(
DBG_MM
, "calc_slab_size:Ñeplacing with order %lu, waste %lu\n",

177 
be°_‹dî
, 
be°_wa°e
);

183 
Æloˇt‹
->
ß_‹dî
 = 
be°_‹dî
;

184 
Æloˇt‹
->
ß_¶ab_nobjs
 = 
	`_¶ab_nobjs
◊Œoˇt‹->
ß_objsize
, 
be°_‹dî
);

185 
	`KASSERT
(
Æloˇt‹
->
ß_¶ab_nobjs
);

186 
	}
}

191 
	$_Æloˇt‹_öô
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
, c⁄° *
«me
,

192 
size_t
 
size
)

194 #ifde‡
SLAB_REDZONE


198 
size
 +2 * (
uöçå_t
);

201 i‡(!
«me
)

203 
«me
 = "<unnamed>";

206 
Æloˇt‹
->
ß_«me
 = 
«me
;

207 
Æloˇt‹
->
ß_objsize
 = 
size
;

208 
Æloˇt‹
->
ß_¶abs
 = 
NULL
;

210 
	`_ˇlc_¶ab_size
(
Æloˇt‹
);

213 
Æloˇt‹
->
ß_√xt
 = 
¶ab_Æloˇt‹s
;

214 
¶ab_Æloˇt‹s
 = 
Æloˇt‹
;

216 
	`dbg
(
DBG_MM
, "InitializedÇew slabállocator:\n");

217 
	`dbgq
(
DBG_MM
, " Name: \"%s\" (0x%p)\n", 
Æloˇt‹
->
ß_«me
,

218 
Æloˇt‹
);

219 
	`dbgq
(
DBG_MM
, " Obje˘ Size: %lu\n", 
Æloˇt‹
->
ß_objsize
);

220 
	`dbgq
(
DBG_MM
, " Ordî: %lu\n", 
Æloˇt‹
->
ß_‹dî
);

221 
	`dbgq
(
DBG_MM
, " Sœb C≠acôy: %lu\n", 
Æloˇt‹
->
ß_¶ab_nobjs
);

222 
	}
}

229 
¶ab_Æloˇt‹_t
 *
	$¶ab_Æloˇt‹_¸óã
(c⁄° *
«me
, 
size_t
 
size
)

231 
¶ab_Æloˇt‹_t
 *
Æloˇt‹
;

233 
Æloˇt‹
 = (
¶ab_Æloˇt‹_t
 *)
	`¶ab_obj_Æloc
(&
¶ab_Æloˇt‹_Æloˇt‹
);

234 i‡(!
Æloˇt‹
)

236  
NULL
;

239 
	`_Æloˇt‹_öô
(
Æloˇt‹
, 
«me
, 
size
);

240  
Æloˇt‹
;

241 
	}
}

246 
	$¶ab_Æloˇt‹_de°roy
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

248 
	`¶ab_obj_‰ì
(&
¶ab_Æloˇt‹_Æloˇt‹
, 
Æloˇt‹
);

249 
	}
}

255 
	$_¶ab_Æloˇt‹_grow
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

257 *
addr
;

258 *
obj
;

259 
¶ab
 *slab;

261 
addr
 = 
	`∑ge_Æloc_n
(1UL << 
Æloˇt‹
->
ß_‹dî
);

262 i‡(!
addr
)

268 
obj
 = 
addr
;

269 
size_t
 
i
 = 0; i < (
Æloˇt‹
->
ß_¶ab_nobjs
 - 1); i++)

271 #ifde‡
SLAB_CHECK_FREE


272 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

274 
obj
 = 
	`obj_buf˘l
(
Æloˇt‹
, obj)->
sb_√xt
 = 
	`√xt_obj
(allocator, obj);

278 #ifde‡
SLAB_CHECK_FREE


279 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

281 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
 = 
NULL
;

284 
¶ab
 = (¶ab *)
	`√xt_obj
(
Æloˇt‹
, 
obj
);

290 
¶ab
->
s_‰ì
 = 
addr
;

291 
¶ab
->
s_addr
 = 
addr
;

292 
¶ab
->
s_öu£
 = 0;

295 
obj
 = 
addr
;

296 
size_t
 
i
 = 0; i < 
Æloˇt‹
->
ß_¶ab_nobjs
; i++)

298 #ifde‡
SLAB_REDZONE


299 
	`‰⁄t_rz
(
obj
Ë
SLAB_REDZONE
;

300 
	`ª¨_rz
(
Æloˇt‹
, 
obj
Ë
SLAB_REDZONE
;

302 
obj
 = 
	`√xt_obj
(
Æloˇt‹
, obj);

305 
	`dbg
(
DBG_MM
, "Growing cache \"%s\" (0x%p),Çew slab 0x%p (%luÖages)\n",

306 
Æloˇt‹
->
ß_«me
,áŒoˇt‹, 
¶ab
, 1UL <<áŒoˇt‹->
ß_‹dî
);

309 
¶ab
->
s_√xt
 = 
Æloˇt‹
->
ß_¶abs
;

310 
Æloˇt‹
->
ß_¶abs
 = 
¶ab
;

313 
	}
}

318 *
	$¶ab_obj_Æloc
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
)

320 
¶ab
 *slab;

321 *
obj
;

326 
¶ab
 = 
Æloˇt‹
->
ß_¶abs
;

327 
¶ab
 && (¶ab->
s_öu£
 =
Æloˇt‹
->
ß_¶ab_nobjs
))

328 
¶ab
 = sœb->
s_√xt
;

329 i‡(
¶ab
 && (¶ab->
s_öu£
 < 
Æloˇt‹
->
ß_¶ab_nobjs
))

333 i‡(!
	`_¶ab_Æloˇt‹_grow
(
Æloˇt‹
))

335  
NULL
;

344 
obj
 = 
¶ab
->
s_‰ì
;

345 
¶ab
->
s_‰ì
 = 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
;

346 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_¶ab
 = 
¶ab
;

347 #ifde‡
SLAB_CHECK_FREE


348 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 0;

351 
¶ab
->
s_öu£
++;

353 
	`dbg
(
DBG_MM
,

356 
obj
, 
Æloˇt‹
->
ß_«me
,áŒoˇt‹,áŒoˇt‹, 
¶ab
->
s_öu£
);

358 #ifde‡
SLAB_REDZONE


359 
	`VERIFY_REDZONES
(
Æloˇt‹
, 
obj
);

364 
obj
 = (*)((
uöçå_t
)obj + (uintptr_t));

367 
	`GDB_CALL_HOOK
(
¶ab_obj_Æloc
, 
obj
, 
Æloˇt‹
);

368  
obj
;

369 
	}
}

371 
	$¶ab_obj_‰ì
(
¶ab_Æloˇt‹_t
 *
Æloˇt‹
, *
obj
)

373 
¶ab
 *slab;

374 
	`GDB_CALL_HOOK
(
¶ab_obj_‰ì
, 
obj
, 
Æloˇt‹
);

376 #ifde‡
SLAB_REDZONE


378 
obj
 = (*)((
uöçå_t
)obj - (uintptr_t));

380 
	`VERIFY_REDZONES
(
Æloˇt‹
, 
obj
);

383 #ifde‡
SLAB_CHECK_FREE


384 
	`KASSERT
(!
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 && "INVALID FREE!");

385 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_‰ì
 = 1;

388 
¶ab
 = 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_¶ab
;

391 
	`obj_buf˘l
(
Æloˇt‹
, 
obj
)->
sb_√xt
 = 
¶ab
->
s_‰ì
;

392 
¶ab
->
s_‰ì
 = 
obj
;

394 
¶ab
->
s_öu£
--;

396 
	`dbg
(
DBG_MM
, "Freed object 0x%p from \"%s\" (0x%p), slab 0x%p, inuse %lu\n",

397 
obj
, 
Æloˇt‹
->
ß_«me
,áŒoˇt‹, 
¶ab
, sœb->
s_öu£
);

398 
	}
}

407 
	$¶ab_Æloˇt‹s_ª˛aim
(
èrgë
)

409 
	`∑nic
("slab_allocators_reclaim NYI for SMP");

441 
	}
}

443 
	#KMALLOC_SIZE_MIN_ORDER
 (6)

	)

444 
	#KMALLOC_SIZE_MAX_ORDER
 (18)

	)

446 
¶ab_Æloˇt‹_t


447 *
	gkmÆloc_Æloˇt‹s
[
KMALLOC_SIZE_MAX_ORDER
 - 
KMALLOC_SIZE_MIN_ORDER
 + 1];

452 c⁄° *
	gkmÆloc_Æloˇt‹_«mes
[] = {

457 *
	$kmÆloc
(
size_t
 
size
)

459 
size
 +(
¶ab_Æloˇt‹_t
 *);

465 
¶ab_Æloˇt‹_t
 **
cs
 = 
kmÆloc_Æloˇt‹s
;

466 
size_t
 
‹dî
 = 
KMALLOC_SIZE_MIN_ORDER
; ordî <
KMALLOC_SIZE_MAX_ORDER
;

467 
‹dî
++, 
cs
++)

469 i‡((1UL << 
‹dî
Ë>
size
)

471 *
addr
 = 
	`¶ab_obj_Æloc
(*
cs
);

472 i‡(!
addr
)

474 
	`dbg
(
DBG_MM
, "WARNING: kmalloc out of memory\n");

475  
NULL
;

477 #ifde‡
MM_POISON


478 
	`mem£t
(
addr
, 
MM_POISON_ALLOC
, 
size
);

480 *((
¶ab_Æloˇt‹_t
 **)
addr
Ë*
cs
;

481  (*)(((
¶ab_Æloˇt‹_t
 **)
addr
) + 1);

485 
	`∑nic
("sizêbiggîÅh™ max‹dî %ld\n", 
size
);

486 
	}
}

488 
__©åibuã__
((
u£d
)Ë*
	$mÆloc
(
size_t
 
size
)

493  
	`kmÆloc
(
size
);

494 
	}
}

496 
	$k‰ì
(*
addr
)

498 
addr
 = (*)(((
¶ab_Æloˇt‹_t
 **)addr) - 1);

499 
¶ab_Æloˇt‹_t
 *
ß
 = *(¶ab_Æloˇt‹_à**)
addr
;

501 #ifde‡
MM_POISON


506 
size_t
 
objsize
 = 
ß
->
ß_objsize
;

507 #ifde‡
SLAB_REDZONE


508 
objsize
 -(
uöçå_t
) * 2;

510 
	`mem£t
(
addr
, 
MM_POISON_FREE
, 
objsize
);

513 
	`¶ab_obj_‰ì
(
ß
, 
addr
);

514 
	}
}

516 
__©åibuã__
((
u£d
)Ë
	$‰ì
(*
addr
)

520 
	`k‰ì
(
addr
);

521 
	}
}

523 
	$¶ab_öô
()

527 
	`_Æloˇt‹_öô
(&
¶ab_Æloˇt‹_Æloˇt‹
, "slab_allocators",

528 (
¶ab_Æloˇt‹_t
));

534 
¶ab_Æloˇt‹_t
 **
cs
 = 
kmÆloc_Æloˇt‹s
;

535 
size_t
 
‹dî
 = 
KMALLOC_SIZE_MIN_ORDER
; ordî <
KMALLOC_SIZE_MAX_ORDER
;

536 
‹dî
++, 
cs
++)

538 i‡(
NULL
 ==

539 (*
cs
 = 
	`¶ab_Æloˇt‹_¸óã
(

540 
kmÆloc_Æloˇt‹_«mes
[
‹dî
 - 
KMALLOC_SIZE_MIN_ORDER
],

541 (1UL << 
‹dî
))))

543 
	`∑nic
("Couldn't create kmallocállocators!\n");

546 
	}
}

	@kernel/proc/context.c

2 
	~"¥oc/c⁄ãxt.h
"

3 
	~"¥oc/kthªad.h
"

4 
	~<maö/˝uid.h
>

6 
	~"maö/≠ic.h
"

7 
	~"maö/gdt.h
"

9 
	sc⁄ãxt_öôül_func_¨gs


11 
c⁄ãxt_func_t
 
	mfunc
;

12 
	m¨g1
;

13 *
	m¨g2
;

14 } 
	t∑cked
 
	tc⁄ãxt_öôül_func_¨gs_t
;

16 
	$__c⁄ãxt_thªad_öôül_func
(
c⁄ãxt_öôül_func_¨gs_t
 
¨gs
)

18 
	`¥ìm±i⁄_ª£t
();

19 
	`≠ic_£tùl
(
IPL_LOW
);

20 
	`öå_íabÀ
();

22 *
ªsu…
 = (
¨gs
.
func
)◊rgs.
¨g1
,árgs.
¨g2
);

23 
	`kthªad_exô
(
ªsu…
);

25 
	`∑nic
("\nReturned from kthread_exit.\n");

26 
	}
}

28 
	$c⁄ãxt_£tup_øw
(
c⁄ãxt_t
 *
c
, (*
func
)(), *
k°ack
,

29 
size_t
 
k°acksz
, 
pml4_t
 *
pml4
)

31 
	`KASSERT
(
NULL
 !
pml4
);

32 
	`KASSERT
(
	`PAGE_ALIGNED
(
k°ack
));

33 
c
->
c_k°ack
 = (
uöçå_t
)
k°ack
;

34 
c
->
c_k°acksz
 = 
k°acksz
;

35 
c
->
c_pml4
 = 
pml4
;

36 
c
->
c_r•
 = (
uöçå_t
)
k°ack
 + 
k°acksz
;

37 
c
->
c_r•
 -(
uöçå_t
);

38 *((
uöçå_t
 *)
c
->
c_r•
) = 0;

39 
c
->
c_rbp
 = c->
c_r•
;

40 
c
->
c_rù
 = (
uöçå_t
)
func
;

41 
	}
}

48 
	$c⁄ãxt_£tup
(
c⁄ãxt_t
 *
c
, 
c⁄ãxt_func_t
 
func
, 
¨g1
, *
¨g2
,

49 *
k°ack
, 
size_t
 
k°acksz
, 
pml4_t
 *
pml4
)

51 
	`KASSERT
(
NULL
 !
pml4
);

52 
	`KASSERT
(
	`PAGE_ALIGNED
(
k°ack
));

54 
c
->
c_k°ack
 = (
uöçå_t
)
k°ack
;

55 
c
->
c_k°acksz
 = 
k°acksz
;

56 
c
->
c_pml4
 = 
pml4
;

60 
c
->
c_r•
 = (
uöçå_t
)
k°ack
 + 
k°acksz
;

61 
c
->
c_r•
 -(
¨g2
);

62 *(**)
c
->
c_r•
 = 
¨g2
;

63 
c
->
c_r•
 -(
¨g1
);

64 *(*)
c
->
c_r•
 = 
¨g1
;

65 
c
->
c_r•
 -(
c⁄ãxt_func_t
);

66 *(
c⁄ãxt_func_t
 *)
c
->
c_r•
 = 
func
;

68 
c
->
c_r•
 -(
uöçå_t
);

70 
c
->
c_rbp
 = c->
c_r•
;

71 
c
->
c_rù
 = (
uöçå_t
)
__c⁄ãxt_thªad_öôül_func
;

72 
	}
}

83 
	$c⁄ãxt_make_a˘ive
(
c⁄ãxt_t
 *
c
)

86 
	`±_£t
(
c
->
c_pml4
);

89 
__asm__
 volatile(

94 ::"m"(
c
->
c_rbp
),

95 "m"(
c
->
c_r•
), "m"(c->
c_rù
));

96 
	}
}

98 
	$c⁄ãxt_swôch
(
c⁄ãxt_t
 *
ﬁdc
, c⁄ãxt_à*
√wc
)

100 
	`gdt_£t_kî√l_°ack
(

101 (*)((
uöçå_t
)
√wc
->
c_k°ack
 +Çewc->
c_k°acksz
));

105 
	`KASSERT
(
ﬁdc
->
c_pml4
 =
	`±_gë
());

106 
uöçå_t
 
cuπhr_∑ddr
 =

107 
	`±_vút_to_phys_hñ≥r
(
ﬁdc
->
c_pml4
, (
uöçå_t
)&
cuπhr
);

108 
uöçå_t
 
√w_cuπhr_∑ddr
 =

109 
	`±_vút_to_phys_hñ≥r
(
√wc
->
c_pml4
, (
uöçå_t
)&
cuπhr
);

111 
kthªad_t
 *
¥ev_cuπhr
 = 
cuπhr
;

112 
	`±_£t
(
√wc
->
c_pml4
);

113 
	`KASSERT
(
	`±_gë
(Ë=
√wc
->
c_pml4
);

115 
	`KASSERT
(
cuπhr_∑ddr
 =
√w_cuπhr_∑ddr
);

116 
	`KASSERT
(
¥ev_cuπhr
 =
cuπhr
);

123 
__asm__
 volatile(

148 : "=m"(
ﬁdc
->
c_r•
), "=m"(ﬁdc->
c_rù
)

149 : "m"(
√wc
->
c_r•
), "m"“ewc->
c_rù
));

150 
	}
}

	@kernel/proc/fork.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"ty≥s.h
"

5 
	~"utû/debug.h
"

6 
	~"utû/°rög.h
"

8 
	~"mm/mm.h
"

9 
	~"mm/mm™.h
"

10 
	~"mm/p‰ame.h
"

11 
	~"mm/éb.h
"

13 
	~"fs/vnode.h
"

15 
	~"vm/shadow.h
"

17 
	~"≠i/exec.h
"

24 
uöçå_t
 
	$f‹k_£tup_°ack
(c⁄° 
ªgs_t
 *
ªgs
, *
k°ack
)

28 
uöt64_t
 
r•
 =

29 ((
uöt64_t
)
k°ack
Ë+ 
DEFAULT_STACK_SIZE
 - ((
ªgs_t
) + 16);

30 
	`mem˝y
((*)(
r•
 + 8), 
ªgs
, (
ªgs_t
));

31  
r•
;

32 
	}
}

58 
	$do_f‹k
(
ªgs
 *regs)

60 
	`NOT_YET_IMPLEMENTED
("VM: do_fork");

62 
	}
}

	@kernel/proc/kmutex.c

2 
	~"¥oc/kmuãx.h
"

3 
	~"globÆs.h
"

4 
	~"maö/öãºu±.h
"

5 
	~<î∫o.h
>

18 
	#DEBUG_DEADLOCKS
 1

	)

19 
	$dëe˘_dódlocks
(
kmuãx_t
 *
mtx
)

21 #i‡
DEBUG_DEADLOCKS


22 
	`li°_ôî©e
(&
cuπhr
->
kt_muãxes
, 
hñd
, 
kmuãx_t
, 
km_lök
)

24 
	`li°_ôî©e
(&
hñd
->
km_waôq
.
tq_li°
, 
waôî
, 
kthªad_t
, 
kt_qlök
)

26 i‡(
waôî
 =
mtx
->
km_hﬁdî
)

28 
	`∑nic
(

31 
cuΩroc
->
p_pid
, 
waôî
->
kt_¥oc
->p_pid, 
hñd
, 
mtx
);

36 
	}
}

41 
	$kmuãx_öô
(
kmuãx_t
 *
mtx
)

44 
mtx
->
km_hﬁdî
 = 
NULL
;

45 
	`sched_queue_öô
(&
mtx
->
km_waôq
);

46 
	`li°_lök_öô
(&
mtx
->
km_lök
);

48 
	}
}

57 
	$kmuãx_lock
(
kmuãx_t
 *
mtx
)

61 
	`dbg
(
DBG_ERROR
, "locked muãx: %p\n", 
mtx
);

62 
	`KASSERT
(
cuπhr
 && "needÅhread contextÅoÜock mutex");

63 
	`KASSERT
(!
	`kmuãx_owns_muãx
(
mtx
) && "already owner");

65 i‡(
mtx
->
km_hﬁdî
)

67 
	`dëe˘_dódlocks
(
mtx
);

68 
	`sched_¶ìp_⁄
(&
mtx
->
km_waôq
);

69 
	`KASSERT
(
	`kmuãx_owns_muãx
(
mtx
));

73 
mtx
->
km_hﬁdî
 = 
cuπhr
;

74 
	`li°_ö£π_èû
(&
cuπhr
->
kt_muãxes
, &
mtx
->
km_lök
);

77 
	}
}

88 
	$kmuãx_u∆ock
(
kmuãx_t
 *
mtx
)

91 
	`dbg
(
DBG_ERROR
, "u∆ocked muãx: %p\n", 
mtx
);

92 
	`KASSERT
(
cuπhr
 && (cuπh∏=
mtx
->
km_hﬁdî
) &&

94 
	`sched_wakeup_⁄
(&
mtx
->
km_waôq
, &mtx->
km_hﬁdî
);

95 
	`KASSERT
(!
	`kmuãx_owns_muãx
(
mtx
));

96 
	`li°_ªmove
(&
mtx
->
km_lök
);

97 i‡(
mtx
->
km_hﬁdî
)

98 
	`li°_ö£π_èû
(&
mtx
->
km_hﬁdî
->
kt_muãxes
, &mtx->
km_lök
);

101 
	}
}

106 
	$kmuãx_has_waôîs
(
kmuãx_t
 *
mtx
)

108  !
	`sched_queue_em±y
(&
mtx
->
km_waôq
);

110 
	}
}

115 
ölöe
 
	$kmuãx_owns_muãx
(
kmuãx_t
 *
mtx
)

117  
cuπhr
 && 
mtx
->
km_hﬁdî
 == curthr;

118 
	}
}

	@kernel/proc/kthread.c

1 
	~"c⁄fig.h
"

2 
	~"globÆs.h
"

3 
	~"mm/¶ab.h
"

4 
	~"utû/debug.h
"

5 
	~"utû/°rög.h
"

14 
kthªad_t
 *
cuπhr
 
	gCORE_SPECIFIC_DATA
;

19 
¶ab_Æloˇt‹_t
 *
	gkthªad_Æloˇt‹
 = 
NULL
;

28 *
	$Æloc_°ack
(Ë{  
	`∑ge_Æloc_n
(
DEFAULT_STACK_SIZE_PAGES
); 
	}
}

33 
	$‰ì_°ack
(*
°ack
)

35 
	`∑ge_‰ì_n
(
°ack
, 
DEFAULT_STACK_SIZE_PAGES
);

36 
	}
}

45 
	$kthªad_öô
()

47 
	`KASSERT
(
	`__buûtö_p›cou¡
(
DEFAULT_STACK_SIZE_PAGES
) == 1 &&

49 
kthªad_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("kthªad", (
kthªad_t
));

50 
	`KASSERT
(
kthªad_Æloˇt‹
);

51 
	}
}

67 
kthªad_t
 *
	$kthªad_¸óã
(
¥oc_t
 *
¥oc
, 
kthªad_func_t
 
func
, 
¨g1
,

68 *
¨g2
)

71 
	`KASSERT
(
¥oc
);

72 
kthªad_t
 *
thr
 = 
	`¶ab_obj_Æloc
(
kthªad_Æloˇt‹
);

73 i‡(!
thr
)

74  
NULL
;

76 
thr
->
kt_k°ack
 = 
	`Æloc_°ack
();

77 i‡(!
thr
->
kt_k°ack
)

79 
	`¶ab_obj_‰ì
(
kthªad_Æloˇt‹
, 
thr
);

80  
NULL
;

83 
	`c⁄ãxt_£tup
(&
thr
->
kt_˘x
, 
func
, 
¨g1
, 
¨g2
,Åhr->
kt_k°ack
,

84 
DEFAULT_STACK_SIZE
, 
¥oc
->
p_pml4
);

85 
thr
->
kt_ªtvÆ
 = (*)0;

86 
thr
->
kt_î∫o
 = 0;

87 
thr
->
kt_¥oc
 = 
¥oc
;

88 
thr
->
kt_ˇn˚Œed
 = 0;

89 
thr
->
kt_wch™
 = 
NULL
;

90 
thr
->
kt_°©e
 = 
KT_NO_STATE
;

91 
thr
->
kt_qlök
.
l_√xt
 = 
NULL
;

92 
thr
->
kt_qlök
.
l_¥ev
 = 
NULL
;

93 
	`li°_ö£π_bef‹e
(&
¥oc
->
p_thªads
, &
thr
->
kt_∂ök
);

94 
	`li°_öô
(&
thr
->
kt_muãxes
);

96 
thr
->
kt_¥ìm±i⁄_cou¡
 = 0;

98 
	`dbg
(
DBG_THR
, "¸óãdÅhªad 0x%¥o¯o‡¥o¯%d (0x%¥oc)\n", 
thr
,

99 
¥oc
->
p_pid
,Öroc);

100  
thr
;

102  
NULL
;

103 
	}
}

117 
kthªad_t
 *
	$kthªad_˛⁄e
(
kthªad_t
 *
thr
)

119 
	`NOT_YET_IMPLEMENTED
("VM: kthread_clone");

120  
NULL
;

121 
	}
}

130 
	$kthªad_de°roy
(
kthªad_t
 *
thr
)

132 
	`KASSERT
(
thr
 !
cuπhr
);

133 
	`KASSERT
(
thr
 &&Åhr->
kt_k°ack
);

134 i‡(
thr
->
kt_°©e
 !
KT_EXITED
)

135 
	`∑nic
("de°royögÅhªad i¿°©ê%d\n", 
thr
->
kt_°©e
);

136 
	`‰ì_°ack
(
thr
->
kt_k°ack
);

137 i‡(
	`li°_lök_is_löked
(&
thr
->
kt_∂ök
))

138 
	`li°_ªmove
(&
thr
->
kt_∂ök
);

140 
	`¶ab_obj_‰ì
(
kthªad_Æloˇt‹
, 
thr
);

141 
	}
}

155 
	$kthªad_ˇn˚l
(
kthªad_t
 *
thr
, *
ªtvÆ
)

158 
	`KASSERT
(
thr
 &&Åh∏!
cuπhr
);

159 
thr
->
kt_ªtvÆ
 = 
ªtvÆ
;

160 
	`sched_ˇn˚l
(
thr
);

162 
	}
}

167 
	$kthªad_exô
(*
ªtvÆ
)

170 
	`¥oc_thªad_exôög
(
ªtvÆ
);

172 
	}
}

	@kernel/proc/proc.c

1 
	~"c⁄fig.h
"

2 
	~"î∫o.h
"

3 
	~"fs/fûe.h
"

4 
	~"fs/vfs.h
"

5 
	~"fs/vnode.h
"

6 
	~"globÆs.h
"

7 
	~"kî√l.h
"

8 
	~"mm/¶ab.h
"

9 
	~"utû/debug.h
"

10 
	~"utû/¥ötf.h
"

11 
	~"utû/°rög.h
"

12 
	~"utû/time.h
"

13 
	~<drivîs/s¸ìn.h
>

14 
	~<fs/vfs_sysˇŒ.h
>

15 
	~<maö/≠ic.h
>

24 
¥oc_t
 *
cuΩroc
 
	gCORE_SPECIFIC_DATA
;

29 
li°_t
 
	g¥oc_li°
 = 
LIST_INITIALIZER
(
¥oc_li°
);

34 
¶ab_Æloˇt‹_t
 *
	g¥oc_Æloˇt‹
 = 
NULL
;

41 
¥oc_t
 
idÀ¥oc
 
	gCORE_SPECIFIC_DATA
;

46 
¥oc_t
 *
	g¥oc_öô¥oc
 = 
NULL
;

55 
	$¥oc_öô
()

57 
¥oc_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("¥oc", (
¥oc_t
));

58 
	`KASSERT
(
¥oc_Æloˇt‹
);

59 
	}
}

65 
	$¥oc_idÀ¥oc_öô
()

67 
¥oc_t
 *
¥oc
 = &
idÀ¥oc
;

69 
¥oc
->
p_pid
 = 0;

70 
	`li°_öô
(&
¥oc
->
p_thªads
);

71 
	`li°_öô
(&
¥oc
->
p_chûdªn
);

72 
¥oc
->
p_µroc
 = 
NULL
;

74 
	`li°_lök_öô
(&
¥oc
->
p_chûd_lök
);

75 
	`li°_lök_öô
(&
¥oc
->
p_li°_lök
);

77 
¥oc
->
p_°©us
 = 0;

78 
¥oc
->
p_°©e
 = 
PROC_RUNNING
;

80 
	`mem£t
(&
¥oc
->
p_waô
, 0, (
ktqueue_t
));

82 
¥oc
->
p_pml4
 = 
	`±_gë
();

83 
¥oc
->
p_vmm≠
 = 
	`vmm≠_¸óã
();

85 
¥oc
->
p_cwd
 = 
NULL
;

87 
	`mem£t
(
¥oc
->
p_fûes
, 0, (proc->p_files));

89 
«me
[8];

90 
	`¢¥ötf
(
«me
, “ame), "idÀ%ld", 
curc‹e
.
kc_id
);

91 
	`°∫˝y
(
¥oc
->
p_«me
, 
«me
, 
PROC_NAME_LEN
);

92 
¥oc
->
p_«me
[
PROC_NAME_LEN
 - 1] = '\0';

94 
	`dbg
(
DBG_PROC
, "¸óãd %s\n", 
¥oc
->
p_«me
);

95 
cuΩroc
 = &
idÀ¥oc
;

96 
cuπhr
 = 
NULL
;

97 
	}
}

106 
pid_t
 
	g√xt_pid
 = 1;

107 
pid_t
 
	$_¥oc_gëid
()

109 
pid_t
 
pid
 = 
√xt_pid
;

110 
ª°¨t
:

111 
	`li°_ôî©e
(&
¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
)

113 i‡(
p
->
p_pid
 =
pid
)

115 
pid
 =Öid + 1 =
PROC_MAX_COUNT
 ? 1 :Öid + 1;

116 i‡(
pid
 =
√xt_pid
)

122 
ª°¨t
;

126 
√xt_pid
 = 
pid
 + 1 =
PROC_MAX_COUNT
 ? 1 :Öid + 1;

127 
	`KASSERT
(
pid
);

128  
pid
;

129 
	}
}

135 
¥oc_t
 *
	$¥oc_lookup
(
pid_t
 
pid
)

137 i‡(
pid
 == 0)

139  &
idÀ¥oc
;

141 
	`li°_ôî©e
(&
¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
)

143 i‡(
p
->
p_pid
 =
pid
)

145  
p
;

148  
NULL
;

149 
	}
}

173 
¥oc_t
 *
	$¥oc_¸óã
(c⁄° *
«me
)

176 
pid_t
 
pid
 = 
	`_¥oc_gëid
();

177 i‡(
pid
 < 0)

179 
	`dbg
(
DBG_PROC
, ("CouldÇotállocate PID forÇewÖrocess.\n"));

180  
NULL
;

182 
	`KASSERT
(
pid
 !
PID_IDLE
);

183 
	`KASSERT
(
pid
 !
PID_INIT
 || 
cuΩroc
->
p_pid
 =
PID_IDLE
);

185 
¥oc_t
 *
¥oc
 = 
	`¶ab_obj_Æloc
(
¥oc_Æloˇt‹
);

186 i‡(!
¥oc
)

187  
NULL
;

189 
¥oc
->
p_pid
 = 
pid
;

191 
¥oc
->
p_pml4
 = 
	`±_¸óã
();

192 i‡(!
¥oc
->
p_pml4
)

194 
	`¥oc_de°roy
(
¥oc
);

195  
NULL
;

198 
	`li°_öô
(&
¥oc
->
p_thªads
);

199 
	`li°_öô
(&
¥oc
->
p_chûdªn
);

200 
¥oc
->
p_µroc
 = 
cuΩroc
;

202 
¥oc
->
p_°©us
 = 0;

203 
¥oc
->
p_°©e
 = 
PROC_RUNNING
;

204 
	`sched_queue_öô
(&
¥oc
->
p_waô
);

206 i‡(
¥oc
->
p_µroc
)

208 
	`li°_ö£π_èû
(&
¥oc
->
p_µroc
->
p_chûdªn
, &¥oc->
p_chûd_lök
);

211 
	`li°_ö£π_èû
(&
¥oc_li°
, &
¥oc
->
p_li°_lök
);

213 i‡(
¥oc
->
p_pid
 =
PID_INIT
)

215 
	`KASSERT
(!
¥oc_öô¥oc
);

216 
¥oc_öô¥oc
 = 
¥oc
;

219 i‡(!
«me
)

221 
«me
 = "unnamed";

223 
	`°∫˝y
(
¥oc
->
p_«me
, 
«me
, 
PROC_NAME_LEN
);

224 
¥oc
->
p_«me
[
PROC_NAME_LEN
 - 1] = '\0';

226 #ifde‡
__VFS__


227 
	`mem˝y
(
¥oc
->
p_fûes
,Öroc->
p_µroc
->p_files, (proc->p_files));

228 
size_t
 
i
 = 0; i < 
NFILES
; i++)

229 i‡(
¥oc
->
p_fûes
[
i
])

230 
	`‰ef
(
¥oc
->
p_fûes
[
i
]);

232 i‡(
cuΩroc
->
p_cwd
)

234 
	`vlock
(
cuΩroc
->
p_cwd
);

235 
	`vªf
(
¥oc
->
p_cwd
 = 
cuΩroc
->p_cwd);

236 
	`vu∆ock
(
cuΩroc
->
p_cwd
);

240 
¥oc
->
p_cwd
 = 
NULL
;

244 #ifde‡
__VM__


245 
¥oc
->
p_vmm≠
 = 
	`vmm≠_˛⁄e
(
cuΩroc
->p_vmmap);

246 i‡(!
¥oc
->
p_vmm≠
)

248 
	`¥oc_de°roy
(
¥oc
);

249  
NULL
;

251 
¥oc
->
p_vmm≠
->
vmm_¥oc
 =Öroc;

254 
	`dbg
(
DBG_PROC
, "¸óãd P%d (%s)\n", 
¥oc
->
p_pid
,Öroc->
p_«me
);

255  
¥oc
;

257  
NULL
;

258 
	}
}

277 
	$¥oc_˛ónup
(
°©us
)

280 
	`KASSERT
(1 <
cuΩroc
->
p_pid
);

281 
	`KASSERT
(
cuΩroc
->
p_µroc
);

283 #ifde‡
__VFS__


284 
fd
 = 0; fd < 
NFILES
; fd++)

286 
	`do_˛o£
(
fd
);

288 i‡(
cuΩroc
->
p_cwd
)

290 
	`vput
(&
cuΩroc
->
p_cwd
);

294 #ifde‡
__VM__


295 
	`vmm≠_de°roy
(&
cuΩroc
->
p_vmm≠
);

298 
	`KASSERT
((
cuΩroc
->
p_pid
 !
PID_INIT
 || 
	`li°_em±y
(&cuΩroc->
p_chûdªn
)) &&

300 i‡(
cuΩroc
->
p_pid
 !
PID_INIT
)

302 
	`li°_ôî©e
(&
cuΩroc
->
p_chûdªn
, 
chûd
, 
¥oc_t
, 
p_chûd_lök
)

304 
	`KASSERT
(
chûd
->
p_µroc
 =
cuΩroc
);

305 
chûd
->
p_µroc
 = 
¥oc_öô¥oc
;

306 
	`li°_ªmove
(&
chûd
->
p_chûd_lök
);

307 
	`li°_ö£π_bef‹e
(&
¥oc_öô¥oc
->
p_chûdªn
,

308 &
chûd
->
p_chûd_lök
);

312 
cuΩroc
->
p_°©e
 = 
PROC_DEAD
;

313 
cuΩroc
->
p_°©us
 = 
°©us
;

315 
	`KASSERT
(
cuΩroc
->
p_µroc
);

317 i‡(
cuΩroc
->
p_pid
 =
PID_INIT
)

319 
	`öô¥oc_föish
();

322 
	}
}

338 
	$¥oc_thªad_exôög
(*
ªtvÆ
)

342 
	`¥ìm±i⁄_dißbÀ
();

343 
	`¥oc_˛ónup
(()
ªtvÆ
);

345 
	`li°_ôî©e
(&
cuπhr
->
kt_muãxes
, 
hñd
, 
kmuãx_t
, 
km_lök
)

347 
	`dbg
(
DBG_ERROR
, "muãx: %p\n", 
hñd
);

350 
	`KASSERT
(
	`li°_em±y
(&
cuπhr
->
kt_muãxes
));

351 
	`KASSERT
(!
cuπhr
->
kt_wch™
);

352 
	`KASSERT
(!
	`li°_lök_is_löked
(&
cuπhr
->
kt_qlök
));

353 
	`KASSERT
(
cuπhr
->
kt_¥oc
 =
cuΩroc
);

355 
cuπhr
->
kt_°©e
 = 
KT_EXITED
;

356 
cuπhr
->
kt_ªtvÆ
 = 
ªtvÆ
;

358 
	`sched_brﬂdˇ°_⁄
(&
cuΩroc
->
p_µroc
->
p_waô
);

360 
	`KASSERT
(!
	`¥ìm±i⁄_íabÀd
(Ë&& 
cuπhr
->
kt_°©e
 =
KT_EXITED
);

362 
	`sched_swôch
(
NULL
);

364 
	}
}

372 
	$¥oc_kûl
(
¥oc_t
 *
¥oc
, 
°©us
)

375 
	`KASSERT
(
cuΩroc
 && cuΩro¯!
¥oc
);

377 
	`li°_ôî©e
(&
¥oc
->
p_thªads
, 
thr
, 
kthªad_t
, 
kt_∂ök
)

379 
	`kthªad_ˇn˚l
(
thr
, (*)
°©us
);

382 
	}
}

394 
	$¥oc_kûl_Æl
()

397 
	`li°_ôî©e
(&
¥oc_li°
, 
¥oc
, 
¥oc_t
, 
p_li°_lök
)

399 i‡(
¥oc
 !
cuΩroc
 &&Öroc->
p_µroc
->
p_pid
 !
PID_IDLE
)

401 
	`¥oc_kûl
(
¥oc
, -1);

405 
	`do_exô
(0);

407 
	}
}

417 
	$¥oc_de°roy
(
¥oc_t
 *
¥oc
)

419 
	`li°_ªmove
(&
¥oc
->
p_li°_lök
);

421 
	`li°_ôî©e
(&
¥oc
->
p_thªads
, 
thr
, 
kthªad_t
, 
kt_∂ök
)

423 
	`kthªad_de°roy
(
thr
);

426 #ifde‡
__VFS__


427 
fd
 = 0; fd < 
NFILES
; fd++)

429 i‡(
¥oc
->
p_fûes
[
fd
])

430 
	`Âut
(
¥oc
->
p_fûes
 + 
fd
);

432 i‡(
¥oc
->
p_cwd
)

434 
	`vput
(&
¥oc
->
p_cwd
);

438 #ifde‡
__VM__


439 i‡(
¥oc
->
p_vmm≠
)

440 
	`vmm≠_de°roy
(&
¥oc
->
p_vmm≠
);

443 
	`dbg
(
DBG_THR
, "de°royög P%d\n", 
¥oc
->
p_pid
);

445 
	`KASSERT
(
¥oc
->
p_pml4
);

446 
	`±_de°roy
(
¥oc
->
p_pml4
);

448 
	`¶ab_obj_‰ì
(
¥oc_Æloˇt‹
, 
¥oc
);

449 
	}
}

479 
pid_t
 
	$do_waôpid
(
pid_t
 
pid
, *
°©us
, 
›ti⁄s
)

483 i‡(!
pid
 ||Öid < -1 || 
›ti⁄s
)

485  -
ENOTSUP
;

488 
¥oc_t
 *
¥oc
 = 
NULL
;

491 
found
 = 0;

492 
	`li°_ôî©e
(&
cuΩroc
->
p_chûdªn
, 
ˇndid©e
, 
¥oc_t
, 
p_chûd_lök
)

494 i‡(
ˇndid©e
->
p_pid
 =
pid
)

496 i‡(
ˇndid©e
->
p_°©e
 =
PROC_DEAD
)

498 
¥oc
 = 
ˇndid©e
;

499 
dódchûd
;

501 
¶ìp
;

503 i‡(
pid
 == -1)

505 i‡(
ˇndid©e
->
p_°©e
 =
PROC_DEAD
)

507 
¥oc
 = 
ˇndid©e
;

508 
dódchûd
;

510 
found
 = 1;

514 i‡(!
found
)

516  -
ECHILD
;

518 
¶ìp
:

519 
	`sched_¶ìp_⁄
(&
cuΩroc
->
p_waô
);

522 
dódchûd
:

524 
	`KASSERT
(
¥oc
);

525 
	`li°_ªmove
(&
¥oc
->
p_chûd_lök
);

527 
	`KASSERT
(-1 =
pid
 || 
¥oc
->
p_pid
 ==Öid);

528 
pid
 = 
¥oc
->
p_pid
;

529 i‡(
°©us
)

530 *
°©us
 = ()(
¥oc
->
p_°©us
 &

533 
	`¥oc_de°roy
(
¥oc
);

535  
pid
;

538 
	}
}

545 
	$do_exô
(
°©us
)

548 
	`dbg
(
DBG_PROC
, "exôög wôh sètu†%lu\n", 
°©us
);

549 
	`kthªad_exô
((*)
°©us
);

551 
	}
}

557 
size_t
 
	$¥oc_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

559 c⁄° 
¥oc_t
 *
p
 = (¥oc_à*)
¨g
;

560 
size_t
 
size
 = 
osize
;

561 
¥oc_t
 *
chûd
;

563 
	`KASSERT
(
NULL
 !
p
);

564 
	`KASSERT
(
NULL
 !
buf
);

566 
	`ùrötf
(&
buf
, &
size
, "pid: %i\n", 
p
->
p_pid
);

567 
	`ùrötf
(&
buf
, &
size
, "«me: %s\n", 
p
->
p_«me
);

568 i‡(
NULL
 !
p
->
p_µroc
)

570 
	`ùrötf
(&
buf
, &
size
, "∑ª¡: %ò(%s)\n", 
p
->
p_µroc
->
p_pid
,

571 
p
->
p_µroc
->
p_«me
);

575 
	`ùrötf
(&
buf
, &
size
, "parent: -\n");

578 i‡(
	`li°_em±y
(&
p
->
p_chûdªn
))

580 
	`ùrötf
(&
buf
, &
size
, "children: -\n");

584 
	`ùrötf
(&
buf
, &
size
, "children:\n");

586 
	`li°_ôî©e
(&
p
->
p_chûdªn
, 
chûd
, 
¥oc_t
, 
p_chûd_lök
)

588 
	`ùrötf
(&
buf
, &
size
, " %ò(%s)\n", 
chûd
->
p_pid
, chûd->
p_«me
);

591 
	`ùrötf
(&
buf
, &
size
, "°©us: %ld\n", 
p
->
p_°©us
);

592 
	`ùrötf
(&
buf
, &
size
, "°©e: %i\n", 
p
->
p_°©e
);

594 #ifde‡
__VFS__


595 #ifde‡
__GETCWD__


596 i‡(
NULL
 !
p
->
p_cwd
)

598 
cwd
[256];

599 
	`lookup_dú∑th
(
p
->
p_cwd
, 
cwd
, (cwd));

600 
	`ùrötf
(&
buf
, &
size
, "cwd: %-s\n", 
cwd
);

604 
	`ùrötf
(&
buf
, &
size
, "cwd: -\n");

609 #ifde‡
__VM__


610 
	`ùrötf
(&
buf
, &
size
, "°¨àbrk: 0x%p\n", 
p
->
p_°¨t_brk
);

611 
	`ùrötf
(&
buf
, &
size
, "brk: 0x%p\n", 
p
->
p_brk
);

614  
size
;

615 
	}
}

617 
size_t
 
	$¥oc_li°_öfo
(c⁄° *
¨g
, *
buf
, 
size_t
 
osize
)

619 
size_t
 
size
 = 
osize
;

621 
	`KASSERT
(
NULL
 =
¨g
);

622 
	`KASSERT
(
NULL
 !
buf
);

624 #i‡
	`deföed
(
__VFS__
Ë&& deföed(
__GETCWD__
)

625 
	`ùrötf
(&
buf
, &
size
, "%5s %-13s %-18s %-s\n", "PID", "NAME", "PARENT",

628 
	`ùrötf
(&
buf
, &
size
, "%5s %-13s %-s\n", "PID", "NAME", "PARENT");

631 
	`li°_ôî©e
(&
¥oc_li°
, 
p
, 
¥oc_t
, 
p_li°_lök
)

633 
∑ª¡
[64];

634 i‡(
NULL
 !
p
->
p_µroc
)

636 
	`¢¥ötf
(
∑ª¡
, ’¨ít), "%3ò(%s)", 
p
->
p_µroc
->
p_pid
,

637 
p
->
p_µroc
->
p_«me
);

641 
	`¢¥ötf
(
∑ª¡
, (parent), " -");

644 #i‡
	`deföed
(
__VFS__
Ë&& deföed(
__GETCWD__
)

645 i‡(
NULL
 !
p
->
p_cwd
)

647 
cwd
[256];

648 
	`lookup_dú∑th
(
p
->
p_cwd
, 
cwd
, (cwd));

649 
	`ùrötf
(&
buf
, &
size
, " %3ò %-13†%-18†%-s\n", 
p
->
p_pid
,Ö->
p_«me
,

650 
∑ª¡
, 
cwd
);

654 
	`ùrötf
(&
buf
, &
size
, " %3ò %-13†%-18†-\n", 
p
->
p_pid
,Ö->
p_«me
,

655 
∑ª¡
);

658 
	`ùrötf
(&
buf
, &
size
, " %3ò %-13†%-s\n", 
p
->
p_pid
,Ö->
p_«me
, 
∑ª¡
);

661  
size
;

662 
	}
}

	@kernel/proc/sched.c

1 
	~"≠i/sysˇŒ.h
"

2 
	~"î∫o.h
"

3 
	~"fs/vfs.h
"

4 
	~"globÆs.h
"

5 
	~"maö/≠ic.h
"

6 
	~"maö/öôs.h
"

7 
	~"ty≥s.h
"

8 
	~"utû/debug.h
"

9 
	~<utû/time.h
>

18 
ktqueue_t
 
kt_runq
 
	gCORE_SPECIFIC_DATA
;

23 
c⁄ãxt_t
 *
œ°_thªad_c⁄ãxt
 
	gCORE_SPECIFIC_DATA
;

29 
ölöe
 
	$¥ìm±i⁄_dißbÀ
()

31 i‡(
cuπhr
)

32 
cuπhr
->
kt_¥ìm±i⁄_cou¡
++;

33 
	}
}

35 
ölöe
 
	$¥ìm±i⁄_íabÀ
()

37 i‡(
cuπhr
)

39 
	`KASSERT
(
cuπhr
->
kt_¥ìm±i⁄_cou¡
);

40 
cuπhr
->
kt_¥ìm±i⁄_cou¡
--;

42 
	}
}

44 
ölöe
 
	$¥ìm±i⁄_ª£t
()

46 
	`KASSERT
(
cuπhr
);

47 
cuπhr
->
kt_¥ìm±i⁄_cou¡
 = 0;

48 
	}
}

50 
ölöe
 
	$¥ìm±i⁄_íabÀd
()

52  
cuπhr
 && !cuπhr->
kt_¥ìm±i⁄_cou¡
;

53 
	}
}

62 
	$sched_queue_öô
(
ktqueue_t
 *
queue
)

64 
	`li°_öô
(&
queue
->
tq_li°
);

65 
queue
->
tq_size
 = 0;

66 
	}
}

73 
	$ktqueue_íqueue
(
ktqueue_t
 *
queue
, 
kthªad_t
 *
thr
)

75 
	`KASSERT
(!
thr
->
kt_wch™
);

77 
	`li°_as£π_ßnôy
(&
queue
->
tq_li°
);

80 
	`li°_ö£π_hód
(&
queue
->
tq_li°
, &
thr
->
kt_qlök
);

81 
	`li°_as£π_ßnôy
(&
queue
->
tq_li°
);

83 
thr
->
kt_wch™
 = 
queue
;

84 
queue
->
tq_size
++;

85 
	}
}

92 
kthªad_t
 *
	$ktqueue_dequeue
(
ktqueue_t
 *
queue
)

94 i‡(
	`sched_queue_em±y
(
queue
))

96  
NULL
;

99 
	`li°_as£π_ßnôy
(&
queue
->
tq_li°
);

101 
li°_lök_t
 *
lök
 = 
queue
->
tq_li°
.
l_¥ev
;

102 
kthªad_t
 *
thr
 = 
	`li°_ôem
(
lök
, kthªad_t, 
kt_qlök
);

103 
	`li°_ªmove
(
lök
);

104 
thr
->
kt_wch™
 = 
NULL
;

106 
	`li°_as£π_ßnôy
(&
queue
->
tq_li°
);

108 
queue
->
tq_size
--;

109  
thr
;

110 
	}
}

117 
	$ktqueue_ªmove
(
ktqueue_t
 *
queue
, 
kthªad_t
 *
thr
)

119 
	`KASSERT
(
thr
->
kt_qlök
.
l_√xt
 &&Åhr->kt_qlök.
l_¥ev
);

120 
	`li°_ªmove
(&
thr
->
kt_qlök
);

121 
thr
->
kt_wch™
 = 
NULL
;

122 
queue
->
tq_size
--;

123 
	`li°_as£π_ßnôy
(&
queue
->
tq_li°
);

124 
	}
}

133 
ölöe
 
	$sched_queue_em±y
(
ktqueue_t
 *
queue
Ë{  queue->
tq_size
 =0; 
	}
}

142 
	$sched_öô
()

144 
	`sched_queue_öô
(
	`GET_CSD
(
curc‹e
.
kc_id
, 
ktqueue_t
, 
kt_runq
));

145 
	}
}

160 
	$sched_ˇn˚ŒabÀ_¶ìp_⁄
(
ktqueue_t
 *
queue
)

163 i‡(
cuπhr
->
kt_ˇn˚Œed
)

165  -
EINTR
;

168 
cuπhr
->
kt_°©e
 = 
KT_SLEEP_CANCELLABLE
;

169 
	`sched_swôch
(
queue
);

171  
cuπhr
->
kt_ˇn˚Œed
 ? -
EINTR
 : 0;

174 
	}
}

182 
	$sched_ˇn˚l
(
kthªad_t
 *
thr
)

185 i‡(
thr
->
kt_°©e
 =
KT_SLEEP_CANCELLABLE
)

187 
	`KASSERT
(
thr
->
kt_wch™
);

188 
thr
->
kt_ˇn˚Œed
 = 1;

189 
	`ktqueue_ªmove
(
thr
->
kt_wch™
,Åhr);

190 
	`sched_make_ru¬abÀ
(
thr
);

194 
thr
->
kt_ˇn˚Œed
 = 1;

197 
	}
}

233 
	$sched_swôch
(
ktqueue_t
 *
queue
)

236 
	`KASSERT
(
cuπhr
->
kt_°©e
 !
KT_ON_CPU
);

238 
	`¥ìm±i⁄_dißbÀ
();

239 
	`öå_dißbÀ
();

240 vﬁ©ûê
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
IPL_LOW
);

242 
curc‹e
.
kc_queue
 = 
queue
;

244 
œ°_thªad_c⁄ãxt
 = &
cuπhr
->
kt_˘x
;

245 
	`c⁄ãxt_swôch
(&
cuπhr
->
kt_˘x
, &
curc‹e
.
kc_˘x
);

246 
	`KASSERT
(
cuπhr
);

248 
	`öå_£tùl
(
ùl
);

249 
	`öå_íabÀ
();

250 
	`¥ìm±i⁄_íabÀ
();

253 
	}
}

259 
	$sched_yõld
()

261 
	`KASSERT
(
cuπhr
->
kt_°©e
 =
KT_ON_CPU
);

262 
cuπhr
->
kt_°©e
 = 
KT_RUNNABLE
;

263 
	`sched_swôch
(&
kt_runq
);

264 
	}
}

276 
	$sched_make_ru¬abÀ
(
kthªad_t
 *
thr
)

279 
	`KASSERT
(
thr
 !
cuπhr
 &&

281 
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
IPL_HIGH
);

284 
thr
->
kt_°©e
 = 
KT_RUNNABLE
;

285 
	`ktqueue_íqueue
(&
kt_runq
, 
thr
);

286 
	`öå_£tùl
(
ùl
);

288 
	}
}

303 
	$sched_¶ìp_⁄
(
ktqueue_t
 *
q
)

306 
uöt8_t
 
ùl
 = 
	`öå_£tùl
(
IPL_HIGH
);

307 
cuπhr
->
kt_°©e
 = 
KT_SLEEP
;

308 
	`sched_swôch
(
q
);

309 
	`öå_£tùl
(
ùl
);

311 
	}
}

324 
	$sched_wakeup_⁄
(
ktqueue_t
 *
q
, 
kthªad_t
 **
kç
)

327 
kthªad_t
 *
thr
 = 
	`ktqueue_dequeue
(
q
);

328 i‡(
kç
)

330 *
kç
 = 
thr
;

332 i‡(
thr
)

334 
	`KASSERT
((
thr
->
kt_°©e
 =
KT_SLEEP
) ||

335 (
thr
->
kt_°©e
 =
KT_SLEEP_CANCELLABLE
));

338 i‡(
thr
)

342 
	`sched_make_ru¬abÀ
(
thr
);

345 
	}
}

350 
	$sched_brﬂdˇ°_⁄
(
ktqueue_t
 *
q
)

353 
kthªad_t
 *
thr
 = 
NULL
;

356 
	`sched_wakeup_⁄
(
q
, &
thr
);

357 } 
thr
);

359 
	}
}

374 
	$c‹e_swôch
()

378 
	`KASSERT
(!
	`öå_íabÀd
());

379 
	`KASSERT
(!
cuπhr
 || cuπhr->
kt_°©e
 !
KT_ON_CPU
);

381 i‡(
curc‹e
.
kc_queue
)

383 
	`ktqueue_íqueue
(
curc‹e
.
kc_queue
, 
cuπhr
);

386 
cuΩroc
 = &
idÀ¥oc
;

387 
cuπhr
 = 
NULL
;

389 
kthªad_t
 *
√xt_thªad
 = 
NULL
;

392 
√xt_thªad
 = 
	`ktqueue_dequeue
(&
kt_runq
);

394 i‡(
√xt_thªad
)

397 
	`öå_waô
();

398 
	`öå_dißbÀ
();

401 
	`KASSERT
(
√xt_thªad
->
kt_°©e
 =
KT_RUNNABLE
);

402 
	`KASSERT
(
√xt_thªad
->
kt_¥oc
);

406 
	`m≠_ö_c‹e_•ecific_d©a
(
√xt_thªad
->
kt_˘x
.
c_pml4
);

410 
uöçå_t
 
m≠≥d_∑ddr
 = 
	`±_vút_to_phys_hñ≥r
(

411 
√xt_thªad
->
kt_˘x
.
c_pml4
, (
uöçå_t
)&next_thread);

412 
uöçå_t
 
ex≥˘ed_∑ddr
 =

413 
	`±_vút_to_phys_hñ≥r
(
	`±_gë
(), (
uöçå_t
)&
√xt_thªad
);

414 
	`KASSERT
(
m≠≥d_∑ddr
 =
ex≥˘ed_∑ddr
);

416 
cuπhr
 = 
√xt_thªad
;

417 
cuπhr
->
kt_°©e
 = 
KT_ON_CPU
;

418 
cuΩroc
 = 
cuπhr
->
kt_¥oc
;

419 
	`c⁄ãxt_swôch
(&
curc‹e
.
kc_˘x
, &
cuπhr
->
kt_˘x
);

421 
	}
}

	@kernel/proc/spinlock.c

1 
	~"globÆs.h
"

2 
	~"maö/≠ic.h
"

4 
	$•ölock_öô
(
•ölock_t
 *
lock
Ë{Üock->
s_locked
 = 0; 
	}
}

6 
ölöe
 
	$•ölock_lock
(
•ölock_t
 *
lock
)

12 
	}
}

14 
ölöe
 
	$•ölock_u∆ock
(
•ölock_t
 *
lock
)

16 
	}
}

18 
ölöe
 
	$•ölock_own¶ock
(
•ölock_t
 *
lock
)

21 
	}
}

	@kernel/test/driverstest.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

4 
	~"ã°/¥o˘e°.h
"

5 
	~"ã°/u£πe°.h
"

7 
	~"utû/debug.h
"

8 
	~"utû/¥ötf.h
"

9 
	~"utû/°rög.h
"

11 
	~"¥oc/kthªad.h
"

12 
	~"¥oc/¥oc.h
"

13 
	~"¥oc/sched.h
"

15 
	~"drivîs/blockdev.h
"

16 
	~"drivîs/dev.h
"

17 
	~"drivîs/keybﬂrd.h
"

18 
	~"drivîs/ây/ây.h
"

20 
	#TEST_STR_1
 "hñlo\n"

	)

21 
	#TEST_STR_2
 "dif„ª¡ såög\n"

	)

22 
	#TEST_STR_3
 "ã°"

	)

23 
	#TEST_BUF_SZ
 10

	)

24 
	#NUM_PROCS
 3

	)

25 
	#BLOCK_NUM
 1

	)

31 *
	$kthªad_wrôe
(
¨g1
, *
¨g2
)

33 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 
¨g1
));

34 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

36 
cou¡
 = 0;

37 
cou¡
 < 2)

39 i‡(
cou¡
 == 0)

41 
size_t
 
i
 = 0; i < 
	`°æí
(
TEST_STR_1
); i++)

43 
	`ldisc_key_¥es£d
(&
ây
->
ây_ldisc
, 
TEST_STR_1
[
i
]);

48 
size_t
 
i
 = 0; i < 
	`°æí
(
TEST_STR_2
); i++)

50 
	`ldisc_key_¥es£d
(&
ây
->
ây_ldisc
, 
TEST_STR_2
[
i
]);

53 
cou¡
++;

55  
NULL
;

56 
	}
}

58 *
	$kthªad_ªad1
(
¨g1
, *
¨g2
)

60 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 
¨g1
));

61 
buf
[32];

62 
	`mem£t
(
buf
, 0, 32);

63 
size_t
 
num_byãs
 = 
cd
->
cd_›s
->
	`ªad
(cd, 0, 
buf
, 
	`°æí
(
TEST_STR_1
));

64 
	`ã°_as£π
(
num_byãs
 =
	`°æí
(
TEST_STR_1
), "number of bytes is incorrect");

65 
	`ã°_as£π
(!
	`°∫cmp
(
buf
, 
TEST_STR_1
, 
	`°æí
(TEST_STR_1)), "resulting stringsáreÇotÉqual");

67  
NULL
;

68 
	}
}

70 *
	$kthªad_ªad2
(
¨g1
, *
¨g2
)

72 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 
¨g1
));

74 
buf
[32];

75 
	`mem£t
(
buf
, 0, 32);

76 
size_t
 
num_byãs
 = 
cd
->
cd_›s
->
	`ªad
(cd, 0, 
buf
, 
	`°æí
(
TEST_STR_2
));

77 
	`ã°_as£π
(
num_byãs
 =
	`°æí
(
TEST_STR_2
), "number of bytes is incorrect");

78 
	`ã°_as£π
(!
	`°∫cmp
(
buf
, 
TEST_STR_2
, 
	`°æí
(TEST_STR_2)), "resulting stringsáreÇotÉqual");

80  
NULL
;

81 
	}
}

83 
	$ã°_c⁄cuºít_ªads
()

85 
¥oc_t
 *
¥oc_wrôe
 = 
	`¥oc_¸óã
("process_write");

86 
kthªad_t
 *
kt_wrôe
 = 
	`kthªad_¸óã
(
¥oc_wrôe
, 
kthªad_wrôe
, 0, 
NULL
);

88 
¥oc_t
 *
¥oc_1
 = 
	`¥oc_¸óã
("process_1_read");

89 
kthªad_t
 *
kthªad_1
 = 
	`kthªad_¸óã
(
¥oc_1
, 
kthªad_ªad1
, 0, 
NULL
);

91 
¥oc_t
 *
¥oc_2
 = 
	`¥oc_¸óã
("process_2_read");

92 
kthªad_t
 *
kthªad_2
 = 
	`kthªad_¸óã
(
¥oc_2
, 
kthªad_ªad2
, 0, 
NULL
);

94 
	`sched_make_ru¬abÀ
(
kthªad_1
);

95 
	`sched_make_ru¬abÀ
(
kthªad_2
);

96 
	`sched_make_ru¬abÀ
(
kt_wrôe
);

98 
	`do_waôpid
(-1, 
NULL
, 0Ë!-
ECHILD
)

102 
	}
}

108 *
	$kthªad_c⁄cuºít_wrôe
(
¨g1
, *
¨g2
)

110 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

111 
buf
[32];

112 
	`mem£t
(
buf
, 0, 32);

113 
	`¢¥ötf
(
buf
, 32, "thªad_%d\n", ()
¨g1
);

114 
size_t
 
num_byãs
 = 
cd
->
cd_›s
->
	`wrôe
(cd, 0, 
buf
, 
	`°æí
(buf));

115 
	`ã°_as£π
(
num_byãs
 =
	`°æí
(
buf
), "number of bytes written isÇot correct");

116  
NULL
;

117 
	}
}

119 
	$ã°_c⁄cuºít_wrôes
()

121 
¥oc_«me
[32];

122 
i
 = 0; i < 
NUM_PROCS
; i++)

124 
	`mem£t
(
¥oc_«me
, 0, 32);

125 
	`¢¥ötf
(
¥oc_«me
, 32, "¥o˚ss_c⁄cuºít_wrôe_%d", 
i
);

126 
¥oc_t
 *
¥oc_wrôe
 = 
	`¥oc_¸óã
(
¥oc_«me
);

127 
kthªad_t
 *
kt_wrôe
 = 
	`kthªad_¸óã
(
¥oc_wrôe
, 
kthªad_c⁄cuºít_wrôe
, 
i
, 
NULL
);

128 
	`sched_make_ru¬abÀ
(
kt_wrôe
);

131 
	`do_waôpid
(-1, 
NULL
, 0Ë!-
ECHILD
)

135 
	}
}

137 *
	$kthªad_wrôe_disk
(
¨g1
, *
¨g2
)

140 *
∑ge_of_d©a
 = 
	`∑ge_Æloc
();

142 
	`mem£t
(
∑ge_of_d©a
, 'F', 
BLOCK_SIZE
);

143 
blockdev_t
 *
bd
 = 
	`blockdev_lookup
(
	`MKDEVID
(
DISK_MAJOR
, 0));

144 
ªt
 = 
bd
->
bd_›s
->
	`wrôe_block
(bd, (*)
∑ge_of_d©a
, 
¨g1
, 1);

145 
	`ã°_as£π
(
ªt
 == 0, "the write operation failed");

147  
NULL
;

148 
	}
}

150 *
	$kthªad_ªad_disk
(
¨g1
, *
¨g2
)

154 *
∑ge_of_d©a_to_ªad
 = 
	`∑ge_Æloc_n
(2);

155 *
d©a_ex≥˘ed
 = 
	`∑ge_Æloc_n
(2);

156 
	`mem£t
(
d©a_ex≥˘ed
, 'F', 
BLOCK_SIZE
);

157 
blockdev_t
 *
bd
 = 
	`blockdev_lookup
(
	`MKDEVID
(
DISK_MAJOR
, 0));

158 
	`ã°_as£π
(!
	`PAGE_ALIGNED
((*)
∑ge_of_d©a_to_ªad
 + 1), "notÖageáligned");

159 
ªt
 = 
bd
->
bd_›s
->
	`ªad_block
(bd, (*)
∑ge_of_d©a_to_ªad
 + 1, 
¨g1
, 1);

160 
	`ã°_as£π
(
ªt
 == 0, "theÑead operation failed");

161 
	`ã°_as£π
(0 =
	`memcmp
((*)
∑ge_of_d©a_to_ªad
 + 1, 
d©a_ex≥˘ed
, 
BLOCK_SIZE
), "bytesáreÇotÉqual");

162 
	`∑ge_‰ì_n
(
∑ge_of_d©a_to_ªad
, 2);

163 
	`∑ge_‰ì_n
(
d©a_ex≥˘ed
, 2);

164  
NULL
;

165 
	}
}

170 
	$ã°_disk_wrôe_™d_ªad
()

172 
¥oc_t
 *
¥oc_wrôe
 = 
	`¥oc_¸óã
("process_write");

173 
kthªad_t
 *
kt_wrôe
 = 
	`kthªad_¸óã
(
¥oc_wrôe
, 
kthªad_wrôe_disk
, 
BLOCK_NUM
, 
NULL
);

175 
¥oc_t
 *
¥oc_ªad
 = 
	`¥oc_¸óã
("process_read");

176 
kthªad_t
 *
kt_ªad
 = 
	`kthªad_¸óã
(
¥oc_ªad
, 
kthªad_ªad_disk
, 
BLOCK_NUM
, 
NULL
);

178 
	`sched_make_ru¬abÀ
(
kt_wrôe
);

179 
	`sched_make_ru¬abÀ
(
kt_ªad
);

181 
	`do_waôpid
(-1, 
NULL
, 0Ë!-
ECHILD
)

185 
	}
}

190 
	$ã°_basic_löe_discùlöe
()

192 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

193 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

194 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

195 
	`ldisc_key_¥es£d
(
ldisc
, 't');

197 
	`ã°_as£π
(
ldisc
->
ldisc_buf„r
[ldisc->
ldisc_èû
] == 't', "characterÇot inputted into buffer correctly");

198 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 !ldisc->
ldisc_cooked
 &&Üdisc->
ldisc_èû
 !=Üdisc->ldisc_head, "pointersáre updated correctly");

200 
size_t
 
¥evious_hód_vÆ
 = 
ldisc
->
ldisc_hód
;

201 
	`ldisc_key_¥es£d
(
ldisc
, '\n');

202 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
¥evious_hód_vÆ
 + 1, "ldisc_head should have been incrementedÖastÇewline character");

203 
	`ã°_as£π
(
ldisc
->
ldisc_cooked
 =ldisc->
ldisc_hód
, "ldisc_cooked should beÉqualÅoÜdisc_head");

206 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
 =Üdisc->
ldisc_èû
 = 0;

208 
	}
}

213 
	$ã°_back•a˚
()

215 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

216 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

217 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

218 
size_t
 
¥evious_hód_vÆ
 = 
ldisc
->
ldisc_hód
;

219 
	`ldisc_key_¥es£d
(
ldisc
, 't');

220 
	`ldisc_key_¥es£d
(
ldisc
, '\b');

221 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
¥evious_hód_vÆ
, "Backspace should moveÅheÜdisc_head back by 1");

224 
	`ldisc_key_¥es£d
(
ldisc
, '\b');

225 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
¥evious_hód_vÆ
, "This backspace shouldÑesult ináÇo-op");

228 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
 =Üdisc->
ldisc_èû
 = 0;

230 
	}
}

232 *
	$kthªad_waô_f‹_eŸ
(
¨g1
, *
¨g2
)

234 
ch¨dev_t
 *
cd
 = (ch¨dev_à*)
¨g2
;

235 
buf
[32];

236 
	`mem£t
(
buf
, 0, 32);

237 
size_t
 
num_byãs
 = 
cd
->
cd_›s
->
	`ªad
(cd, 0, 
buf
, 
TEST_BUF_SZ
);

238 
	`ã°_as£π
(
num_byãs
 =
	`°æí
(
TEST_STR_3
), "number of bytes is incorrect");

239 
	`ã°_as£π
(!
	`°∫cmp
(
buf
, 
TEST_STR_3
, 
	`°æí
(TEST_STR_3)), "resulting stringsáreÇotÉqual");

240  
NULL
;

241 
	}
}

246 
	$ã°_eŸ
()

248 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

249 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

250 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

252 
¥oc_t
 *
¥oc_ªad
 = 
	`¥oc_¸óã
("process_read");

253 
kthªad_t
 *
kt_ªad
 = 
	`kthªad_¸óã
(
¥oc_ªad
, 
kthªad_waô_f‹_eŸ
, 0, 
cd
);

254 
	`sched_make_ru¬abÀ
(
kt_ªad
);

256 
	`sched_yõld
();

258 
size_t
 
¥ev_èû_vÆue
 = 
ldisc
->
ldisc_èû
;

259 
size_t
 
i
 = 0; i < 
	`°æí
(
TEST_STR_3
); i++)

261 
	`ldisc_key_¥es£d
(
ldisc
, 
TEST_STR_3
[
i
]);

263 
	`ldisc_key_¥es£d
(
ldisc
, 
EOT
);

264 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =ldisc->
ldisc_cooked
, "ldisc_head should beÉqualÅoÜdisc_cooked");

267 
	`do_waôpid
(-1, 
NULL
, 0Ë!-
ECHILD
)

269 
	`ã°_as£π
(
ldisc
->
ldisc_èû
 =
¥ev_èû_vÆue
 + 
	`°æí
(
TEST_STR_3
) + 1, "ldisc_tail should beÖastÅhe EOT char");

270 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_èû
 =Üdisc->
ldisc_cooked
 = 0;

272 
	}
}

277 
	$ã°_ëx
()

279 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

280 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

281 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

282 
size_t
 
¥evious_hód_vÆue
 = 
ldisc
->
ldisc_hód
;

285 
	`ldisc_key_¥es£d
(
ldisc
, 't');

286 
	`ldisc_key_¥es£d
(
ldisc
, 'e');

287 
	`ldisc_key_¥es£d
(
ldisc
, 
ETX
);

289 
	`ã°_as£π
(
¥evious_hód_vÆue
 + 1 =
ldisc
->
ldisc_hód
, "ldisc_head should only be oneÖast where it usedÅo be");

290 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =ldisc->
ldisc_cooked
, "ldisc should beá cooked blankÜine");

293 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
 =Üdisc->
ldisc_èû
 = 0;

295 
	}
}

300 
	$ã°_fuŒ_löe_discùlöe
()

302 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

303 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

304 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

305 
i
 = 0; i < 
LDISC_BUFFER_SIZE
; i++)

307 
	`ldisc_key_¥es£d
(
ldisc
, 't');

310 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
LDISC_BUFFER_SIZE
 - 1, "ldisc shouldÜeave keep one byteÜeft forÇewÜine character");

312 
	`ldisc_key_¥es£d
(
ldisc
, '\n');

313 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 == 0, "ldisc_head should wrap backÅo 0");

314 
	`ã°_as£π
(
ldisc
->
ldisc_cooked
 =ldisc->
ldisc_hód
, "ldisc_cooked should beÉqualÅoÜdisc_head");

317 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
 =Üdisc->
ldisc_èû
 =Üdisc->
ldisc_fuŒ
 = 0;

319 
	}
}

324 
	$ã°_löe_discùlöe_wøp
()

326 
ch¨dev_t
 *
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 0));

327 
ây_t
 *
ây
 = 
	`cd_to_ây
(
cd
);

328 
ldisc_t
 *
ldisc
 = &
ây
->
ây_ldisc
;

329 
i
 = 0; i < 
LDISC_BUFFER_SIZE
 / 2; i++)

331 
	`ldisc_key_¥es£d
(
ldisc
, 't');

334 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
LDISC_BUFFER_SIZE
 / 2, "ldisc_head should be incrementedÅo halfÅheÜdisc size");

335 
size_t
 
¥evious_hód_vÆ
 = 
ldisc
->
ldisc_hód
;

336 
	`ldisc_key_¥es£d
(
ldisc
, '\n');

337 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 =
¥evious_hód_vÆ
 + 1, "ldisc_head should have been incrementedÖastÇewline character");

338 
	`ã°_as£π
(
ldisc
->
ldisc_cooked
 =ldisc->
ldisc_hód
, "ldisc_cooked should beÉqualÅoÜdisc_head");

340 
ldisc
->
ldisc_èû
 =Üdisc->
ldisc_cooked
;

342 
i
 = 0; i < 
LDISC_BUFFER_SIZE
 / 2 - 1; i++)

344 
	`ldisc_key_¥es£d
(
ldisc
, 'z');

346 
	`ldisc_key_¥es£d
(
ldisc
, '\n');

348 
	`ã°_as£π
(
ldisc
->
ldisc_hód
 == 1, "ldisc_head should wrapáround");

351 
ldisc
->
ldisc_hód
 =Üdisc->
ldisc_cooked
 =Üdisc->
ldisc_èû
 = 0;

353 
	}
}

355 
	$drivî°e°_maö
(
¨g1
, *
¨g2
)

357 
	`dbg
(
DBG_TEST
, "\nStarting DriversÅests\n");

358 
	`ã°_öô
();

360 
	`ã°_basic_löe_discùlöe
();

361 
	`ã°_back•a˚
();

362 
	`ã°_eŸ
();

363 
	`ã°_ëx
();

364 
	`ã°_disk_wrôe_™d_ªad
();

365 
	`ã°_fuŒ_löe_discùlöe
();

366 
	`ã°_löe_discùlöe_wøp
();

367 
	`ã°_c⁄cuºít_ªads
();

368 
	`ã°_c⁄cuºít_wrôes
();

370 
	`ã°_föi
();

372 
	}
}

	@kernel/test/kshell/command.c

1 
	~"comm™d.h
"

3 
	~"mm/kmÆloc.h
"

5 
	~"utû/debug.h
"

6 
	~"utû/°rög.h
"

8 
kshñl_comm™d_t
 *
	$kshñl_comm™d_¸óã
(c⁄° *
«me
,

9 
kshñl_cmd_func_t
 
cmd_func
,

10 c⁄° *
desc
)

12 
kshñl_comm™d_t
 *
cmd
;

13 
size_t
 
Àn
;

15 
	`KASSERT
(
NULL
 !
«me
);

16 
	`KASSERT
(
NULL
 !
cmd_func
);

18 
cmd
 = (
kshñl_comm™d_t
 *)
	`kmÆloc
((kshell_command_t));

19 i‡(
NULL
 =
cmd
)

21  
NULL
;

24 
Àn
 = 
	`°∫Àn
(
«me
, 
KSH_CMD_NAME_LEN
);

25 
	`°∫˝y
(
cmd
->
kc_«me
, 
«me
, 
Àn
);

26 
cmd
->
kc_«me
[
Àn
] = '\0';

28 
cmd
->
kc_cmd_func
 = 
cmd_func
;

30 i‡(
NULL
 !
desc
)

32 
Àn
 = 
	`°∫Àn
(
desc
, 
KSH_DESC_LEN
);

33 
	`°∫˝y
(
cmd
->
kc_desc
, 
desc
, 
Àn
);

34 
cmd
->
kc_desc
[
Àn
] = '\0';

38 
cmd
->
kc_desc
[0] = '\0';

41 
	`li°_lök_öô
(&
cmd
->
kc_comm™ds_lök
);

43  
cmd
;

44 
	}
}

46 
	$kshñl_comm™d_de°roy
(
kshñl_comm™d_t
 *
cmd
Ë{ 
	`k‰ì
(cmd); 
	}
}

	@kernel/test/kshell/command.h

1 #¥agm®
⁄˚


3 
	~"¥iv.h
"

5 
	~"ã°/kshñl/kshñl.h
"

7 
	skshñl_comm™d


9 
	mkc_«me
[
KSH_CMD_NAME_LEN
 + 1];

10 
kshñl_cmd_func_t
 
	mkc_cmd_func
;

11 
	mkc_desc
[
KSH_DESC_LEN
 + 1];

13 
li°_lök_t
 
	mkc_comm™ds_lök
;

14 } 
	tkshñl_comm™d_t
;

16 
kshñl_comm™d_t
 *
kshñl_comm™d_¸óã
(c⁄° *
«me
,

17 
kshñl_cmd_func_t
 
cmd_func
,

18 c⁄° *
desc
);

20 
kshñl_comm™d_de°roy
(
kshñl_comm™d_t
 *
cmd
);

	@kernel/test/kshell/commands.c

1 
	~"comm™ds.h
"

2 
	~"î∫o.h
"

4 
	~"comm™d.h
"

6 #ifde‡
__VFS__


8 
	~"fs/f˙é.h
"

9 
	~"fs/vfs_sysˇŒ.h
"

10 
	~"fs/vnode.h
"

14 
	~"ã°/kshñl/io.h
"

16 
	~"utû/debug.h
"

17 
	~"utû/°rög.h
"

19 
li°_t
 
	gkshñl_comm™ds_li°
 = 
LIST_INITIALIZER
(
kshñl_comm™ds_li°
);

21 
	$kshñl_hñp
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

24 
•a˚s
[
KSH_CMD_NAME_LEN
];

25 
	`mem£t
(
•a˚s
, ' ', 
KSH_CMD_NAME_LEN
);

27 
	`k¥ötf
(
ksh
, "Available commands:\n");

28 
	`li°_ôî©e
(&
kshñl_comm™ds_li°
, 
cmd
, 
kshñl_comm™d_t
,

29 
kc_comm™ds_lök
)

31 
	`KASSERT
(
NULL
 !
cmd
);

32 
size_t
 
«mñí
 = 
	`°∫Àn
(
cmd
->
kc_«me
, 
KSH_CMD_NAME_LEN
);

33 
•a˚s
[
KSH_CMD_NAME_LEN
 - 
«mñí
] = '\0';

34 
	`k¥ötf
(
ksh
, "%s%s%s\n", 
cmd
->
kc_«me
, 
•a˚s
, cmd->
kc_desc
);

35 
•a˚s
[
KSH_CMD_NAME_LEN
 - 
«mñí
] = ' ';

39 
	}
}

41 
	$kshñl_exô
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

43 
	`∑nic
("kshell: kshell_exit should NEVER be called");

44 
	}
}

46 
	$kshñl_˛ór
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

48 
	`k¥ötf
(
ksh
, "\033[2J\033[1;1H");

52 
	}
}

54 
	$kshñl_hÆt
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

56 
	`¥oc_kûl_Æl
();

58 
	}
}

60 
	$kshñl_echo
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

62 i‡(
¨gc
 == 1)

64 
	`k¥ötf
(
ksh
, "\n");

68 
size_t
 
i
 = 1; i < 
¨gc
 - 1; i++)

70 
	`k¥ötf
(
ksh
, "%†", 
¨gv
[
i
]);

72 
	`k¥ötf
(
ksh
, "%s\n", 
¨gv
[
¨gc
 - 1]);

76 
	}
}

78 #ifde‡
__VFS__


80 
	$kshñl_ˇt
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

82 i‡(
¨gc
 < 2)

84 
	`k¥ötf
(
ksh
, "Usage: cat <files>\n");

88 
buf
[
KSH_BUF_SIZE
];

89 
size_t
 
i
 = 1; i < 
¨gc
; i++)

91 
fd
 = ()
	`do_›í
(
¨gv
[
i
], 
O_RDONLY
);

92 i‡(
fd
 < 0)

94 
	`k¥ötf
(
ksh
, "Eº‹ o≥nög fûe: %s\n", 
¨gv
[
i
]);

98 
ªtvÆ
;

99 (
ªtvÆ
 = 
	`do_ªad
(
fd
, 
buf
, 
KSH_BUF_SIZE
)) > 0)

101 
ªtvÆ
 = 
	`kshñl_wrôe_Æl
(
ksh
, 
buf
, (
size_t
)retval);

102 i‡(
ªtvÆ
 < 0)

105 i‡(
ªtvÆ
 < 0)

107 
	`k¥ötf
(
ksh
, "Eº‹Ñódög o∏wrôög %s: %s\n", 
¨gv
[
i
], 
	`°ªº‹
(()-
ªtvÆ
));

110 
ªtvÆ
 = 
	`do_˛o£
(
fd
);

111 i‡(
ªtvÆ
 < 0)

113 
	`∑nic
("kshñl: Eº‹ closög fûê%s: %s\n", 
¨gv
[
i
],

114 
	`°ªº‹
(()-
ªtvÆ
));

119 
	}
}

121 
	$kshñl_ls
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

123 
size_t
 
¨gÀn
;

124 
ªt
;

125 
fd
;

126 
dúít_t
 
dúít
;

127 
°©_t
 
°©buf
;

128 
dúíäame
[
KSH_BUF_SIZE
];

130 
	`mem£t
(
dúíäame
, '\0', 
KSH_BUF_SIZE
);

132 i‡(
¨gc
 > 2)

134 
	`k¥ötf
(
ksh
, "Usage:Üs <directory>\n");

137 i‡(
¨gc
 == 2)

139 i‡((
ªt
 = 
	`do_°©
(
¨gv
[1], &
°©buf
)) < 0)

141 i‡(
ªt
 =-
ENOENT
)

143 
	`k¥ötf
(
ksh
, "%†d€†nŸÉxi°\n", 
¨gv
[1]);

148  
ªt
;

151 i‡(!
	`S_ISDIR
(
°©buf
.
°_mode
))

153 
	`k¥ötf
(
ksh
, "%†i†nŸá dúe˘‹y\n", 
¨gv
[1]);

157 
fd
 = ()
	`do_›í
(
¨gv
[1], 
O_RDONLY
);

158 i‡(
fd
 < 0)

160 
	`k¥ötf
(
ksh
, "CouldÇŸ föd dúe˘‹y: %s\n", 
¨gv
[1]);

163 
¨gÀn
 = 
	`°∫Àn
(
¨gv
[1], 
KSH_BUF_SIZE
);

167 
	`KASSERT
(
¨gc
 == 1);

168 
fd
 = ()
	`do_›í
(".", 
O_RDONLY
);

169 i‡(
fd
 < 0)

171 
	`k¥ötf
(
ksh
, "CouldÇot find directory: .\n");

174 
¨gÀn
 = 1;

177 i‡(
¨gc
 == 2)

178 
	`mem˝y
(
dúíäame
, 
¨gv
[1], 
¨gÀn
);

180 
dúíäame
[0] = '.';

182 
dúíäame
[
¨gÀn
] = '/';

183 
dúíäame
[
¨gÀn
 + 
NAME_LEN
 + 1] = '\0';

185 (
ªt
 = 
	`do_gëdít
(
fd
, &
dúít
)Ë=(
dúít_t
))

187 
	`mem˝y
(
dúíäame
 + 
¨gÀn
 + 1, 
dúít
.
d_«me
, 
NAME_LEN
 + 1);

188 
ªt
 = 
	`do_°©
(
dúíäame
, &
°©buf
);

189 i‡(
ªt
 < 0)

191 
	`k¥ötf
(
ksh
, "Eº‹ sèt\'ög `%s`: %s\n", 
dúít
.
d_«me
, 
	`°ªº‹
(()-
ªt
));

194 i‡(
	`S_ISDIR
(
°©buf
.
°_mode
))

196 
	`k¥ötf
(
ksh
, "%s/\n", 
dúít
.
d_«me
);

200 
	`k¥ötf
(
ksh
, "%s\n", 
dúít
.
d_«me
);

204 
	`do_˛o£
(
fd
);

205  
ªt
;

206 
	}
}

208 
	$kshñl_cd
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

210 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

211 i‡(
¨gc
 < 2)

213 
	`k¥ötf
(
ksh
, "Usage: cd <directory>\n");

217 
ªt
 = 
	`do_chdú
(
¨gv
[1]);

218 i‡(
ªt
 < 0)

220 
	`k¥ötf
(
ksh
, "cd: `%s`: %s\n", 
¨gv
[1], 
	`°ªº‹
(()-
ªt
));

223 
	}
}

225 
	$kshñl_rm
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

227 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

229 i‡(
¨gc
 < 2)

231 
	`k¥ötf
(
ksh
, "Usage:Ñm <file>\n");

235 
ªt
 = 
	`do_u∆ök
(
¨gv
[1]);

236 i‡(
ªt
 < 0)

238 
	`k¥ötf
(
ksh
, "rm: `%s`: %s\n", 
¨gv
[1], 
	`°ªº‹
(()-
ªt
));

242 
	}
}

244 
	$kshñl_lök
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

246 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

248 i‡(
¨gc
 < 3)

250 
	`k¥ötf
(
ksh
, "Usage:Üink <src> <dst>\n");

254 
ªt
 = 
	`do_lök
(
¨gv
[1],árgv[2]);

255 i‡(
ªt
 < 0)

257 
	`k¥ötf
(
ksh
, "Eº‹Üökög %†tÿ%s: %s\n", 
¨gv
[1],árgv[2], 
	`°ªº‹
(()-
ªt
));

261 
	}
}

263 
	$kshñl_rmdú
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

265 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

266 i‡(
¨gc
 < 2)

268 
	`k¥ötf
(
ksh
, "Usage:Ñmdir DIRECTORY...\n");

272 
exô_vÆ
 = 0;

273 
size_t
 
i
 = 1; i < 
¨gc
; i++)

275 
ªt
 = 
	`do_rmdú
(
¨gv
[
i
]);

276 i‡(
ªt
 < 0)

278 
	`k¥ötf
(
ksh
, "rmdir: failedÅoÑemove directory `%s': %s\n",

279 
¨gv
[
i
], 
	`°ªº‹
(()-
ªt
));

280 
exô_vÆ
 = 1;

284  
exô_vÆ
;

285 
	}
}

287 
	$kshñl_mkdú
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

289 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

290 i‡(
¨gc
 < 2)

292 
	`k¥ötf
(
ksh
, "Usage: mkdir DIRECTORY...\n");

296 
exô_vÆ
 = 0;

297 
size_t
 
i
 = 1; i < 
¨gc
; i++)

299 
ªt
 = 
	`do_mkdú
(
¨gv
[
i
]);

300 i‡(
ªt
 < 0)

302 
	`k¥ötf
(
ksh
, "mkdir: failedÅo create directory `%s': %s\n",

303 
¨gv
[
i
], 
	`°ªº‹
(()-
ªt
));

304 
exô_vÆ
 = 1;

308  
exô_vÆ
;

309 
	}
}

311 c⁄° *
	$gë_fûe_ty≥_°r
(
mode
)

313 i‡(
	`S_ISCHR
(
mode
))

317 i‡(
	`S_ISDIR
(
mode
))

321 i‡(
	`S_ISBLK
(
mode
))

325 i‡(
	`S_ISREG
(
mode
))

329 i‡(
	`S_ISLNK
(
mode
))

337 
	}
}

339 
	$kshñl_°©
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

341 
	`KASSERT
(
ksh
 && 
¨gc
 && 
¨gv
);

342 
exô_vÆ
 = 0;

344 i‡(
¨gc
 < 2)

346 
	`k¥ötf
(
ksh
, "Usage: stat FILE...\n");

350 
size_t
 
i
 = 1; i < 
¨gc
; i++)

352 
°©_t
 
buf
;

353 
ªt
 = 
	`do_°©
(
¨gv
[
i
], &
buf
);

354 i‡(
ªt
 < 0)

356 
	`k¥ötf
(
ksh
, "C™nŸ sèà`%s': %s\n", 
¨gv
[
i
],

357 
	`°ªº‹
(()-
ªt
));

358 
exô_vÆ
 = 1;

361 c⁄° *
fûe_ty≥_°r
 = 
	`gë_fûe_ty≥_°r
(
buf
.
°_mode
);

362 
	`k¥ötf
(
ksh
, "Fûe: `%s'\n", 
¨gv
[
i
]);

363 
	`k¥ötf
(
ksh
, "Size: %d\n", 
buf
.
°_size
);

364 
	`k¥ötf
(
ksh
, "Blocks: %d\n", 
buf
.
°_blocks
);

365 
	`k¥ötf
(
ksh
, "IO Block: %d\n", 
buf
.
°_blksize
);

366 
	`k¥ötf
(
ksh
, "%s\n", 
fûe_ty≥_°r
);

367 
	`k¥ötf
(
ksh
, "Inode: %d\n", 
buf
.
°_öo
);

368 
	`k¥ötf
(
ksh
, "Löks: %d\n", 
buf
.
°_∆ök
);

371  
exô_vÆ
;

372 
	}
}

374 
vf°e°_maö
(, *);

376 
	$kshñl_vfs_ã°
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

378 
	`k¥ötf
(
ksh
, "TEST VFS: Testing... Please wait.\n");

380 
ªt
 = 
	`vf°e°_maö
(1, 
NULL
);

382 
	`k¥ötf
(
ksh
, "TEST VFS:Åesting complete, check console forÑesults\n");

384  
ªt
;

385 
	}
}

389 #ifde‡
__S5FS__


391 
s5f°e°_maö
(, *);

393 
	$kshñl_s5f°e°
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

395 
	`k¥ötf
(
ksh
, "TEST S5FS: Testing... Please wait.\n");

397 
ªt
 = 
	`s5f°e°_maö
(1, 
NULL
);

399 
	`k¥ötf
(
ksh
, "TEST S5FS:Åesting complete, check console forÑesults\n");

401  
ªt
;

402 
	}
}

	@kernel/test/kshell/commands.h

1 #¥agm®
⁄˚


3 
	~"ã°/kshñl/kshñl.h
"

5 
	#KSHELL_CMD
(
«me
) \

6 
kshñl_
##
	`«me
(
kshñl_t
 *
ksh
, 
size_t
 
¨gc
, **
¨gv
)

	)

8 
KSHELL_CMD
(
hñp
);

10 
KSHELL_CMD
(
exô
);

12 
KSHELL_CMD
(
hÆt
);

14 
KSHELL_CMD
(
echo
);

16 
KSHELL_CMD
(
˛ór
);

18 #ifde‡
__VFS__


19 
KSHELL_CMD
(
ˇt
);

20 
KSHELL_CMD
(
ls
);

21 
KSHELL_CMD
(
cd
);

22 
KSHELL_CMD
(
rm
);

23 
KSHELL_CMD
(
lök
);

24 
KSHELL_CMD
(
rmdú
);

25 
KSHELL_CMD
(
mkdú
);

26 
KSHELL_CMD
(
°©
);

27 
KSHELL_CMD
(
vfs_ã°
);

30 #ifde‡
__S5FS__


31 
KSHELL_CMD
(
s5f°e°
);

	@kernel/test/kshell/io.c

1 
	~"ã°/kshñl/io.h
"

2 
	~"utû/debug.h
"

4 
	~"¥iv.h
"

6 #i‚de‡
__VFS__


8 
	~"drivîs/ch¨dev.h
"

12 #ifde‡
__VFS__


14 
	~"fs/vfs_sysˇŒ.h
"

18 
	~"utû/¥ötf.h
"

19 
	~"utû/°rög.h
"

28 #ifde‡
__VFS__


30 
	$kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
)

32 
ªtvÆ
 = 
	`do_wrôe
(
ksh
->
ksh_out_fd
, 
buf
, 
nbyãs
);

33 
	`KASSERT
(
ªtvÆ
 < 0 || (
size_t
ÏëvÆ =
nbyãs
);

34  
ªtvÆ
;

35 
	}
}

37 
	$kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

39  
	`do_ªad
(
ksh
->
ksh_ö_fd
, 
buf
, 
nbyãs
);

40 
	}
}

42 
	$kshñl_wrôe_Æl
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

45  
	`kshñl_wrôe
(
ksh
, 
buf
, 
nbyãs
);

46 
	}
}

50 
	$kshñl_ªad
(
kshñl_t
 *
ksh
, *
buf
, 
size_t
 
nbyãs
)

52  
ksh
->
ksh_cd
->
cd_›s
->
	`ªad
(ksh->ksh_cd, 0, 
buf
, 
nbyãs
);

53 
	}
}

55 
	$kshñl_wrôe
(
kshñl_t
 *
ksh
, c⁄° *
buf
, 
size_t
 
nbyãs
)

57  
ksh
->
ksh_cd
->
cd_›s
->
	`wrôe
(ksh->ksh_cd, 0, 
buf
, 
nbyãs
);

58 
	}
}

62 
	$k¥öt
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

64 
buf
[
KSH_BUF_SIZE
];

65 
size_t
 
cou¡
;

67 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

68 
cou¡
 = 
	`°∫Àn
(
buf
, (buf));

69 
	`kshñl_wrôe
(
ksh
, 
buf
, 
cou¡
);

70 
	}
}

72 
	$k¥ötf
(
kshñl_t
 *
ksh
, c⁄° *
fmt
, ...)

74 
va_li°
 
¨gs
;

75 
	`va_°¨t
(
¨gs
, 
fmt
);

76 
	`k¥öt
(
ksh
, 
fmt
, 
¨gs
);

77 
	`va_íd
(
¨gs
);

78 
	}
}

	@kernel/test/kshell/kshell.c

1 
	~"ã°/kshñl/kshñl.h
"

2 
	~<utû/¥ötf.h
>

4 
	~"c⁄fig.h
"

6 
	~"comm™d.h
"

7 
	~"comm™ds.h
"

8 
	~"tokíizî.h
"

10 #i‚de‡
__VFS__


12 
	~"drivîs/ch¨dev.h
"

13 
	~"drivîs/ây/ây.h
"

17 
	~"mm/kmÆloc.h
"

19 
	~"¥oc/¥oc.h
"

21 #ifde‡
__VFS__


23 
	~"fs/f˙é.h
"

24 
	~"fs/›í.h
"

25 
	~"fs/vfs_sysˇŒ.h
"

29 
	~"ã°/kshñl/io.h
"

31 
	~"utû/debug.h
"

32 
	~"utû/°rög.h
"

34 *
	$kshñl_¥oc_run
(
ây
, *
¨g2
)

37 
kshñl_t
 *
kshñl
 = 
	`kshñl_¸óã
((
uöt8_t
)
ây
);

38 i‡(!
kshñl
)

40 
	`do_exô
(-1);

43 
	`kshñl_execuã_√xt
(
kshñl
) > 0)

45 
	`kshñl_de°roy
(
kshñl
);

46  
NULL
;

47 
	}
}

49 
	$kshñl_öô
()

51 
	`kshñl_add_comm™d
("hñp", 
kshñl_hñp
,

53 
	`kshñl_add_comm™d
("echo", 
kshñl_echo
, "displayáÜine ofÅext");

54 
	`kshñl_add_comm™d
("˛ór", 
kshñl_˛ór
, "clearsÅhe screen");

55 #ifde‡
__VFS__


56 
	`kshñl_add_comm™d
("ˇt", 
kshñl_ˇt
,

58 
	`kshñl_add_comm™d
("ls", 
kshñl_ls
, "list directory contents");

59 
	`kshñl_add_comm™d
("cd", 
kshñl_cd
, "changeÅhe working directory");

60 
	`kshñl_add_comm™d
("rm", 
kshñl_rm
, "remove files");

61 
	`kshñl_add_comm™d
("lök", 
kshñl_lök
,

63 
	`kshñl_add_comm™d
("rmdú", 
kshñl_rmdú
, "removeÉmpty directories");

64 
	`kshñl_add_comm™d
("mkdú", 
kshñl_mkdú
, "make directories");

65 
	`kshñl_add_comm™d
("°©", 
kshñl_°©
, "display file status");

66 
	`kshñl_add_comm™d
("vf°e°", 
kshñl_vfs_ã°
, "runs VFSÅests");

69 #ifde‡
__S5FS__


70 
	`kshñl_add_comm™d
("s5f°e°", 
kshñl_s5f°e°
, "runs S5FSÅests");

73 
	`kshñl_add_comm™d
("hÆt", 
kshñl_hÆt
, "haltsÅhe systems");

74 
	`kshñl_add_comm™d
("exô", 
kshñl_exô
, "exitsÅhe shell");

75 
	}
}

77 
	$kshñl_add_comm™d
(c⁄° *
«me
, 
kshñl_cmd_func_t
 
cmd_func
,

78 c⁄° *
desc
)

80 
kshñl_comm™d_t
 *
cmd
;

82 
cmd
 = 
	`kshñl_comm™d_¸óã
(
«me
, 
cmd_func
, 
desc
);

83 
	`KASSERT
(
NULL
 !
cmd
);

84 
	`li°_ö£π_èû
(&
kshñl_comm™ds_li°
, &
cmd
->
kc_comm™ds_lök
);

86 
	`d¥ötf
("Added %†comm™d\n", 
«me
);

87 
	}
}

89 
kshñl_t
 *
	$kshñl_¸óã
(
uöt8_t
 
âyid
)

91 
kshñl_t
 *
ksh
;

93 
ksh
 = (
kshñl_t
 *)
	`kmÆloc
((kshell_t));

94 i‡(
NULL
 =
ksh
)

96 
	`d¥ötf
("NotÉnough memoryÅo create kshell\n");

97  
NULL
;

100 #ifde‡
__VFS__


101 
fd
;

102 
ây_∑th
[
MAXPATHLEN
];

104 
	`¢¥ötf
(
ây_∑th
, —ty_∑th), "/dev/ây%u", 
âyid
);

105 i‡((
fd
 = 
	`do_›í
(
ây_∑th
, 
O_RDWR
)) < 0)

107 
	`d¥ötf
("Couldn'à›í %s\n", 
ây_∑th
);

108 
	`k‰ì
(
ksh
);

109  
NULL
;

111 
ksh
->
ksh_out_fd
 = ksh->
ksh_ö_fd
 = ksh->
ksh_fd
 = ()
fd
;

113 
ch¨dev_t
 *
cd
;

114 
cd
 = 
	`ch¨dev_lookup
(
	`MKDEVID
(
TTY_MAJOR
, 
âyid
));

115 i‡(
NULL
 =
cd
)

117 
	`d¥ötf
("Couldn'àföd TTY wôh ID %u\n", 
âyid
);

118 
	`k‰ì
(
ksh
);

119  
NULL
;

121 
ksh
->
ksh_cd
 = 
cd
;

124 
	`d¥ötf
("kshñ»suc˚ssfuŒy cª©ed o¿TTY %u\n", 
âyid
);

125  
ksh
;

126 
	}
}

128 
	$kshñl_de°roy
(
kshñl_t
 *
ksh
)

130 
	`KASSERT
(
NULL
 !
ksh
);

131 
	`k¥ötf
(
ksh
, "Bye!\n");

132 #ifde‡
__VFS__


133 i‡(
	`do_˛o£
(
ksh
->
ksh_fd
) < 0)

135 
	`∑nic
("Error closing TTY file descriptor\n");

137 
	`d¥ötf
("kshñ»wôh fûêdes¸ùt‹ %d de°royed\n", 
ksh
->
ksh_fd
);

139 
	`d¥ötf
("kshñ»⁄ byã devi˚ %u de°royed\n", 
ksh
->
ksh_cd
->
cd_id
);

141 
	`k‰ì
(
ksh
);

142 
	}
}

151 
	$kshñl_s¸ub_tokí
(
kshñl_t
 *
ksh
, 
kshñl_tokí_t
 *
tokí
)

153 
	`KASSERT
(
NULL
 !
ksh
);

154 
	`KASSERT
(
NULL
 !
tokí
);

155 
	`KASSERT
(
NULL
 !
tokí
->
kt_ãxt
);

157 
	`mem£t
(
tokí
->
kt_ãxt
, ' ',Åokí->
kt_ãxéí
);

158 
	}
}

176 
	$kshñl_föd_ªdúe˘i⁄
(
kshñl_t
 *
ksh
, *
löe
,

177 *
ªdúe˘_ö
, *
ªdúe˘_out
,

178 *
≠≥nd
)

180 
ªtvÆ
;

181 
kshñl_tokí_t
 
tokí
;

183 (
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) > 0)

185 
	`KASSERT
(
tokí
.
kt_ty≥
 !
KTT_EOL
);

186 
löe
 +
ªtvÆ
;

188 i‡(
tokí
.
kt_ty≥
 =
KTT_WORD
)

193 *
ªdúe˘
 = 
NULL
;

194 i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_OUT
)

196 
ªdúe˘
 = 
ªdúe˘_out
;

197 *
≠≥nd
 = 0;

199 i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_OUT_APPEND
)

201 
ªdúe˘
 = 
ªdúe˘_out
;

202 *
≠≥nd
 = 1;

204 i‡(
tokí
.
kt_ty≥
 =
KTT_REDIRECT_IN
)

206 
ªdúe˘
 = 
ªdúe˘_ö
;

208 
	`kshñl_s¸ub_tokí
(
ksh
, &
tokí
);

210 i‡((
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) == 0)

212 
u√x≥˘ed_tokí
;

214 
	`KASSERT
(
ªtvÆ
 > 0);

216 i‡(
tokí
.
kt_ty≥
 !
KTT_WORD
)

218 
u√x≥˘ed_tokí
;

220 
	`°∫˝y
(
ªdúe˘
, 
tokí
.
kt_ãxt
,Åokí.
kt_ãxéí
);

221 
ªdúe˘
[
tokí
.
kt_ãxéí
] = '\0';

222 
	`kshñl_s¸ub_tokí
(
ksh
, &
tokí
);

226 
u√x≥˘ed_tokí
:

227 
	`k¥ötf
(
ksh
, "kshell: UnexpectedÅoken '%s'\n",

228 
	`kshñl_tokí_ty≥_°r
(
tokí
.
kt_ty≥
));

230 
	}
}

243 
	$kshñl_föd_√xt_¨g
(
kshñl_t
 *
ksh
, *
löe
, **
¨g
,

244 
size_t
 *
¨gÀn
)

246 
ªtvÆ
;

247 
kshñl_tokí_t
 
tokí
;

249 i‡((
ªtvÆ
 = 
	`kshñl_√xt_tokí
(
ksh
, 
löe
, &
tokí
)) == 0)

251 
	`KASSERT
(
tokí
.
kt_ty≥
 =
KTT_EOL
);

252  
ªtvÆ
;

254 
	`KASSERT
(
tokí
.
kt_ty≥
 =
KTT_WORD
);

255 *
¨g
 = 
tokí
.
kt_ãxt
;

256 *
¨gÀn
 = 
tokí
.
kt_ãxéí
;

270 i‡(
löe
[
ªtvÆ
] == '\0')

272 
löe
[
ªtvÆ
 + 1] = '\0';

276 
löe
[
ªtvÆ
] = '\0';

278  
ªtvÆ
;

279 
	}
}

291 
	$kshñl_gë_¨gs
(
kshñl_t
 *
ksh
, *
buf
, **
¨gv
,

292 
size_t
 
max_¨gs
, size_à*
¨gc
)

294 
size_t
 
¨gÀn
;

296 
	`KASSERT
(
NULL
 !
buf
);

297 
	`KASSERT
(
NULL
 !
¨gv
);

298 
	`KASSERT
(
max_¨gs
 > 0);

299 
	`KASSERT
(
NULL
 !
¨gc
);

301 *
¨gc
 = 0;

302 
	`kshñl_föd_√xt_¨g
(
ksh
, 
buf
, 
¨gv
 + *
¨gc
, &
¨gÀn
) &&

303 *
¨gc
 < 
max_¨gs
)

305 
buf
 = 
¨gv
[*
¨gc
] + 
¨gÀn
 + 1;

306 ++(*
¨gc
);

308 i‡(*
¨gc
 >
max_¨gs
)

310 
	`d¥ötf
("Too manyárguments\n");

312 
	}
}

314 
kshñl_comm™d_t
 *
	$kshñl_lookup_comm™d
(c⁄° *
«me
, 
size_t
 
«mñí
)

316 i‡(
«mñí
 > 
KSH_CMD_NAME_LEN
)

318 
«mñí
 = 
KSH_CMD_NAME_LEN
;

321 
	`li°_ôî©e
(&
kshñl_comm™ds_li°
, 
cmd
, 
kshñl_comm™d_t
,

322 
kc_comm™ds_lök
)

324 
	`KASSERT
(
NULL
 !
cmd
);

325 i‡((
	`°∫cmp
(
cmd
->
kc_«me
, 
«me
, 
«mñí
) == 0) &&

326 (
«mñí
 =
	`°∫Àn
(
cmd
->
kc_«me
, 
KSH_CMD_NAME_LEN
)))

328  
cmd
;

331  
NULL
;

332 
	}
}

334 #ifde‡
__VFS__


342 
	$kshñl_undúe˘
(
kshñl_t
 *
ksh
)

344 
	`KASSERT
(
NULL
 !
ksh
);

346 i‡(
ksh
->
ksh_ö_fd
 !ksh->
ksh_fd
)

348 i‡(
	`do_˛o£
(
ksh
->
ksh_ö_fd
) < 0)

350 
	`∑nic
("kshñl: Eº‹ closög fûêdes¸ùt‹ %d\n", 
ksh
->
ksh_ö_fd
);

352 
ksh
->
ksh_ö_fd
 = ksh->
ksh_fd
;

354 i‡(
ksh
->
ksh_out_fd
 !ksh->
ksh_fd
)

356 i‡(
	`do_˛o£
(
ksh
->
ksh_out_fd
) < 0)

358 
	`∑nic
("kshell: Error closing file descriptor %d\n",

359 
ksh
->
ksh_out_fd
);

361 
ksh
->
ksh_out_fd
 = ksh->
ksh_fd
;

363 
	}
}

375 
	$kshñl_ªdúe˘
(
kshñl_t
 *
ksh
, c⁄° *
ªdúe˘_ö
,

376 c⁄° *
ªdúe˘_out
, 
≠≥nd
)

378 
fd
;

380 
	`KASSERT
(
NULL
 !
ksh
);

381 
	`KASSERT
(
NULL
 !
ªdúe˘_ö
);

382 
	`KASSERT
(
NULL
 !
ªdúe˘_out
);

384 i‡(
ªdúe˘_ö
[0] != '\0')

386 i‡((
fd
 = 
	`do_›í
(
ªdúe˘_ö
, 
O_RDONLY
 | 
O_CREAT
)) < 0)

388 
	`k¥ötf
(
ksh
, "kshñl: %s: Eº‹ o≥nög fûe\n", 
ªdúe˘_ö
);

389 
îr‹
;

391 
ksh
->
ksh_ö_fd
 = ()
fd
;

393 i‡(
ªdúe˘_out
[0] != '\0')

395 
Êags
 = 
≠≥nd
 ? 
O_WRONLY
 | 
O_CREAT
 | 
O_APPEND
 : O_WRONLY | O_CREAT | 
O_TRUNC
;

396 i‡((
fd
 = 
	`do_›í
(
ªdúe˘_out
, 
Êags
)) < 0)

398 
	`k¥ötf
(
ksh
, "kshñl: %s: Eº‹ o≥nög fûe\n", 
ªdúe˘_out
);

399 
îr‹
;

401 
ksh
->
ksh_out_fd
 = 
fd
;

405 
îr‹
:

406 
	`kshñl_undúe˘
(
ksh
);

407  
fd
;

408 
	}
}

412 
	$kshñl_execuã_√xt
(
kshñl_t
 *
ksh
)

414 c⁄° *
kshñl_¥om±
 = "kshell$";

416 
nbyãs
, 
ªtvÆ
;

417 
kshñl_comm™d_t
 *
cmd
;

418 *
¨gs
[
KSH_MAX_ARGS
];

419 
size_t
 
¨gc
;

420 
ªdúe˘_ö
[
MAXPATHLEN
];

421 
ªdúe˘_out
[
MAXPATHLEN
];

422 
≠≥nd
;

428 
buf
[
KSH_BUF_SIZE
 + 1];

430 
	`KASSERT
(
NULL
 !
ksh
);

432 
	`k¥ötf
(
ksh
, "%†", 
kshñl_¥om±
);

434 i‡((
nbyãs
 = 
	`kshñl_ªad
(
ksh
, 
buf
, 
KSH_BUF_SIZE
)) <= 0)

436  
nbyãs
;

438 i‡(
nbyãs
 == 1)

442 i‡(
buf
[
nbyãs
 - 1] == '\n')

445 
buf
[--
nbyãs
] = '\0';

450 
buf
[
nbyãs
] = '\0';

456 
ªdúe˘_ö
[0] = 
ªdúe˘_out
[0] = '\0';

457 i‡(
	`kshñl_föd_ªdúe˘i⁄
(
ksh
, 
buf
, 
ªdúe˘_ö
, 
ªdúe˘_out
, &
≠≥nd
) <

460 
d⁄e
;

462 #ifde‡
__VFS__


463 i‡((
ªtvÆ
 = 
	`kshñl_ªdúe˘
(
ksh
, 
ªdúe˘_ö
, 
ªdúe˘_out
, 
≠≥nd
)) <

466 
	`d¥ötf
("ErrorÑedirecting I/O\n");

467 
d⁄e
;

471 
	`kshñl_gë_¨gs
(
ksh
, 
buf
, 
¨gs
, 
KSH_MAX_ARGS
, &
¨gc
);

472 i‡(
¨gc
 == 0)

474 
d⁄e
;

477 
	`d¥ötf
("Aâem±ögÅÿexecuã comm™d '%s'\n", 
¨gs
[0]);

479 i‡(
	`°∫cmp
(
¨gs
[0], "exô", 
	`°æí
("exit")) == 0)

481 
nbyãs
 = 0;

482 
d⁄e
;

485 i‡((
cmd
 = 
	`kshñl_lookup_comm™d
(
¨gs
[0], 
	`°æí
◊rgs[0]))Ë=
NULL
)

487 
	`k¥ötf
(
ksh
, "kshñl: %†nŸá vÆid comm™d\n", 
¨gs
[0]);

491 i‡((
ªtvÆ
 = 
cmd
->
	`kc_cmd_func
(
ksh
, 
¨gc
, 
¨gs
)) < 0)

493 
nbyãs
 = 
ªtvÆ
;

494 
d⁄e
;

497 
d⁄e
;

499 
d⁄e
:

500 #ifde‡
__VFS__


501 
	`kshñl_undúe˘
(
ksh
);

503  
nbyãs
;

504 
	}
}

	@kernel/test/kshell/priv.h

1 #¥agm®
⁄˚


3 
	~"ã°/kshñl/kshñl.h
"

5 
	~"utû/li°.h
"

7 
	#d¥ötf
(
x
, 
¨gs
...Ë
	`dbg
(
DBG_TEST
, x, ##¨gs)

	)

9 
	#KSH_BUF_SIZE
 \

10 1024

	)

12 
	#KSH_CMD_NAME_LEN
 16

	)

13 
	#KSH_MAX_ARGS
 128

	)

14 
	#KSH_DESC_LEN
 64

	)

16 
	gch¨dev
;

17 
	gkshñl_comm™d
;

19 
	skshñl


23 #ifde‡
__VFS__


24 
	mksh_fd
;

27 
	mksh_out_fd
;

28 
	mksh_ö_fd
;

30 
ch¨dev
 *
	mksh_cd
;

34 
li°_t
 
kshñl_comm™ds_li°
;

43 
kshñl_comm™d
 *
kshñl_lookup_comm™d
(c⁄° *
«me
, 
size_t
 
«mñí
);

	@kernel/test/kshell/tokenizer.c

1 
	~"tokíizî.h
"

3 
	~<˘y≥.h
>

5 
	~"utû/debug.h
"

7 
	#EOL
 '\0'

	)

9 c⁄° *
	gksh_tok_ty≥_°r
[] = {"text", "<", ">", ">>", "end ofÜine", ""};

11 
	$kshñl_√xt_tokí
(
kshñl_t
 *
ksh
, *
löe
, 
kshñl_tokí_t
 *
tokí
)

13 
	`KASSERT
(
NULL
 !
ksh
);

14 
	`KASSERT
(
NULL
 !
löe
);

15 
	`KASSERT
(
NULL
 !
tokí
);

17 
size_t
 
i
 = 0;

18 
löe
[
i
] !
EOL
 && 
	`is•a˚
(line[i]))

19 ++
i
;

20 
tokí
->
kt_ãxt
 = 
löe
 + 
i
;

23 
löe
[
i
])

25 
EOL
:

26 
tokí
->
kt_ty≥
 = 
KTT_EOL
;

27 
tokí
->
kt_ãxéí
 = 0;

30 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_IN
;

31 
tokí
->
kt_ãxéí
 = 
i
 = 1;

34 i‡(
löe
[
i
 + 1] == '>')

36 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_OUT_APPEND
;

37 
tokí
->
kt_ãxéí
 = 
i
 = 2;

41 
tokí
->
kt_ty≥
 = 
KTT_REDIRECT_OUT
;

42 
tokí
->
kt_ãxéí
 = 
i
 = 1;

46 
tokí
->
kt_ty≥
 = 
KTT_WORD
;

47 
tokí
->
kt_ãxéí
 = 0;

51 
tokí
->
kt_ty≥
)

53 
KTT_WORD
:

54 !
	`is•a˚
(
löe
[
i
]) &&Üine[i] != '<' &&Üine[i] != '>' &&

55 
löe
[
i
] !
EOL
)

57 ++
i
;

58 ++
tokí
->
kt_ãxéí
;

61 
KTT_EOL
:

67  
i
;

68 
	}
}

70 c⁄° *
	$kshñl_tokí_ty≥_°r
(
kshñl_tokí_ty≥_t
 
ty≥
)

72 
	`KASSERT
(
ty≥
 < 
KTT_MAX
);

73  
ksh_tok_ty≥_°r
[
ty≥
];

74 
	}
}

	@kernel/test/kshell/tokenizer.h

1 #¥agm®
⁄˚


3 
	~"ty≥s.h
"

5 
	~"ã°/kshñl/kshñl.h
"

7 
	ekshñl_tokí_ty≥


9 
	mKTT_WORD
,

10 
	mKTT_REDIRECT_IN
,

11 
	mKTT_REDIRECT_OUT
,

12 
	mKTT_REDIRECT_OUT_APPEND
,

13 
	mKTT_EOL
,

15 
	mKTT_MAX


16 } 
	tkshñl_tokí_ty≥_t
;

18 
	skshñl_tokí


20 
kshñl_tokí_ty≥_t
 
	mkt_ty≥
;

21 *
	mkt_ãxt
;

22 
size_t
 
	mkt_ãxéí
;

23 } 
	tkshñl_tokí_t
;

37 
kshñl_√xt_tokí
(
kshñl_t
 *
ksh
, *
löe
, 
kshñl_tokí_t
 *
tokí
);

39 c⁄° *
kshñl_tokí_ty≥_°r
(
kshñl_tokí_ty≥_t
 
ty≥
);

	@kernel/test/pipes.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

4 
	~"fs/fûe.h
"

5 
	~"fs/pùe.h
"

6 
	~"fs/vfs_sysˇŒ.h
"

8 
	~"ã°/kshñl/io.h
"

9 
	~"ã°/kshñl/kshñl.h
"

11 
	#IMAX
 256

	)

12 
	#JMAX
 16

	)

13 
	#KMAX
 16

	)

14 
	#ISTEP
 (
JMAX
 * 
KMAX
)

	)

16 
kthªad_t
 *
	$make_¥oc_™d_thªad
(*
«me
, 
kthªad_func_t
 
func
,

17 
¨g1
, *
¨g2
)

19 
¥oc_t
 *
¥oc
 = 
	`¥oc_¸óã
(
«me
);

20 i‡(!
¥oc
)

22  
NULL
;

25 
i
;

26 
i
 = 0; i < 
NFILES
; ++i)

28 
¥oc
->
p_fûes
[
i
] = 
cuΩroc
->p_files[i];

29 i‡(
¥oc
->
p_fûes
[
i
])

31 
	`‰ef
(
¥oc
->
p_fûes
[
i
]);

34  
	`kthªad_¸óã
(
¥oc
, 
func
, 
¨g1
, 
¨g2
);

35 
	}
}

37 *
	$¥odu˚r
(
¨g1
, *
¨g2
)

39 
fd
 = ()
¨g1
;

40 
kshñl_t
 *
ksh
 = (kshñl_à*)
¨g2
;

42 
	`k¥ötf
(
ksh
, "Producing bytes...\n");

44 
buf
[
KMAX
];

45 
i
, 
j
, 
k
;

46 
i
 = 0; i < 
IMAX
; ++i)

48 
j
 = 0; j < 
JMAX
; ++j)

50 
k
 = 0; k < 
KMAX
; ++k)

52 
buf
[
k
] = ()(
i
 ^ (
j
 * 
KMAX
 + k));

54 
	`k¥ötf
(
ksh
, "Wrôög byã†%dÅÿ%d\n", 
i
 * 
ISTEP
 + 
j
 * 
KMAX
,

55 
i
 * 
ISTEP
 + (
j
 + 1Ë* 
KMAX
);

56 i‡(
	`do_wrôe
(
fd
, 
buf
, 
KMAX
Ë=-
EPIPE
)

58 
	`k¥ötf
(
ksh
, "Got EPIPE\n");

59 
out
;

62 
	`k¥ötf
(
ksh
, "WrŸê%d byãs\n", (
i
 + 1Ë* 
ISTEP
);

64 
out
:

65  
NULL
;

66 
	}
}

68 *
	$c⁄sumî
(
¨g1
, *
¨g2
)

70 
fd
 = ()
¨g1
;

71 
kshñl_t
 *
ksh
 = (kshñl_à*)
¨g2
;

73 
	`k¥ötf
(
ksh
, "Consuming bytes...\n");

74 
buf
[
KMAX
];

75 
i
, 
j
, 
k
;

76 
i
 = 0; i < 
IMAX
; ++i)

78 
j
 = 0; j < 
JMAX
; ++j)

80 
	`k¥ötf
(
ksh
, "Ródög byã†%dÅÿ%d\n", 
i
 * 
ISTEP
 + 
j
 * 
KMAX
,

81 
i
 * 
ISTEP
 + (
j
 + 1Ë* 
KMAX
);

82 i‡(
	`do_ªad
(
fd
, 
buf
, 
KMAX
) == 0)

84 
	`k¥ötf
(
ksh
, "End ofÖipe\n");

85 
out
;

87 
k
 = 0; k < 
KMAX
; ++k)

89 i‡(
buf
[
k
] !(
i
 ^ (
j
 * 
KMAX
 + k)))

91 
	`k¥ötf
(
ksh
, "Byte %d incorrect (expected %2x, got %2x)\n",

92 
i
 * 
ISTEP
 + 
j
 * 
KMAX
 + 
k
, (i ^ (j * KMAX + k)),

93 
buf
[
k
]);

97 
	`k¥ötf
(
ksh
, "Ród %d byãs\n", (
i
 + 1Ë* 
ISTEP
);

99 
out
:

100  
NULL
;

101 
	}
}

103 
	$ã°_pùes
(
kshñl_t
 *
ksh
, 
¨gc
, **
¨gv
)

105 
pfds
[2];

106 
îr
 = 
	`do_pùe
(
pfds
);

107 i‡(
îr
 < 0)

109 
	`k¥ötf
(
ksh
, "FailedÅo createÖipe\n");

111 
	`k¥ötf
(
ksh
, "Cª©edÖùêwôhÑód fd %dánd wrôêfd %d\n", 
pfds
[0],

112 
pfds
[1]);

114 
	`sched_make_ru¬abÀ
(

115 
	`make_¥oc_™d_thªad
("¥odu˚r", 
¥odu˚r
, 
pfds
[1], 
ksh
));

116 
	`k¥ötf
(
ksh
, "CreatedÖroducerÖrocess\n");

117 
	`sched_make_ru¬abÀ
(

118 
	`make_¥oc_™d_thªad
("c⁄sumî", 
c⁄sumî
, 
pfds
[0], 
ksh
));

119 
	`k¥ötf
(
ksh
, "Created consumerÖrocess\n");

121 
	`do_waôpid
(-1, 0, 0);

122 
	`do_waôpid
(-1, 0, 0);

124 
	}
}

126 #ifde‡
__PIPES__


127 
__©åibuã__
((
unu£d
)Ë
	$ã°_pùes_öô
()

129 
	`kshñl_add_comm™d
("ã°_pùes", 
ã°_pùes
, "runÖipeÅests");

130 
	}
}

131 
öô_func
(
ã°_pùes_öô
);

132 
öô_dïíds
(
kshñl_öô
);

	@kernel/test/proctest.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

4 
	~"ã°/¥o˘e°.h
"

5 
	~"ã°/u£πe°.h
"

7 
	~"utû/debug.h
"

8 
	~"utû/¥ötf.h
"

9 
	~"utû/°rög.h
"

11 
	~"¥oc/kthªad.h
"

12 
	~"¥oc/¥oc.h
"

13 
	~"¥oc/sched.h
"

18 *
	$ã°_func
(
¨g1
, *
¨g2
)

20 
¥oc_t
 *
¥oc_as_¨g
 = (¥oc_à*)
¨g2
;

21 
	`ã°_as£π
(
¨g1
 =
¥oc_as_¨g
->
p_pid
, "ArgumentsáreÇot set up correctly");

22 
	`ã°_as£π
(
¥oc_as_¨g
->
p_°©e
 =
PROC_RUNNING
, "Process state isÇotÑunning");

23 
	`ã°_as£π
(
	`li°_em±y
(&
¥oc_as_¨g
->
p_chûdªn
), "There should beÇo childÖrocesses");

24  
NULL
;

25 
	}
}

27 
	$ã°_ãrmö©i⁄
()

29 
num_¥ocs_¸óãd
 = 0;

30 
¥oc_t
 *
√w_¥oc1
 = 
	`¥oc_¸óã
("procÅest 1");

31 
kthªad_t
 *
√w_kthªad1
 = 
	`kthªad_¸óã
(
√w_¥oc1
, 
ã°_func
, 2,Çew_proc1);

32 
num_¥ocs_¸óãd
++;

33 
	`sched_make_ru¬abÀ
(
√w_kthªad1
);

35 
cou¡
 = 0;

36 
°©us
;

37 
	`do_waôpid
(-1, &
°©us
, 0Ë!-
ECHILD
)

39 
	`ã°_as£π
(
°©us
 == 0, "Returned statusÇot set correctly");

40 
cou¡
++;

42 
	`ã°_as£π
(
cou¡
 =
num_¥ocs_¸óãd
,

43 "Ex≥˘ed: %d, A˘uÆ: %dÇumbî o‡¥o˚s£†havêbì¿˛ó√d up\n", 
num_¥ocs_¸óãd
, 
cou¡
);

44 
	}
}

46 
	$¥o˘e°_maö
(
¨g1
, *
¨g2
)

48 
	`dbg
(
DBG_TEST
, "\nStarting ProcsÅests\n");

49 
	`ã°_öô
();

50 
	`ã°_ãrmö©i⁄
();

55 
	`ã°_föi
();

57 
	}
}

	@kernel/test/s5fstest.c

5 
	~"î∫o.h
"

6 
	~"globÆs.h
"

8 
	~"ã°/u£πe°.h
"

10 
	~"utû/debug.h
"

11 
	~"utû/¥ötf.h
"

12 
	~"utû/°rög.h
"

14 
	~"fs/f˙é.h
"

15 
	~"fs/l£ek.h
"

16 
	~"fs/s5fs/s5fs.h
"

17 
	~"fs/vfs_sysˇŒ.h
"

19 
	#BUFSIZE
 256

	)

20 
	#BIG_BUFSIZE
 2056

	)

22 
	$gë_fûe_«me
(*
buf
, 
size_t
 
sz
, 
fûío
)

24 
	`¢¥ötf
(
buf
, 
sz
, "fûe%ld", 
fûío
);

25 
	}
}

28 
	$wrôe_u¡û_Áû
(
fd
)

30 
size_t
 
tŸÆ_wrôãn
 = 0;

31 
buf
[
BIG_BUFSIZE
] = {42};

32 
tŸÆ_wrôãn
 < 
S5_MAX_FILE_SIZE
)

34 
ªs
 = 
	`do_wrôe
(
fd
, 
buf
, 
BIG_BUFSIZE
);

35 i‡(
ªs
 < 0)

37  
ªs
;

39 
tŸÆ_wrôãn
 +
ªs
;

41 
	`KASSERT
(
tŸÆ_wrôãn
 =
S5_MAX_FILE_SIZE
);

42 
	`KASSERT
(
	`do_l£ek
(
fd
, 0, 
SEEK_END
Ë=
S5_MAX_FILE_SIZE
);

45 
	}
}

50 
	$is_fú°_n_byãs_zîo
(
fd
, 
size_t
 
n
)

52 
size_t
 
tŸÆ_ªad
 = 0;

53 
tŸÆ_ªad
 < 
n
)

55 
size_t
 
amt_to_ªad
 = 
	`MIN
(
BIG_BUFSIZE
, 
n
 - 
tŸÆ_ªad
);

56 
buf
[
BIG_BUFSIZE
] = {1};

57 
ªs
 = 
	`do_ªad
(
fd
, 
buf
, 
amt_to_ªad
);

58 i‡((
size_t
)
ªs
 !
amt_to_ªad
)

60 
	`dbg
(
DBG_TESTFAIL
, "do_ªadÑesu… wa†%ld\n", 
ªs
);

63 
tŸÆ_ªad
 +
ªs
;

67 
size_t
 
i
 = 0; i < 
amt_to_ªad
; i++)

69 i‡(
buf
[
i
])

71 
	`dbg
(
DBG_TESTFAIL
, "bu‡c⁄èö†ch¨ %d\n", 
buf
[
i
]);

78 
	}
}

80 
	$ã°_ru¬ög_out_of_öodes
()

83 
ªs
;

84 
fûío
 = 0;

85 
fûíame
[
BUFSIZE
];

90 
	`gë_fûe_«me
(
fûíame
, 
BUFSIZE
, 
fûío
);

91 
ªs
 = 
	`do_›í
(
fûíame
, 
O_RDONLY
 | 
O_CREAT
);

92 i‡(
ªs
 >= 0)

94 
fûío
++;

95 
	`ã°_as£π
(
	`do_˛o£
(()
ªs
) == 0, "couldn't close");

102 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "DidÇot get ENOSPCÉrror");

105 
	`ã°_as£π
(
	`do_mkdú
("directory") < 0, "do_mkdir worked!?");

106 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "unexpectedÉrror");

108 
	`ã°_as£π
(
	`do_mknod
("nod", 
S_IFCHR
, 123) != 0, "mknod worked!?");

109 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "wrongÉrror code");

112 
fûío
--;

116 
	`gë_fûe_«me
(
fûíame
, 
BUFSIZE
, 
fûío
);

117 
ªs
 = 
	`do_u∆ök
(
fûíame
);

118 
	`ã°_as£π
(
ªs
 == 0, "couldnt unlink");

119 
fûío
--;

120 } 
fûío
 >= 0);

123 
fd
 = ()
	`do_›í
("fûe", 
O_RDONLY
 | 
O_CREAT
);

124 
	`ã°_as£π
(
fd
 >= 0, "Still cannot create files");

125 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "CouldÇot do_close fd");

126 
	`ã°_as£π
(
	`do_u∆ök
("file") == 0, "CouldÇotÑemove file");

127 
	}
}

129 
	$ã°_fûlög_fûe
()

131 
ªs
 = 0;

132 
fd
 = ()
	`do_›í
("hugefûe", 
O_RDWR
 | 
O_CREAT
);

133 
	`KASSERT
(
fd
 >= 0);

135 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd
);

136 
	`ã°_as£π
(
ªs
 == 0, "DidÇot writeÅoÉntire file");

139 
buf
[
BIG_BUFSIZE
] = {0};

140 
ªs
 = 
	`do_wrôe
(
fd
, 
buf
, (buf));

141 
	`ã°_as£π
(
ªs
 < 0, "AbleÅo writeálthoughÅhe file is full");

142 
	`ã°_as£π
(
ªs
 =-
EFBIG
 ||Ñe†=-
EINVAL
, "WrongÉrror code");

144 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldnt close hugefile");

145 
	`ã°_as£π
(
	`do_u∆ök
("hugefile") == 0, "couldnt unlink hugefile");

146 
	}
}

151 
	$ã°_ru¬ög_out_of_blocks
()

153 
ªs
 = 0;

155 
fd1
 = ()
	`do_›í
("fuŒfûe", 
O_RDWR
 | 
O_CREAT
);

157 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd1
);

158 
	`ã°_as£π
(
ªs
 == 0, "Ran out of space quickerÅhan weÉxpected");

159 
	`ã°_as£π
(
	`do_˛o£
(
fd1
) == 0, "couldÇot close");

161 
fd2
 = ()
	`do_›í
("∑πüŒyfuŒfûe", 
O_RDWR
 | 
O_CREAT
);

162 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd2
);

163 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "DidÇot getÇospcÉrror");

165 
	`ã°_as£π
(
	`do_˛o£
(
fd2
) == 0, "couldÇot close");

167 
	`ã°_as£π
(
	`do_u∆ök
("fullfile") == 0, "couldnt do_unlink file");

168 
	`ã°_as£π
(
	`do_u∆ök
("partiallyfullfile") == 0, "couldnt do_unlink file");

169 
	}
}

173 
	$ã°_•¨£√ss_dúe˘_blocks
()

175 c⁄° *
fûíame
 = "sparsefile";

176 
fd
 = ()
	`do_›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
);

179 c⁄° 
addr
 = 10000;

180 c⁄° *
b
 = "iboros";

181 c⁄° 
size_t
 
sz
 = 
	`°æí
(
b
);

183 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 
addr
, 
SEEK_SET
) ==áddr, "couldnt seek");

184 
	`ã°_as£π
((
size_t
)
	`do_wrôe
(
fd
, 
b
, 
sz
) == sz,

187 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 0, 
SEEK_SET
) == 0, "couldnt seek backÅo begin");

188 
	`ã°_as£π
(
	`is_fú°_n_byãs_zîo
(
fd
, 
addr
) == 1,

192 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldn't close file");

193 
	`ã°_as£π
(
	`do_u∆ök
(
fûíame
) == 0, "couldnt unlink file");

196 
	}
}

198 
	$ã°_•¨£√ss_ödúe˘_blocks
()

200 c⁄° *
fûíame
 = "bigsparsefile";

201 
fd
 = ()
	`do_›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
);

204 c⁄° 
addr
 = 1000000;

205 c⁄° *
b
 = "iboros";

206 c⁄° 
size_t
 
sz
 = 
	`°æí
(
b
);

208 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 
addr
, 
SEEK_SET
) ==áddr, "couldnt seek");

209 
	`ã°_as£π
((
size_t
)
	`do_wrôe
(
fd
, 
b
, 
sz
) == sz,

212 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 0, 
SEEK_SET
) == 0, "couldnt seek backÅo begin");

213 
	`ã°_as£π
(
	`is_fú°_n_byãs_zîo
(
fd
, 
addr
) == 1,

217 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldn't close file");

218 
	`ã°_as£π
(
	`do_u∆ök
(
fûíame
) == 0, "couldnt unlink file");

221 
	}
}

223 
	$s5f°e°_maö
(
¨g0
, *
¨g1
)

225 
	`dbg
(
DBG_TEST
, "\nStarting S5FSÅest\n");

227 
	`ã°_öô
();

229 
	`KASSERT
(
	`do_mkdú
("s5fstest") == 0);

230 
	`KASSERT
(
	`do_chdú
("s5fstest") == 0);

231 
	`dbg
(
DBG_TEST
, "Test dir initialized\n");

233 
	`dbg
(
DBG_TEST
, "Testing sparseness for direct blocks\n");

234 
	`ã°_•¨£√ss_dúe˘_blocks
();

235 
	`dbg
(
DBG_TEST
, "Testing sparseness for indirect blocks\n");

236 
	`ã°_•¨£√ss_ödúe˘_blocks
();

238 
	`dbg
(
DBG_TEST
, "TestingÑunning out of inodes\n");

239 
	`ã°_ru¬ög_out_of_öodes
();

240 
	`dbg
(
DBG_TEST
, "Testing fillingá fileÅo max capacity\n");

241 
	`ã°_fûlög_fûe
();

242 
	`dbg
(
DBG_TEST
, "Testing usingállávailable blocks on disk\n");

243 
	`ã°_ru¬ög_out_of_blocks
();

245 
	`ã°_as£π
(
	`do_chdú
("..") == 0, "");

246 
	`ã°_as£π
(
	`do_rmdú
("s5fstest") == 0, "");

248 
	`ã°_föi
();

251 
	}
}

	@kernel/test/usertest.c

1 
	~"kî√l.h
"

2 
	~"°d¨g.h
"

4 
	~"ã°/u£πe°.h
"

6 
	~"utû/debug.h
"

7 
	~"utû/¥ötf.h
"

9 
	sã°_d©a


11 
	mtd_∑s£d
;

12 
	mtd_Áûed
;

13 } 
	tã°_d©a_t
;

15 
_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

16 c⁄° *
fmt
, 
va_li°
 
¨gs
);

18 
_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
,

19 c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

21 
ã°_d©a_t
 
	g_ã°_d©a
;

22 
ã°_∑ss_func_t
 
	g_∑ss_func
 = 
_deÁu…_ã°_∑ss
;

23 
ã°_Áû_func_t
 
	g_Áû_func
 = 
_deÁu…_ã°_Áû
;

25 
	$ã°_öô
()

27 
_ã°_d©a
.
td_∑s£d
 = 0;

28 
_ã°_d©a
.
td_Áûed
 = 0;

29 
	}
}

31 
	$ã°_föi
()

33 
	`dbgq
(
DBG_TEST
, "tests completed:\n");

34 
	`dbgq
(
DBG_TEST
, "\t\t%dÖas£d\n", 
_ã°_d©a
.
td_∑s£d
);

35 
	`dbgq
(
DBG_TEST
, "\t\t%d faûed\n", 
_ã°_d©a
.
td_Áûed
);

36 
	}
}

38 c⁄° *
	$ã°_îr°r
(
îr
)

40 
îr
)

125 
	}
}

127 
	$_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

128 c⁄° *
fmt
, 
va_li°
 
¨gs
)

130 
_ã°_d©a
.
td_Áûed
++;

131 i‡(
NULL
 =
fmt
)

133 
	`dbgq
(
DBG_TEST
, "FAILED: %s(%d): %s\n", 
fûe
, 
löe
, 
«me
);

137 
buf
[2048];

138 
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

139 
buf
[2047] = '\0';

140 
	`dbgq
(
DBG_TEST
, "FAILED: %s(%d): %s: %s\n", 
fûe
, 
löe
, 
«me
, 
buf
);

142 
	}
}

144 
	$_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
,

145 c⁄° *
«me
, c⁄° *
fmt
,

146 
va_li°
 
¨gs
)

148 
_ã°_d©a
.
td_∑s£d
++;

149 
	}
}

151 
	$_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

152 c⁄° *
fmt
, ...)

154 
va_li°
 
¨gs
;

155 
	`va_°¨t
(
¨gs
, 
fmt
);

157 i‡(0 =
vÆ
)

159 i‡(
NULL
 !
_Áû_func
)

161 
	`_Áû_func
(
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

166 i‡(
NULL
 !
_∑ss_func
)

168 
	`_∑ss_func
(
vÆ
, 
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

172 
	`va_íd
(
¨gs
);

173  
vÆ
;

174 
	}
}

	@kernel/test/vfstest/vfstest.c

1 #ifde‡
__KERNEL__


3 
	~"c⁄fig.h
"

4 
	~"î∫o.h
"

5 
	~"globÆs.h
"

6 
	~"kî√l.h
"

7 
	~"limôs.h
"

9 
	~"utû/debug.h
"

10 
	~"utû/¥ötf.h
"

11 
	~"utû/°rög.h
"

13 
	~"¥oc/kthªad.h
"

14 
	~"¥oc/¥oc.h
"

16 
	~"fs/dúít.h
"

17 
	~"fs/f˙é.h
"

18 
	~"fs/l£ek.h
"

19 
	~"fs/°©.h
"

20 
	~"fs/vfs_sysˇŒ.h
"

21 
	~"mm/kmÆloc.h
"

22 
	~"mm/mm™.h
"

24 
	~"ã°/u£πe°.h
"

25 
	~"ã°/vf°e°/vf°e°.h
"

27 #unde‡
__VM__


31 
	~<î∫o.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

35 
	~<dúít.h
>

36 
	~<f˙é.h
>

37 
	~<°dio.h
>

38 
	~<sys/mm™.h
>

39 
	~<sys/°©.h
>

40 
	~<uni°d.h
>

41 
	~<wìnix/sysˇŒ.h
>

43 
	~<ã°/ã°.h
>

48 
	#LONGNAME
 "su≥rˇli‰agûi°i˚xpülidocious"

	)

51 
	#TESTSTR
 \

61 "su¡ i¿cuÕ®quòofficü de£ru¡ mﬁlôánim idÉ°Üab‹um."

	)

63 
	#SHORTSTR
 "QuidquidÜ©öêdi˘um,á…um vidëur"

	)

65 
	groŸ_dú
[64];

67 
	$makedús
(c⁄° *
dú
)

69 
ªt
 = 0;

70 *
d
, *
p
;

72 i‡(
NULL
 =(
d
 = 
	`mÆloc
(
	`°æí
(
dú
) + 1)))

74  
ENOMEM
;

76 
	`°r˝y
(
d
, 
dú
);

78 
p
 = 
d
;

79 
NULL
 !(
p
 = 
	`°rchr
(p + 1, '/')))

81 *
p
 = '\0';

82 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
)

84 
ªt
 = 
î∫o
;

85 
îr‹
;

87 *
p
 = '/';

89 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
)

91 
ªt
 = 
î∫o
;

92 
îr‹
;

95 
îr‹
:

96 
	`‰ì
(
d
);

97  
ªt
;

98 
	}
}

100 
	$gëdít
(c⁄° *
dú
, 
dúít_t
 *
dúít
)

102 
ªt
, 
fd
 = -1;

104 i‡(0 > (
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0777)))

109 
ªt
 = 1;

110 
ªt
 != 0)

112 i‡(0 > (
ªt
 = 
	`gëdíts
(
fd
, 
dúít
, (*dirent))))

116 i‡(0 !
	`°rcmp
(".", 
dúít
->
d_«me
) &&

117 0 !
	`°rcmp
("..", 
dúít
->
d_«me
))

119 
	`˛o£
(
fd
);

124 
	`˛o£
(
fd
);

126 
	}
}

128 
	$ªmovóŒ
(c⁄° *
dú
)

130 
ªt
;

131 
dúít_t
 
dúít
;

132 
°©_t
 
°©us
;

134 i‡(0 > 
	`chdú
(
dú
))

136  
î∫o
;

139 
ªt
 = 1;

140 
ªt
 != 0)

142 i‡(0 > (
ªt
 = 
	`gëdít
(".", &
dúít
)))

144  
î∫o
;

146 i‡(0 =
ªt
)

151 i‡(0 > 
	`°©
(
dúít
.
d_«me
, &
°©us
))

153  
î∫o
;

156 i‡(
	`S_ISDIR
(
°©us
.
°_mode
))

158 i‡(0 > 
	`ªmovóŒ
(
dúít
.
d_«me
))

160  
î∫o
;

165 i‡(0 > 
	`u∆ök
(
dúít
.
d_«me
))

167  
î∫o
;

172 i‡(0 > 
	`chdú
(".."))

174  
î∫o
;

177 i‡(0 > 
	`rmdú
(
dú
))

179  
î∫o
;

183 
	}
}

185 
	$vf°e°_°¨t
()

187 
îr
;

189 
roŸ_dú
[0] = '\0';

192 
	`¢¥ötf
(
roŸ_dú
, ‘oŸ_dú), "vf°e°-%d", 
	`ønd
());

193 
îr
 = 
	`mkdú
(
roŸ_dú
, 0777);

195 i‡(
î∫o
 =
EEXIST
)

200 i‡(
îr
 && 
î∫o
 !
EEXIST
)

202 
	`¥ötf
("FaûedÅÿmakêã°ÑoŸ dúe˘‹y: %s\n", 
	`°ªº‹
(
î∫o
));

203 
	`exô
(
î∫o
);

205 } 
îr
 != 0);

206 
	`¥ötf
("Cª©edÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

207 
	}
}

212 
	$vf°e°_ãrm
()

214 i‡(0 !
	`ªmovóŒ
(
roŸ_dú
))

216 
	`Ârötf
(
°dîr
, "ERROR: couldÇotÑemoveÅestingÑoot %s: %s\n",

217 
roŸ_dú
, 
	`°ªº‹
(
î∫o
));

218 
	`exô
(-1);

220 
	`¥ötf
("RemovedÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

221 
	}
}

223 
	#∑ths_equÆ
(
p1
, 
p2
) \

226 
__r
; \

227 
°©_t
 
__s1
, 
__s2
; \

228 i‡(
__r
 = 
	`makedús
(
p1
), !
	`ã°_as£π
(0 == __r, "makedirs(\"%s\"): %s", \

229 
p1
, 
	`ã°_îr°r
(
__r
))) \

231 i‡(
__r
 = 
	`°©
(
p1
, &
__s1
), !
	`ã°_as£π
(0 == __r, "stat(\"%s\"): %s", \

232 
p1
, 
	`ã°_îr°r
(
î∫o
))) \

234 i‡(
__r
 = 
	`°©
(
p2
, &
__s2
), !
	`ã°_as£π
(0 == __r, "stat(\"%s\"): %s", \

235 
p2
, 
	`ã°_îr°r
(
î∫o
))) \

237 
	`ã°_as£π
(
__s1
.
°_öo
 =
__s2
.st_ino, \

238 "∑ths_equÆs(\"%s\" (öÿ%d), \"%s\" (öÿ%d))", 
p1
, \

239 
__s1
.
°_öo
, 
p2
, 
__s2
.st_ino); \

240 } 0);

	)

242 
	#sysˇŒ_Áû
(
ex¥
, 
îr
) \

243 (
	`ã°_as£π
((
î∫o
 = 0, -1 =(
ex¥
)), \

244 "\nu√x≥˘ed suc˚ss, w™ãd %†(%d)", 
	`ã°_îr°r
(
îr
), \

245 
îr
) \

246 ? 
	`ã°_as£π
((
ex¥
, 
î∫o
 =
îr
), \

249 
	`ã°_îr°r
(
îr
),Éº,Åe°_îr°r(
î∫o
),Érrno) \

250 : 0)

	)

252 
	#sysˇŒ_suc˚ss
(
ex¥
) \

253 
	`ã°_as£π
(0 <(
ex¥
), "\nunexpectedÉrror: %s (%d)", \

254 
	`ã°_îr°r
(
î∫o
),Éºno)

	)

256 
	#¸óã_fûe
(
fûe
) \

259 
__fd
; \

260 i‡(
	`sysˇŒ_suc˚ss
(
__fd
 = 
	`›í
((
fûe
), 
O_RDONLY
 | 
O_CREAT
, 0777))) \

262 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
__fd
)); \

264 } 0);

	)

265 
	#ªad_fd
(
fd
, 
size
, 
gﬂl
) \

268 
__buf
[64]; \

269 
	`ã°_as£π
((
ssize_t
)
	`°æí
(
gﬂl
Ë=
	`ªad
(
fd
, 
__buf
, 
size
), \

271 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
gﬂl
, 
	`°æí
(goal)), \

273 } 0);

	)

274 
	#ã°_Âos
(
fd
, 
exp
) \

277 
__g
, 
__e
 = (
exp
); \

278 
	`sysˇŒ_suc˚ss
(
__g
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)); \

279 
	`ã°_as£π
((
__g
 =
__e
), "fd %d fpo†© %d,Éx≥˘ed %d", 
fd
, __g, \

280 
__e
); \

281 } 0);

	)

283 
	$vf°e°_nŸdú
()

285 
fd
;

286 
°©_t
 
s
;

287 
	`sysˇŒ_suc˚ss
(
	`mkdú
("realdir", 0));

288 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ªÆdú/fûe", 
O_RDWR
 | 
O_CREAT
, 0));

289 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

290 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ªÆdú/fûe2", 
O_RDWR
 | 
O_CREAT
, 0));

291 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

293 
	`sysˇŒ_Áû
(
	`›í
("ªÆdú/fûe/n›e", 
O_CREAT
 | 
O_RDWR
, 0), 
ENOTDIR
);

294 
	`sysˇŒ_Áû
(
	`lök
("ªÆdú/fûe2", "ªÆdú/fûe/n›e"), 
ENOTDIR
);

295 
	`sysˇŒ_Áû
(
	`lök
("ªÆdú/fûe/n›e", "ªÆdú/fûe3"), 
ENOTDIR
);

296 
	`sysˇŒ_Áû
(
	`u∆ök
("ªÆdú/fûe/n›e"), 
ENOTDIR
);

297 
	`sysˇŒ_Áû
(
	`rmdú
("ªÆdú/fûe/n›e"), 
ENOTDIR
);

298 
	`sysˇŒ_Áû
(
	`°©
("ªÆdú/fûe/n›e", &
s
), 
ENOTDIR
);

299 
	`sysˇŒ_Áû
(
	`ª«me
("ªÆdú/fûe2", "ªÆdú/fûe/n›e"), 
ENOTDIR
);

300 
	`sysˇŒ_Áû
(
	`ª«me
("ªÆdú/fûe/n›e", "ªÆdú/fûe3"), 
ENOTDIR
);

303 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("realdir/file"));

304 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("realdir/file2"));

305 
	`sysˇŒ_suc˚ss
(
	`rmdú
("realdir"));

306 
	}
}

308 
	$vf°e°_°©
()

310 
fd
;

311 
°©_t
 
s
;

313 
	`sysˇŒ_suc˚ss
(
	`mkdú
("stat", 0));

314 
	`sysˇŒ_suc˚ss
(
	`chdú
("stat"));

316 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s
));

317 
	`ã°_as£π
(
	`S_ISDIR
(
s
.
°_mode
), 
NULL
);

319 
	`¸óã_fûe
("file");

320 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

321 
	`ã°_as£π
(
	`S_ISREG
(
s
.
°_mode
), 
NULL
);

324 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe", 
O_RDWR
, 0));

325 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "foobar", 6));

326 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

327 
	`ã°_as£π
(
s
.
°_size
 == 6, "unexpected file size");

328 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

331 #ifde‡
__VM__


332 
	`sysˇŒ_Áû
(
	`°©
(".", 
NULL
), 
EFAULT
);

334 
	`sysˇŒ_Áû
(
	`°©
("n€¡", &
s
), 
ENOENT
);

336 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

337 
	}
}

339 
	$vf°e°_mkdú
()

341 
	`sysˇŒ_suc˚ss
(
	`mkdú
("mkdir", 0777));

342 
	`sysˇŒ_suc˚ss
(
	`chdú
("mkdir"));

345 
	`¸óã_fûe
("file");

346 
	`sysˇŒ_Áû
(
	`mkdú
("fûe", 0777), 
EEXIST
);

347 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir", 0777));

348 
	`sysˇŒ_Áû
(
	`mkdú
("dú", 0777), 
EEXIST
);

351 
	`sysˇŒ_Áû
(
	`mkdú
(
LONGNAME
, 0777), 
ENAMETOOLONG
);

352 
	`sysˇŒ_Áû
(
	`mkdú
("fûe/dú", 0777), 
ENOTDIR
);

353 
	`sysˇŒ_Áû
(
	`mkdú
("n€¡/dú", 0777), 
ENOENT
);

354 
	`sysˇŒ_Áû
(
	`rmdú
("fûe/dú"), 
ENOTDIR
);

355 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/dú"), 
ENOENT
);

356 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡"), 
ENOENT
);

357 
	`sysˇŒ_Áû
(
	`rmdú
("."), 
EINVAL
);

358 
	`sysˇŒ_Áû
(
	`rmdú
(".."), 
ENOTEMPTY
);

359 
	`sysˇŒ_Áû
(
	`rmdú
("dú/."), 
EINVAL
);

360 
	`sysˇŒ_Áû
(
	`rmdú
("dú/.."), 
ENOTEMPTY
);

361 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/."), 
ENOENT
);

362 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/.."), 
ENOENT
);

365 
	`sysˇŒ_Áû
(
	`rmdú
("fûe"), 
ENOTDIR
);

366 
	`sysˇŒ_Áû
(
	`u∆ök
("dú"), 
EPERM
);

369 
	`¸óã_fûe
("dir/file");

370 
	`sysˇŒ_Áû
(
	`rmdú
("dú"), 
ENOTEMPTY
);

373 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("dir/file"));

374 
	`sysˇŒ_suc˚ss
(
	`rmdú
("dir"));

376 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

377 
	}
}

379 
	$vf°e°_chdú
()

381 
	#CHDIR_TEST_DIR
 "chdú"

	)

383 
°©_t
 
s§c
, 
sde°
, 
•¨ít
, 
sdú
;

384 
°©_t
 
r§c
, 
rdú
;

387 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
CHDIR_TEST_DIR
, 0777));

388 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s§c
));

389 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
sdú
));

391 
	`ã°_as£π
(
s§c
.
°_öo
 !
sdú
.°_öo, 
NULL
);

393 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

394 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
sde°
));

395 
	`sysˇŒ_suc˚ss
(
	`°©
("..", &
•¨ít
));

397 
	`ã°_as£π
(
sde°
.
°_öo
 =
sdú
.°_öo, 
NULL
);

398 
	`ã°_as£π
(
s§c
.
°_öo
 =
•¨ít
.°_öo, 
NULL
);

399 
	`ã°_as£π
(
s§c
.
°_öo
 !
sde°
.°_öo, 
NULL
);

401 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

402 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
r§c
));

403 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
rdú
));

405 
	`ã°_as£π
(
r§c
.
°_öo
 =
s§c
.°_öo, 
NULL
);

406 
	`ã°_as£π
(
rdú
.
°_öo
 =
sdú
.°_öo, 
NULL
);

409 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

410 
	`¸óã_fûe
("file");

411 
	`sysˇŒ_Áû
(
	`chdú
("fûe"), 
ENOTDIR
);

412 
	`sysˇŒ_Áû
(
	`chdú
("n€¡"), 
ENOENT
);

413 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

414 
	}
}

416 
	$vf°e°_∑ths
()

418 
	#PATHS_TEST_DIR
 "∑ths"

	)

420 
°©_t
 
s
;

422 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
PATHS_TEST_DIR
, 0777));

423 
	`sysˇŒ_suc˚ss
(
	`chdú
(
PATHS_TEST_DIR
));

425 
	`sysˇŒ_Áû
(
	`°©
("", &
s
), 
EINVAL
);

427 
	`∑ths_equÆ
(".", ".");

428 
	`∑ths_equÆ
("1/2/3", "1/2/3");

429 
	`∑ths_equÆ
("4/5/6", "4/5/6");

432 
	`∑ths_equÆ
("/", "/");

433 
	`∑ths_equÆ
("/", "/..");

434 
	`∑ths_equÆ
("/", "/../");

435 
	`∑ths_equÆ
("/", "/../.");

438 
	`∑ths_equÆ
(".", "./.");

439 
	`∑ths_equÆ
(".", "1/..");

440 
	`∑ths_equÆ
(".", "1/../");

441 
	`∑ths_equÆ
(".", "1/2/../..");

442 
	`∑ths_equÆ
(".", "1/2/../..");

443 
	`∑ths_equÆ
(".", "1/2/3/../../..");

444 
	`∑ths_equÆ
(".", "1/../1/..");

445 
	`∑ths_equÆ
(".", "1/../4/..");

446 
	`∑ths_equÆ
(".", "1/../1/..");

447 
	`∑ths_equÆ
(".", "1/2/3/../../../4/5/6/../../..");

448 
	`∑ths_equÆ
(".", "1/./2/./3/./.././.././.././4/./5/./6/./.././.././..");

451 
	`∑ths_equÆ
("1/2/3", "1/2/3/");

452 
	`∑ths_equÆ
("1/2/3", "1//2/3");

453 
	`∑ths_equÆ
("1/2/3", "1/2//3");

454 
	`∑ths_equÆ
("1/2/3", "1//2//3");

455 
	`∑ths_equÆ
("1/2/3", "1//2//3/");

456 
	`∑ths_equÆ
("1/2/3", "1///2///3///");

459 
	`∑ths_equÆ
("-", "-");

460 
	`∑ths_equÆ
(" ", " ");

461 
	`∑ths_equÆ
("\\", "\\");

462 
	`∑ths_equÆ
("0", "0");

464 
°©_t
 
°
;

467 
	`sysˇŒ_Áû
(
	`°©
("asdf", &
°
), 
ENOENT
);

468 
	`sysˇŒ_Áû
(
	`°©
("1/asdf", &
°
), 
ENOENT
);

469 
	`sysˇŒ_Áû
(
	`°©
("1/../asdf", &
°
), 
ENOENT
);

470 
	`sysˇŒ_Áû
(
	`°©
("1/2/asdf", &
°
), 
ENOENT
);

472 
	`¸óã_fûe
("1/file");

473 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
, 0777), 
ENOTDIR
);

474 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
 | 
O_CREAT
, 0777), 
ENOTDIR
);

476 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

477 
	}
}

479 
	$vf°e°_fd
()

481 
	#FD_BUFSIZE
 5

	)

482 
	#BAD_FD
 20

	)

483 
	#HUGE_FD
 9999

	)

485 
fd1
, 
fd2
;

486 
buf
[
FD_BUFSIZE
];

487 
dúít
 
d
;

489 
	`sysˇŒ_suc˚ss
(
	`mkdú
("fd", 0));

490 
	`sysˇŒ_suc˚ss
(
	`chdú
("fd"));

493 
	`sysˇŒ_Áû
(
	`ªad
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

494 
	`sysˇŒ_Áû
(
	`ªad
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

495 
	`sysˇŒ_Áû
(
	`ªad
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

497 
	`sysˇŒ_Áû
(
	`wrôe
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

498 
	`sysˇŒ_Áû
(
	`wrôe
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

499 
	`sysˇŒ_Áû
(
	`wrôe
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

501 
	`sysˇŒ_Áû
(
	`˛o£
(
BAD_FD
), 
EBADF
);

502 
	`sysˇŒ_Áû
(
	`˛o£
(
HUGE_FD
), 
EBADF
);

503 
	`sysˇŒ_Áû
(
	`˛o£
(-1), 
EBADF
);

505 
	`sysˇŒ_Áû
(
	`l£ek
(
BAD_FD
, 0, 
SEEK_SET
), 
EBADF
);

506 
	`sysˇŒ_Áû
(
	`l£ek
(
HUGE_FD
, 0, 
SEEK_SET
), 
EBADF
);

507 
	`sysˇŒ_Áû
(
	`l£ek
(-1, 0, 
SEEK_SET
), 
EBADF
);

509 
	`sysˇŒ_Áû
(
	`gëdíts
(
BAD_FD
, &
d
, (d)), 
EBADF
);

510 
	`sysˇŒ_Áû
(
	`gëdíts
(
HUGE_FD
, &
d
, (d)), 
EBADF
);

511 
	`sysˇŒ_Áû
(
	`gëdíts
(-1, &
d
, (d)), 
EBADF
);

513 
	`sysˇŒ_Áû
(
	`dup
(
BAD_FD
), 
EBADF
);

514 
	`sysˇŒ_Áû
(
	`dup
(
HUGE_FD
), 
EBADF
);

515 
	`sysˇŒ_Áû
(
	`dup
(-1), 
EBADF
);

517 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, 25), 
EBADF
);

518 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, 25), 
EBADF
);

519 
	`sysˇŒ_Áû
(
	`dup2
(-1, 25), 
EBADF
);

522 
	`sysˇŒ_Áû
(
	`dup2
(0, 
HUGE_FD
), 
EBADF
);

523 
	`sysˇŒ_Áû
(
	`dup2
(0, -1), 
EBADF
);

527 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, BAD_FD), 
EBADF
);

528 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, HUGE_FD), 
EBADF
);

529 
	`sysˇŒ_Áû
(
	`dup2
(-1, -1), 
EBADF
);

532 
	`¸óã_fûe
("file01");

533 
	`sysˇŒ_suc˚ss
(
fd1
 = 
	`›í
("fûe01", 
O_RDWR
, 0));

534 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup
(
fd1
));

535 
	`ã°_as£π
(
fd1
 < 
fd2
, "dup(%d)Ñeturned %d", fd1, fd2);

536 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd2
, "hello", 5));

537 
	`ã°_Âos
(
fd1
, 5);

538 
	`ã°_Âos
(
fd2
, 5);

539 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

540 
	`ã°_Âos
(
fd1
, 0);

541 
	`ã°_Âos
(
fd2
, 0);

542 
	`ªad_fd
(
fd1
, 5, "hello");

543 
	`ã°_Âos
(
fd1
, 5);

544 
	`ã°_Âos
(
fd2
, 5);

545 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

548 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 25));

549 
	`ã°_as£π
(25 =
fd2
, "dup2(%d, 25Ëªtu∫ed %d", 
fd1
, fd2);

550 
	`ã°_Âos
(
fd1
, 5);

551 
	`ã°_Âos
(
fd2
, 5);

552 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

553 
	`ã°_Âos
(
fd1
, 0);

554 
	`ã°_Âos
(
fd2
, 0);

555 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

558 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, fd1));

559 
	`ã°_as£π
(
fd1
 =
fd2
, "dup2(%d, %d)Ñeturned %d", fd1, fd1, fd2);

562 
fd3
;

563 
	`¸óã_fûe
("file02");

564 
	`sysˇŒ_suc˚ss
(
fd3
 = 
	`›í
("fûe02", 
O_RDWR
, 0));

565 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 
fd3
));

566 
	`ã°_as£π
(
fd2
 =
fd3
, "dup2(%d, %dËªtu∫ed %d", 
fd1
, fd3, fd2);

567 
	`ã°_Âos
(
fd1
, 0);

568 
	`ã°_Âos
(
fd2
, 0);

569 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 5, 
SEEK_SET
));

570 
	`ã°_Âos
(
fd1
, 5);

571 
	`ã°_Âos
(
fd2
, 5);

572 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

573 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd1
));

575 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

576 
	}
}

578 
	$vf°e°_memdev
()

580 
ªs
, 
fd
;

581 
def
 = 'a';

582 
buf
[4096];

584 
ªs
 = 1;

586 
	`mem£t
(
buf
, 
def
, (buf));

588 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0));

589 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

590 
	`ã°_as£π
((
buf
Ë=
ªs
, "write of %d bytes /dev/nullÑeturned %d",

591 (
buf
), 
ªs
);

592 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

593 
	`ã°_as£π
(0 =
ªs
, "ªad o‡%d byã†/dev/nuŒÑëu∫ed %d", (
buf
),

594 
ªs
);

595 
	`ã°_as£π
(
buf
[(bufË/ 2] =
def
,

597 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

599 
	`mem£t
(
buf
, 
def
, (buf));

601 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0));

602 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

603 
	`ã°_as£π
((
buf
Ë=
ªs
, "write of %d bytes /dev/zeroÑeturned %d",

604 (
buf
), 
ªs
);

605 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

606 
	`ã°_as£π
((
buf
Ë=
ªs
, "read of %d bytes /dev/zeroÑeturned %d",

607 (
buf
), 
ªs
);

608 
	`ã°_as£π
(
buf
[(buf) / 2] == 0,

610 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

611 
	}
}

613 
	$vf°e°_wrôe
()

615 
	#CHUNK_SIZE
 25

	)

616 
	#NUM_CHUNKS
 4

	)

617 
fd
, 
i
, 
ªs
;

618 
°©_t
 
s
;

619 c⁄° *
°r
 = "hello world";

621 
chunk
[
CHUNK_SIZE
];

622 
	`mem˝y
(
chunk
, 
°r
, 
	`°æí
(str));

623 
	`mem£t
(
chunk
 + 
	`°æí
(
°r
), 0, 25 - strlen(str));

625 
	`sysˇŒ_suc˚ss
(
	`mkdú
("write", 0));

626 
	`sysˇŒ_suc˚ss
(
	`chdú
("write"));

628 
	`¸óã_fûe
("file");

629 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe", 
O_RDWR
, 0));

630 
i
 = 0; i < 
NUM_CHUNKS
 * 
CHUNK_SIZE
; i += CHUNK_SIZE)

632 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
i
, 
SEEK_SET
));

633 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
°r
, 
	`°æí
(str)));

634 
	`ã°_as£π
(()
	`°æí
(
°r
Ë=
ªs
, "write of %d bytesÑeturned %d",

635 
	`°æí
(
°r
), 
ªs
);

637 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

638 
i
 = 0; i < 
NUM_CHUNKS
 - 1; ++i)

640 
__buf
[64];

641 
	`ã°_as£π
(
CHUNK_SIZE
 =
	`ªad
(
fd
, 
__buf
, CHUNK_SIZE),

643 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
chunk
, 
CHUNK_SIZE
),

646 
__buf
[64];

647 
	`ã°_as£π
(()
	`°æí
(
°r
Ë=
	`ªad
(
fd
, 
__buf
, strlen(str)),

649 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
chunk
, 
	`°æí
(
°r
)),

652 c⁄° *
√w_°r
 = "testing";

653 c⁄° 
loc
 = 37;

657 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
loc
, 
SEEK_SET
));

658 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
√w_°r
, 
	`°æí
(new_str)));

659 
	`ã°_as£π
(()
	`°æí
(
√w_°r
Ë=
ªs
, "write of %d bytesÑeturned %d",

660 
	`°æí
(
√w_°r
), 
ªs
);

661 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
loc
, 
SEEK_SET
));

662 
	`ªad_fd
(
fd
, 
	`°æí
(
√w_°r
),Çew_str);

663 
	`ã°_as£π
(
	`l£ek
(
fd
, 0, 
SEEK_END
) ==

664 (
NUM_CHUNKS
 - 1Ë* 
CHUNK_SIZE
 + ()
	`°æí
(
°r
),

667 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

668 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file"));

670 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

671 
	`sysˇŒ_suc˚ss
(
	`rmdú
("write"));

672 
	}
}

676 
	$vf°e°_öföôe
()

678 
ªs
, 
fd
;

679 
buf
[4096];

681 
ªs
 = 1;

682 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
, 0));

683 0 < 
ªs
)

685 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

687 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

689 
ªs
 = 1;

690 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
, 0));

691 0 < 
ªs
)

693 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

695 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

696 
	}
}

711 
	$vf°e°_›í
()

713 
	#OPEN_BUFSIZE
 5

	)

715 
buf
[
OPEN_BUFSIZE
];

716 
fd
, 
fd2
;

717 
°©_t
 
s
;

719 
	`sysˇŒ_suc˚ss
(
	`mkdú
("open", 0777));

720 
	`sysˇŒ_suc˚ss
(
	`chdú
("open"));

725 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_WRONLY
 | 
O_RDWR
 | 
O_CREAT
, 0), 
EINVAL
);

726 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_RDONLY
 | 
O_RDWR
 | 
O_WRONLY
 | 
O_CREAT
, 0),

727 
EINVAL
);

730 
	`sysˇŒ_Áû
(
	`›í
("fûe02", 
O_WRONLY
, 0), 
ENOENT
);

731 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDONLY
 | 
O_CREAT
, 0));

732 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

733 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file02"));

734 
	`sysˇŒ_Áû
(
	`°©
("fûe02", &
s
), 
ENOENT
);

737 
	`¸óã_fûe
("tmpfile");

738 
	`sysˇŒ_Áû
(
	`›í
("tmpfûe/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOTDIR
);

739 
	`sysˇŒ_Áû
(
	`›í
("n€¡/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOENT
);

740 
	`sysˇŒ_Áû
(
	`›í
(
LONGNAME
, 
O_RDONLY
 | 
O_CREAT
, 0), 
ENAMETOOLONG
);

743 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDONLY
 | 
O_CREAT
, 0));

744 
	`sysˇŒ_Áû
(
	`wrôe
(
fd
, "hñlo", 5), 
EBADF
);

745 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

749 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_WRONLY
, 0));

750 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
OPEN_BUFSIZE
), 
EBADF
);

751 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

752 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file03"));

753 
	`sysˇŒ_Áû
(
	`°©
("fûe03", &
s
), 
ENOENT
);

756 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDONLY
 | 
O_CREAT
, 0));

757 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_RDONLY
, 0));

758 
	`ã°_as£π
(
fd2
 > 
fd
, "open() didÇotÑeturnÜowest fd");

759 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

760 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

761 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_WRONLY
, 0));

762 
	`ã°_as£π
(
fd2
 =
fd
, "open() didÇotÑeturn correct fd");

763 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

764 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file04"));

765 
	`sysˇŒ_Áû
(
	`°©
("fûe04", &
s
), 
ENOENT
);

768 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file05", 0));

769 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_WRONLY
, 0), 
EISDIR
);

770 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_RDWR
, 0), 
EISDIR
);

771 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file05"));

774 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file06", 0));

775 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe06"), 
EPERM
);

776 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file06"));

777 
	`sysˇŒ_Áû
(
	`u∆ök
("."), 
EPERM
);

778 
	`sysˇŒ_Áû
(
	`u∆ök
(".."), 
EPERM
);

781 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe07"), 
ENOENT
);

784 
	`¸óã_fûe
("file08");

785 
	`sysˇŒ_Áû
(
	`›í
("fûe08/", 
O_RDONLY
, 0), 
ENOTDIR
);

786 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirA", 0777));

787 
	`sysˇŒ_suc˚ss
(
	`chdú
("dirA"));

788 
	`¸óã_fûe
("file09");

789 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

790 
	`sysˇŒ_Áû
(
	`›í
("dúA/fûe09/", 
O_RDONLY
, 0), 
ENOTDIR
);

793 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirB", 0777));

794 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirB/dirC", 0777));

795 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dúB/", 
O_RDONLY
, 0));

796 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

797 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dúB/dúC/", 
O_RDONLY
, 0));

798 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

800 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

801 
	}
}

803 
	$vf°e°_ªad
()

805 
	#READ_BUFSIZE
 256

	)

807 
fd
, 
ªt
;

808 
buf
[
READ_BUFSIZE
];

809 
°©_t
 
s
;

811 
	`sysˇŒ_suc˚ss
(
	`mkdú
("read", 0777));

812 
	`sysˇŒ_suc˚ss
(
	`chdú
("read"));

815 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDWR
 | 
O_CREAT
, 0));

816 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, "hello", 5));

817 
	`ã°_as£π
(5 =
ªt
, "wrôe(%d, \"hñlo\", 5Ëªtu∫ed %d", 
fd
,Ñet);

818 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
));

819 
	`ã°_as£π
(0 =
ªt
, "l£ek(%d, 0, SEEK_SETËªtu∫ed %d", 
fd
,Ñet);

820 
	`ªad_fd
(
fd
, 
READ_BUFSIZE
, "hello");

821 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

824 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

825 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

826 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
), 
EISDIR
);

827 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

830 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDWR
 | 
O_CREAT
, 0));

831 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

833 
	#ã°_l£ek
(
ex¥
, 
ªs
) \

836 
__r
 = (
ex¥
); \

837 
	`ã°_as£π
((
ªs
Ë=
__r
, #expr "Ñeturned %d,Éxpected %d", __r, \

838 
ªs
); \

839 } 0);

	)

841 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_CUR
), 5);

842 
	`ªad_fd
(
fd
, 10, "");

843 
	`ã°_l£ek
(
	`l£ek
(
fd
, -1, 
SEEK_CUR
), 4);

844 
	`ªad_fd
(
fd
, 10, "o");

845 
	`ã°_l£ek
(
	`l£ek
(
fd
, 2, 
SEEK_CUR
), 7);

846 
	`ªad_fd
(
fd
, 10, "");

847 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_CUR
), 
EINVAL
);

849 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

850 
	`ªad_fd
(
fd
, 10, "hello");

851 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_SET
), 3);

852 
	`ªad_fd
(
fd
, 10, "lo");

853 
	`ã°_l£ek
(
	`l£ek
(
fd
, 7, 
SEEK_SET
), 7);

854 
	`ªad_fd
(
fd
, 10, "");

855 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -1, 
SEEK_SET
), 
EINVAL
);

857 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_END
), 5);

858 
	`ªad_fd
(
fd
, 10, "");

859 
	`ã°_l£ek
(
	`l£ek
(
fd
, -2, 
SEEK_END
), 3);

860 
	`ªad_fd
(
fd
, 10, "lo");

861 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_END
), 8);

862 
	`ªad_fd
(
fd
, 10, "");

863 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_END
), 
EINVAL
);

865 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, 0, 
SEEK_SET
 + 
SEEK_CUR
 + 
SEEK_END
), 
EINVAL
);

866 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

869 
	`¸óã_fûe
("file03");

870 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
, 0));

871 
	`ã°_Âos
(
fd
, 0);

872 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

873 
	`ã°_Âos
(
fd
, 5);

874 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

876 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
 | 
O_APPEND
, 0));

877 
	`ã°_Âos
(
fd
, 0);

878 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

879 
	`ã°_Âos
(
fd
, 10);

881 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

882 
	`ã°_Âos
(
fd
, 0);

883 
	`ªad_fd
(
fd
, 10, "hellohello");

884 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 5, 
SEEK_SET
));

885 
	`ã°_Âos
(
fd
, 5);

886 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

887 
	`ã°_Âos
(
fd
, 15);

888 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

889 
	`ã°_Âos
(
fd
, 0);

890 
	`ªad_fd
(
fd
, 15, "hellohelloagain");

891 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

894 
	`¸óã_fûe
("file04");

895 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDWR
, 0));

896 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

897 
	`ã°_Âos
(
fd
, 5);

898 
	`ã°_l£ek
(
	`l£ek
(
fd
, 10, 
SEEK_SET
), 10);

899 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

900 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe04", &
s
));

901 
	`ã°_as£π
(
s
.
°_size
 == 15, "actual size: %d", s.st_size);

902 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

903 
	`ã°_as£π
(15 =
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
),

905 
	`ã°_as£π
(0 =
	`memcmp
(
buf
, "hello\0\0\0\0\0again", 15),

907 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

909 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

910 
	}
}

912 
	$vf°e°_gëdíts
()

914 
fd
, 
ªt
;

915 
dúít_t
 
dúíts
[4];

917 
	`sysˇŒ_suc˚ss
(
	`mkdú
("getdents", 0));

918 
	`sysˇŒ_suc˚ss
(
	`chdú
("getdents"));

921 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

922 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01/1", 0));

923 
	`¸óã_fûe
("dir01/2");

925 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

926 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)));

927 
	`ã°_as£π
(4 * (
dúít_t
Ë=
ªt
, 
NULL
);

929 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

930 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

932 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

933 
	`ã°_Âos
(
fd
, 0);

934 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

935 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

936 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

937 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

938 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

939 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

940 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

943 
	`¸óã_fûe
("file01");

944 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDONLY
, 0));

945 
	`sysˇŒ_Áû
(
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)), 
ENOTDIR
);

946 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

948 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

949 
	}
}

951 #ifde‡
__VM__


958 
	$vf°e°_s5fs_vm
()

960 
fd
, 
√wfd
, 
ªt
;

961 
buf
[2048];

962 
°©_t
 
ﬁd°©buf
, 
√w°©buf
;

963 *
addr
;

964 
	`mem£t
(&
ﬁd°©buf
, '\0', (
°©_t
));

965 
	`mem£t
(&
√w°©buf
, '\0', (
°©_t
));

967 
	`sysˇŒ_suc˚ss
(
	`mkdú
("s5fs", 0));

968 
	`sysˇŒ_suc˚ss
(
	`chdú
("s5fs"));

971 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ﬁdchld", 
O_RDWR
 | 
O_CREAT
, 0));

972 
	`sysˇŒ_suc˚ss
(
	`mkdú
("parent", 0));

975 
	`sysˇŒ_suc˚ss
(
	`lök
("oldchld", "newchld"));

978 
	`sysˇŒ_suc˚ss
(
	`°©
("ﬁdchld", &
ﬁd°©buf
));

979 
	`sysˇŒ_suc˚ss
(
	`°©
("√wchld", &
√w°©buf
));

980 
	`ã°_as£π
(0 =
	`memcmp
(&
ﬁd°©buf
, &
√w°©buf
, (
°©_t
)), 
NULL
);

983 
	`sysˇŒ_suc˚ss
(
√wfd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

984 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, 
TESTSTR
, 
	`°æí
(TESTSTR)));

985 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

986 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`ªad
(
√wfd
, 
buf
, 
	`°æí
(
TESTSTR
)));

987 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

988 
	`ã°_as£π
(0 =
	`°∫cmp
(
buf
, 
TESTSTR
, 
	`°æí
(TESTSTR)),

989 "°rög i†%.*s,Éx≥˘ed %s", 
	`°æí
(
TESTSTR
), 
buf
, TESTSTR);

991 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

992 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
√wfd
));

995 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("oldchld"));

996 
	`sysˇŒ_Áû
(
	`mkdú
("√wchld", 0), 
EEXIST
);

997 
	`sysˇŒ_suc˚ss
(
	`lök
("newchld", "oldchld"));

1000 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", "√wchld"), 
EEXIST
);

1001 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", 
LONGNAME
), 
ENAMETOOLONG
);

1002 
	`sysˇŒ_Áû
(
	`lök
("∑ª¡", "√wchld"), 
EPERM
);

1008 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

1009 
	`ã°_as£π
(

1010 
MAP_FAILED
 !(
addr
 = 
	`mm≠
(0, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1011 
MAP_PRIVATE
, 
fd
, 0)),

1012 
NULL
);

1014 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

1017 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

1018 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1021 
	`ã°_as£π
(

1022 
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1023 
MAP_SHARED
 | 
MAP_FIXED
, 
fd
, 0),

1024 
NULL
);

1026 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

1029 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

1031 
	`ã°_as£π
(

1032 
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1033 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1034 
NULL
);

1036 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1039 i‡(!
	`f‹k
())

1042 
	`mem˝y
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR));

1043 
	`exô
(0);

1047 
	`sysˇŒ_suc˚ss
(
	`waô
(0));

1050 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1053 
	`sysˇŒ_suc˚ss
(
	`munm≠
(
addr
, 2048));

1056 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 12, 0),

1057 
NULL
);

1058 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, -1, 0),

1059 
NULL
);

1060 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 0, 
fd
, 0), 
NULL
);

1061 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
, 
fd
, 0), 
NULL
);

1062 
	`ã°_as£π
(

1063 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
 | 
MAP_PRIVATE
, 
fd
, 0),

1064 
NULL
);

1065 
	`ã°_as£π
(

1066 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0x12345), 
NULL
);

1067 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
((*)0x12345, 1024, 
PROT_READ
,

1068 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1069 
NULL
);

1070 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 0, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

1071 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, -1, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

1072 
	`ã°_as£π
(

1073 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1074 
NULL
);

1075 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

1077 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDONLY
, 0));

1078 
	`ã°_as£π
(

1079 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0),

1080 
NULL
);

1081 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

1089 
	`sysˇŒ_Áû
(
	`munm≠
((*)0x12345, 15), 
EINVAL
);

1090 
	`sysˇŒ_Áû
(
	`munm≠
(0x0, 15), 
EINVAL
);

1091 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, 0), 
EINVAL
);

1092 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, -1), 
EINVAL
);

1096 
	`ã°_as£π
((*)-1 !(
addr
 = 
	`sbrk
(128)), 
NULL
);

1097 
	`mem˝y
(
addr
, 
TESTSTR
, 128);

1098 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 128), 
NULL
);

1101 
	`ã°_as£π
((*)(()
addr
 + 128Ë=
	`sbrk
(0), 
NULL
);

1103 
	`sysˇŒ_suc˚ss
(
	`brk
(
addr
));

1106 
	`sysˇŒ_Áû
(
	`brk
((*)(&"brk")), 
ENOMEM
);

1107 
	`sysˇŒ_Áû
(
	`brk
((*)1), 
ENOMEM
);

1108 
	`sysˇŒ_Áû
(
	`brk
((*)&
addr
), 
ENOMEM
);

1110 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

1111 
	}
}

1114 #ifde‡
__KERNEL__


1115 
uöt64_t
 
jiffõs
;

1118 
	$£ed_øndom√ss
()

1120 #ifde‡
__KERNEL__


1121 
	`§™d
(
jiffõs
);

1123 
	`§™d
(
	`time
(
NULL
));

1125 
	`ønd
();

1126 
	}
}

1131 #i‚de‡
__KERNEL__


1133 
	$maö
(
¨gc
, **
¨gv
)

1135 
	$vf°e°_maö
(
¨gc
, **
¨gv
)

1138 i‡(
¨gc
 != 1)

1140 
	`Ârötf
(
°dîr
, "USAGE: vfstest\n");

1144 
	`£ed_øndom√ss
();

1146 
	`ã°_öô
();

1147 
	`vf°e°_°¨t
();

1149 
	`sysˇŒ_suc˚ss
(
	`chdú
(
roŸ_dú
));

1151 
	`vf°e°_nŸdú
();

1152 
	`vf°e°_°©
();

1153 
	`vf°e°_chdú
();

1154 
	`vf°e°_mkdú
();

1155 
	`vf°e°_∑ths
();

1156 
	`vf°e°_fd
();

1157 
	`vf°e°_›í
();

1158 
	`vf°e°_ªad
();

1159 
	`vf°e°_gëdíts
();

1160 
	`vf°e°_memdev
();

1161 
	`vf°e°_wrôe
();

1163 #ifde‡
__VM__


1164 
	`vf°e°_s5fs_vm
();

1167 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

1169 
	`vf°e°_ãrm
();

1170 
	`ã°_föi
();

1173 
	}
}

	@kernel/test/vmtest.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

4 
	~"ã°/¥o˘e°.h
"

5 
	~"ã°/u£πe°.h
"

7 
	~"utû/debug.h
"

8 
	~"utû/¥ötf.h
"

9 
	~"utû/°rög.h
"

11 
	~"mm/kmÆloc.h
"

12 
	~"mm/mm.h
"

13 
	~"mm/∑ge.h
"

14 
	~"mm/¶ab.h
"

15 
	~"vm/vmm≠.h
"

17 
	$ã°_vmm≠
()

19 
vmm≠_t
 *
m≠
 = 
cuΩroc
->
p_vmm≠
;

22 
	`KASSERT
(
	`vmm≠_is_ønge_em±y
(
m≠
, 
	`ADDR_TO_PN
(
USER_MEM_LOW
), ADDR_TO_PN(
USER_MEM_HIGH
 - USER_MEM_LOW)));

25 
size_t
 
i
 = 
USER_MEM_LOW
; i < 
	`ADDR_TO_PN
(
USER_MEM_HIGH
); i +
PAGE_SIZE
)

27 
	`KASSERT
(!
	`vmm≠_lookup
(
m≠
, 
i
));

31 
size_t
 
num_vm¨ós
 = 5;

33 
size_t
 
num_∑ges_≥r_vm¨ó
 = 16;

35 
size_t
 
¥ev_°¨t
 = 
	`ADDR_TO_PN
(
USER_MEM_HIGH
);

36 
size_t
 
i
 = 0; i < 
num_vm¨ós
; i++)

38 
ssize_t
 
°¨t
 = 
	`vmm≠_föd_ønge
(
m≠
, 
num_∑ges_≥r_vm¨ó
, 
VMMAP_DIR_HILO
);

39 
	`ã°_as£π
(
°¨t
 + 
num_∑ges_≥r_vm¨ó
 =
¥ev_°¨t
, "IncorrectÑeturn value from vmmap_find_range");

41 
vm¨ó_t
 *
vma
 = 
	`kmÆloc
((vmarea_t));

42 
	`KASSERT
(
vma
 && "UnableÅoállocÅhe vmarea");

43 
	`mem£t
(
vma
, 0, (
vm¨ó_t
));

45 
vma
->
vma_°¨t
 = 
°¨t
;

46 
vma
->
vma_íd
 = 
°¨t
 + 
num_∑ges_≥r_vm¨ó
;

47 
	`vmm≠_ö£π
(
m≠
, 
vma
);

49 
¥ev_°¨t
 = 
°¨t
;

61 
	`li°_ôî©e
(&
m≠
->
vmm_li°
, 
vma
, 
vm¨ó_t
, 
vma_∂ök
)

63 
	`li°_ªmove
(&
vma
->
vma_∂ök
);

64 
	`k‰ì
(
vma
);

68 
	}
}

70 
	$vmã°_maö
(
¨g1
, *
¨g2
)

72 
	`ã°_öô
();

73 
	`ã°_vmm≠
();

77 
	`ã°_föi
();

79 
	}
}

	@kernel/util/btree.c

1 
	~"globÆs.h
"

3 
	~"utû/båì.h
"

5 
	~"mm/¶ab.h
"

6 
	~"mm/p‰ame.h
"

8 
	~"utû/debug.h
"

9 
	~"utû/°rög.h
"

11 
¶ab_Æloˇt‹_t
 *
	gbåì_node_Æloˇt‹
;

14 
båì_p›_key
(
båì_node_t
 *
x
, 
i
, **
d
);

15 
båì_≠≥nd_key
(
båì_node_t
 *
x
, 
k
, *
d
);

16 
båì_ö£π_key
(
båì_node_t
 *
x
, 
k
, 
i
, *
d
);

17 
båì_node_t
 *
båì_p›_chûd
(båì_node_à*
x
, 
i
);

18 
båì_≠≥nd_chûd
(
båì_node_t
 *
x
, båì_node_à*
addr
);

19 
båì_ö£π_chûd
(
båì_node_t
 *
x
, båì_node_à*
c
, 
i
);

22 
båì_•lô_chûd
(
båì_node_t
 *
roŸ
, 
chûd_öd
);

23 
båì_ö£π_n⁄fuŒ
(
båì_node_t
 *
x
, 
uöt64_t
 
k
, *
d©a
);

26 
båì_fûl_node
(
båì_node_t
 *
x
, 
i
);

27 
båì_mîge
(
båì_node_t
 *
x
, 
i
);

28 
båì_èke_¥ev
(
båì_node_t
 *
x
, 
i
);

29 
båì_èke_√xt
(
båì_node_t
 *
x
, 
i
);

30 
båì_gë_¥ede˚ss‹
(
båì_node_t
 *
x
, 
i
, **
d
);

31 
båì_gë_suc˚ss‹
(
båì_node_t
 *
x
, 
i
, **
d
);

32 
båì_dñëe_öã∫Æ
(
båì_node_t
 **
roŸ
, båì_node_à*
x
, 
key
, 
i
);

33 
båì_dñëe_hñ≥r
(
båì_node_t
 **
roŸ
, båì_node_à*
x
, 
uöt64_t
 
key
);

35 
¥öt_båì_hñ≥r
(
båì_node_t
 *
x
, 
Àvñ
);

37 
båì_as£π_ßnôy
(
båì_node_t
 *
roŸ
);

39 
	$båì_p›_key
(
båì_node_t
 *
x
, 
i
, **
d
)

41 
	`KASSERT
(
i
 < 
MAX_KEYS
);

42 
	`KASSERT
(
i
 < 
x
->
n_keys
);

43 
	`KASSERT
(
x
->
n_keys
 > 0);

45 
ªt
 = 
x
->
keys
[
i
];

46 i‡(
d
 !
NULL
)

47 *
d
 = 
x
->
d©a
[
i
];

49 
j
 = 
i
; j < (
MAX_KEYS
 - 1); j++)

51 
x
->
keys
[
j
] = x->keys[j+1];

52 
x
->
d©a
[
j
] = x->data[j+1];

54 
x
->
keys
[x->
n_keys
-1] = 0;

55 
x
->
d©a
[x->
n_keys
-1] = 
NULL
;

56 
x
->
n_keys
--;

58  
ªt
;

59 
	}
}

61 
	$båì_≠≥nd_key
(
båì_node_t
 *
x
, 
k
, *
d
)

63 
	`KASSERT
(
x
->
n_keys
 < 
MAX_KEYS
 && "Adding keyÅo fullÇode");

64 
x
->
keys
[x->
n_keys
] = 
k
;

65 
x
->
d©a
[x->
n_keys
] = 
d
;

66 
x
->
n_keys
++;

67 
	}
}

69 
	$båì_ö£π_key
(
båì_node_t
 *
x
, 
k
, 
i
, *
d
)

71 
	`KASSERT
(
x
->
n_keys
 < 
MAX_KEYS
 && "Inserting keyÅo fullÇode");

72 
j
 = 
MAX_KEYS
-1; j > 
i
; j--)

74 
x
->
keys
[
j
] = x->keys[j-1];

75 
x
->
d©a
[
j
] = x->data[j-1];

78 
x
->
keys
[
i
] = 
k
;

79 
x
->
d©a
[
i
] = 
d
;

80 
x
->
n_keys
++;

81 
	}
}

83 
båì_node_t
 *
	$båì_p›_chûd
(
båì_node_t
 *
x
, 
i
)

85 
	`KASSERT
(
i
 < 
MAX_CHILDREN
);

86 
	`KASSERT
(
i
 < 
x
->
n_chûdªn
);

87 
	`KASSERT
(
x
->
n_chûdªn
 > 0);

89 
båì_node_t
 *
ªt
 = 
x
->
chûdªn
[
i
];

91 
j
 = 
i
; j < 
MAX_CHILDREN
-1; j++)

93 
x
->
chûdªn
[
j
] = x->children[j+1];

96 
x
->
chûdªn
[x->
n_chûdªn
-1] = 
NULL
;

97 
x
->
n_chûdªn
--;

99  
ªt
;

100 
	}
}

102 
	$båì_≠≥nd_chûd
(
båì_node_t
 *
x
, båì_node_à*
addr
)

104 
	`KASSERT
(
x
->
n_chûdªn
 < 
MAX_CHILDREN
 && "Adding childÅo fullÇode");

105 
x
->
chûdªn
[x->
n_chûdªn
] = 
addr
;

106 
x
->
n_chûdªn
++;

107 
x
->
is_Àaf
 = 0;

108 
	}
}

110 
	$båì_ö£π_chûd
(
båì_node_t
 *
x
, båì_node_à*
c
, 
i
)

112 
	`KASSERT
(
x
->
n_chûdªn
 < 
MAX_CHILDREN
 && "Inserting childÅo fullÇode");

113 
j
 = 
MAX_CHILDREN
-1; j > 
i
; j--)

115 
x
->
chûdªn
[
j
] = x->children[j-1];

118 
x
->
chûdªn
[
i
] = 
c
;

119 
x
->
n_chûdªn
++;

120 
x
->
is_Àaf
 = 0;

121 
	}
}

123 
	$båì_•lô_chûd
(
båì_node_t
 *
roŸ
, 
chûd_öd
)

125 
	`KASSERT
(
chûd_öd
 < 2*
BRANCHING_FACTOR
);

127 
båì_node_t
 *
to_•lô
 = 
roŸ
->
chûdªn
[
chûd_öd
];

128 
	`KASSERT
(
to_•lô
->
n_keys
 =2*
BRANCHING_FACTOR
 - 1);

131 
båì_node_t
 *
√w_chûd
 = 
	`båì_node_¸óã
();

132 
√w_chûd
->
is_Àaf
 = 
to_•lô
->is_leaf;

134 
	`båì_ö£π_chûd
(
roŸ
, 
√w_chûd
, 
chûd_öd
+1);

137 *
d
;

138 
k
 = 
	`båì_p›_key
(
to_•lô
, 
BRANCHING_FACTOR
-1, &
d
);

139 
	`båì_ö£π_key
(
roŸ
, 
k
, 
chûd_öd
, 
d
);

142 
i
 = 
BRANCHING_FACTOR
-1; i < 
MAX_KEYS
-1; i++)

144 
k
 = 
	`båì_p›_key
(
to_•lô
, 
i
, &
d
);

145 
	`båì_≠≥nd_key
(
√w_chûd
, 
k
, 
d
);

150 i‡(!
to_•lô
->
is_Àaf
)

152 
i
 = 
BRANCHING_FACTOR
; i < 2*BRANCHING_FACTOR; i++)

154 
	`båì_≠≥nd_chûd
(
√w_chûd
, 
	`båì_p›_chûd
(
to_•lô
, 
BRANCHING_FACTOR
));

157 
	}
}

160 
	$båì_ö£π_n⁄fuŒ
(
båì_node_t
 *
x
, 
uöt64_t
 
k
, *
d©a
)

162 
i
 = 
x
->
n_keys
 - 1;

164 i‡(
x
->
is_Àaf
)

166 
i
 >0 && 
k
 < 
x
->
keys
[i])

168 
x
->
keys
[
i
+1] = x->keys[i];

169 
x
->
d©a
[
i
+1] = x->data[i];

170 
i
--;

173 
x
->
keys
[
i
+1] = 
k
;

174 
x
->
d©a
[
i
+1] = data;

175 
x
->
n_keys
++;

179 
i
 >0 && 
k
 < 
x
->
keys
[i])

181 
i
 -= 1;

183 
i
 += 1;

185 i‡(
x
->
chûdªn
[
i
]->
n_keys
 =
MAX_KEYS
)

187 
	`båì_•lô_chûd
(
x
, 
i
);

188 i‡(
k
 > 
x
->
keys
[
i
])

190 
i
 += 1;

194 
	`båì_ö£π_n⁄fuŒ
(
x
->
chûdªn
[
i
], 
k
, 
d©a
);

196 
	}
}

199 
	$båì_dñëe_öã∫Æ
(
båì_node_t
 **
roŸ
, båì_node_à*
x
, 
key
, 
i
)

201 
	`KASSERT
(
i
 < 
x
->
n_keys
 && i < x->
n_chûdªn
-1);

202 
k
 = 
x
->
keys
[
i
];

204 i‡(
x
->
chûdªn
[
i
]->
n_keys
 >
BRANCHING_FACTOR
)

206 *
d
;

207 
k
 = 
	`båì_gë_¥ede˚ss‹
(
x
, 
i
, &
d
);

208 
x
->
keys
[
i
] = 
k
;

209 
x
->
d©a
[
i
] = 
d
;

210 
	`båì_dñëe
(&
x
->
chûdªn
[
i
], 
k
);

212 i‡(
x
->
chûdªn
[
i
+1]->
n_keys
 >
BRANCHING_FACTOR
)

214 *
d
;

215 
k
 = 
	`båì_gë_suc˚ss‹
(
x
, 
i
, &
d
);

216 
x
->
keys
[
i
] = 
k
;

217 
x
->
d©a
[
i
] = 
d
;

218 
	`båì_dñëe
(&
x
->
chûdªn
[
i
+1], 
k
);

222 
	`båì_mîge
(
x
, 
i
);

223 
	`båì_dñëe
(&
x
->
chûdªn
[
i
], 
k
);

225 
	}
}

227 
	$båì_gë_¥ede˚ss‹
(
båì_node_t
 *
x
, 
i
, **
d
)

229 
båì_node_t
 *
cur
 = 
x
->
chûdªn
[
i
];

230 !
cur
->
is_Àaf
)

231 
cur
 = cur->
chûdªn
[cur->
n_chûdªn
-1];

233 *
d
 = 
cur
->
d©a
[cur->
n_keys
-1];

234  
cur
->
keys
[cur->
n_keys
-1];

235 
	}
}

237 
	$båì_gë_suc˚ss‹
(
båì_node_t
 *
x
, 
i
, **
d
)

239 
båì_node_t
 *
cur
 = 
x
->
chûdªn
[
i
+1];

240 !
cur
->
is_Àaf
)

241 
cur
 = cur->
chûdªn
[0];

243 *
d
 = 
cur
->
d©a
[0];

244  
cur
->
keys
[0];

245 
	}
}

252 
	$båì_dñëe_hñ≥r
(
båì_node_t
 **
roŸ
, båì_node_à*
x
, 
uöt64_t
 
key
)

254 
i
 = 0;

256 
i
 < 
x
->
n_keys
 && 
key
 > x->
keys
[i]) i++;

259 i‡(
x
->
is_Àaf
)

261 i‡(
i
 < 
x
->
n_keys
 && x->
keys
[i] =
key
)

263 
	`båì_p›_key
(
x
, 
i
, 
NULL
);

268 i‡(
i
 < 
x
->
n_keys
 && x->
keys
[i] =
key
)

270 
	`båì_dñëe_öã∫Æ
(
roŸ
, 
x
, 
key
, 
i
);

274 
œ°
 = 
i
 =
x
->
n_keys
;

276 i‡(
x
->
chûdªn
[
i
]->
n_keys
 < 
BRANCHING_FACTOR
)

277 
	`båì_fûl_node
(
x
, 
i
);

279 i‡(
œ°
 && 
i
 > 
x
->
n_keys
)

280 
	`båì_dñëe_hñ≥r
(
roŸ
, 
x
->
chûdªn
[
i
-1], 
key
);

282 
	`båì_dñëe_hñ≥r
(
roŸ
, 
x
->
chûdªn
[
i
], 
key
);

284 
	}
}

286 
	$båì_èke_¥ev
(
båì_node_t
 *
x
, 
i
)

288 
	`KASSERT
(
i
 > 0);

289 
båì_node_t
 *
c
 = 
x
->
chûdªn
[
i
];

290 
båì_node_t
 *
s
 = 
x
->
chûdªn
[
i
-1];

292 *
d
;

293 
k
 = 
	`båì_p›_key
(
x
, 
i
-1, &
d
);

294 
	`båì_ö£π_key
(
c
, 
k
, 0, 
d
);

296 i‡(!
c
->
is_Àaf
)

297 
	`båì_ö£π_chûd
(
c
, 
	`båì_p›_chûd
(
s
, s->
n_chûdªn
-1), 0);

299 
k
 = 
	`båì_p›_key
(
s
, s->
n_keys
-1, &
d
);

300 
	`båì_ö£π_key
(
x
, 
k
, 
i
-1, 
d
);

301 
	}
}

303 
	$båì_èke_√xt
(
båì_node_t
 *
x
, 
i
)

305 
	`KASSERT
(
i
 < 
x
->
n_chûdªn
-1);

306 
båì_node_t
 *
c
 = 
x
->
chûdªn
[
i
];

307 
båì_node_t
 *
s
 = 
x
->
chûdªn
[
i
+1];

309 *
d
;

310 
k
 = 
	`båì_p›_key
(
x
, 
i
, &
d
);

311 
	`båì_≠≥nd_key
(
c
, 
k
, 
d
);

313 i‡(!
c
->
is_Àaf
)

314 
	`båì_≠≥nd_chûd
(
c
, 
	`båì_p›_chûd
(
s
, 0));

316 
k
 = 
	`båì_p›_key
(
s
, 0, &
d
);

317 
	`båì_ö£π_key
(
x
, 
k
, 
i
, 
d
);

318 
	}
}

320 
	$båì_fûl_node
(
båì_node_t
 *
x
, 
i
)

322 i‡(
i
 !0 && 
x
->
chûdªn
[i-1]->
n_keys
 >
BRANCHING_FACTOR
)

323 
	`båì_èke_¥ev
(
x
, 
i
);

325 i‡(
i
 !
x
->
n_keys
 && x->
chûdªn
[i+1]->n_key†>
BRANCHING_FACTOR
)

326 
	`båì_èke_√xt
(
x
, 
i
);

329 i‡(
i
 !
x
->
n_keys
)

330 
	`båì_mîge
(
x
, 
i
);

332 
	`båì_mîge
(
x
, 
i
-1);

334 
	}
}

336 
	$båì_mîge
(
båì_node_t
 *
x
, 
i
)

338 
	`KASSERT
(
i
 < 
x
->
n_chûdªn
-1);

339 
båì_node_t
 *
c
 = 
x
->
chûdªn
[
i
];

340 
båì_node_t
 *
s
 = 
x
->
chûdªn
[
i
+1];

342 *
d
;

343 
k
 = 
	`båì_p›_key
(
x
, 
i
, &
d
);

344 
	`båì_≠≥nd_key
(
c
, 
k
, 
d
);

346 
j
 = 0; j < 
s
->
n_keys
; j++)

347 
	`båì_≠≥nd_key
(
c
, 
s
->
keys
[
j
], s->
d©a
[j]);

349 i‡(!
c
->
is_Àaf
)

351 
j
 = 0; j <
s
->
n_keys
; j++)

352 
	`båì_≠≥nd_chûd
(
c
, 
s
->
chûdªn
[
j
]);

355 
	`båì_p›_chûd
(
x
, 
i
+1);

357 
	`båì_node_‰ì
(&
s
);

358 
	}
}

373 
	$båì_öô
()

375 
båì_node_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("båì_node", (
båì_node_t
));

376 
	}
}

381 
båì_node_t
 *
	$båì_node_¸óã
()

383 
båì_node_t
 *
bt
 = 
	`¶ab_obj_Æloc
(
båì_node_Æloˇt‹
);

384 i‡(!
bt
)

386  
NULL
;

389 
	`mem£t
(
bt
, 0, (
båì_node_t
));

391 
bt
->
is_Àaf
 = 1;

393  
bt
;

394 
	}
}

396 *
	$båì_£¨ch
(
båì_node_t
 *
roŸ
, 
uöt64_t
 
key
)

398 i‡(!
roŸ
)

399  
NULL
;

400 
öd
 = 0;

401 
öd
 < 
roŸ
->
n_keys
 && 
key
 >ÑoŸ->
keys
[ind]) ind++;

403 i‡(
öd
 < 
roŸ
->
n_keys
 && 
key
 =roŸ->
keys
[öd]ËÑoŸ->
d©a
[ind];

405 i‡(
roŸ
->
is_Àaf
Ë 
NULL
;

407  
	`båì_£¨ch
(
roŸ
->
chûdªn
[
öd
], 
key
);

408 
	}
}

410 
	$båì_ö£π
(
båì_node_t
 **
roŸ
, 
uöt64_t
 
key
, *
d©a
)

412 i‡(!(*
roŸ
))

413 *
roŸ
 = 
	`båì_node_¸óã
();

415 i‡((*
roŸ
)->
n_keys
 =
MAX_KEYS
)

419 
båì_node_t
 *
√w_roŸ
 = 
	`båì_node_¸óã
();

420 
	`båì_≠≥nd_chûd
(
√w_roŸ
, *
roŸ
);

422 
	`båì_•lô_chûd
(
√w_roŸ
, 0);

423 
	`båì_ö£π_n⁄fuŒ
(
√w_roŸ
, 
key
, 
d©a
);

424 *
roŸ
 = 
√w_roŸ
;

428 
	`båì_ö£π_n⁄fuŒ
(*
roŸ
, 
key
, 
d©a
);

431 
	`båì_as£π_ßnôy
(*
roŸ
);

432 
	}
}

434 
	$båì_dñëe
(
båì_node_t
 **
roŸ
, 
uöt64_t
 
key
)

436 i‡(
	`båì_£¨ch
(*
roŸ
, 
key
Ë!
NULL
Ë
	`båì_dñëe_hñ≥r
(root, *root, key);

437 
	`∑nic
("attemptedÅo delete somethingÇot inÅree");

439 i‡((*
roŸ
)->
n_keys
 == 0)

441 
båì_node_t
 *
tmp
 = *
roŸ
;

442 i‡((*
roŸ
)->
is_Àaf
)

443 *
roŸ
 = 
NULL
;

445 *
roŸ
 = (*roŸ)->
chûdªn
[0];

447 
	`båì_node_‰ì
(&
tmp
);

450 
	`båì_as£π_ßnôy
(*
roŸ
);

451 
	}
}

453 
	$båì_node_‰ì
(
båì_node_t
 **
node
)

455 
	`¶ab_obj_‰ì
(
båì_node_Æloˇt‹
, *
node
);

456 *
node
 = 
NULL
;

457 
	}
}

459 
	$båì_de°roy
(
båì_node_t
 *
roŸ
)

461 i‡(
roŸ
)

467 
	}
}

469 
	$¥öt_båì
(
båì_node_t
 *
x
)

471 
	`¥öt_båì_hñ≥r
(
x
, 0);

472 
	}
}

474 
	$¥öt_båì_hñ≥r
(
båì_node_t
 *
x
, 
Àvñ
)

476 
	`dbg_¥öt
("Levñ %d ", 
Àvñ
);

477 
i
 = 0; i < 
x
->
n_keys
; i++)

480 
	`dbg_¥öt
("%lu:%p,", 
x
->
keys
[
i
], x->
d©a
[i]);

483 
	`dbg_¥öt
("\n");

485 
Àvñ
++;

487 i‡(
x
->
n_chûdªn
 > 0)

489 
i
 = 0; i < 
x
->
n_chûdªn
; i++)

491 
	`¥öt_båì_hñ≥r
(
x
->
chûdªn
[
i
], 
Àvñ
);

494 
	}
}

496 
	$båì_as£π_ßnôy
(
båì_node_t
 *
roŸ
)

498 i‡(!
roŸ
) ;

500 
	`KASSERT
(
roŸ
->
n_keys
 > 0);

502 
i
 = 0; i < 
roŸ
->
n_keys
; i++)

504 
	`KASSERT
(((
p‰ame_t
 *)
roŸ
->
d©a
[
i
])->
pf_∑gíum
 =roŸ->
keys
[i]);

507 i‡(
roŸ
->
n_chûdªn
 =0 ||ÑoŸ->
is_Àaf
)

509 
	`KASSERT
((
roŸ
->
n_chûdªn
 =0Ë=roŸ->
is_Àaf
);

513 
i
 = 0; i < 
roŸ
->
n_chûdªn
; i++)

514 
	`båì_as£π_ßnôy
(
roŸ
->
chûdªn
[
i
]);

515 
	}
}

	@kernel/util/debug.c

1 
	~"maö/≠ic.h
"

2 
	~"maö/io.h
"

3 
	~"utû/¥ötf.h
"

4 
	~"utû/°rög.h
"

22 
	#INIT_DBG_MODES
 "-Æl,båì,ã°"

	)

29 
	#PORT
 0x3f8

	)

31 
	#PORT_INTR
 0x0d

	)

33 
uöt64_t
 
	gdbg_modes
;

35 
	sdbg_mode


37 c⁄° *
	md_«me
;

38 
uöt64_t
 
	md_mode
;

39 c⁄° *
	md_cﬁ‹
;

40 } 
	tdbg_mode_t
;

42 
	$dbg_öô
()

44 
	`outb
(
PORT
 + 3, 0x80);

45 
	`outb
(
PORT
 + 0, 0x03);

46 
	`outb
(
PORT
 + 1, 0x00);

47 
	`outb
(
PORT
 + 3, 0x03);

48 
	`outb
(
PORT
 + 2, 0xC7);

50 
	`dbg_add_modes
(
INIT_DBG_MODES
);

51 
	}
}

53 
dbg_mode_t
 
	gdbg_èb
[] = {
DBG_TAB
};

55 c⁄° *
	$dbg_cﬁ‹
(
uöt64_t
 
d_mode
)

57 
dbg_mode_t
 *
mode
;

58 
mode
 = 
dbg_èb
; mode->
d_mode
 != 0UL; mode++)

60 i‡(
mode
->
d_mode
 & d_mode)

62  
mode
->
d_cﬁ‹
;

66 
	`∑nic
("Unknow¿debug modê0x%lx\n", 
d_mode
);

67 
	}
}

69 
	$dbg_puts
(*
c
)

71 *
c
 != '\0')

74 !(
	`öb
(
PORT
 + 5) & 0x20))

76 
	`outb
(
PORT
, (
uöt8_t
)*
c
++);

78 
	}
}

80 
	#BUFFER_SIZE
 1024

	)

82 
	$dbg_¥öt
(*
fmt
, ...)

84 
va_li°
 
¨gs
;

85 
buf
[
BUFFER_SIZE
];

86 
size_t
 
cou¡
;

88 
	`va_°¨t
(
¨gs
, 
fmt
);

89 
cou¡
 = (
size_t
)
	`v¢¥ötf
(
buf
, (buf), 
fmt
, 
¨gs
);

90 
	`va_íd
(
¨gs
);

92 i‡(
cou¡
 >(
buf
))

94 
	`dbg_puts
(

98 
	`dbg_puts
(
buf
);

99 
	}
}

101 
	$dbg_¥ötöfo
(
dbg_öfofunc_t
 
func
, c⁄° *
d©a
)

103 
buf
[
BUFFER_SIZE
];

104 
	`func
(
d©a
, 
buf
, 
BUFFER_SIZE
);

105 
	`dbg_puts
(
buf
);

106 
	}
}

108 #i‚de‡
NDEBUG


115 
	$dbg_add_mode
(c⁄° *
«me
)

117 
ˇn˚l
;

118 
dbg_mode_t
 *
mode
;

120 i‡(*
«me
 == '-')

122 
ˇn˚l
 = 1;

123 
«me
++;

127 
ˇn˚l
 = 0;

130 
mode
 = 
dbg_èb
; mode->
d_«me
 !
NULL
; mode++)

132 i‡(
	`°rcmp
(
«me
, 
mode
->
d_«me
) == 0)

137 i‡(
mode
->
d_«me
 =
NULL
)

139 
	`dbg_¥öt
("W¨nög: Unknow¿debug o±i⁄: \"%s\"\n", 
«me
);

143 i‡(
ˇn˚l
)

145 
dbg_modes
 &~
mode
->
d_mode
;

149 
dbg_modes
 |
mode
->
d_mode
;

151 
	}
}

157 
	$dbg_add_modes
(c⁄° *
modes
)

159 
ív
[256];

160 *
«me
;

162 
	`°∫˝y
(
ív
, 
modes
, (env));

164 
«me
 = 
	`°πok
(
ív
, ",");Çame;Çamê°πok(
NULL
, ","))

166 
	`dbg_add_mode
(
«me
);

168 
	}
}

170 
size_t
 
	$dbg_modes_öfo
(c⁄° *
d©a
, *
buf
, 
size_t
 
size
)

172 
	`KASSERT
(
NULL
 =
d©a
);

173 
	`KASSERT
(0 < 
size
);

175 
size_t
 
osize
 = 
size
;

177 
dbg_mode_t
 *
mode
;

178 
mode
 = 
dbg_èb
; mode->
d_«me
 !
NULL
; ++mode)

180 i‡(
dbg_modes
 & 
mode
->
d_mode
 && mode->d_modê!
DBG_ALL
)

182 
Àn
;

183 i‡((
Àn
 = 
	`¢¥ötf
(
buf
, 
size
, "%s,", 
mode
->
d_«me
)) >= ()size)

189 
buf
 +
Àn
;

190 
size
 -
Àn
;

195 i‡(
size
 =
osize
)

197 
buf
[0] = '\0';

203 
buf
[-1] = '\0';

204  
osize
 - 
size
 + 1;

206 
	}
}

211 
n‹ëu∫
 
	$dbg_∑nic_hÆt
()

213 
__asm__
 volatile("cli; hlt");

214 
	`__buûtö_uƒóchabÀ
();

215 
	}
}

217 
	#PANIC_BUFSIZE
 2048

	)

219 
n‹ëu∫
 
	$dbg_∑nic
(c⁄° *
fûe
, 
löe
, c⁄° *
func
,

220 c⁄° *
fmt
, ...)

222 
buf
[
PANIC_BUFSIZE
];

223 
va_li°
 
¨gs
;

224 
	`va_°¨t
(
¨gs
, 
fmt
);

226 
DEBUG_ENTER


227 
	`dbg_¥öt
("C%ld P%ldÖ™i¯ö %s:%u %s(): ", 
curc‹e
.
kc_id
,

228 
cuΩroc
 ? cuΩroc->
p_pid
 : -1L, 
fûe
, 
löe
, 
func
);

229 
	`v¢¥ötf
(
buf
, 
PANIC_BUFSIZE
, 
fmt
, 
¨gs
);

230 
	`dbg_¥öt
("%s", 
buf
);

231 
	`dbg_¥öt
("\nC%ld HÆtög.\n\n", 
	`≠ic_cuºít_id
());

232 
DEBUG_EXIT


234 
	`va_íd
(
¨gs
);

236 
	`dbg_∑nic_hÆt
();

237 
	}
}

	@kernel/util/init.c

1 
	~"kî√l.h
"

3 
	~"mm/kmÆloc.h
"

5 
	~"utû/debug.h
"

6 
	~"utû/öô.h
"

7 
	~"utû/li°.h
"

8 
	~"utû/°rög.h
"

10 
	g_öô_£¨ch_cou¡
 = 0;

12 
	söô_fun˘i⁄


14 
öô_func_t
 
	mif_func
;

15 c⁄° *
	mif_«me
;

16 
li°_lök_t
 
	mif_lök
;

18 
	mif_£¨ch
;

19 
	mif_ˇŒed
;

20 
li°_t
 
	mif_dïs
;

23 
	söô_dïíds


25 c⁄° *
	mid_«me
;

26 
li°_lök_t
 
	mid_lök
;

29 
	$_öô_ˇŒ
(
li°_t
 *
funcs
, 
öô_fun˘i⁄
 *
func
)

31 
	`li°_ôî©e
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
)

33 
öô_fun˘i⁄
 *
found
 = 
NULL
;

34 
	`li°_ôî©e
(
funcs
, 
f
, 
öô_fun˘i⁄
, 
if_lök
)

36 i‡(
	`°rcmp
(
dï
->
id_«me
, 
f
->
if_«me
) == 0)

38 
found
 = 
f
;

43 i‡(!
found
)

45 
	`∑nic
("'%s' dïídícy f‹ '%s' d€†nŸÉxi°", 
dï
->
id_«me
,

46 
func
->
if_«me
);

49 i‡(
func
->
if_£¨ch
 =
found
->if_search)

51 
	`∑nic
("cúcuœ∏dïídícy bëwì¿'%s'ánd '%s'", 
func
->
if_«me
,

52 
found
->
if_«me
);

55 
	`dbg
(
DBG_INIT
, "'%s' dïíd†⁄ '%s': ", 
func
->
if_«me
, 
found
->if_name);

56 i‡(!
found
->
if_ˇŒed
)

58 
	`dbgq
(
DBG_INIT
, "calling\n");

59 
found
->
if_£¨ch
 = 
func
->if_search;

60 
	`_öô_ˇŒ
(
funcs
, 
found
);

64 
	`dbgq
(
DBG_INIT
, "already called\n");

68 
	`KASSERT
(!
func
->
if_ˇŒed
);

70 
	`dbg
(
DBG_INIT
, "CÆlög %†(0x%p)\n", 
func
->
if_«me
, func->
if_func
);

71 
func
->
	`if_func
();

72 
func
->
if_ˇŒed
 = 1;

73 
	}
}

75 
	$öô_ˇŒ_Æl
()

77 
li°_t
 
funcs
;

78 *
buf
, *
íd
;

80 
	`li°_öô
(&
funcs
);

81 
buf
 = (*)&
kî√l_°¨t_öô
;

82 
íd
 = (*)&
kî√l_íd_öô
;

84 
buf
 < 
íd
)

86 
öô_fun˘i⁄
 *
cuº
 = 
	`kmÆloc
((*curr));

87 
	`KASSERT
(
NULL
 !
cuº
);

89 
	`li°_ö£π_èû
(&
funcs
, &
cuº
->
if_lök
);

90 
	`li°_öô
(&
cuº
->
if_dïs
);

92 
	`KASSERT
(
NULL
 !*(
uöçå_t
 *)
buf
);

93 
cuº
->
if_func
 = (
öô_func_t
Ë* (
uöçå_t
 *)
buf
;

94 
cuº
->
if_«me
 = 
buf
 + (cuº->
if_func
);

95 
cuº
->
if_£¨ch
 = 0;

96 
cuº
->
if_ˇŒed
 = 0;

98 
buf
 +(
cuº
->
if_func
Ë+ 
	`°æí
(cuº->
if_«me
) + 1;

100 (
NULL
 =*(
uöçå_t
 *)
buf
Ë&& (bu‡< 
íd
))

102 
öô_dïíds
 *
dï
 = 
	`kmÆloc
((*dep));

103 
	`KASSERT
(
NULL
 !
dï
);

105 
	`li°_ö£π_èû
(&
cuº
->
if_dïs
, &
dï
->
id_lök
);

107 
dï
->
id_«me
 = 
buf
 + (
cuº
->
if_func
);

108 
buf
 +(
cuº
->
if_func
Ë+ 
	`°æí
(
dï
->
id_«me
) + 1;

112 
	`KASSERT
(
buf
 =
íd
);

114 
	`dbg
(
DBG_INIT
, "Initialization functionsánd dependencies:\n");

115 
	`li°_ôî©e
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
)

117 
	`dbgq
(
DBG_INIT
, "%†(0x%p): ", 
func
->
if_«me
, func->
if_func
);

118 
	`li°_ôî©e
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
)

120 
	`dbgq
(
DBG_INIT
, "%†", 
dï
->
id_«me
);

122 
	`dbgq
(
DBG_INIT
, "\n");

125 
	`li°_ôî©e
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
)

127 i‡(!
func
->
if_ˇŒed
)

129 
func
->
if_£¨ch
 = ++
_öô_£¨ch_cou¡
;

130 
	`_öô_ˇŒ
(&
funcs
, 
func
);

134 
	`li°_ôî©e
(&
funcs
, 
func
, 
öô_fun˘i⁄
, 
if_lök
)

136 
	`li°_ôî©e
(&
func
->
if_dïs
, 
dï
, 
öô_dïíds
, 
id_lök
)

138 
	`k‰ì
(
dï
);

140 
	`k‰ì
(
func
);

142 
	}
}

	@kernel/util/list.c

2 
	~<utû/debug.h
>

3 
	~<utû/li°.h
>

5 
ölöe
 
	$li°_öô
(
li°_t
 *
li°
Ë{Üi°->
l_√xt
 =Üi°->
l_¥ev
 =Üi°; 
	}
}

7 
ölöe
 
	$li°_lök_öô
(
li°_lök_t
 *
lök
)

9 
lök
->
l_√xt
 =Üök->
l_¥ev
 = 
NULL
;

10 
	}
}

12 
ölöe
 
	$li°_lök_is_löked
(c⁄° 
li°_lök_t
 *
lök
)

14  
lök
->
l_√xt
 &&Üök->
l_¥ev
;

15 
	}
}

17 
ölöe
 
	$li°_em±y
(c⁄° 
li°_t
 *
li°
Ë{ Üi°->
l_√xt
 =li°; 
	}
}

19 
ölöe
 
	$li°_as£π_ßnôy
(c⁄° 
li°_t
 *
li°
)

21 
	`KASSERT
(
li°
->
l_√xt
 &&Üi°->l_√xt->
l_¥ev
 &&Üist->l_prev &&

22 
li°
->
l_¥ev
->
l_√xt
);

23 
	}
}

25 
ölöe
 
	$li°_ö£π_bef‹e
(
li°_lök_t
 *
lök
,Üi°_lök_à*
to_ö£π
)

27 
li°_lök_t
 *
¥ev
 = 
to_ö£π
;

28 
li°_lök_t
 *
√xt
 = 
lök
;

29 
¥ev
->
l_√xt
 = 
√xt
;

30 
¥ev
->
l_¥ev
 = 
√xt
->l_prev;

31 
√xt
->
l_¥ev
->
l_√xt
 = 
¥ev
;

32 
√xt
->
l_¥ev
 = 
¥ev
;

33 
	}
}

35 
ölöe
 
	$li°_ö£π_hód
(
li°_t
 *
li°
, 
li°_lök_t
 *
lök
)

37 
	`li°_ö£π_bef‹e
((
li°
)->
l_√xt
, 
lök
);

38 
	}
}

40 
ölöe
 
	$li°_ö£π_èû
(
li°_t
 *
li°
, 
li°_lök_t
 *
lök
)

42 
	`li°_ö£π_bef‹e
(
li°
, 
lök
);

43 
	}
}

45 
ölöe
 
	$li°_ªmove
(
li°_lök_t
 *
lök
)

47 
li°_lök_t
 *
Œ
 = 
lök
;

48 
li°_lök_t
 *
¥ev
 = 
Œ
->
l_¥ev
;

49 
li°_lök_t
 *
√xt
 = 
Œ
->
l_√xt
;

50 
¥ev
->
l_√xt
 = 
√xt
;

51 
√xt
->
l_¥ev
 = 
¥ev
;

52 
Œ
->
l_√xt
 =Ül->
l_¥ev
 = 
NULL
;

53 
	}
}

	@kernel/util/math.c

60 
	~"kî√l.h
"

61 
	~"ty≥s.h
"

67 
	uuu
 {

68 
öt64_t
 
	mq
;

69 
öt64_t
 
	muq
;

70 
	m¶
[2];

71 
	mul
[2];

74 
	#_QUAD_HIGHWORD
 1

	)

75 
	#_QUAD_LOWWORD
 0

	)

79 
	#H
 
_QUAD_HIGHWORD


	)

80 
	#L
 
_QUAD_LOWWORD


	)

87 
	#CHAR_BIT
 8

	)

88 
	#QUAD_BITS
 ((
öt64_t
Ë* 
CHAR_BIT
)

	)

89 
	#LONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

90 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

101 
	#HHALF
(
x
Ë((xË>> 
HALF_BITS
)

	)

102 
	#LHALF
(
x
Ë((xË& ((1UL << 
HALF_BITS
Ë- 1))

	)

103 
	#LHUP
(
x
Ë((xË<< 
HALF_BITS
)

	)

109 
	#B
 (1UL << 
HALF_BITS
Ë

	)

112 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

118 
	tdigô
;

128 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

130 
i
;

132 
i
 = 0; i < 
Àn
; i++)

133 
p
[
i
] = 
	`LHALF
’[i] << 
sh
Ë| (p[ò+ 1] >> (
HALF_BITS
 - sh));

134 
p
[
i
] = 
	`LHALF
’[i] << 
sh
);

135 
	}
}

145 
uöt64_t


146 
	$__qdivªm
(
uöt64_t
 
uq
, uöt64_à
vq
, uöt64_à*
¨q
)

148 
uu
 
tmp
;

149 
digô
 *
u
, *
v
, *
q
;

150 
digô
 
v1
, 
v2
;

151 
qh©
, 
rh©
, 
t
;

152 
m
, 
n
, 
d
, 
j
, 
i
;

153 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

158 i‡(
vq
 == 0) {

160 vﬁ©ûêc⁄° 
zîo
 = 0;

162 
tmp
.
ul
[
H
] =Åmp.ul[
L
] = 1 / 
zîo
;

163 i‡(
¨q
)

164 *
¨q
 = 
uq
;

165  
tmp
.
q
;

167 i‡(
uq
 < 
vq
) {

168 i‡(
¨q
)

169 *
¨q
 = 
uq
;

172 
u
 = &
u•a˚
[0];

173 
v
 = &
v•a˚
[0];

174 
q
 = &
q•a˚
[0];

189 
tmp
.
uq
 = uq;

190 
u
[0] = 0;

191 
u
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

192 
u
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

193 
u
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

194 
u
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

195 
tmp
.
uq
 = 
vq
;

196 
v
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

197 
v
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

198 
v
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

199 
v
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

200 
n
 = 4; 
v
[1] == 0; v++) {

201 i‡(--
n
 == 1) {

202 
rbj
;

203 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

213 
t
 = 
v
[2];

214 
q1
 = 
u
[1] / 
t
;

215 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

216 
q2
 = 
rbj
 / 
t
;

217 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

218 
q3
 = 
rbj
 / 
t
;

219 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

220 
q4
 = 
rbj
 / 
t
;

221 i‡(
¨q
)

222 *
¨q
 = 
rbj
 % 
t
;

223 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

224 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

225  
tmp
.
q
;

234 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

235 
m
--;

236 
i
 = 4 - 
m
; --i >= 0;)

237 
q
[
i
] = 0;

238 
q
 +4 - 
m
;

246 
d
 = 0;

247 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

248 
d
++;

249 i‡(
d
 > 0) {

250 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

251 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

256 
j
 = 0;

257 
v1
 = 
v
[1];

258 
v2
 = 
v
[2];

260 
digô
 
uj0
, 
uj1
, 
uj2
;

270 
uj0
 = 
u
[
j
 + 0];

271 
uj1
 = 
u
[
j
 + 1];

272 
uj2
 = 
u
[
j
 + 2];

273 i‡(
uj0
 =
v1
) {

274 
qh©
 = 
B
;

275 
rh©
 = 
uj1
;

276 
qh©_too_big
;

278 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

279 
qh©
 = 
¬
 / 
v1
;

280 
rh©
 = 
¬
 % 
v1
;

282 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
)) {

283 
qh©_too_big
:

284 
qh©
--;

285 i‡((
rh©
 +
v1
Ë>
B
)

294 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

295 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

296 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

297 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

299 
t
 = 
u
[
j
] -Å;

300 
u
[
j
] = 
	`LHALF
(
t
);

307 i‡(
	`HHALF
(
t
)) {

308 
qh©
--;

309 
t
 = 0, 
i
 = 
n
; i > 0; i--) {

310 
t
 +
u
[
i
 + 
j
] + 
v
[i];

311 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

312 
t
 = 
	`HHALF
(t);

314 
u
[
j
] = 
	`LHALF
(u[j] + 
t
);

316 
q
[
j
] = 
qh©
;

317 } ++
j
 <
m
);

324 i‡(
¨q
) {

325 i‡(
d
) {

326 
i
 = 
m
 + 
n
; i > m; --i)

327 
u
[
i
] = (u[i] >> 
d
) |

328 
	`LHALF
(
u
[
i
 - 1] << (
HALF_BITS
 - 
d
));

329 
u
[
i
] = 0;

331 
tmp
.
ul
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

332 
tmp
.
ul
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

333 *
¨q
 = 
tmp
.
q
;

336 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

337 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

338  
tmp
.
q
;

339 
	}
}

346 
öt64_t
 
	$__divdi3
(
öt64_t
 
a
, i¡64_à
b
)

348 
uöt64_t
 
ua
, 
ub
, 
uq
;

349 
√g
;

351 i‡(
a
 < 0)

352 
ua
 = -(
uöt64_t
)
a
, 
√g
 = 1;

354 
ua
 = 
a
, 
√g
 = 0;

355 i‡(
b
 < 0)

356 
ub
 = -(
uöt64_t
)
b
, 
√g
 ^= 1;

358 
ub
 = 
b
;

359 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, (
uöt64_t
 *)0);

360  (
√g
 ? -
uq
 : uq);

361 
	}
}

366 
uöt64_t


367 
	$__udivdi3
(
uöt64_t
 
a
, uöt64_à
b
)

369  
	`__qdivªm
(
a
, 
b
, (
uöt64_t
 *)0);

370 
	}
}

376 
uöt64_t


377 
	$__umoddi3
(
uöt64_t
 
a
, uöt64_à
b
)

379 
uöt64_t
 
r
;

381 ()
	`__qdivªm
(
a
, 
b
, &
r
);

382  
r
;

383 
	}
}

393 
	$log2
(
x
)

395 
cuºít
 = 
x
;

397 
y
 = 1;

398 
ªsu…
 = 0;

399 
cuºít
) {

400 
cuºít
 >>= 1;

401 ++
ªsu…
;

402 
y
 <<= 1;

404 
y
 >>= 1;

405 i‡(
y
 =
x
)

406  
ªsu…
 - 1;

408  
ªsu…
;

409 
	}
}

	@kernel/util/printf.c

57 
	~"˘y≥.h
"

58 
	~"kî√l.h
"

59 
	~"limôs.h
"

61 
	~"utû/debug.h
"

62 
	~"utû/°rög.h
"

70 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

72 
ªsu…
 = 0, 
vÆue
;

74 i‡(!
ba£
)

76 
ba£
 = 10;

77 i‡(*
˝
 == '0')

79 
ba£
 = 8;

80 
˝
++;

81 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1]))

83 
˝
++;

84 
ba£
 = 16;

88 
	`isxdigô
(*
˝
) &&

89 (
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`touµî
(*cp) - 'A' + 10) <

90 
ba£
)

92 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

93 
˝
++;

95 i‡(
ídp
)

97 *
ídp
 = (*)
˝
;

99  
ªsu…
;

100 
	}
}

108 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

110 i‡(*
˝
 == '-')

112  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

114  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

115 
	}
}

123 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
,

124 
ba£
)

126 
ªsu…
 = 0, 
vÆue
;

128 i‡(!
ba£
)

130 
ba£
 = 10;

131 i‡(*
˝
 == '0')

133 
ba£
 = 8;

134 
˝
++;

135 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1]))

137 
˝
++;

138 
ba£
 = 16;

142 
	`isxdigô
(*
˝
) &&

143 (
vÆue
 = 
	`isdigô
(*
˝
) ? *cp - '0'

144 : (
	`i¶owî
(*
˝
Ë? 
	`touµî
(*cp) : *cp) - 'A' +

145 10Ë< 
ba£
)

147 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

148 
˝
++;

150 i‡(
ídp
)

152 *
ídp
 = (*)
˝
;

154  
ªsu…
;

155 
	}
}

163 
	$sim∂e_°πﬁl
(c⁄° *
˝
, **
ídp
, 
ba£
)

165 i‡(*
˝
 == '-')

167  -
	`sim∂e_°πouŒ
(
˝
 + 1, 
ídp
, 
ba£
);

169  
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

170 
	}
}

172 
	$skù_©oi
(c⁄° **
s
)

174 
i
 = 0;

176 
	`isdigô
(**
s
))

177 
i
 = i * 10 + *((*
s
)++) - '0';

178  
i
;

179 
	}
}

181 
	#ZEROPAD
 1

	)

182 
	#SIGN
 2

	)

183 
	#PLUS
 4

	)

184 
	#SPACE
 8

	)

185 
	#LEFT
 16

	)

186 
	#SPECIAL
 32

	)

187 
	#LARGE
 64

	)

189 *
	$numbî
(*
buf
, *
íd
, 
num
, 
ba£
, 
size
,

190 
¥ecisi⁄
, 
ty≥
)

192 
c
, 
sign
, 
tmp
[66];

193 c⁄° *
digôs
;

194 c⁄° 
smÆl_digôs
[] = "0123456789abcdefghijklmnopqrstuvwxyz";

195 c⁄° 
œrge_digôs
[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

196 
i
;

198 
digôs
 = (
ty≥
 & 
LARGE
Ë? 
œrge_digôs
 : 
smÆl_digôs
;

199 i‡(
ty≥
 & 
LEFT
)

201 
ty≥
 &~
ZEROPAD
;

203 i‡(
ba£
 < 2 || base > 36)

205  
buf
;

207 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

208 
sign
 = 0;

209 i‡(
ty≥
 & 
SIGN
)

211 i‡(
num
 < 0)

213 
sign
 = '-';

214 
num
 = -num;

215 
size
--;

217 i‡(
ty≥
 & 
PLUS
)

219 
sign
 = '+';

220 
size
--;

222 i‡(
ty≥
 & 
SPACE
)

224 
sign
 = ' ';

225 
size
--;

228 i‡(
ty≥
 & 
SPECIAL
)

230 i‡(
ba£
 == 16)

232 
size
 -= 2;

234 i‡(
ba£
 == 8)

236 
size
--;

239 
i
 = 0;

240 i‡(
num
 == 0)

242 
tmp
[
i
++] = '0';

248 
num2
 = ()
num
;

249 
ba£2
 = ()
ba£
;

250 
num2
 != 0)

252 
tmp
[
i
++] = 
digôs
[
num2
 % 
ba£2
];

253 
num2
 /
ba£2
;

256 i‡(
i
 > 
¥ecisi⁄
)

258 
¥ecisi⁄
 = 
i
;

260 
size
 -
¥ecisi⁄
;

261 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
)))

263 
size
-- > 0)

265 i‡(
buf
 <
íd
)

267 *
buf
 = ' ';

269 ++
buf
;

272 i‡(
sign
)

274 i‡(
buf
 <
íd
)

276 *
buf
 = 
sign
;

278 ++
buf
;

280 i‡(
ty≥
 & 
SPECIAL
)

282 i‡(
ba£
 == 8)

284 i‡(
buf
 <
íd
)

286 *
buf
 = '0';

288 ++
buf
;

290 i‡(
ba£
 == 16)

292 i‡(
buf
 <
íd
)

294 *
buf
 = '0';

296 ++
buf
;

297 i‡(
buf
 <
íd
)

299 *
buf
 = 
digôs
[33];

301 ++
buf
;

304 i‡(!(
ty≥
 & 
LEFT
))

306 
size
-- > 0)

308 i‡(
buf
 <
íd
)

310 *
buf
 = 
c
;

312 ++
buf
;

315 
i
 < 
¥ecisi⁄
--)

317 i‡(
buf
 <
íd
)

319 *
buf
 = '0';

321 ++
buf
;

323 
i
-- > 0)

325 i‡(
buf
 <
íd
)

327 *
buf
 = 
tmp
[
i
];

329 ++
buf
;

331 
size
-- > 0)

333 i‡(
buf
 <
íd
)

335 *
buf
 = ' ';

337 ++
buf
;

339  
buf
;

340 
	}
}

352 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

354 
Àn
;

355 
num
;

356 
i
, 
ba£
;

357 *
°r
, *
íd
, 
c
;

358 c⁄° *
s
;

360 
Êags
;

362 
fõld_width
;

363 
¥ecisi⁄
;

365 
quÆifõr
;

369 
°r
 = 
buf
;

370 
íd
 = 
buf
 + 
size
 - 1;

372 i‡(
íd
 < 
buf
 - 1)

374 
íd
 = ((*)-1);

375 
size
 = 
íd
 - 
buf
 + 1;

378 ; *
fmt
; ++fmt)

380 i‡(*
fmt
 != '%')

382 i‡(
°r
 <
íd
)

384 *
°r
 = *
fmt
;

386 ++
°r
;

391 
Êags
 = 0;

392 
ª≥©
:

393 ++
fmt
;

394 *
fmt
)

397 
Êags
 |
LEFT
;

398 
ª≥©
;

400 
Êags
 |
PLUS
;

401 
ª≥©
;

403 
Êags
 |
SPACE
;

404 
ª≥©
;

406 
Êags
 |
SPECIAL
;

407 
ª≥©
;

409 
Êags
 |
ZEROPAD
;

410 
ª≥©
;

414 
fõld_width
 = -1;

415 i‡(
	`isdigô
(*
fmt
))

417 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

419 i‡(*
fmt
 == '*')

421 ++
fmt
;

423 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

424 i‡(
fõld_width
 < 0)

426 
fõld_width
 = -field_width;

427 
Êags
 |
LEFT
;

432 
¥ecisi⁄
 = -1;

433 i‡(*
fmt
 == '.')

435 ++
fmt
;

436 i‡(
	`isdigô
(*
fmt
))

438 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

440 i‡(*
fmt
 == '*')

442 ++
fmt
;

444 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

446 i‡(
¥ecisi⁄
 < 0)

448 
¥ecisi⁄
 = 0;

453 
quÆifõr
 = -1;

454 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z')

456 
quÆifõr
 = *
fmt
;

457 ++
fmt
;

458 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l')

460 
quÆifõr
 = 'L';

461 ++
fmt
;

464 i‡(*
fmt
 == 'q')

466 
quÆifõr
 = 'L';

467 ++
fmt
;

471 
ba£
 = 10;

473 *
fmt
)

476 i‡(!(
Êags
 & 
LEFT
))

478 --
fõld_width
 > 0)

480 i‡(
°r
 <
íd
)

482 *
°r
 = ' ';

484 ++
°r
;

487 
c
 = ()
	`va_¨g
(
¨gs
, );

488 i‡(
°r
 <
íd
)

490 *
°r
 = 
c
;

492 ++
°r
;

493 --
fõld_width
 > 0)

495 i‡(
°r
 <
íd
)

497 *
°r
 = ' ';

499 ++
°r
;

504 
s
 = 
	`va_¨g
(
¨gs
, *);

505 i‡(!
s
)

507 
s
 = "<NULL>";

510 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

512 i‡(!(
Êags
 & 
LEFT
))

514 
Àn
 < 
fõld_width
--)

516 i‡(
°r
 <
íd
)

518 *
°r
 = ' ';

520 ++
°r
;

523 
i
 = 0; i < 
Àn
; ++i)

525 i‡(
°r
 <
íd
)

527 *
°r
 = *
s
;

529 ++
°r
;

530 ++
s
;

532 
Àn
 < 
fõld_width
--)

534 i‡(
°r
 <
íd
)

536 *
°r
 = ' ';

538 ++
°r
;

543 i‡(
fõld_width
 == -1)

545 
fõld_width
 = 2 * (*);

546 
Êags
 |
ZEROPAD
;

548 
°r
 = 
	`numbî
(°r, 
íd
, ()
	`va_¨g
(
¨gs
, *), 16,

549 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

555 i‡(
quÆifõr
 == 'l')

557 *
ù
 = 
	`va_¨g
(
¨gs
, *);

558 *
ù
 = (
°r
 - 
buf
);

560 i‡(
quÆifõr
 == 'Z')

562 
size_t
 *
ù
 = 
	`va_¨g
(
¨gs
, size_t *);

563 *
ù
 = (
°r
 - 
buf
);

567 *
ù
 = 
	`va_¨g
(
¨gs
, *);

568 *
ù
 = (
°r
 - 
buf
);

573 i‡(
°r
 <
íd
)

575 *
°r
 = '%';

577 ++
°r
;

582 
ba£
 = 8;

586 
Êags
 |
LARGE
;

587 
ba£
 = 16;

590 
ba£
 = 16;

595 
Êags
 |
SIGN
;

600 i‡(
°r
 <
íd
)

602 *
°r
 = '%';

604 ++
°r
;

605 i‡(*
fmt
)

607 i‡(
°r
 <
íd
)

609 *
°r
 = *
fmt
;

611 ++
°r
;

615 --
fmt
;

619 i‡(
quÆifõr
 == 'L')

621 
num
 = 
	`va_¨g
(
¨gs
, );

623 i‡(
quÆifõr
 == 'l')

625 
num
 = 
	`va_¨g
(
¨gs
, );

626 i‡(
Êags
 & 
SIGN
)

628 
num
 = (signed )num;

631 i‡(
quÆifõr
 == 'Z')

633 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

635 i‡(
quÆifõr
 == 'h')

637 
num
 = ()
	`va_¨g
(
¨gs
, );

638 i‡(
Êags
 & 
SIGN
)

640 
num
 = (signed )num;

645 
num
 = 
	`va_¨g
(
¨gs
, );

646 i‡(
Êags
 & 
SIGN
)

648 
num
 = (signed )num;

652 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

654 i‡(
°r
 <
íd
)

656 *
°r
 = '\0';

658 i‡(
size
 > 0)

661 *
íd
 = '\0';

666  
°r
 - 
buf
;

667 
	}
}

676 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

678 
va_li°
 
¨gs
;

679 
i
;

681 
	`va_°¨t
(
¨gs
, 
fmt
);

682 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

683 
	`va_íd
(
¨gs
);

684  
i
;

685 
	}
}

687 
size_t
 
	$ùrötf
(**
°r
, 
size_t
 *
size
, *
fmt
, ...)

689 
va_li°
 
¨gs
;

690 
Àn
;

692 
	`va_°¨t
(
¨gs
, 
fmt
);

693 
Àn
 = 
	`v¢¥ötf
(*
°r
, *
size
, 
fmt
, 
¨gs
);

694 
	`va_íd
(
¨gs
);

700 
	`KASSERT
(
Àn
 >= 0);

702 
Àn
 = 
	`MIN
÷í, ()(*
size
 - 1));

704 *
°r
 +
Àn
;

705 *
size
 -
Àn
;

707  *
size
 - 1;

708 
	}
}

716 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

718 c⁄° *
°r
 = 
buf
;

719 *
√xt
;

720 
digô
;

721 
num
 = 0;

722 
quÆifõr
;

723 
ba£
;

724 
fõld_width
;

725 
is_sign
 = 0;

727 *
fmt
 && *
°r
)

733 i‡(
	`is•a˚
(*
fmt
))

735 
	`is•a˚
(*
fmt
))

736 ++
fmt
;

737 
	`is•a˚
(*
°r
))

738 ++
°r
;

742 i‡(*
fmt
 != '%' && *fmt)

744 i‡(*
fmt
++ !*
°r
++)

751 i‡(!*
fmt
)

755 ++
fmt
;

760 i‡(*
fmt
 == '*')

762 !
	`is•a˚
(*
fmt
) && *fmt)

763 
fmt
++;

764 !
	`is•a˚
(*
°r
) && *str)

765 
°r
++;

770 
fõld_width
 = -1;

771 i‡(
	`isdigô
(*
fmt
))

773 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

777 
quÆifõr
 = -1;

778 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z' ||

779 *
fmt
 == 'z')

781 
quÆifõr
 = *
fmt
++;

782 i‡(
quÆifõr
 =*
fmt
)

784 i‡(
quÆifõr
 == 'h')

786 
quÆifõr
 = 'H';

787 
fmt
++;

789 i‡(
quÆifõr
 == 'l')

791 
quÆifõr
 = 'L';

792 
fmt
++;

796 
ba£
 = 10;

797 
is_sign
 = 0;

799 i‡(!*
fmt
 || !*
°r
)

804 *
fmt
++)

808 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

809 i‡(
fõld_width
 == -1)

811 
fõld_width
 = 1;

815 *
s
++ = *
°r
++;

816 } --
fõld_width
 > 0 && *
°r
);

817 
num
++;

822 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

823 i‡(
fõld_width
 == -1)

825 
fõld_width
 = 
INT_MAX
;

828 
	`is•a˚
(*
°r
))

829 
°r
++;

832 *
°r
 && !
	`is•a˚
(*°rË&& 
fõld_width
--)

834 *
s
++ = *
°r
++;

836 *
s
 = '\0';

837 
num
++;

843 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

844 *
i
 = 
°r
 - 
buf
;

848 
ba£
 = 8;

852 
ba£
 = 16;

855 
ba£
 = 0;

856 
is_sign
 = 1;

859 
is_sign
 = 1;

865 i‡(*
°r
++ != '%')

867  
num
;

872  
num
;

878 
	`is•a˚
(*
°r
))

879 
°r
++;

881 
digô
 = *
°r
;

882 i‡(
is_sign
 && 
digô
 == '-')

884 
digô
 = *(
°r
 + 1);

887 i‡(!
digô
 || (
ba£
 =16 && !
	`isxdigô
(digit)) ||

888 (
ba£
 =10 && !
	`isdigô
(
digô
)) ||

889 (
ba£
 =8 && (!
	`isdigô
(
digô
) || digit > '7')) ||

890 (
ba£
 =0 && !
	`isdigô
(
digô
)))

895 
quÆifõr
)

898 i‡(
is_sign
)

900 sig√d *
s
 = (sig√d *)
	`va_¨g
(
¨gs
, signed *);

901 *
s
 = (sig√d )
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

905 *
s
 =

906 (*)
	`va_¨g
(
¨gs
, *);

907 *
s
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

911 i‡(
is_sign
)

913 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

914 *
s
 = ()
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

918 *
s
 =

919 (*)
	`va_¨g
(
¨gs
, *);

920 *
s
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

924 i‡(
is_sign
)

926 *
l
 = (*)
	`va_¨g
(
¨gs
, *);

927 *
l
 = 
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

931 *
l
 =

932 (*)
	`va_¨g
(
¨gs
, *);

933 *
l
 = 
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

937 i‡(
is_sign
)

939 *
l
 = (*)
	`va_¨g
(
¨gs
, *);

940 *
l
 = 
	`sim∂e_°πﬁl
(
°r
, &
√xt
, 
ba£
);

944 *
l
 = (*)
	`va_¨g
(

945 
¨gs
, *);

946 *
l
 = 
	`sim∂e_°πouŒ
(
°r
, &
√xt
, 
ba£
);

952 
size_t
 *
s
 = (size_à*)
	`va_¨g
(
¨gs
, size_t *);

953 *
s
 = (
size_t
)
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

957 i‡(
is_sign
)

959 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

960 *
i
 = ()
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

964 *
i
 =

965 (*)
	`va_¨g
(
¨gs
, *);

966 *
i
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

970 
num
++;

972 i‡(!
√xt
)

976 
°r
 = 
√xt
;

978  
num
;

979 
	}
}

987 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

989 
va_li°
 
¨gs
;

990 
i
;

992 
	`va_°¨t
(
¨gs
, 
fmt
);

993 
i
 = 
	`vssˇnf
(
buf
, 
fmt
, 
¨gs
);

994 
	`va_íd
(
¨gs
);

995  
i
;

996 
	}
}

	@kernel/util/string.c

1 
	~"˘y≥.h
"

2 
	~"î∫o.h
"

4 
	$memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

6 
ªt
;

11 
__asm__
 volatile(

19 : "˜"(
ªt
)

20 : "S"(
cs
), "D"(
˘
), "c"(
cou¡
)

23  ((
ªt
 & 1) ? ((ret >> 8) ? -1 : 1) : 0);

24 
	}
}

26 *
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

29 
__asm__
 volatile(

34 : "S"(
§c
), "D"(
de°
), "c"(
cou¡
)

37  
de°
;

38 
	}
}

40 *
	$mem£t
(*
s
, 
c
, 
size_t
 
cou¡
)

43 
__asm__
 volatile(

48 : "a"(
c
), "D"(
s
), "c"(
cou¡
)

51  
s
;

52 
	}
}

54 
	$°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

56 sig√d 
__ªs
 = 0;

58 
cou¡
)

60 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

64 
cou¡
--;

67  
__ªs
;

68 
	}
}

70 
	$°rcmp
(c⁄° *
cs
, c⁄° *
˘
)

72 sig√d 
__ªs
;

76 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

82  
__ªs
;

83 
	}
}

85 *
	$°r˝y
(*
de°
, c⁄° *
§c
)

87 *
tmp
 = 
de°
;

89 (*
de°
++ = *
§c
++) != '\0')

91  
tmp
;

92 
	}
}

94 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

96 *
tmp
 = 
de°
;

98 
cou¡
)

100 i‡((*
de°
 = *
§c
) != 0)

101 
§c
++;

102 
de°
++;

103 
cou¡
--;

106  
tmp
;

107 
	}
}

109 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
cou¡
)

111 c⁄° *
sc
;

113 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

116  
sc
 - 
s
;

117 
	}
}

119 *
	$°rˇt
(*
de°
, c⁄° *
§c
)

121 *
tmp
 = 
de°
;

123 *
de°
)

124 
de°
++;

126 (*
de°
++ = *
§c
++) != '\0')

129  
tmp
;

130 
	}
}

132 
size_t
 
	$°æí
(c⁄° *
s
)

134 c⁄° *
sc
;

136 
sc
 = 
s
; *sc != '\0'; ++sc)

139  
sc
 - 
s
;

140 
	}
}

142 *
	$°rchr
(c⁄° *
s
, 
c
)

144 ; *
s
 !()
c
; ++s)

146 i‡(*
s
 == '\0')

148  
NULL
;

151  (*)
s
;

152 
	}
}

154 *
	$°ºchr
(c⁄° *
s
, 
c
)

156 *
r
 = 
NULL
;

157 ; *
s
; ++s)

159 i‡(*
s
 =()
c
)

161 
r
 = (*)
s
;

164  
r
;

165 
	}
}

167 *
	$°r°r
(c⁄° *
s1
, c⁄° *
s2
)

169 
l1
, 
l2
;

171 
l2
 = 
	`°æí
(
s2
);

172 i‡(!
l2
)

174  (*)
s1
;

176 
l1
 = 
	`°æí
(
s1
);

177 
l1
 >
l2
)

179 
l1
--;

180 i‡(!
	`memcmp
(
s1
, 
s2
, 
l2
))

182  (*)
s1
;

184 
s1
++;

186  
NULL
;

187 
	}
}

195 *
	$°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
)

197 c⁄° *
p
;

201 
p
 = 
brk£t
; *∞!'\0' && *∞!*
°rög
; ++p)

203 i‡(*
p
 != '\0')

205  (*)
°rög
;

207 } *
°rög
++);

209  
NULL
;

210 
	}
}

212 
size_t
 
	$°r•n
(c⁄° *
°rög
, c⁄° *
ch¨£t
)

214 c⁄° *
p
, *
q
;

216 
q
 = 
°rög
; *q != '\0'; ++q)

218 
p
 = 
ch¨£t
; *∞!'\0' && *∞!*
q
; ++p)

220 i‡(*
p
 == '\0')

226  
q
 - 
°rög
;

227 
	}
}

229 *
	$°πok
(*
°rög
, c⁄° *
£p£t
)

231 *
p
, *
q
, *
r
;

232 *
ßvït
;

237 
p
 = (
°rög
 =
NULL
Ë? 
ßvït
 : string;

238 i‡(
p
 =
NULL
)

240  
NULL
;

246 
q
 = 
p
 + 
	`°r•n
’, 
£p£t
);

247 i‡(*
q
 == '\0')

249  
NULL
;

255 i‡((
r
 = 
	`°Ωbrk
(
q
, 
£p£t
)Ë=
NULL
)

257 
ßvït
 = 
NULL
;

261 *
r
 = '\0';

262 
ßvït
 = ++
r
;

265  
q
;

266 
	}
}

272 *
	$°ªº‹
(
î∫um
)

274 
î∫um
)

276 
EPERM
:

278 
ENOENT
:

280 
ESRCH
:

282 
EINTR
:

284 
EIO
:

286 
ENXIO
:

288 
E2BIG
:

290 
ENOEXEC
:

292 
EBADF
:

294 
ECHILD
:

296 
EAGAIN
:

298 
ENOMEM
:

300 
EACCES
:

302 
EFAULT
:

304 
ENOTBLK
:

306 
EBUSY
:

308 
EEXIST
:

310 
EXDEV
:

312 
ENODEV
:

314 
ENOTDIR
:

316 
EISDIR
:

318 
EINVAL
:

320 
ENFILE
:

322 
EMFILE
:

324 
ENOTTY
:

326 
ETXTBSY
:

328 
EFBIG
:

330 
ENOSPC
:

332 
ESPIPE
:

334 
EROFS
:

336 
EMLINK
:

338 
EPIPE
:

340 
EDOM
:

342 
ERANGE
:

344 
ENOMSG
:

346 
EIDRM
:

348 
ECHRNG
:

350 
EL2NSYNC
:

352 
EL3HLT
:

354 
EL3RST
:

356 
ELNRNG
:

358 
EUNATCH
:

360 
ENOCSI
:

362 
EL2HLT
:

364 
EDEADLK
:

366 
ENOLCK
:

368 
ECANCELED
:

370 
ENOTSUP
:

372 
EDQUOT
:

374 
EBADE
:

376 
EBADR
:

378 
EXFULL
:

380 
ENOANO
:

382 
EBADRQC
:

384 
EBADSLT
:

386 
EBFONT
:

388 
ENOSTR
:

390 
ENODATA
:

392 
ETIME
:

394 
ENOSR
:

396 
ENONET
:

398 
ENOPKG
:

400 
EREMOTE
:

402 
ENOLINK
:

404 
EADV
:

406 
ESRMNT
:

408 
ECOMM
:

410 
EPROTO
:

412 
EMULTIHOP
:

414 
EBADMSG
:

416 
ENAMETOOLONG
:

418 
EOVERFLOW
:

420 
ENOTUNIQ
:

422 
EBADFD
:

424 
EREMCHG
:

426 
ELIBACC
:

428 
ELIBBAD
:

430 
ELIBSCN
:

432 
ELIBMAX
:

434 
ELIBEXEC
:

436 
EILSEQ
:

438 
ENOSYS
:

440 
ELOOP
:

442 
ERESTART
:

444 
ESTRPIPE
:

446 
ENOTEMPTY
:

448 
EUSERS
:

450 
ENOTSOCK
:

452 
EDESTADDRREQ
:

454 
EMSGSIZE
:

456 
EPROTOTYPE
:

458 
ENOPROTOOPT
:

460 
EPROTONOSUPPORT
:

462 
ESOCKTNOSUPPORT
:

464 
EPFNOSUPPORT
:

466 
EAFNOSUPPORT
:

468 
EADDRINUSE
:

470 
EADDRNOTAVAIL
:

472 
ENETDOWN
:

474 
ENETUNREACH
:

476 
ENETRESET
:

478 
ECONNABORTED
:

480 
ECONNRESET
:

482 
ENOBUFS
:

484 
EISCONN
:

486 
ENOTCONN
:

488 
ESHUTDOWN
:

490 
ETOOMANYREFS
:

492 
ETIMEDOUT
:

494 
ECONNREFUSED
:

496 
EHOSTDOWN
:

498 
EHOSTUNREACH
:

500 
EALREADY
:

502 
EINPROGRESS
:

504 
ESTALE
:

509 
	}
}

	@kernel/util/time.c

1 
	~"utû/time.h
"

2 
	~"drivîs/cmos.h
"

3 
	~"maö/≠ic.h
"

4 
	~"¥oc/sched.h
"

5 
	~"utû/¥ötf.h
"

6 
	~"utû/timî.h
"

7 
	~<drivîs/s¸ìn.h
>

9 
	#TIME_APIC_TICK_FREQUENCY
 16

	)

11 
	#MICROSECONDS_PER_APIC_TICK
 (16 * 1000 / 
TIME_APIC_TICK_FREQUENCY
)

	)

13 vﬁ©ûê
uöt64_t
 
	gjiffõs
;

14 
uöt64_t
 
timî_tickcou¡
 
	gCORE_SPECIFIC_DATA
;

15 
uöt64_t
 
kî√l_¥ìm±ed_cou¡
 
	gCORE_SPECIFIC_DATA
;

16 
uöt64_t
 
u£r_¥ìm±ed_cou¡
 
	gCORE_SPECIFIC_DATA
;

17 
uöt64_t
 
nŸ_¥ìm±ed_cou¡
 
	gCORE_SPECIFIC_DATA
;

18 
uöt64_t
 
idÀ_cou¡
 
	gCORE_SPECIFIC_DATA
;

21 
	$timî_tick_h™dÀr
(
ªgs_t
 *
ªgs
)

23 
timî_tickcou¡
++;

25 #ifde‡
__VGABUF__


26 i‡(
timî_tickcou¡
 % 128 == 0)

27 
	`s¸ìn_Êush
();

30 i‡(
curc‹e
.
kc_id
 == 0)

32 
jiffõs
 = 
timî_tickcou¡
;

33 
	`__timîs_fúe
();

36 #ifde‡
__KPREEMPT__


37 (
ªgs
->
r_cs
 & 0x3Ë? 
u£r_¥ìm±ed_cou¡
++ : 
kî√l_¥ìm±ed_cou¡
++;

38 
	`≠ic_eoi
();

39 i‡(
ªgs
->
r_cs
 & 0x3 && 
cuπhr
->
kt_ˇn˚Œed
)

40 
	`kthªad_exô
((*)-1);

41 
	`sched_yõld
();

45 #i‚de‡
__KPREEMPT__


46 
cuπhr
 ? 
nŸ_¥ìm±ed_cou¡
++ : 
idÀ_cou¡
++;

51 
	}
}

53 
	$time_öô
()

55 
timî_tickcou¡
 = 0;

56 
	`öå_ªgi°î
(
INTR_APICTIMER
, 
timî_tick_h™dÀr
);

57 
	`≠ic_íabÀ_≥riodic_timî
(
TIME_APIC_TICK_FREQUENCY
);

58 
	}
}

60 
	$time_•ö
(
uöt64_t
 
ms
)

62 
uöt64_t
 
ticks_to_waô
 = 
ms
 * 
TIME_APIC_TICK_FREQUENCY
 / 16;

63 
uöt64_t
 
èrgë
 = 
timî_tickcou¡
 + 
ticks_to_waô
;

64 
	`dbg
(
DBG_SCHED
, "•önög f‹ %lu m†(%lu APICÅicks)\n", 
ms
, 
ticks_to_waô
);

65 
timî_tickcou¡
 < 
èrgë
)

67 
	}
}

69 
	$time_¶ìp
(
uöt64_t
 
ms
)

72 
	`time_•ö
(
ms
);

73 
	}
}

75 
ölöe
 
time_t
 
	$c‹e_u±ime
()

77  (
MICROSECONDS_PER_APIC_TICK
 * 
timî_tickcou¡
) / 1000;

78 
	}
}

80 
	gmdays
[] = {0, 31, 59, 90, 120, 151, 181, 212, 243, 273, 304, 334};

82 
time_t
 
	$do_time
()

84 
πc_time_t
 
tm
 = 
	`πc_gë_time
();

88 
yday
 = 
mdays
[
tm
.
m⁄th
 - 1] +Åm.
day
 - 1;

89 i‡(
tm
.
m⁄th
 >3 && ((—m.
yór
 % 4 == 0) && (tm.year % 100 != 0)) ||

90 (
tm
.
yór
 % 400 == 0)))

92 
yday
 += 1;

94 
tm
.
yór
 -= 1900;

97 
time_t
 
unix_time
 =

98 
tm
.
£c⁄d
 +Åm.
möuã
 * 60 +Åm.
hour
 * 3600 + 
yday
 * 86400 +

99 (
tm
.
yór
 - 70) * 31536000 + ((tm.year - 69) / 4) * 86400 -

100 ((
tm
.
yór
 - 1) / 100) * 86400 + ((tm.year + 299) / 400) * 86400;

102  
unix_time
;

103 
	}
}

105 
size_t
 
	$hum™_ªadabÀ_f‹m©
(*
buf
, 
size_t
 
size
, 
uöt64_t
 
ticks
)

107 
uöt64_t
 
mûli£c⁄ds
 = 
	`c‹e_u±ime
();

108 
uöt64_t
 
möuãs
 = 
mûli£c⁄ds
 / (60 * 1000);

109 
mûli£c⁄ds
 -
möuãs
 * 60 * 1000;

110 
uöt64_t
 
£c⁄ds
 = 
mûli£c⁄ds
 / 1000;

111 
mûli£c⁄ds
 -
£c⁄ds
 * 1000;

112  (
size_t
)
	`¢¥ötf
(
buf
, 
size
, "%lu mö, %lu sec, %lu ms", 
möuãs
,

113 
£c⁄ds
, 
mûli£c⁄ds
);

114 
	}
}

116 
size_t
 
	$≥r˚¡age
(*
buf
, 
size_t
 
size
, 
uöt64_t
 
numî©‹
,

117 
uöt64_t
 
díomö©‹
)

120 
uöt64_t
 
√w_numî©‹
 = 
numî©‹
 * 10000;

121 i‡(
√w_numî©‹
 < 
numî©‹
)

123  (
size_t
)
	`¢¥ötf
(
buf
, 
size
, "N/A");

125 
uöt64_t
 
ªsu…
 = 
díomö©‹
 ? 
√w_numî©‹
 / denominator : 0;

126  (
size_t
)
	`¢¥ötf
(
buf
, 
size
, "%lu.%02lu%%", 
ªsu…
 / 100,

127 
ªsu…
 % 100);

128 
	}
}

130 
size_t
 
	$time_°©s
(*
buf
, 
size_t
 
Àn
)

132 
size_t
 
off
 = 0;

133 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "core uptime:\t");

134 
off
 +
	`hum™_ªadabÀ_f‹m©
(
buf
 + off, 
Àn
 - off, 
timî_tickcou¡
);

135 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\nidleÅime:\t");

136 
off
 +
	`hum™_ªadabÀ_f‹m©
(
buf
 + off, 
Àn
 - off, 
idÀ_cou¡
);

137 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\t");

138 
off
 +
	`≥r˚¡age
(
buf
 + off, 
Àn
 - off, 
idÀ_cou¡
, 
timî_tickcou¡
);

140 
	`KASSERT
(
nŸ_¥ìm±ed_cou¡
 + 
u£r_¥ìm±ed_cou¡
 +

141 
kî√l_¥ìm±ed_cou¡
 + 
idÀ_cou¡
 - 
timî_tickcou¡
 <=

144 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\n\ntotalÅick count = %lu",

145 
timî_tickcou¡
);

146 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\nidle count = %lu",

147 
idÀ_cou¡
);

148 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\t");

149 
off
 +
	`≥r˚¡age
(
buf
 + off, 
Àn
 - off, 
idÀ_cou¡
, 
timî_tickcou¡
);

150 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\nkernelÖreempted count = %lu",

151 
kî√l_¥ìm±ed_cou¡
);

152 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\t");

153 
off
 +
	`≥r˚¡age
(
buf
 + off, 
Àn
 - off, 
kî√l_¥ìm±ed_cou¡
,

154 
timî_tickcou¡
);

155 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\nuserÖreempted count = %lu",

156 
u£r_¥ìm±ed_cou¡
);

157 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\t");

158 
off
 +=

159 
	`≥r˚¡age
(
buf
 + 
off
, 
Àn
 - off, 
u£r_¥ìm±ed_cou¡
, 
timî_tickcou¡
);

160 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\nnotÖreempted count = %lu",

161 
nŸ_¥ìm±ed_cou¡
);

162 
off
 +
	`¢¥ötf
(
buf
 + off, 
Àn
 - off, "\t");

163 
off
 +=

164 
	`≥r˚¡age
(
buf
 + 
off
, 
Àn
 - off, 
nŸ_¥ìm±ed_cou¡
, 
timî_tickcou¡
);

166  
off
;

167 
	}
}

169 
	$do_wakeup
(
uöt64_t
 
¨g
)

171 
kthªad_t
 *
thr
 = (kthªad_à*)
¨g
;

173 i‡(
thr
->
kt_wch™
)

175 
	`sched_brﬂdˇ°_⁄
(
thr
->
kt_wch™
);

177 
	}
}

179 
	$do_u¶ìp
(
u£c⁄ds_t
 
u£c
)

181 
ktqueue_t
 
waôq
;

182 
	`sched_queue_öô
(&
waôq
);

184 
timî_t
 
timî
;

185 
	`timî_öô
(&
timî
);

186 
timî
.
fun˘i⁄
 = 
do_wakeup
;

187 
timî
.
d©a
 = (
uöt64_t
)
cuπhr
;

188 
timî
.
expúes
 = 
jiffõs
 + (
u£c
 / 
MICROSECONDS_PER_APIC_TICK
);

190 
	`timî_add
(&
timî
);

191 
ªt
 = 
	`sched_ˇn˚ŒabÀ_¶ìp_⁄
(&
waôq
);

192 
	`timî_dñ
(&
timî
);

193  
ªt
;

194 
	}
}

	@kernel/util/timer.c

1 
	~"utû/timî.h
"

2 
	~"¥oc/•ölock.h
"

3 
	~"utû/time.h
"

5 
timî_t
 *
	gtimî_ru¬ög
 = 
NULL
;

6 
uöt64_t
 
	gtimî_√xt_expúy
 = -1;

7 
li°_t
 
	gtimîs_¥im¨y
 = 
LIST_INITIALIZER
(
timîs_¥im¨y
);

8 
li°_t
 
	gtimîs_£c⁄d¨y
 = 
LIST_INITIALIZER
(
timîs_£c⁄d¨y
);

9 
	gtimîs_fúög
 = 0;

11 
	$timî_öô
(
timî_t
 *
timî
)

13 
timî
->
expúes
 = -1;

14 
	`li°_lök_öô
(&
timî
->
lök
);

15 
	}
}

17 
	$timî_add
(
timî_t
 *
timî
Ë{ 
	`timî_mod
—imî,Åimî->
expúes
); 
	}
}

19 
	$__timî_dñ
(
timî_t
 *
timî
)

21 
ªt
 = 0;

22 i‡(
	`li°_lök_is_löked
(&
timî
->
lök
))

24 
	`li°_ªmove
(&
timî
->
lök
);

25 
ªt
 = 1;

27  
ªt
;

28 
	}
}

30 
	$timî_dñ
(
timî_t
 *
timî
)

32 
ªt
 = 
	`__timî_dñ
(
timî
);

34  
ªt
;

35 
	}
}

37 
	$__timî_add
(
timî_t
 *
timî
)

39 
	`KASSERT
(!
	`li°_lök_is_löked
(&
timî
->
lök
));

40 
li°_t
 *
li°
 = 
timîs_fúög
 ? &
timîs_£c⁄d¨y
 : &
timîs_¥im¨y
;

41 
	`li°_ö£π_hód
(
li°
, &
timî
->
lök
);

42 
	}
}

44 
	$timî_mod
(
timî_t
 *
timî
, 
expúes
)

47 
timî
->
expúes
 =Éxpires;

48 
ªt
 = 
	`__timî_dñ
(
timî
);

49 
	`__timî_add
(
timî
);

50 
timî_√xt_expúy
 = 
	`MIN
—imî_√xt_expúy, 
timî
->
expúes
);

52  
ªt
;

53 
	}
}

55 
	$timî_≥ndög
(
timî_t
 *
timî
)

57 
ªt
 = 
	`li°_lök_is_löked
(&
timî
->
lök
);

58  
ªt
;

59 
	}
}

61 
	$timî_dñ_sync
(
timî_t
 *
timî
)

64 
timî_ru¬ög
 =
timî
)

66 
	`sched_yõld
();

69 
ªt
 = 
	`__timî_dñ
(
timî
);

71  
ªt
;

72 
	}
}

77 
	gªady
 = 0;

78 
	$__timîs_fúe
()

80 i‡(
cuπhr
 && !
	`¥ìm±i⁄_íabÀd
())

85 
timîs_fúög
 = 1;

88 i‡(
jiffõs
 < 
timî_√xt_expúy
)

90 
timîs_fúög
 = 0;

94 
uöt64_t
 
mö_expúy
 = 0;

96 
	`li°_ôî©e
(&
timîs_¥im¨y
, 
timî
, 
timî_t
, 
lök
)

98 i‡(
jiffõs
 >
timî
->
expúes
)

100 
	`li°_ªmove
(&
timî
->
lök
);

101 
timî_ru¬ög
 = 
timî
;

102 
timî
->
	`fun˘i⁄
—imî->
d©a
);

103 
timî_ru¬ög
 = 
NULL
;

107 
mö_expúy
 = 
	`MIN
(mö_expúy, 
timî
->
expúes
);

112 
	`li°_ôî©e
(&
timîs_£c⁄d¨y
, 
timî
, 
timî_t
, 
lök
)

114 
mö_expúy
 = 
	`MIN
(mö_expúy, 
timî
->
expúes
);

115 
	`li°_ªmove
(&
timî
->
lök
);

116 
	`li°_ö£π_hód
(&
timîs_¥im¨y
, &
timî
->
lök
);

119 
timî_√xt_expúy
 = 
mö_expúy
;

120 
timîs_fúög
 = 0;

121 
	}
}

	@kernel/vm/anon.c

1 
	~"mm/mobj.h
"

2 
	~"mm/∑ge.h
"

3 
	~"mm/p‰ame.h
"

4 
	~"mm/¶ab.h
"

6 
	~"utû/debug.h
"

7 
	~"utû/°rög.h
"

10 
	g™⁄_cou¡
 = 0;

12 
¶ab_Æloˇt‹_t
 *
	g™⁄_Æloˇt‹
;

14 
™⁄_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

16 
™⁄_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

18 
™⁄_de°ru˘‹
(
mobj_t
 *
o
);

20 
mobj_›s_t
 
	g™⁄_mobj_›s
 = {.
gë_p‰ame
 = 
NULL
,

21 .
	gfûl_p‰ame
 = 
™⁄_fûl_p‰ame
,

22 .
	gÊush_p‰ame
 = 
™⁄_Êush_p‰ame
,

23 .
	gde°ru˘‹
 = 
™⁄_de°ru˘‹
};

28 
	$™⁄_öô
()

30 
	`NOT_YET_IMPLEMENTED
("VM:ánon_init");

31 
	}
}

41 
mobj_t
 *
	$™⁄_¸óã
()

43 
	`NOT_YET_IMPLEMENTED
("VM:ánon_create");

44  
NULL
;

45 
	}
}

51 
	$™⁄_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

53 
	`NOT_YET_IMPLEMENTED
("VM:ánon_fill_pframe");

55 
	}
}

57 
	$™⁄_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
Ë{  0; 
	}
}

66 
	$™⁄_de°ru˘‹
(
mobj_t
 *
o
)

68 
	`NOT_YET_IMPLEMENTED
("VM:ánon_destructor");

69 
	}
}

	@kernel/vm/brk.c

1 
	~"î∫o.h
"

2 
	~"globÆs.h
"

3 
	~"mm/mm.h
"

4 
	~"utû/debug.h
"

6 
	~"mm/mm™.h
"

54 
	$do_brk
(*
addr
, **
ªt
)

56 
	`NOT_YET_IMPLEMENTED
("VM: do_brk");

58 
	}
}

	@kernel/vm/mmap.c

1 
	~"vm/mm≠.h
"

2 
	~"î∫o.h
"

3 
	~"fs/fûe.h
"

4 
	~"fs/vfs.h
"

5 
	~"fs/vnode.h
"

6 
	~"globÆs.h
"

7 
	~"mm/mm.h
"

8 
	~"mm/mm™.h
"

9 
	~"mm/éb.h
"

10 
	~"utû/debug.h
"

55 
	$do_mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
,

56 **
ªt
)

58 
	`NOT_YET_IMPLEMENTED
("VM: do_mmap");

60 
	}
}

79 
	$do_munm≠
(*
addr
, 
size_t
 
Àn
)

81 
	`NOT_YET_IMPLEMENTED
("VM: do_munmap");

83 
	}
}

	@kernel/vm/pagefault.c

1 
	~"vm/∑geÁu….h
"

2 
	~"î∫o.h
"

3 
	~"globÆs.h
"

4 
	~"mm/mm.h
"

5 
	~"mm/mm™.h
"

6 
	~"mm/mobj.h
"

7 
	~"mm/p‰ame.h
"

8 
	~"mm/éb.h
"

9 
	~"ty≥s.h
"

10 
	~"utû/debug.h
"

48 
	$h™dÀ_∑geÁu…
(
uöçå_t
 
vaddr
, uöçå_à
ˇu£
)

50 
	`dbg
(
DBG_VM
, "vadd∏0x%∞(0x%p), cau£ = %lu\n", (*)
vaddr
,

51 
	`PAGE_ALIGN_DOWN
(
vaddr
), 
ˇu£
);

52 
	`NOT_YET_IMPLEMENTED
("VM: PAGE_ALIGN_DOWN");

53 
	}
}

	@kernel/vm/shadow.c

1 
	~"vm/shadow.h
"

2 
	~"mm/∑ge.h
"

3 
	~"mm/p‰ame.h
"

4 
	~"mm/¶ab.h
"

5 
	~"utû/debug.h
"

6 
	~"utû/°rög.h
"

8 
	#SHADOW_SINGLETON_THRESHOLD
 5

	)

10 
	smobj_shadow


13 
mobj_t
 
	mmobj
;

17 
mobj_t
 *
	mshadowed
;

21 
mobj_t
 *
	mbŸtom_mobj
;

22 } 
	tmobj_shadow_t
;

24 
	#MOBJ_TO_SO
(
o
Ë
	`CONTAINER_OF
(o, 
mobj_shadow_t
, 
mobj
)

	)

26 
¶ab_Æloˇt‹_t
 *
	gshadow_Æloˇt‹
;

28 
shadow_gë_p‰ame
(
mobj_t
 *
o
, 
size_t
 
∑gíum
, 
f‹wrôe
,

29 
p‰ame_t
 **
pÂ
);

30 
shadow_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

31 
shadow_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
);

32 
shadow_de°ru˘‹
(
mobj_t
 *
o
);

34 
mobj_›s_t
 
	gshadow_mobj_›s
 = {.
gë_p‰ame
 = 
shadow_gë_p‰ame
,

35 .
	gfûl_p‰ame
 = 
shadow_fûl_p‰ame
,

36 .
	gÊush_p‰ame
 = 
shadow_Êush_p‰ame
,

37 .
	gde°ru˘‹
 = 
shadow_de°ru˘‹
};

42 
	$shadow_öô
()

44 
	`NOT_YET_IMPLEMENTED
("VM: shadow_init");

45 
	}
}

62 
mobj_t
 *
	$shadow_¸óã
(
mobj_t
 *
shadowed
)

64 
	`NOT_YET_IMPLEMENTED
("VM: shadow_create");

65  
NULL
;

66 
	}
}

87 
	$shadow_cﬁœp£
(
mobj_t
 *
o
)

89 
	`NOT_YET_IMPLEMENTED
("VM: shadow_collapse");

90 
	}
}

117 
	$shadow_gë_p‰ame
(
mobj_t
 *
o
, 
size_t
 
∑gíum
, 
f‹wrôe
,

118 
p‰ame_t
 **
pÂ
)

120 
	`NOT_YET_IMPLEMENTED
("VM: shadow_get_pframe");

122 
	}
}

145 
	$shadow_fûl_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

147 
	`NOT_YET_IMPLEMENTED
("VM: shadow_fill_pframe");

149 
	}
}

160 
	$shadow_Êush_p‰ame
(
mobj_t
 *
o
, 
p‰ame_t
 *
pf
)

162 
	`NOT_YET_IMPLEMENTED
("VM: shadow_flush_pframe");

164 
	}
}

176 
	$shadow_de°ru˘‹
(
mobj_t
 *
o
)

178 
	`NOT_YET_IMPLEMENTED
("VM: shadow_destructor");

179 
	}
}

	@kernel/vm/vmmap.c

1 
	~"globÆs.h
"

2 
	~"kî√l.h
"

3 
	~<î∫o.h
>

5 
	~"vm/™⁄.h
"

6 
	~"vm/shadow.h
"

8 
	~"utû/debug.h
"

9 
	~"utû/¥ötf.h
"

10 
	~"utû/°rög.h
"

12 
	~"fs/fûe.h
"

13 
	~"fs/vfs_sysˇŒ.h
"

14 
	~"fs/vnode.h
"

16 
	~"mm/mm.h
"

17 
	~"mm/mm™.h
"

18 
	~"mm/¶ab.h
"

20 
¶ab_Æloˇt‹_t
 *
	gvmm≠_Æloˇt‹
;

21 
¶ab_Æloˇt‹_t
 *
	gvm¨ó_Æloˇt‹
;

23 
	$vmm≠_öô
()

25 
vmm≠_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("vmm≠", (
vmm≠_t
));

26 
vm¨ó_Æloˇt‹
 = 
	`¶ab_Æloˇt‹_¸óã
("vm¨ó", (
vm¨ó_t
));

27 
	`KASSERT
(
vmm≠_Æloˇt‹
 && 
vm¨ó_Æloˇt‹
);

28 
	}
}

33 
vm¨ó_t
 *
	$vm¨ó_Æloc
()

35 
	`NOT_YET_IMPLEMENTED
("VM: vmarea_alloc");

36  
NULL
;

37 
	}
}

43 
	$vm¨ó_‰ì
(
vm¨ó_t
 *
vma
)

45 
	`NOT_YET_IMPLEMENTED
("VM: vmarea_free");

46 
	}
}

51 
vmm≠_t
 *
	$vmm≠_¸óã
()

53 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_create");

54  
NULL
;

55 
	}
}

61 
	$vmm≠_de°roy
(
vmm≠_t
 **
m≠p
)

63 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_destroy");

64 
	}
}

77 
	$vmm≠_ö£π
(
vmm≠_t
 *
m≠
, 
vm¨ó_t
 *
√w_vma
)

79 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_insert");

80 
	}
}

97 
ssize_t
 
	$vmm≠_föd_ønge
(
vmm≠_t
 *
m≠
, 
size_t
 
≈ages
, 
dú
)

99 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_find_range");

101 
	}
}

107 
vm¨ó_t
 *
	$vmm≠_lookup
(
vmm≠_t
 *
m≠
, 
size_t
 
v‚
)

109 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_lookup");

110  
NULL
;

111 
	}
}

116 
	$vmm≠_cﬁœp£
(
vmm≠_t
 *
m≠
)

118 
	`li°_ôî©e
(&
m≠
->
vmm_li°
, 
vma
, 
vm¨ó_t
, 
vma_∂ök
)

120 i‡(
vma
->
vma_obj
->
mo_ty≥
 =
MOBJ_SHADOW
)

122 
	`mobj_lock
(
vma
->
vma_obj
);

123 
	`shadow_cﬁœp£
(
vma
->
vma_obj
);

124 
	`mobj_u∆ock
(
vma
->
vma_obj
);

127 
	}
}

149 
vmm≠_t
 *
	$vmm≠_˛⁄e
(
vmm≠_t
 *
m≠
)

151 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_clone");

152  
NULL
;

153 
	}
}

190 
	$vmm≠_m≠
(
vmm≠_t
 *
m≠
, 
vnode_t
 *
fûe
, 
size_t
 
l›age
, size_à
≈ages
,

191 
¥Ÿ
, 
Êags
, 
off_t
 
off
, 
dú
, 
vm¨ó_t
 **
√w_vma
)

193 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_map");

195 
	}
}

229 
	$vmm≠_ªmove
(
vmm≠_t
 *
m≠
, 
size_t
 
l›age
, size_à
≈ages
)

231 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_remove");

233 
	}
}

239 
	$vmm≠_is_ønge_em±y
(
vmm≠_t
 *
m≠
, 
size_t
 
°¨tv‚
, size_à
≈ages
)

241 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_is_range_empty");

243 
	}
}

260 
	$vmm≠_ªad
(
vmm≠_t
 *
m≠
, c⁄° *
vaddr
, *
buf
, 
size_t
 
cou¡
)

262 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_read");

264 
	}
}

282 
	$vmm≠_wrôe
(
vmm≠_t
 *
m≠
, *
vaddr
, c⁄° *
buf
, 
size_t
 
cou¡
)

284 
	`NOT_YET_IMPLEMENTED
("VM: vmmap_write");

286 
	}
}

288 
size_t
 
	$vmm≠_m≠pög_öfo
(c⁄° *
vmm≠
, *
buf
, 
size_t
 
osize
)

290  
	`vmm≠_m≠pög_öfo_hñ≥r
(
vmm≠
, 
buf
, 
osize
, "");

291 
	}
}

293 
size_t
 
	$vmm≠_m≠pög_öfo_hñ≥r
(c⁄° *
vmm≠
, *
buf
, 
size_t
 
osize
,

294 *
¥om±
)

296 
	`KASSERT
(0 < 
osize
);

297 
	`KASSERT
(
NULL
 !
buf
);

298 
	`KASSERT
(
NULL
 !
vmm≠
);

300 
vmm≠_t
 *
m≠
 = (vmm≠_à*)
vmm≠
;

301 
ssize_t
 
size
 = (ssize_t)
osize
;

303 
Àn
 =

304 
	`¢¥ötf
(
buf
, (
size_t
)
size
, "%s%37†%5†%7†%18†%11†%23s\n", 
¥om±
,

307 
	`li°_ôî©e
(&
m≠
->
vmm_li°
, 
vma
, 
vm¨ó_t
, 
vma_∂ök
)

309 
size
 -
Àn
;

310 
buf
 +
Àn
;

311 i‡(0 >
size
)

313 
íd
;

316 
Àn
 =

317 
	`¢¥ötf
(
buf
, (
size_t
)
size
,

319 
¥om±
, (*)(
vma
->
vma_°¨t
 << 
PAGE_SHIFT
),

320 (*)(
vma
->
vma_íd
 << 
PAGE_SHIFT
),

321 (
vma
->
vma_¥Ÿ
 & 
PROT_READ
 ? 'r' : '-'),

322 (
vma
->
vma_¥Ÿ
 & 
PROT_WRITE
 ? 'w' : '-'),

323 (
vma
->
vma_¥Ÿ
 & 
PROT_EXEC
 ? 'x' : '-'),

324 (
vma
->
vma_Êags
 & 
MAP_SHARED
 ? " SHARED" : "PRIVATE"),

325 
vma
->
vma_obj
, vma->
vma_off
, vma->
vma_°¨t
, vma->
vma_íd
);

328 
íd
:

329 i‡(
size
 <= 0)

331 
size
 = 
osize
;

332 
buf
[
osize
 - 1] = '\0';

334  
osize
 - 
size
;

335 
	}
}

	@user/bin/ed.c

113 
	~<f˙é.h
>

114 
	~<°dio.h
>

115 
	~<°dlib.h
>

116 
	~<uni°d.h
>

122 
	#SIGHUP
 1

	)

123 
	#SIGINTR
 2

	)

124 
	#SIGQUIT
 3

	)

125 
	#FNSIZE
 64

	)

126 
	#LBSIZE
 512

	)

127 
	#ESIZE
 128

	)

128 
	#GBSIZE
 256

	)

129 
	#NBRA
 5

	)

131 
	#CBRA
 1

	)

132 
	#CCHR
 2

	)

133 
	#CDOT
 4

	)

134 
	#CCL
 6

	)

135 
	#NCCL
 8

	)

136 
	#CDOL
 10

	)

137 
	#CEOF
 11

	)

138 
	#CKET
 12

	)

140 
	#STAR
 01

	)

142 
	#îr‹
 
	`îrfunc
()

	)

143 
	#READ
 0

	)

144 
	#WRITE
 1

	)

146 
	g≥ekc
;

147 
	gœ°c
;

148 
	gßvedfûe
[
FNSIZE
];

149 
	gfûe
[
FNSIZE
];

150 
	glöebuf
[
LBSIZE
];

151 
	grhsbuf
[
LBSIZE
 / 2];

152 
	gexpbuf
[
ESIZE
 + 4];

153 
	gcúcÊ
;

154 *
	gzîo
;

155 *
	gdŸ
;

156 *
	gdﬁ
;

157 *
	gídc‹e
;

158 *
	g„ndc‹e
;

159 *
	gaddr1
;

160 *
	gaddr2
;

161 
	ggíbuf
[
LBSIZE
];

162 
	gcou¡
[2];

163 *
	g√xtù
;

164 *
	glöebp
;

165 
	gnöbuf
;

166 
	gio
;

167 
	gpÊag
;

168 
	g⁄hup
;

169 
	g⁄quô
;

170 
	gvÊag
 = 1;

171 
	gli°f
;

172 
	gcﬁ
;

173 *
	gglobp
;

174 
	gtfûe
 = -1;

175 
	géöe
;

176 
	gt‚ame
[] = "/tmp/exxxxx";

177 *
	gloc1
;

178 *
	gloc2
;

179 *
	glocs
;

180 
	gibuff
[512];

181 
	giblock
 = -1;

182 
	gobuff
[512];

183 
	goblock
 = -1;

184 
	gich™ged
;

185 
	g∆e·
;

187 
îrfunc
();

190 
	gTMPERR
[] = "TMP";

191 
	g«mes
[26];

192 *
	gbø¶i°
[
NBRA
];

193 *
	gbøñi°
[
NBRA
];

195 
öô
();

197 
comm™ds
();

199 *
addªss
();

201 
£tdŸ
();

203 
√wlöe
();

205 
≠≥nd
((*
f
)(), *
a
);

207 
dñëe
 ();

209 
£äﬂddr
();

211 
fûíame
();

213 
gëây
();

215 
globÆ
(
k
);

217 
n⁄zîo
();

219 
move
(
cÊag
);

221 *
gëlöe
(
é
);

223 
£èŒ
();

225 
exfûe
();

227 
sub°ôuã
(
öglob
);

229 
putfûe
();

231 
putd
();

233 
dounix
();

235 
compûe
(
c
);

237 
execuã
(
gf
, *
addr
);

239 
puéöe
();

241 *
gëblock
(
©l
, 
iof
);

243 
gëch¨
();

245 
blkio
(
b
, *
buf
, *);

247 
compsub
();

249 
dosub
();

251 *
∂a˚
(*
a•
, *
Æ1
, *
Æ2
);

253 
ªvî£
(*
Ø1
, *
Ø2
);

255 
adv™˚
(*
Æp
, *
´p
);

257 
c˛ass
(*
a£t
, 
ac
, 
af
);

259 
puts
(*
as
);

261 
putch¨
(
ac
);

263 
ª£t
();

265 
£ãxô
();

267 
°æí
(c⁄° *
s
);

269 
	$¸ót
(c⁄° *
‚ame
, 
mode_t
 
mode
Ë{  
	`›í
(‚ame, 
O_CREAT
, mode); 
	}
}

271 
	$sig«l
(
a1
, ...Ë{  0; 
	}
}

273 
	$maö
(
¨gc
, **
¨gv
)

275 *
p1
, *
p2
;

277 
⁄quô
 = 
	`sig«l
(
SIGQUIT
, 1);

278 
⁄hup
 = 
	`sig«l
(
SIGHUP
, 1);

279 
¨gv
++;

280 i‡(
¨gc
 > 1 && **
¨gv
 == '-')

282 
vÊag
 = 0;

284 i‡((*
¨gv
)[1] == 'q')

286 
	`sig«l
(
SIGQUIT
, 0);

287 
vÊag
++;

289 
¨gv
++;

290 
¨gc
--;

292 i‡(
¨gc
 > 1)

294 
p1
 = *
¨gv
;

295 
p2
 = 
ßvedfûe
;

296 (*
p2
++ = *
p1
++))

298 
globp
 = "r";

300 
„ndc‹e
 = 
	`sbrk
(0);

301 
	`öô
();

303 
	`comm™ds
();

304 
	`u∆ök
(
t‚ame
);

306 
	}
}

308 
gëfûe
();

310 
	$comm™ds
()

312 *
a1
, 
c
;

316 i‡(
pÊag
)

318 
pÊag
 = 0;

319 
addr1
 = 
addr2
 = 
dŸ
;

320 
¥öt
;

322 
addr1
 = 0;

323 
addr2
 = 0;

326 
addr1
 = 
addr2
;

327 i‡((
a1
 = 
	`addªss
()) == 0)

329 
c
 = 
	`gëch¨
();

332 
addr2
 = 
a1
;

333 i‡((
c
 = 
	`gëch¨
()) == ';')

335 
c
 = ',';

336 
dŸ
 = 
a1
;

338 } 
c
 == ',');

339 i‡(
addr1
 == 0)

341 
addr1
 = 
addr2
;

343 
c
)

346 
	`£tdŸ
();

347 
	`√wlöe
();

348 
	`≠≥nd
(
gëây
, 
addr2
);

352 
	`dñëe
 ();

353 
	`≠≥nd
(
gëây
, 
addr1
 - 1);

357 
	`dñëe
 ();

361 
	`£äﬂddr
();

362 i‡((
≥ekc
 = 
	`gëch¨
()) != ' ')

363 
îr‹
;

364 
ßvedfûe
[0] = 0;

365 
	`öô
();

366 
addr2
 = 
zîo
;

367 
ˇ£ªad
;

370 
	`£äﬂddr
();

371 i‡((
c
 = 
	`gëch¨
()) != '\n')

373 
≥ekc
 = 
c
;

374 
ßvedfûe
[0] = 0;

375 
	`fûíame
();

377 
	`puts
(
ßvedfûe
);

381 
	`globÆ
(1);

385 
	`£tdŸ
();

386 
	`n⁄zîo
();

387 
	`√wlöe
();

388 
	`≠≥nd
(
gëây
, 
addr2
 - 1);

392 i‡((
c
 = 
	`gëch¨
()) < 'a' || c > 'z')

393 
îr‹
;

394 
	`√wlöe
();

395 
	`£tdŸ
();

396 
	`n⁄zîo
();

397 
«mes
[
c
 - 'a'] = *
addr2
 | 01;

401 
	`move
(0);

405 i‡(
addr2
 == 0)

407 
addr2
 = 
dŸ
 + 1;

409 
addr1
 = 
addr2
;

410 
¥öt
;

413 
li°f
++;

414 
	`√wlöe
();

415 
¥öt
;

417 
	`√wlöe
();

418 
¥öt
:

419 
	`£tdŸ
();

420 
	`n⁄zîo
();

421 
a1
 = 
addr1
;

423 
	`puts
(
	`gëlöe
(*
a1
++));

424 
a1
 <
addr2
);

425 
dŸ
 = 
addr2
;

426 
li°f
 = 0;

430 
	`£äﬂddr
();

431 
	`√wlöe
();

432 
	`u∆ök
(
t‚ame
);

433 
	`exô
(0);

436 
ˇ£ªad
:

437 
	`fûíame
();

438 i‡((
io
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0)) < 0)

440 
œ°c
 = '\n';

441 
îr‹
;

443 
	`£èŒ
();

444 
nöbuf
 = 0;

445 
	`≠≥nd
(
gëfûe
, 
addr2
);

446 
	`exfûe
();

450 
	`£tdŸ
();

451 
	`n⁄zîo
();

452 
	`sub°ôuã
(()
globp
);

456 
	`move
(1);

460 
	`globÆ
(0);

464 
	`£èŒ
();

465 
	`n⁄zîo
();

466 
	`fûíame
();

467 i‡((
io
 = 
	`›í
(
fûe
, 
O_CREAT
 | 
O_RDWR
 | 
O_TRUNC
, 0666)) < 0)

468 
îr‹
;

469 
	`putfûe
();

470 
	`exfûe
();

474 
	`£èŒ
();

475 
	`√wlöe
();

476 
cou¡
[1] = (
addr2
 - 
zîo
) & 077777;

477 
	`putd
();

478 
	`putch¨
('\n');

482 
	`dounix
();

485 
EOF
:

488 
îr‹
;

490 
	}
}

492 *
	$addªss
()

494 *
a1
, 
möus
, 
c
;

495 
n
, 
ªÀº
;

497 
möus
 = 0;

498 
a1
 = 0;

501 
c
 = 
	`gëch¨
();

502 i‡('0' <
c
 && c <= '9')

504 
n
 = 0;

507 
n
 *= 10;

508 
n
 +
c
 - '0';

509 } (
c
 = 
	`gëch¨
()) >= '0' && c <= '9');

510 
≥ekc
 = 
c
;

511 i‡(
a1
 == 0)

513 
a1
 = 
zîo
;

515 i‡(
möus
 < 0)

517 
n
 = -n;

519 
a1
 +
n
;

520 
möus
 = 0;

523 
ªÀº
 = 0;

524 i‡(
a1
 || 
möus
)

526 
ªÀº
++;

528 
c
)

535 
möus
++;

536 i‡(
a1
 == 0)

538 
a1
 = 
dŸ
;

544 
möus
--;

545 i‡(
a1
 == 0)

547 
a1
 = 
dŸ
;

553 
	`compûe
(
c
);

554 
a1
 = 
dŸ
;

557 i‡(
c
 == '/')

559 
a1
++;

560 i‡(
a1
 > 
dﬁ
)

562 
a1
 = 
zîo
;

567 
a1
--;

568 i‡(
a1
 < 
zîo
)

570 
a1
 = 
dﬁ
;

573 i‡(
	`execuã
(0, 
a1
))

577 i‡(
a1
 =
dŸ
)

578 
îr‹
;

583 
a1
 = 
dﬁ
;

587 
a1
 = 
dŸ
;

591 i‡((
c
 = 
	`gëch¨
()) < 'a' || c > 'z')

592 
îr‹
;

593 
a1
 = 
zîo
;á1 <
dﬁ
;á1++)

595 i‡(
«mes
[
c
 - 'a'] =(*
a1
 | 01))

603 
≥ekc
 = 
c
;

604 i‡(
a1
 == 0)

608 
a1
 +
möus
;

609 i‡(
a1
 < 
zîo
 ||á1 > 
dﬁ
)

610 
îr‹
;

611  (
a1
);

613 i‡(
ªÀº
)

614 
îr‹
;

616 
	}
}

618 
	$£tdŸ
()

620 i‡(
addr2
 == 0)

622 
addr1
 = 
addr2
 = 
dŸ
;

624 i‡(
addr1
 > 
addr2
)

625 
îr‹
;

626 
	}
}

628 
	$£èŒ
()

630 i‡(
addr2
 == 0)

632 
addr1
 = 
zîo
 + 1;

633 
addr2
 = 
dﬁ
;

634 i‡(
dﬁ
 =
zîo
)

636 
addr1
 = 
zîo
;

639 
	`£tdŸ
();

640 
	}
}

642 
	$£äﬂddr
()

644 i‡(
addr2
)

645 
îr‹
;

646 
	}
}

648 
	$n⁄zîo
()

650 i‡(
addr1
 <
zîo
 || 
addr2
 > 
dﬁ
)

651 
îr‹
;

652 
	}
}

654 
	$√wlöe
()

656 
c
;

658 i‡((
c
 = 
	`gëch¨
()) == '\n')

662 i‡(
c
 == 'p' || c == 'l')

664 
pÊag
++;

665 i‡(
c
 == 'l')

667 
li°f
++;

669 i‡(
	`gëch¨
() == '\n')

674 
îr‹
;

675 
	}
}

677 
	$fûíame
()

679 *
p1
, *
p2
;

680 
c
;

682 
cou¡
[1] = 0;

683 
c
 = 
	`gëch¨
();

684 i‡(
c
 ='\n' || c =
EOF
)

686 
p1
 = 
ßvedfûe
;

687 i‡(*
p1
 == 0)

688 
îr‹
;

689 
p2
 = 
fûe
;

690 (*
p2
++ = *
p1
++))

694 i‡(
c
 != ' ')

695 
îr‹
;

696 (
c
 = 
	`gëch¨
()) == ' ')

698 i‡(
c
 == '\n')

699 
îr‹
;

700 
p1
 = 
fûe
;

703 *
p1
++ = 
c
;

704 } (
c
 = 
	`gëch¨
()) != '\n');

705 *
p1
++ = 0;

706 i‡(
ßvedfûe
[0] == 0)

708 
p1
 = 
ßvedfûe
;

709 
p2
 = 
fûe
;

710 (*
p1
++ = *
p2
++))

713 
	}
}

715 
	$exfûe
()

717 
	`˛o£
(
io
);

718 
io
 = -1;

719 i‡(
vÊag
)

721 
	`putd
();

722 
	`putch¨
('\n');

724 
	}
}

726 
	$îrfunc
()

728 
c
;

730 
li°f
 = 0;

731 
	`puts
("?");

732 
cou¡
[0] = 0;

733 
	`l£ek
(0, 0, 2);

734 
pÊag
 = 0;

735 i‡(
globp
)

737 
œ°c
 = '\n';

739 
globp
 = 0;

740 
≥ekc
 = 
œ°c
;

741 (
c
 = 
	`gëch¨
()Ë!'\n' && c !
EOF
)

743 i‡(
io
 > 0)

745 
	`˛o£
(
io
);

746 
io
 = -1;

749 
	}
}

751 
	$gëch¨
()

753 i‡((
œ°c
 = 
≥ekc
))

755 
≥ekc
 = 0;

756  (
œ°c
);

758 i‡(
globp
)

760 i‡((
œ°c
 = *
globp
++) != 0)

762  (
œ°c
);

764 
globp
 = 0;

765  (
EOF
);

767 i‡(
	`ªad
(0, &
œ°c
, 1) <= 0)

769  (
œ°c
 = 
EOF
);

771 
œ°c
 &= 0177;

772  (
œ°c
);

773 
	}
}

775 
	$gëây
()

777 
c
, 
gf
;

778 *
p
;

780 
p
 = 
löebuf
;

781 
gf
 = ()
globp
;

782 (
c
 = 
	`gëch¨
()) != '\n')

784 i‡(
c
 =
EOF
)

786 i‡(
gf
)

788 
≥ekc
 = 
c
;

790  ()(
c
);

792 i‡((
c
 &= 0177) == 0)

796 *
p
++ = 
c
;

797 i‡(
p
 >&
löebuf
[
LBSIZE
 - 2])

798 
îr‹
;

800 *
p
++ = 0;

801 i‡(
löebuf
[0] == '.' &&Üinebuf[1] == 0)

803  (
EOF
);

806 
	}
}

808 
	$gëfûe
()

810 
c
;

811 *
Õ
, *
Â
;

813 
Õ
 = 
löebuf
;

814 
Â
 = 
√xtù
;

817 i‡(--
nöbuf
 < 0)

819 i‡((
nöbuf
 = 
	`ªad
(
io
, 
gíbuf
, 
LBSIZE
) - 1) < 0)

821  (
EOF
);

823 
Â
 = 
gíbuf
;

825 i‡(
Õ
 >&
löebuf
[
LBSIZE
])

826 
îr‹
;

827 i‡((*
Õ
++ = 
c
 = *
Â
++ & 0177) == 0)

829 
Õ
--;

832 i‡(++
cou¡
[1] == 0)

834 ++
cou¡
[0];

836 } 
c
 != '\n');

837 *--
Õ
 = 0;

838 
√xtù
 = 
Â
;

840 
	}
}

842 
	$putfûe
()

844 *
a1
;

845 *
Â
, *
Õ
;

846 
nib
;

848 
nib
 = 512;

849 
Â
 = 
gíbuf
;

850 
a1
 = 
addr1
;

853 
Õ
 = 
	`gëlöe
(*
a1
++);

856 i‡(--
nib
 < 0)

858 
	`wrôe
(
io
, 
gíbuf
, 
Â
 - genbuf);

859 
nib
 = 511;

860 
Â
 = 
gíbuf
;

862 i‡(++
cou¡
[1] == 0)

864 ++
cou¡
[0];

866 i‡((*
Â
++ = *
Õ
++) == 0)

868 
Â
[-1] = '\n';

872 } 
a1
 <
addr2
);

873 
	`wrôe
(
io
, 
gíbuf
, 
Â
 - genbuf);

874 
	}
}

876 
	$≠≥nd
(
f
, 
a
) (*f)();

877 *
a
;

879 *
a1
, *
a2
, *
rdŸ
;

880 
∆öe
, 
é
;

881 *
c‹ï
 = (*)
ídc‹e
;

882 
	sc‹e


884 
öãgî
;

887 
∆öe
 = 0;

888 
dŸ
 = 
a
;

889 (*
f
)() == 0)

891 i‡(
dﬁ
 >
ídc‹e
)

893 i‡(
	`sbrk
(1024) == (*)-1)

894 
îr‹
;

895 *
c‹ï
 += 1024;

897 
é
 = 
	`puéöe
();

898 
∆öe
++;

899 
a1
 = ++
dﬁ
;

900 
a2
 = 
a1
 + 1;

901 
rdŸ
 = ++
dŸ
;

902 
a1
 > 
rdŸ
)

903 *--
a2
 = *--
a1
;

904 *
rdŸ
 = 
é
;

906  (
∆öe
);

907 
	}
}

909 
	$dounix
()

911 
ßvöt
, 
pid
, 
Ωid
;

912 
ªtcode
;

914 
	`£äﬂddr
();

915 i‡((
pid
 = 
	`f‹k
()) == 0)

917 *
¨gv
[] = {"/bin/sh", 0};

918 *
ívp
[] = {"PATH=/bin", 0};

920 
	`sig«l
(
SIGHUP
, 
⁄hup
);

921 
	`sig«l
(
SIGQUIT
, 
⁄quô
);

922 
	`execve
("/bö/sh", 
¨gv
, 
ívp
);

923 
	`exô
(-1);

925 
ßvöt
 = 
	`sig«l
(
SIGINTR
, 1);

926 (
Ωid
 = 
	`waô
(&
ªtcode
)Ë!
pid
 &&Ñpid != -1)

928 
	`sig«l
(
SIGINTR
, 
ßvöt
);

929 
	`puts
("!");

930 
	}
}

932 
	$dñëe
 ()

934 *
a1
, *
a2
, *
a3
;

936 
	`£tdŸ
();

937 
	`√wlöe
();

938 
	`n⁄zîo
();

939 
a1
 = 
addr1
;

940 
a2
 = 
addr2
 + 1;

941 
a3
 = 
dﬁ
;

942 
dﬁ
 -
a2
 - 
a1
;

944 *
a1
++ = *
a2
++;

945 
a2
 <
a3
);

946 
a1
 = 
addr1
;

947 i‡(
a1
 > 
dﬁ
)

949 
a1
 = 
dﬁ
;

951 
dŸ
 = 
a1
;

952 
	}
}

954 *
	$gëlöe
(
é
)

956 *
bp
, *
Õ
;

957 
∆
;

959 
Õ
 = 
löebuf
;

960 
bp
 = 
	`gëblock
(
é
, 
READ
);

961 
∆
 = 
∆e·
;

962 
é
 &= ~0377;

963 (*
Õ
++ = *
bp
++))

964 i‡(--
∆
 == 0)

966 
bp
 = 
	`gëblock
(
é
 +0400, 
READ
);

967 
∆
 = 
∆e·
;

969  (
löebuf
);

970 
	}
}

972 
	$puéöe
()

974 *
bp
, *
Õ
;

975 
∆
;

976 
é
;

978 
Õ
 = 
löebuf
;

979 
é
 = 
éöe
;

980 
bp
 = 
	`gëblock
(
é
, 
WRITE
);

981 
∆
 = 
∆e·
;

982 
é
 &= ~0377;

983 (*
bp
 = *
Õ
++))

985 i‡(*
bp
++ == '\n')

987 *--
bp
 = 0;

988 
löebp
 = 
Õ
;

991 i‡(--
∆
 == 0)

993 
bp
 = 
	`gëblock
(
é
 +0400, 
WRITE
);

994 
∆
 = 
∆e·
;

997 
∆
 = 
éöe
;

998 
éöe
 +(((
Õ
 - 
löebuf
) + 03) >> 1) & 077776;

999  (
∆
);

1000 
	}
}

1002 *
	$gëblock
(
©l
, 
iof
)

1004 
bno
, 
off
;

1006 
bno
 = (
©l
 >> 8) & 0377;

1007 
off
 = (
©l
 << 1) & 0774;

1008 i‡(
bno
 >= 255)

1010 
	`puts
(
TMPERR
);

1011 
îr‹
;

1013 
∆e·
 = 512 - 
off
;

1014 i‡(
bno
 =
iblock
)

1016 
ich™ged
 |
iof
;

1017  (
ibuff
 + 
off
);

1019 i‡(
bno
 =
oblock
)

1021  (
obuff
 + 
off
);

1023 i‡(
iof
 =
READ
)

1025 i‡(
ich™ged
)

1027 
	`blkio
(
iblock
, 
ibuff
, (*)
wrôe
);

1029 
ich™ged
 = 0;

1030 
iblock
 = 
bno
;

1031 
	`blkio
(
bno
, 
ibuff
, (*)
ªad
);

1032  (
ibuff
 + 
off
);

1034 i‡(
oblock
 >= 0)

1036 
	`blkio
(
oblock
, 
obuff
, (*)
wrôe
);

1038 
oblock
 = 
bno
;

1039  (
obuff
 + 
off
);

1040 
	}
}

1042 
	$blkio
(
b
, *
buf
, *
iof˙
)

1044 (*
iof
)(
f
, *
b
, 
Àn
) =

1045 ((*)(
f
, *
b
, 
Àn
))
iof˙
;

1046 
	`l£ek
(
tfûe
, 
b
, 
SEEK_SET
);

1047 i‡((*
iof
)(
tfûe
, 
buf
, 512) != 512)

1049 
	`puts
(
TMPERR
);

1050 
îr‹
;

1052 
	}
}

1054 
	$öô
()

1056 *
p
;

1057 
pid
;

1059 
	`˛o£
(
tfûe
);

1060 
éöe
 = 0;

1061 
iblock
 = -1;

1062 
oblock
 = -1;

1063 
ich™ged
 = 0;

1064 
pid
 = 
	`gëpid
();

1065 
p
 = &
t‚ame
[11];Ö > &tfname[6];)

1067 *--
p
 = (
pid
 & 07) + '0';

1068 
pid
 >>= 3;

1070 
	`˛o£
(
	`¸ót
(
t‚ame
, 0600));

1071 
tfûe
 = 
	`›í
(
t‚ame
, 
O_RDWR
, 0);

1072 
	`brk
(
„ndc‹e
);

1073 
dŸ
 = 
zîo
 = 
dﬁ
 = 
„ndc‹e
;

1074 
ídc‹e
 = 
„ndc‹e
 - 2;

1075 
	}
}

1077 
	$globÆ
(
k
)

1079 *
gp
;

1080 
c
;

1081 *
a1
;

1082 
globuf
[
GBSIZE
];

1084 i‡(
globp
)

1085 
îr‹
;

1086 
	`£èŒ
();

1087 
	`n⁄zîo
();

1088 i‡((
c
 = 
	`gëch¨
()) == '\n')

1089 
îr‹
;

1090 
	`compûe
(
c
);

1091 
gp
 = 
globuf
;

1092 (
c
 = 
	`gëch¨
()) != '\n')

1094 i‡(
c
 =
EOF
)

1095 
îr‹
;

1096 i‡(
c
 == '\\')

1098 
c
 = 
	`gëch¨
();

1099 i‡(
c
 != '\n')

1101 *
gp
++ = '\\';

1104 *
gp
++ = 
c
;

1105 i‡(
gp
 >&
globuf
[
GBSIZE
 - 2])

1106 
îr‹
;

1108 *
gp
++ = '\n';

1109 *
gp
++ = 0;

1110 
a1
 = 
zîo
;á1 <
dﬁ
;á1++)

1112 *
a1
 &= ~01;

1113 i‡(
a1
 >
addr1
 &&á1 <
addr2
 && 
	`execuã
(0,á1Ë=
k
)

1115 *
a1
 |= 01;

1118 
a1
 = 
zîo
;á1 <
dﬁ
;á1++)

1120 i‡(*
a1
 & 01)

1122 *
a1
 &= ~01;

1123 
dŸ
 = 
a1
;

1124 
globp
 = 
globuf
;

1125 
	`comm™ds
();

1126 
a1
 = 
zîo
;

1129 
	}
}

1131 
gësub
();

1133 
	$sub°ôuã
(
öglob
)

1135 
gsubf
, *
a1
, 
∆
;

1137 
gsubf
 = 
	`compsub
();

1138 
a1
 = 
addr1
;á1 <
addr2
;á1++)

1140 i‡(
	`execuã
(0, 
a1
) == 0)

1144 
öglob
 |= 01;

1145 
	`dosub
();

1146 i‡(
gsubf
)

1148 *
loc2
)

1150 i‡(
	`execuã
(1, 0) == 0)

1154 
	`dosub
();

1157 *
a1
 = 
	`puéöe
();

1158 
∆
 = 
	`≠≥nd
(
gësub
, 
a1
);

1159 
a1
 +
∆
;

1160 
addr2
 +
∆
;

1162 i‡(
öglob
 == 0)

1163 
îr‹
;

1164 
	}
}

1166 
	$compsub
()

1168 
£of
, 
c
;

1169 *
p
;

1171 i‡((
£of
 = 
	`gëch¨
()) == '\n')

1172 
îr‹
;

1173 
	`compûe
(
£of
);

1174 
p
 = 
rhsbuf
;

1177 
c
 = 
	`gëch¨
();

1178 i‡(
c
 == '\\')

1180 
c
 = 
	`gëch¨
() | 0200;

1182 i‡(
c
 == '\n')

1183 
îr‹
;

1184 i‡(
c
 =
£of
)

1188 *
p
++ = 
c
;

1189 i‡(
p
 >&
rhsbuf
[
LBSIZE
 / 2])

1190 
îr‹
;

1192 *
p
++ = 0;

1193 i‡((
≥ekc
 = 
	`gëch¨
()) == 'g')

1195 
≥ekc
 = 0;

1196 
	`√wlöe
();

1199 
	`√wlöe
();

1201 
	}
}

1203 
	$gësub
()

1205 *
p1
, *
p2
;

1207 
p1
 = 
löebuf
;

1208 i‡((
p2
 = 
löebp
) == 0)

1210  (
EOF
);

1212 (*
p1
++ = *
p2
++))

1214 
löebp
 = 0;

1216 
	}
}

1218 
	$dosub
()

1220 *
Õ
, *
•
, *
Ω
;

1221 
c
;

1223 
Õ
 = 
löebuf
;

1224 
•
 = 
gíbuf
;

1225 
Ω
 = 
rhsbuf
;

1226 
Õ
 < 
loc1
)

1227 *
•
++ = *
Õ
++;

1228 (
c
 = *
Ω
++))

1230 i‡(
c
 == '&')

1232 
•
 = 
	`∂a˚
(•, 
loc1
, 
loc2
);

1235 i‡(
c
 < 0 && (¯&0177Ë>'1' && c < 
NBRA
 + '1')

1237 
•
 = 
	`∂a˚
(•, 
bø¶i°
[
c
 - '1'], 
bøñi°
[c - '1']);

1240 *
•
++ = 
c
 & 0177;

1241 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1242 
îr‹
;

1244 
Õ
 = 
loc2
;

1245 
loc2
 = 
•
 + ()
löebuf
 - ()
gíbuf
;

1246 (*
•
++ = *
Õ
++))

1247 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1248 
îr‹
;

1249 
Õ
 = 
löebuf
;

1250 
•
 = 
gíbuf
;

1251 (*
Õ
++ = *
•
++))

1253 
	}
}

1255 *
	$∂a˚
(*
a•
, *
Æ1
, *
Æ2
)

1257 *
•
, *
l1
, *
l2
;

1259 
•
 = 
a•
;

1260 
l1
 = 
Æ1
;

1261 
l2
 = 
Æ2
;

1262 
l1
 < 
l2
)

1264 *
•
++ = *
l1
++;

1265 i‡(
•
 >&
gíbuf
[
LBSIZE
])

1266 
îr‹
;

1268  (
•
);

1269 
	}
}

1271 
gëc›y
();

1273 
	$move
(
cÊag
)

1275 *
adt
, *
ad1
, *
ad2
;

1277 
	`£tdŸ
();

1278 
	`n⁄zîo
();

1279 i‡((
adt
 = 
	`addªss
()) == 0)

1280 
îr‹
;

1281 
	`√wlöe
();

1282 
ad1
 = 
addr1
;

1283 
ad2
 = 
addr2
;

1284 i‡(
cÊag
)

1286 
ad1
 = 
dﬁ
;

1287 
	`≠≥nd
(
gëc›y
, 
ad1
++);

1288 
ad2
 = 
dﬁ
;

1290 
ad2
++;

1291 i‡(
adt
 < 
ad1
)

1293 
dŸ
 = 
adt
 + (
ad2
 - 
ad1
);

1294 i‡((++
adt
Ë=
ad1
)

1298 
	`ªvî£
(
adt
, 
ad1
);

1299 
	`ªvî£
(
ad1
, 
ad2
);

1300 
	`ªvî£
(
adt
, 
ad2
);

1302 i‡(
adt
 >
ad2
)

1304 
dŸ
 = 
adt
++;

1305 
	`ªvî£
(
ad1
, 
ad2
);

1306 
	`ªvî£
(
ad2
, 
adt
);

1307 
	`ªvî£
(
ad1
, 
adt
);

1310 
îr‹
;

1311 
	}
}

1313 
	$ªvî£
(*
Ø1
, *
Ø2
)

1315 *
a1
, *
a2
, 
t
;

1317 
a1
 = 
Ø1
;

1318 
a2
 = 
Ø2
;

1321 
t
 = *--
a2
;

1322 i‡(
a2
 <
a1
)

1326 *
a2
 = *
a1
;

1327 *
a1
++ = 
t
;

1329 
	}
}

1331 
	$gëc›y
()

1333 i‡(
addr1
 > 
addr2
)

1335  (
EOF
);

1337 
	`gëlöe
(*
addr1
++);

1339 
	}
}

1341 
	$compûe
(
´of
)

1343 
eof
, 
c
;

1344 *
ï
;

1345 *
œ°ï
;

1346 
bøckë
[
NBRA
], *
bøckëp
;

1347 
nbø
;

1348 
c˛˙t
;

1350 
ï
 = 
expbuf
;

1351 
eof
 = 
´of
;

1352 
bøckëp
 = 
bøckë
;

1353 
nbø
 = 0;

1354 i‡((
c
 = 
	`gëch¨
()Ë=
eof
)

1356 i‡(*
ï
 == 0)

1357 
îr‹
;

1360 
cúcÊ
 = 0;

1361 i‡(
c
 == '^')

1363 
c
 = 
	`gëch¨
();

1364 
cúcÊ
++;

1366 i‡(
c
 == '*')

1368 
˚º‹
;

1370 
≥ekc
 = 
c
;

1373 i‡(
ï
 >&
expbuf
[
ESIZE
])

1375 
˚º‹
;

1377 
c
 = 
	`gëch¨
();

1378 i‡(
c
 =
eof
)

1380 *
ï
++ = 
CEOF
;

1383 i‡(
c
 != '*')

1385 
œ°ï
 = 
ï
;

1387 
c
)

1390 i‡((
c
 = 
	`gëch¨
()) == '(')

1392 i‡(
nbø
 >
NBRA
)

1394 
˚º‹
;

1396 *
bøckëp
++ = 
nbø
;

1397 *
ï
++ = 
CBRA
;

1398 *
ï
++ = 
nbø
++;

1401 i‡(
c
 == ')')

1403 i‡(
bøckëp
 <
bøckë
)

1405 
˚º‹
;

1407 *
ï
++ = 
CKET
;

1408 *
ï
++ = *--
bøckëp
;

1411 *
ï
++ = 
CCHR
;

1412 i‡(
c
 == '\n')

1414 
˚º‹
;

1416 *
ï
++ = 
c
;

1420 *
ï
++ = 
CDOT
;

1424 
˚º‹
;

1427 i‡(*
œ°ï
 =
CBRA
 || *œ°ï =
CKET
)

1428 
îr‹
;

1429 *
œ°ï
 |
STAR
;

1433 i‡((
≥ekc
 = 
	`gëch¨
()Ë!
eof
)

1435 
defch¨
;

1437 *
ï
++ = 
CDOL
;

1441 *
ï
++ = 
CCL
;

1442 *
ï
++ = 0;

1443 
c˛˙t
 = 1;

1444 i‡((
c
 = 
	`gëch¨
()) == '^')

1446 
c
 = 
	`gëch¨
();

1447 
ï
[-2] = 
NCCL
;

1451 i‡(
c
 == '\n')

1453 
˚º‹
;

1455 *
ï
++ = 
c
;

1456 
c˛˙t
++;

1457 i‡(
ï
 >&
expbuf
[
ESIZE
])

1459 
˚º‹
;

1461 } (
c
 = 
	`gëch¨
()) != ']');

1462 
œ°ï
[1] = 
c˛˙t
;

1465 
defch¨
:

1467 *
ï
++ = 
CCHR
;

1468 *
ï
++ = 
c
;

1471 
˚º‹
:

1472 
expbuf
[0] = 0;

1473 
îr‹
;

1474 
	}
}

1476 
	$execuã
(
gf
, 
addr
) gf;

1477 *
addr
;

1479 *
p1
, *
p2
, 
c
;

1481 i‡(
gf
)

1483 i‡(
cúcÊ
)

1487 
p1
 = 
löebuf
;

1488 
p2
 = 
gíbuf
;

1489 (*
p1
++ = *
p2
++))

1491 
locs
 = 
p1
 = 
loc2
;

1495 i‡(
addr
 =
zîo
)

1499 
p1
 = 
	`gëlöe
(*
addr
);

1500 
locs
 = 0;

1502 
p2
 = 
expbuf
;

1503 i‡(
cúcÊ
)

1505 
loc1
 = 
p1
;

1506  (
	`adv™˚
(
p1
, 
p2
));

1509 i‡(*
p2
 =
CCHR
)

1511 
c
 = 
p2
[1];

1514 i‡(*
p1
 !
c
)

1518 i‡(
	`adv™˚
(
p1
, 
p2
))

1520 
loc1
 = 
p1
;

1523 } *
p1
++);

1529 i‡(
	`adv™˚
(
p1
, 
p2
))

1531 
loc1
 = 
p1
;

1534 } *
p1
++);

1536 
	}
}

1538 
	$adv™˚
(*
Æp
, *
´p
)

1540 *
Õ
, *
ï
, *
cuæp
;

1542 
Õ
 = 
Æp
;

1543 
ï
 = 
´p
;

1546 *
ï
++)

1548 
CCHR
:

1549 i‡(*
ï
++ =*
Õ
++)

1555 
CDOT
:

1556 i‡(*
Õ
++)

1562 
CDOL
:

1563 i‡(*
Õ
 == 0)

1569 
CEOF
:

1570 
loc2
 = 
Õ
;

1573 
CCL
:

1574 i‡(
	`c˛ass
(
ï
, *
Õ
++, 1))

1576 
ï
 += *ep;

1581 
NCCL
:

1582 i‡(
	`c˛ass
(
ï
, *
Õ
++, 0))

1584 
ï
 += *ep;

1589 
CBRA
:

1590 
bø¶i°
[()*
ï
++] = 
Õ
;

1593 
CKET
:

1594 
bøñi°
[()*
ï
++] = 
Õ
;

1597 
CDOT
 | 
STAR
:

1598 
cuæp
 = 
Õ
;

1599 *
Õ
++)

1601 
°¨
;

1603 
CCHR
 | 
STAR
:

1604 
cuæp
 = 
Õ
;

1605 *
Õ
++ =*
ï
)

1607 
ï
++;

1608 
°¨
;

1610 
CCL
 | 
STAR
:

1611 
NCCL
 | 
STAR
:

1612 
cuæp
 = 
Õ
;

1613 
	`c˛ass
(
ï
, *
Õ
++,Ép[-1] =(
CCL
 | 
STAR
)))

1615 
ï
 += *ep;

1616 
°¨
;

1618 
°¨
:

1621 
Õ
--;

1622 i‡(
Õ
 =
locs
)

1626 i‡(
	`adv™˚
(
Õ
, 
ï
))

1630 } 
Õ
 > 
cuæp
);

1634 
îr‹
;

1637 
	}
}

1639 
	$c˛ass
(*
a£t
, 
ac
, 
af
)

1641 *
£t
, 
c
;

1642 
n
;

1644 
£t
 = 
a£t
;

1645 i‡((
c
 = 
ac
) == 0)

1649 
n
 = *
£t
++;

1650 --
n
)

1651 i‡(*
£t
++ =
c
)

1653  (
af
);

1655  (!
af
);

1656 
	}
}

1658 
	$putd
()

1661 
r
;

1662 
ldivr
;

1664 
cou¡
[1] = 
	`ldiv
(count[0], count[1], 10);

1665 
cou¡
[0] = 0;

1666 
r
 = 
ldivr
;

1667 i‡(
cou¡
[1])

1668 
	`putd
();

1669 
	`putch¨
(
r
 + '0');

1671 
	`¥ötf
("%d", 
cou¡
[1]);

1673 
	}
}

1675 
	$puts
(*
as
)

1677 *
•
;

1679 
•
 = 
as
;

1680 
cﬁ
 = 0;

1681 *
•
)

1682 
	`putch¨
(*
•
++);

1683 
	`putch¨
('\n');

1684 
	}
}

1686 
	glöe
[80];

1687 *
	glöp
 = 
löe
;

1689 
	$putch¨
(
ac
)

1691 *
Õ
;

1692 
c
;

1694 
Õ
 = 
löp
;

1695 
c
 = 
ac
;

1696 i‡(
li°f
)

1698 
cﬁ
++;

1699 i‡(
cﬁ
 >= 72)

1701 
cﬁ
 = 0;

1702 *
Õ
++ = '\\';

1703 *
Õ
++ = '\n';

1705 i‡(
c
 == '\t')

1707 
c
 = '>';

1708 
esc
;

1710 i‡(
c
 == '\b')

1712 
c
 = '<';

1713 
esc
:

1714 *
Õ
++ = '-';

1715 *
Õ
++ = '\b';

1716 *
Õ
++ = 
c
;

1717 
out
;

1719 i‡(
c
 < ' ' && c != '\n')

1721 *
Õ
++ = '\\';

1722 *
Õ
++ = (
c
 >> 3) + '0';

1723 *
Õ
++ = (
c
 & 07) + '0';

1724 
cﬁ
 += 2;

1725 
out
;

1728 *
Õ
++ = 
c
;

1729 
out
:

1730 i‡(
c
 ='\n' || 
Õ
 >&
löe
[64])

1732 
löp
 = 
löe
;

1733 
	`wrôe
(1, 
löe
, 
Õ
 -Üine);

1736 
löp
 = 
Õ
;

1737 
	}
}

	@user/bin/hd.c

1 
	~<î∫o.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°dlib.h
>

5 
	~<°rög.h
>

6 
	~<uni°d.h
>

8 
	#LINE_LEN
 16

	)

10 
	$maö
(
¨gc
, **
¨gv
)

12 
ªadfd
 = 0;

13 i‡(
¨gc
 == 2)

15 
ªadfd
 = 
	`›í
(
¨gv
[1], 
O_RDONLY
, 0666);

16 i‡(
ªadfd
 < 0)

18 
	`Ârötf
(
°dîr
, "›í: %s\n", 
	`°ªº‹
(
î∫o
));

22 i‡(
¨gc
 > 2)

24 
	`¥ötf
("usage: hd [file]\n");

28 
œ°buf
[
LINE_LEN
];

29 
curbuf
[
LINE_LEN
];

30 
off
 = 0;

31 
œ°ªp
 = 0;

32 
byãs
;

34 
i
;

35 (
byãs
 = 
	`ªad
(
ªadfd
, 
curbuf
, 
LINE_LEN
)) > 0)

37 i‡(
off
 > 0 && !
	`memcmp
(
œ°buf
, 
curbuf
, 
LINE_LEN
))

39 i‡(!
œ°ªp
)

41 
	`¥ötf
("*\n");

42 
œ°ªp
 = 1;

44 
off
 +
byãs
;

47 
œ°ªp
 = 0;

48 
	`¥ötf
("%08x ", 
off
);

49 
off
 +
byãs
;

51 
i
 = 0; i < 
LINE_LEN
; ++i)

53 i‡(
i
 < 
byãs
)

55 
	`¥ötf
("%02x ", ()
curbuf
[
i
]);

59 
	`¥ötf
(" ");

61 i‡(
i
 == 7)

63 
	`¥ötf
(" ");

67 
	`¥ötf
("|");

68 
i
 = 0; i < 
byãs
; ++i)

70 
c
 = 
curbuf
[
i
];

71 i‡(
c
 < 32 || c > 126)

73 
	`¥ötf
(".");

77 
	`¥ötf
("%c", 
c
);

80 
	`¥ötf
("|\n");

81 
	`mem˝y
(
œ°buf
, 
curbuf
, 
LINE_LEN
);

83 
	`¥ötf
("%08x\n", 
off
);

85 i‡(
ªadfd
 > 0)

87 
	`˛o£
(
ªadfd
);

90 
	}
}

	@user/bin/ls.c

1 
	~<dúít.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<uni°d.h
>

6 
	~<î∫o.h
>

8 
	$do_ls
(c⁄° *
dú
)

10 
fd
;

11 
dúít
 *dirent;

12 
nbyãs
;

13 
tmpbuf
[256];

14 
°©_t
 
sbuf
;

17 
dúít
 dirent;

18 
buf
[4096];

19 } 
lsb
;

21 
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0600);

22 i‡(
fd
 < 0)

24 
	`Ârötf
(
°dîr
, "ls: u«bÀÅÿ›í \"%s\":Éºnÿ%d\n", 
dú
, 
î∫o
);

28 (
nbyãs
 = 
	`gëdíts
(
fd
, &
lsb
.
dúít
, (lsb))) > 0)

30 
dúít
 = &
lsb
.dirent;

32 i‡(
nbyãs
 % (
dúít
))

34 
	`Ârötf
(
°dîr
,

37 
nbyãs
, (
dúít
));

42 
ª˛í
;

43 
size
;

45 
	`¢¥ötf
(
tmpbuf
, —mpbuf), "%s/%s", 
dú
, 
dúít
->
d_«me
);

46 i‡(0 =
	`°©
(
tmpbuf
, &
sbuf
))

48 
size
 = 
sbuf
.
°_size
;

52 
size
 = 0;

55 
ª˛í
 = (
dúít
);

56 
	`Ârötf
(
°dout
, "%7d %-20† %d\n", 
size
, 
dúít
->
d_«me
,

57 
dúít
->
d_öo
);

58 
dúít
 = (dúíà*)(((*)dúítË+ 
ª˛í
);

59 
nbyãs
 -
ª˛í
;

60 } 
nbyãs
);

62 i‡(
nbyãs
 < 0)

64 i‡(
î∫o
 =
ENOTDIR
)

66 
	`Ârötf
(
°dout
, "%s\n", 
dú
);

70 
	`Ârötf
(
°dîr
, "ls: couldn'àli° %s:Éºnÿ%d\n", 
dú
, 
î∫o
);

74 i‡(
	`˛o£
(
fd
) < 0)

76 
	`Ârötf
(
°dîr
, "ls: clo£ %s:Éºnÿ%d\n", 
dú
, 
î∫o
);

79 
	}
}

81 
	$maö
(
¨gc
, **
¨gv
)

83 
ªt
;

85 i‡(
¨gc
 < 2)

87 
ªt
 = 
	`do_ls
(".");

89 i‡(
¨gc
 < 3)

91 
ªt
 = 
	`do_ls
(
¨gv
[1]);

95 
îr‹
;

96 
¨gn
;

98 
îr‹
 = 0;

99 
¨gn
 = 1;árg¿< 
¨gc
;árgn++)

101 
	`Ârötf
(
°dout
, "%s:\n", 
¨gv
[
¨gn
]);

102 
îr‹
 +
	`do_ls
(
¨gv
[
¨gn
]);

103 
	`Ârötf
(
°dout
, "\n");

105 
ªt
 = 
îr‹
;

107  
ªt
;

108 
	}
}

	@user/bin/sh.c

1 #unde‡
DEBUG_SH


3 #ifde‡
DEBUG_SH


4 
	#dbg
(
x
Ë
Ârötf
 
	)
x

6 
	#dbg
(
x
)

	)

9 
	~<˘y≥.h
>

10 
	~<î∫o.h
>

11 
	~<f˙é.h
>

12 
	~<°dio.h
>

13 
	~<°dlib.h
>

14 
	~<°rög.h
>

15 
	~<sys/mm™.h
>

16 
	~<uni°d.h
>

18 
	#ROOT
 "/"

	)

20 
	#HOME
 
ROOT
 "."

	)

21 
	#TMP
 
ROOT
 "tmp"

	)

23 
	#ARGV_MAX
 256

	)

24 
	#REDIR_MAX
 10

	)

26 
	sªdúe˘


28 
	mr_sfd
;

29 
	mr_dfd
;

30 } 
	tªdúe˘_t
;

32 
	sªdúe˘_m≠


34 
	mrm_nfds
;

35 
ªdúe˘_t
 
	mrm_ªdú
[
REDIR_MAX
];

36 } 
	tªdúe˘_m≠_t
;

38 
	si€nv


40 
	mio_m≠_fd
[3];

41 
	#io_m≠_fûe
 
io_m≠_fd


	)

42 } 
	ti€nv_t
;

44 **
	gmy_ívp
;

46 
∑r£
(*
löe
);

48 
execuã
(
¨gc
, *
¨gv
[], 
ªdúe˘_m≠_t
 *
m≠
);

50 
add_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
, 
sfd
, 
dfd
);

52 
	#DECL_CMD
(
x
Ë
cmd_
##
	`x
(
¨gc
, *
¨gv
[], 
i€nv_t
 *
io
)

	)

54 
DECL_CMD
(
ív
);

56 
DECL_CMD
(
cd
);

58 
DECL_CMD
(
hñp
);

60 
DECL_CMD
(
exô
);

62 
DECL_CMD
(
mkdú
);

64 
DECL_CMD
(
rmdú
);

66 
DECL_CMD
(
˛ór
);

68 
DECL_CMD
(
 
);

70 
DECL_CMD
(
rm
);

72 
DECL_CMD
(
mv
);

74 
DECL_CMD
(
ˇt
);

76 
DECL_CMD
(
echo
);

78 
DECL_CMD
(
˝
);

80 
DECL_CMD
(
sync
);

82 
DECL_CMD
(
check
);

84 
DECL_CMD
(
ª≥©
);

86 
DECL_CMD
(
∑øŒñ
);

88 
DECL_CMD
(
time
);

92 c⁄° *
	mcmd_«me
;

94 (*
	mcmd_func
)(
	m¨gc
, *
	m¨gv
[], 
i€nv_t
 *
	mio
);

96 c⁄° *
	mcmd_hñ±ext
;

97 } 
	tcmd_t
;

99 
cmd_t
 
	gbuûtö_cmds
[] = {

100 {"?", 
cmd_hñp
, "list shell commands"},

101 {"ˇt", 
cmd_ˇt
, "display file"},

102 {"ív", 
cmd_ív
, "displayÉnvironment"},

103 {"cd", 
cmd_cd
, "change directory"},

104 {"check", 
cmd_check
, "test operating system"},

105 {"˛ór", 
cmd_˛ór
, "clear screen"},

106 {"˝", 
cmd_˝
, "copy file"},

107 {"echo", 
cmd_echo
, "printárguments"},

108 {"exô", 
cmd_exô
, "exit shell"},

109 {"hñp", 
cmd_hñp
, "list shell commands"},

110 {" ", 
cmd_ 
, "link file"},

111 {"mkdú", 
cmd_mkdú
, "createá directory"},

112 {"mv", 
cmd_mv
, "move file"},

113 {"quô", 
cmd_exô
, "exit shell"},

114 {"rm", 
cmd_rm
, "remove file(s)"},

115 {"rmdú", 
cmd_rmdú
, "removeá directory"},

116 {"sync", 
cmd_sync
, "sync filesystems"},

117 {"ª≥©", 
cmd_ª≥©
, "repeatá command"},

118 {"∑øŒñ", 
cmd_∑øŒñ
, "run multiple commands inÖarallel"},

119 {"time", 
cmd_time
, "timeá command"},

120 {
NULL
, NULL, NULL}};

122 
	#buûtö_°dö
 (&
io
->
io_m≠_fûe
[0])

	)

123 
	#buûtö_°dout
 (&
io
->
io_m≠_fûe
[1])

	)

124 
	#buûtö_°dîr
 (&
io
->
io_m≠_fûe
[2])

	)

126 
	#is_°d_°ªam
(
fd
Ë((fdË>0 && (fdË<2)

	)

128 
DECL_CMD
(
chk_•¨£
);

130 
DECL_CMD
(
chk_u∆ök
);

132 
DECL_CMD
(
chk_w∫€¡
);

134 
DECL_CMD
(
chk_sbrk
);

136 
DECL_CMD
(
chk_zîo
);

138 
DECL_CMD
(
chk_nuŒ
);

140 
DECL_CMD
(
chk_¥iv
);

142 
DECL_CMD
(
chk_mÆloc
);

144 
cmd_t
 
	gcheck_cmds
[] = {

145 {"nuŒ", 
cmd_chk_nuŒ
, "readánd write /dev/null"},

146 {"sbrk", 
cmd_chk_sbrk
, "memoryállocation - sbrk"},

147 {"•¨£", 
cmd_chk_•¨£
, "sparse mmap writes"},

148 {"u∆ök", 
cmd_chk_u∆ök
, "createánd unlinká file"},

149 {"w∫€¡", 
cmd_chk_w∫€¡
, "writeÅoán unlinked file"},

150 {"zîo", 
cmd_chk_zîo
, "readánd map /dev/zero"},

151 {"¥iv", 
cmd_chk_¥iv
, "writesÅo MAP_PRIVATE mapping"},

152 {"mÆloc", 
cmd_chk_mÆloc
, "memoryállocation - malloc"},

153 {
NULL
, NULL, NULL}};

155 
	$check_Áûed
(c⁄° *
ã°
, c⁄° *
cmd
)

157 
	`Ârötf
(
°dîr
, "%s: %†Áûed: %s\n", 
ã°
, 
cmd
, 
	`°ªº‹
(
î∫o
));

160 
	}
}

162 
	$check_exi°s
(c⁄° *
fûe
)

164 
fd
;

166 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0);

167 i‡(
fd
 >= 0)

169 
	`˛o£
(
fd
);

176 
	}
}

178 *
°rdup
(const *);

180 **
	$c›y_¨gs
(
¨gc
, *
¨gv
[])

182 **
¨gs
 = 
	`mÆloc
((*Ë* (
¨gc
 + 1));

183 
¨gs
[
¨gc
] = 
NULL
;

184 --
¨gc
 >= 0)

185 
¨gs
[
¨gc
] = 
	`°rdup
(
¨gv
[argc]);

186  
¨gs
;

187 
	}
}

189 
	$‰ì_¨gs
(
¨gc
, *
¨gv
[])

191 --
¨gc
 >= 0)

192 
	`‰ì
(
¨gv
[
¨gc
]);

193 
	`‰ì
(
¨gv
);

194 
	}
}

196 
	$DECL_CMD
(
chk_¥iv
)

198 c⁄° *
ã°
 = 
¨gv
[0];

199 c⁄° *
tmpfûe
 = 
TMP
 "/priv";

200 
fd
;

201 *
addr
;

202 c⁄° *
°r
 = "HelloÅhere.\n";

203 
îr‹
;

204 *
tmp°r
;

205 
size_t
 
Àn
;

206 
uöt32_t
 
ii
;

207 
tmpbuf
[256];

209 i‡(
	`check_exi°s
(
tmpfûe
))

211 
	`Ârötf
(
°dîr
, "%s: fûêexi°s: %s\n", 
ã°
, 
tmpfûe
);

218 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0);

219 i‡(
fd
 < 0)

221  
	`check_Áûed
(
ã°
, "open");

224 i‡(
	`wrôe
(
fd
, 
°r
, 
	`°æí
(°r)Ë!(
ssize_t
)strlen(str))

226 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

227 
îr_˛o£
;

233 
Àn
 = 
	`°æí
(
°r
);

234 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

235 i‡(
addr
 =
MAP_FAILED
)

237 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

238 
îr_˛o£
;

241 
tmp°r
 = (*)
addr
;

246 i‡(
	`°∫cmp
(
tmp°r
, 
°r
, 
	`°æí
(str)))

248 
	`Ârötf
(
°dîr
, "%s: fûêd€¢'àhavê°rög\n", 
ã°
);

249 
îr‹
 = 1;

250 
îr_unm≠
;

253 
	`mem£t
(
addr
, 0, 
	`°æí
(
°r
));

258 
ii
 = 0; iò< 
Àn
; ii++)

260 i‡(
tmp°r
[
ii
] != 0)

262 
	`Ârötf
(
°dîr
, "%s: didn'àwrôêtÿm≠pög\n", 
ã°
);

263 
îr‹
 = 1;

264 
îr_unm≠
;

271 i‡(
	`l£ek
(
fd
, 0, 
SEEK_SET
) != 0)

273 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek");

274 
îr_unm≠
;

277 i‡((
ii
 = 
	`ªad
(
fd
, 
tmpbuf
, —mpbuf))Ë!
Àn
)

279 
	`Ârötf
(
°dîr
, "%s:ÑódÑëu∫ed %d,Éx≥˘ög %lu.\n", 
ã°
, 
ii
,

280 
Àn
);

281 
îr‹
 = 1;

282 
îr_unm≠
;

285 i‡(
	`°∫cmp
(
tmpbuf
, 
°r
, 
	`°æí
(str)))

287 
	`Ârötf
(
°dîr
, "%s: fûêwa†ch™ged by MAP_PRIVATE?!\n", 
ã°
);

288 
îr‹
 = 1;

289 
îr_unm≠
;

292 
îr‹
 = 0;

294 
îr_unm≠
:

295 i‡(
	`munm≠
(
addr
, 
Àn
) < 0)

297 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

299 
îr_˛o£
:

300 i‡(
	`˛o£
(
fd
) < 0)

302 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

304 i‡(
	`u∆ök
(
tmpfûe
) < 0)

306 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

308  
îr‹
;

309 
	}
}

311 
	$DECL_CMD
(
chk_nuŒ
)

313 c⁄° *
ã°
 = 
¨gv
[0];

314 c⁄° *
nuŒ
 = "/dev/null";

315 
fd
;

316 
nbyãs
;

317 
buf
[256];

318 
îr‹
;

320 
fd
 = 
	`›í
(
nuŒ
, 
O_RDWR
, 0600);

321 i‡(
fd
 < 0)

323  
	`check_Áûed
(
ã°
, "open");

326 
	`mem£t
(
buf
, 0xCC, (buf));

331 
nbyãs
 = 
	`wrôe
(
fd
, 
buf
, (buf));

332 i‡(
nbyãs
 !(
buf
))

334 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

335 
îr_˛o£
;

341 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

342 i‡(
nbyãs
 != 0)

344 
îr‹
 = 
	`check_Áûed
(
ã°
, "read");

345 
îr_˛o£
;

348 
îr‹
 = 0;

350 
îr_˛o£
:

351 i‡(
	`˛o£
(
fd
) < 0)

353 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

355  
îr‹
;

356 
	}
}

358 
	$DECL_CMD
(
chk_zîo
)

360 c⁄° *
ã°
 = 
¨gv
[0];

361 *
addr
;

362 
fd
;

363 c⁄° *
zîo
 = "/dev/zero";

364 
buf
[256];

365 
nbyãs
;

366 
îr‹
;

367 
uöt32_t
 
ii
;

368 
size_t
 
Àn
;

369 *
Õ
;

370 *
˝
;

372 
fd
 = 
	`›í
(
zîo
, 
O_RDWR
, 0600);

373 i‡(
fd
 < 0)

375  
	`check_Áûed
(
ã°
, "open");

382 
	`mem£t
(
buf
, 0xCC, (buf));

384 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

385 i‡(
nbyãs
 !(
buf
))

387 
îr‹
 = 
	`check_Áûed
(
ã°
, "read");

388 
îr_˛o£
;

391 
ii
 = 0; iò< (
buf
); ii++)

393 i‡(
buf
[
ii
] != 0)

395 
îr‹
 = 
	`check_Áûed
(
ã°
, "verifyÑead");

396 
îr_˛o£
;

403 
Àn
 = 8192 * 5;

405 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

406 i‡(
addr
 =
MAP_FAILED
)

408 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

409 
îr_˛o£
;

412 
˝
 = (*)
addr
;

413 
ii
 = 0; iò< 
Àn
; ii++, 
˝
++)

415 i‡(*
˝
 != 0)

417 
îr‹
 = 
	`check_Áûed
(
ã°
, "verify mmap zeros");

418 
îr_unm≠
;

425 
Õ
 = (*)
addr
;

426 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

428 *
Õ
 = 
ii
;

431 
Õ
 = (*)
addr
;

432 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

434 i‡(*
Õ
 !
ii
)

436 
îr‹
 = 
	`check_Áûed
(
ã°
, "verify map write");

437 
îr_unm≠
;

441 
îr‹
 = 0;

443 
îr_unm≠
:

444 i‡(
	`munm≠
(
addr
, 
Àn
) < 0)

446 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

448 
îr_˛o£
:

449 i‡(
	`˛o£
(
fd
) < 0)

451 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

453  
îr‹
;

454 
	}
}

456 
	$DECL_CMD
(
chk_mÆloc
)

458 c⁄° *
ã°
 = 
¨gv
[0];

459 *
addr
;

460 
Àn
;

461 *
tmp
;

462 
uöt32_t
 
ii
;

463 
îr‹
;

465 
Àn
 = 8192 + 128;

466 
addr
 = 
	`mÆloc
(
Àn
);

467 i‡(!
addr
)

469  
	`check_Áûed
(
ã°
, "malloc");

474 
tmp
 = (*)
addr
;

475 
ii
 = 0; iò< (
Àn
 / ()); ii++)

477 *
tmp
++ = 
ii
;

482 
tmp
 = (*)
addr
;

483 
ii
 = 0; iò< (
Àn
 / ()); ii++)

485 i‡(*
tmp
++ !()
ii
)

487 
	`Ârötf
(
°dîr
, "%s: vîify faûedáà0x%lx\n", 
ã°
,

488 ()
tmp
);

489 
îr‹
 = 1;

490 
out_‰ì
;

494 
îr‹
 = 0;

495 
out_‰ì
:

496 
	`‰ì
(
addr
);

497  
îr‹
;

498 
	}
}

500 
	$DECL_CMD
(
chk_sbrk
)

502 *
ﬁdbrk1
, *
ﬁdbrk2
;

503 c⁄° *
brk_Áûed
 = (*)-1;

504 c⁄° *
ã°
 = 
¨gv
[0];

505 
Àn
;

506 *
tmp
;

507 
uöt32_t
 
ii
;

511 
Àn
 = 8192 * 5 + 128;

515 
ﬁdbrk1
 = 
	`sbrk
(
Àn
);

516 i‡(
ﬁdbrk1
 =
brk_Áûed
)

518  
	`check_Áûed
(
ã°
, "sbrkálloc");

523 
tmp
 = (*)
ﬁdbrk1
;

524 
ii
 = 0; iò< (
Àn
 / ()); ii++)

526 *
tmp
++ = 
ii
;

531 
tmp
 = (*)
ﬁdbrk1
;

532 
ii
 = 0; iò< (
Àn
 / ()); ii++)

534 i‡(*
tmp
++ !()
ii
)

536 
	`Ârötf
(
°dîr
, "%s: vîify faûedáà0x%lx\n", 
ã°
,

537 ()
tmp
);

544 
ﬁdbrk2
 = 
	`sbrk
(-
Àn
);

545 i‡(
ﬁdbrk2
 =
brk_Áûed
)

547  
	`check_Áûed
(
ã°
, "sbrk dealloc");

552 i‡(()
ﬁdbrk2
 < (()
ﬁdbrk1
 + 
Àn
))

554 
	`Ârötf
(
°dîr
, "%s: sbrk didn'àªtu∫ old brk??\n", 
ã°
);

559 
	}
}

561 
	$DECL_CMD
(
chk_w∫€¡
)

563 
fd
;

564 
îr‹
;

565 
nfd
;

566 c⁄° *
tmpfûe
 = 
TMP
 "/chk_wrnoent";

567 c⁄° *
ã°
 = 
¨gv
[0];

568 c⁄° *
ã°°r
 = "Hello World!";

569 
buf
[256];

573 i‡(
	`check_exi°s
(
tmpfûe
))

575 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

581 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0600);

582 i‡(
fd
 < 0)

584  
	`check_Áûed
(
ã°
, "create");

589 
îr‹
 = 
	`u∆ök
(
tmpfûe
);

590 i‡(
îr‹
 < 0)

592 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

593 
out_˛o£
;

598 
nfd
 = 
	`›í
(
tmpfûe
, 
O_RDONLY
, 0);

599 i‡(
nfd
 >= 0)

601 
îr‹
 = 
	`check_Áûed
(
ã°
, "openÇonexistent");

602 
out_˛o£
;

607 
îr‹
 = 
	`wrôe
(
fd
, 
ã°°r
, 
	`°æí
(teststr));

608 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
))

610 
îr‹
 = 
	`check_Áûed
(
ã°
, "writeÅeststr");

611 
out_˛o£
;

613 
îr‹
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

614 i‡(
îr‹
 != 0)

616 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

617 
out_˛o£
;

619 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

620 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
))

622 
îr‹
 = 
	`check_Áûed
(
ã°
, "readÅeststr");

623 
out_˛o£
;

628 i‡(
	`°∫cmp
(
buf
, 
ã°°r
, 
	`°æí
(teststr)))

630 
	`Ârötf
(
°dîr
, "%s: vîify såög faûed\n", 
ã°
);

631 
îr‹
 = 1;

632 
out_˛o£
;

635 
îr‹
 = 0;

636 
out_˛o£
:

637 i‡(
	`˛o£
(
fd
) < 0)

639 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

641  
îr‹
;

642 
	}
}

644 
	$DECL_CMD
(
chk_u∆ök
)

646 
fd
;

647 
îr‹
;

648 
nfd
;

649 c⁄° *
tmpfûe
 = 
TMP
 "/chk_unlink";

650 c⁄° *
ã°
 = 
¨gv
[0];

654 i‡(
	`check_exi°s
(
tmpfûe
))

656 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

662 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDONLY
, 0600);

663 i‡(
fd
 < 0)

665  
	`check_Áûed
(
ã°
, "create");

670 
îr‹
 = 
	`u∆ök
(
tmpfûe
);

671 i‡(
îr‹
 < 0)

673 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

674 
out_˛o£
;

679 
nfd
 = 
	`›í
(
tmpfûe
, 
O_RDONLY
, 0);

680 i‡(
nfd
 >= 0)

682 
îr‹
 = 
	`check_Áûed
(
ã°
, "openÇonexistent");

683 
out_˛o£
;

686 
îr‹
 = 0;

687 
out_˛o£
:

688 i‡(
	`˛o£
(
fd
) < 0)

690 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

692  
îr‹
;

693 
	}
}

695 
	$DECL_CMD
(
chk_•¨£
)

697 
fd
;

698 c⁄° *
tmpfûe
 = 
TMP
 "/chk_sparse";

699 c⁄° *
ã°
 = 
¨gv
[0];

700 
îr‹
;

701 
£ek
;

702 
Àn
 = 5 * 8192;

703 *
m≠
;

704 c⁄° *
ã°°r
 = "HelloÅhere?";

705 *
m≠_ch
;

706 c⁄° *
tmp°r
;

707 
buf
[256];

708 
ii
;

712 i‡(
	`check_exi°s
(
tmpfûe
))

714 
	`Ârötf
(
°dîr
, "%s:Åmpfûêexi°s\n", 
ã°
);

720 
fd
 = 
	`›í
(
tmpfûe
, 
O_CREAT
 | 
O_RDWR
, 0600);

721 i‡(
fd
 < 0)

723  
	`check_Áûed
(
ã°
, "create");

729 
£ek
 = 
	`l£ek
(
fd
, 
Àn
, 
SEEK_SET
);

730 i‡(
£ek
 !
Àn
)

732 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseekÜen");

733 
out_˛o£
;

735 
îr‹
 = 
	`wrôe
(
fd
, &fd, 1);

736 i‡(
îr‹
 < 0)

738 
îr‹
 = 
	`check_Áûed
(
ã°
, "write");

739 
out_˛o£
;

745 
£ek
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

746 i‡(
£ek
 != 0)

748 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

749 
out_˛o£
;

751 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

752 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
))

754 
îr‹
 = 
	`check_Áûed
(
ã°
, "read zeros");

755 
out_˛o£
;

757 
ii
 = 
	`°æí
(
ã°°r
), 
tmp°r
 = 
buf
; ii; ii--)

759 i‡(*
tmp°r
++)

761 
	`Ârötf
(
°dîr
, "%s: vîify zîo†Áûed\n", 
ã°
);

762 
îr‹
 = 1;

763 
out_˛o£
;

769 
m≠
 = 
	`mm≠
(
NULL
, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

770 i‡(
m≠
 =
MAP_FAILED
)

772 
îr‹
 = 
	`check_Áûed
(
ã°
, "mmap");

773 
out_˛o£
;

779 
m≠_ch
 = (*)
m≠
;

780 
tmp°r
 = 
ã°°r
;

781 *
tmp°r
)

782 *
m≠_ch
++ = *
tmp°r
++;

786 i‡(
	`munm≠
(
m≠
, 
Àn
) < 0)

788 
îr‹
 = 
	`check_Áûed
(
ã°
, "munmap");

793 
£ek
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
);

794 i‡(
£ek
 != 0)

796 
îr‹
 = 
	`check_Áûed
(
ã°
, "lseek begin");

797 
out_˛o£
;

799 
îr‹
 = 
	`ªad
(
fd
, 
buf
, 
	`°æí
(
ã°°r
));

800 i‡(
îr‹
 !(
ssize_t
)
	`°æí
(
ã°°r
))

802 
îr‹
 = 
	`check_Áûed
(
ã°
, "readÅeststr");

803 
out_˛o£
;

805 
buf
[
	`°æí
(
ã°°r
)] = 0;

809 i‡(
	`°rcmp
(
ã°°r
, 
buf
))

811 
	`Ârötf
(
°dîr
, "%s: vîify d©®Áûed\n", 
ã°
);

812 
	`Ârötf
(
°dîr
, "%s:Åe°°∏\"%s\", bu‡\"%s\"\n", 
ã°
, 
ã°°r
, 
buf
);

813 
îr‹
 = 1;

814 
out_˛o£
;

817 
îr‹
 = 0;

818 
out_˛o£
:

819 i‡(
	`˛o£
(
fd
) < 0)

821 
îr‹
 = 
	`check_Áûed
(
ã°
, "close");

823 i‡(
	`u∆ök
(
tmpfûe
) < 0)

825 
îr‹
 = 
	`check_Áûed
(
ã°
, "unlink");

827  
îr‹
;

828 
	}
}

830 
	$check_run_⁄e
(
cmd_t
 *
cmd
, 
i€nv_t
 *
io
)

832 
ªtvÆ
;

833 *
¨gv
[2];

835 
¨gv
[0] = (*)
cmd
->
cmd_«me
;

836 
¨gv
[1] = 
NULL
;

838 
	`Ârötf
(
°dout
, "%10†... ", 
cmd
->
cmd_«me
);

839 
	`fÊush
(
NULL
);

840 
ªtvÆ
 = (*
cmd
->
cmd_func
)(1, 
¨gv
, 
io
);

841 
	`Ârötf
(
°dout
, "%s\n", 
ªtvÆ
 ? "FAILED" : "SUCCESS");

843  
ªtvÆ
;

844 
	}
}

846 
	$DECL_CMD
(
check
)

848 
¨gn
;

849 
cmd_t
 *
cmd
;

850 
îr‹s
;

852 i‡(
¨gc
 < 2)

854 
	`Ârötf
(
°dîr
, "usage: check <test> [...]\n\n");

856 
	`Ârötf
(
°dîr
, "Where <test> isÉither \"all\" or one of:\n");

857 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++)

859 
	`Ârötf
(
°dîr
, "%20†- %s\n", 
cmd
->
cmd_«me
, cmd->
cmd_hñ±ext
);

861 
	`Ârötf
(
°dîr
, "\n");

865 
îr‹s
 = 0;

867 
	`Ârötf
(
°dout
, "RunningÅests:\n");

869 i‡(
¨gc
 =2 && !
	`°rcmp
(
¨gv
[1], "all"))

871 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++)

873 
îr‹s
 +
	`check_run_⁄e
(
cmd
, 
io
);

875  
îr‹s
;

878 
¨gn
 = 1;árg¿< 
¨gc
;árgn++)

880 c⁄° *
ã°
;

882 
ã°
 = 
¨gv
[
¨gn
];

884 
cmd
 = 
check_cmds
; cmd->
cmd_«me
; cmd++)

886 i‡(!
	`°rcmp
(
cmd
->
cmd_«me
, 
ã°
))

891 i‡(!
cmd
->
cmd_«me
)

893 
	`Ârötf
(
°dîr
, "Unknow¿ã°: %s\n", 
ã°
);

894 
îr‹s
++;

898 
îr‹s
 +
	`check_run_⁄e
(
cmd
, 
io
);

901  
îr‹s
;

902 
	}
}

904 
	$DECL_CMD
(
ív
)

906 
i
 = 0;

907 i‡(
my_ívp
)

909 
my_ívp
[
i
])

911 
	`¥ötf
("ív: %s\n", 
my_ívp
[
i
++]);

915 
	}
}

917 
	$DECL_CMD
(
sync
)

919 
	`sync
();

921 
	}
}

923 
	$do_˝
(
i€nv_t
 *
io
, c⁄° *
cmd
, c⁄° *
ö_fûe
, 
ö_fd
,

924 c⁄° *
out_fûe
, 
out_fd
)

926 
	#buf„r_sz
 32768

	)

928 
buf„r
[
buf„r_sz
];

929 
nbyãs_ö
;

930 
nbyãs_out
;

932 i‡(
	`is_°d_°ªam
(
ö_fd
))

934 
ö_fd
 = 
io
->
io_m≠_fd
[in_fd];

936 i‡(
	`is_°d_°ªam
(
out_fd
))

938 
out_fd
 = 
io
->
io_m≠_fd
[out_fd];

941 (
nbyãs_ö
 = 
	`ªad
(
ö_fd
, 
buf„r
, 
buf„r_sz
)) > 0)

943 i‡((
nbyãs_out
 = 
	`wrôe
(
out_fd
, 
buf„r
, 
nbyãs_ö
)) < 0)

945 
	`Ârötf
(
°dîr
, "%s: u«bÀÅÿwrôêtÿ%s: %s\n", 
cmd
, 
out_fûe
,

946 
	`°ªº‹
(
î∫o
));

950 i‡(
nbyãs_ö
 < 0)

952 
	`Ârötf
(
°dîr
, "%s: u«bÀÅÿªad from %s: %s\n", 
cmd
, 
ö_fûe
,

953 
	`°ªº‹
(
î∫o
));

958 #unde‡
buf„r_sz


959 
	}
}

961 
	$DECL_CMD
(
˝
)

963 c⁄° *
§c
;

964 c⁄° *
de°
;

965 
§c_fd
;

966 
de°_fd
;

967 
îr‹
;

969 i‡(
¨gc
 != 3)

971 
	`Ârötf
(
°dîr
, "usage: cp <src> <dest>\n");

975 
§c
 = 
¨gv
[1];

976 
de°
 = 
¨gv
[2];

978 
§c_fd
 = 
	`›í
(
§c
, 
O_RDONLY
, 0);

979 i‡(
§c_fd
 < 0)

981 
	`Ârötf
(
°dîr
, "˝: u«bÀÅÿ›í %s: %s\n", 
§c
, 
	`°ªº‹
(
î∫o
));

985 
de°_fd
 = 
	`›í
(
de°
, 
O_WRONLY
 | 
O_CREAT
 | 
O_TRUNC
, 0666);

986 i‡(
de°_fd
 < 0)

988 
	`Ârötf
(
°dîr
, "˝: u«bÀÅÿ›í %s: %s\n", 
de°
, 
	`°ªº‹
(
î∫o
));

992 
îr‹
 = 0;

993 i‡(!
	`do_˝
(
io
, "˝", 
§c
, 
§c_fd
, 
de°
, 
de°_fd
))

995 
îr‹
 = 1;

998 
	`˛o£
(
§c_fd
);

999 
	`˛o£
(
de°_fd
);

1000  
îr‹
;

1001 
	}
}

1003 
	$DECL_CMD
(
echo
)

1005 
¨gn
;

1006 
out_fd
 = 
io
->
io_m≠_fd
[
STDOUT_FILENO
];

1007 
ssize_t
 
îr‹
;

1011 
	#ECHO_BUF_SIZE
 128

	)

1012 
buf
[
ECHO_BUF_SIZE
];

1015 i‡(
¨gc
 == 1)

1017 
îr‹
 = 
	`wrôe
(
out_fd
, "\n", 1);

1018 i‡(
îr‹
 < 0)

1020 
	`Ârötf
(
°dîr
, "echo: unableÅo write `\\n`\n");

1021  
îr‹
;

1027 
¨gn
 = 1;árg¿< 
¨gc
;árgn++)

1029 *
åaûög
 = 
¨gn
 =
¨gc
 - 1 ? "\n" : " ";

1030 
	`¢¥ötf
(
buf
, 
ECHO_BUF_SIZE
, "%s%s", 
¨gv
[
¨gn
], 
åaûög
);

1032 
îr‹
 = 
	`wrôe
(
out_fd
, 
buf
, 
	`°æí
(buf));

1033 i‡(
îr‹
 < 0)

1035 
	`Ârötf
(
°dîr
, "echo: u«bÀÅÿwrôê`%s`\n", 
buf
);

1036  
îr‹
;

1040 #unde‡
ECHO_BUF_SIZE


1042 
	}
}

1044 
	$DECL_CMD
(
ˇt
)

1046 c⁄° *
fûe
;

1047 
¨gn
;

1048 
fd
;

1049 
îr‹
;

1051 i‡(
¨gc
 == 1)

1053  !
	`do_˝
(
io
, "cat", "<stdin>", 0, "<stdout>", 1);

1056 
îr‹
 = 0;

1058 
¨gn
 = 1;árg¿< 
¨gc
;árgn++)

1060 
fûe
 = 
¨gv
[
¨gn
];

1061 
fd
 = 
	`›í
(
fûe
, 
O_RDONLY
, 0);

1062 i‡(
fd
 < 0)

1064 
	`Ârötf
(
°dîr
, "ˇt: u«bÀÅÿ›í %s: %s\n", 
fûe
,

1065 
	`°ªº‹
(
î∫o
));

1066 
îr‹
 = 1;

1069 i‡(!
	`do_˝
(
io
, "ˇt", 
fûe
, 
fd
, "<stdout>", 1))

1071 
îr‹
 = 1;

1073 
	`˛o£
(
fd
);

1076  
îr‹
;

1077 
	}
}

1079 
	$DECL_CMD
(
mv
)

1081 c⁄° *
§c
;

1082 c⁄° *
de°
;

1084 i‡(
¨gc
 != 3)

1086 
	`Ârötf
(
°dîr
, "usage: mv <src> <dest>\n");

1090 
§c
 = 
¨gv
[1];

1091 
de°
 = 
¨gv
[2];

1093 i‡(
	`ª«me
(
§c
, 
de°
) < 0)

1095 
	`Ârötf
(
°dîr
, "mv: u«bÀÅÿmovê%†tÿ%s: %s\n", 
§c
, 
de°
,

1096 
	`°ªº‹
(
î∫o
));

1100 
	}
}

1102 
	$DECL_CMD
(
rm
)

1104 
¨gn
;

1105 c⁄° *
fûe
;

1106 
îr‹
 = 0;

1108 i‡(
¨gc
 == 1)

1110 
	`Ârötf
(
°dîr
, "usage:Ñm <file> [...]\n");

1114 
¨gn
 = 1;árg¿< 
¨gc
;árgn++)

1116 
fûe
 = 
¨gv
[
¨gn
];

1117 i‡(
	`u∆ök
(
fûe
) < 0)

1119 
	`Ârötf
(
°dîr
, "rm: u«bÀÅÿªmovê%s: %s\n", 
fûe
,

1120 
	`°ªº‹
(
î∫o
));

1121 
îr‹
 = 1;

1124  
îr‹
;

1125 
	}
}

1127 
	$DECL_CMD
(
 
)

1129 c⁄° *
§c
;

1130 c⁄° *
de°
;

1132 i‡(
¨gc
 != 3)

1134 
	`Ârötf
(
°dîr
, "usage:Ün <src> <dest>\n");

1138 
§c
 = 
¨gv
[1];

1139 
de°
 = 
¨gv
[2];

1141 i‡(
	`lök
(
§c
, 
de°
) < 0)

1143 
	`Ârötf
(
°dîr
, " : couldn'àlök %†tÿ%s: %s\n", 
de°
, 
§c
,

1144 
	`°ªº‹
(
î∫o
));

1148 
	}
}

1150 
	$DECL_CMD
(
mkdú
)

1152 c⁄° *
dú
;

1154 i‡(
¨gc
 != 2)

1156 
	`Ârötf
(
°dîr
, "usage: mkdir <directory>\n");

1160 
dú
 = 
¨gv
[1];

1161 i‡(
	`mkdú
(
dú
, 0777) < 0)

1163 
	`Ârötf
(
°dîr
, "mkdú: couldn'à¸óã %s: %s\n", 
dú
,

1164 
	`°ªº‹
(
î∫o
));

1168 
	}
}

1170 
	$DECL_CMD
(
˛ór
)

1172 
	#ESC
 "\x1B"

	)

1173 
	`Ârötf
(
°dout
, 
ESC
 "[H" ESC "[J");

1174 #unde‡
ESC


1176 
	}
}

1178 
	$DECL_CMD
(
rmdú
)

1180 c⁄° *
dú
;

1182 i‡(
¨gc
 != 2)

1184 
	`Ârötf
(
°dîr
, "usage:Ñmdir <directory>\n");

1188 
dú
 = 
¨gv
[1];

1189 i‡(
	`rmdú
(
dú
) < 0)

1191 
	`Ârötf
(
°dîr
, "rmdú: couldn'àªmovê%s: %s\n", 
dú
,

1192 
	`°ªº‹
(
î∫o
));

1196 
	}
}

1198 
	$DECL_CMD
(
exô
)

1200 
	`exô
(0);

1202 
	}
}

1204 
	$DECL_CMD
(
hñp
)

1206 
cmd_t
 *
cmd
;

1208 
	`Ârötf
(
°dout
, "Shell commands:\n");

1210 
cmd
 = 
buûtö_cmds
; cmd->
cmd_«me
; cmd++)

1212 
	`Ârötf
(
°dout
, "%20†- %s\n", 
cmd
->
cmd_«me
, cmd->
cmd_hñ±ext
);

1216 
	}
}

1218 
	$DECL_CMD
(
cd
)

1220 c⁄° *
dú
;

1222 i‡(
¨gc
 > 2)

1224 
	`Ârötf
(
°dîr
, "usage: cd <dir>\n");

1228 i‡(
¨gc
 == 1)

1230 
dú
 = 
HOME
;

1234 
dú
 = 
¨gv
[1];

1237 i‡(
	`chdú
(
dú
) < 0)

1239 
	`Ârötf
(
°dîr
, "sh: couldn'àcdÅÿ%s: %s\n", 
dú
, 
	`°ªº‹
(
î∫o
));

1243 
	}
}

1245 
	$DECL_CMD
(
ª≥©
)

1247 
¡imes
;

1249 i‡(
¨gc
 < 3)

1251 
	`Ârötf
(
°dîr
, "usage:Ñepeat <ntimes> command [args ...]\n");

1255 
¡imes
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 10);

1256 i‡(
¡imes
 <= 0)

1258 
	`Ârötf
(
°dîr
, "repeat: <ntimes> must beÇon-zero\n");

1262 
¡imes
--)

1264 
ªdúe˘_m≠_t
 
m≠
;

1265 
ii
;

1267 **
√w_¨gv
 = 
	`c›y_¨gs
(
¨gc
 - 2, &
¨gv
[2]);

1268 
m≠
.
rm_nfds
 = 0;

1270 
ii
 = 0; ii < 3; ii++)

1272 
fd
;

1274 
fd
 = 
	`dup
(
io
->
io_m≠_fd
[
ii
]);

1275 i‡(
fd
 < 0)

1277 
	`Ârötf
(
°dîr
,

1280 
io
->
io_m≠_fd
[
ii
], 
	`°ªº‹
(
î∫o
));

1284 
	`add_ªdúe˘
(&
m≠
, 
fd
, 
ii
);

1287 
	`execuã
(
¨gc
 - 2, 
√w_¨gv
, &
m≠
);

1289 
	`‰ì_¨gs
(
¨gc
 - 2, 
√w_¨gv
);

1293 
	}
}

1295 
	$DECL_CMD
(
∑øŒñ
)

1297 
i
, 
cmdbegö
, 
ncmds
 = 0;

1298 **
cmd_¨gvs
[32];

1299 
cmd_¨gcs
[32];

1300 
cmd_pids
[32];

1302 i‡(
¨gc
 < 2)

1304 
	`Ârötf
(
°dîr
,

1310 
cmdbegö
 = (
i
 = 1); i < 
¨gc
; i++)

1312 i‡(!
	`°rcmp
(
¨gv
[
i
], "--"))

1315 i‡(
cmdbegö
 =
i
)

1317 
	`Ârötf
(
°dîr
, "empty command\n");

1320 
¨gv
[
i
] = 
NULL
;

1322 
cmd_¨gcs
[
ncmds
] = 
i
 - 
cmdbegö
;

1323 
cmd_¨gvs
[
ncmds
] = &
¨gv
[
cmdbegö
];

1324 
ncmds
++;

1325 i‡(
ncmds
 > 32)

1327 
	`Ârötf
(
°dîr
, "too many commands\n");

1330 
cmdbegö
 = 
i
 + 1;

1333 i‡(
cmdbegö
 =
¨gc
)

1335 
	`Ârötf
(
°dîr
, "empty command\n");

1338 
cmd_¨gcs
[
ncmds
] = 
¨gc
 - 
cmdbegö
;

1339 
cmd_¨gvs
[
ncmds
] = &
¨gv
[
cmdbegö
];

1340 
ncmds
++;

1341 i‡(
ncmds
 > 32)

1343 
	`Ârötf
(
°dîr
, "too many commands\n");

1348 
i
 = 0; i < 
ncmds
; i++)

1350 i‡(0 =(
cmd_pids
[
i
] = 
	`f‹k
()))

1352 
°©us
, 
fd
, 
ii
;

1354 
ªdúe˘_m≠_t
 
m≠
;

1355 
m≠
.
rm_nfds
 = 0;

1356 
ii
 = 0; ii < 3; ii++)

1358 i‡(0 > (
fd
 = 
	`dup
(
io
->
io_m≠_fd
[
ii
])))

1360 
	`exô
(1);

1362 
	`add_ªdúe˘
(&
m≠
, 
fd
, 
ii
);

1365 
	`exô
(
	`execuã
(
cmd_¨gcs
[
i
], 
cmd_¨gvs
[i], &
m≠
));

1369 
°©us
;

1370 
i
 = 0; i < 
ncmds
; i++)

1372 
	`waô
(&
°©us
);

1375  
°©us
;

1376 
	}
}

1378 
	$DECL_CMD
(
time
)

1380 i‡(
¨gc
 < 1)

1382 
	`Ârötf
(
°dîr
, "usage:Åime [cmd]\n");

1385 i‡(
¨gc
 == 1)

1387 
	`Ârötf
(
°dout
, "time: %lu unôs\n", 
	`time
(
NULL
));

1391 
ªdúe˘_m≠_t
 
m≠
;

1393 
m≠
.
rm_nfds
 = 0;

1394 
i
 = 0; i < 3; i++)

1396 
fd
 = 
	`dup
(
io
->
io_m≠_fd
[
i
]);

1397 i‡(
fd
 < 0)

1398 
	`exô
(
fd
);

1399 
	`add_ªdúe˘
(&
m≠
, 
fd
, 
i
);

1402 
time_t
 
°¨t
 = 
	`time
(
NULL
);

1403 
ªt
 = 
	`execuã
(
¨gc
 - 1, &
¨gv
[1], &
m≠
);

1404 
time_t
 
íd
 = 
	`time
(
NULL
);

1406 
	`Ârötf
(
°dout
, "time: %lu unôs\n", 
íd
 - 
°¨t
);

1407  
ªt
;

1408 
	}
}

1410 
	$do_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
)

1412 
ii
;

1413 
√wfd
, 
ﬁdfd
;

1415 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++)

1417 
ﬁdfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_sfd
;

1418 
√wfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_dfd
;

1420 
	`dbg
((
°dîr
, "do_ªdúe˘: dup2(%d,%d)\n", 
ﬁdfd
, 
√wfd
));

1422 i‡(
	`dup2
(
ﬁdfd
, 
√wfd
) < 0)

1424 
	`Ârötf
(
°dîr
,

1427 
	`°ªº‹
(
î∫o
));

1430 
	`˛o£
(
ﬁdfd
);

1433 
	}
}

1435 
	$˛ónup_ªdúe˘s
(
ªdúe˘_m≠_t
 *
m≠
)

1437 
ii
;

1439 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++)

1441 
	`˛o£
(
m≠
->
rm_ªdú
[
ii
].
r_sfd
);

1443 
	}
}

1445 
	$buûd_i€nv
(
ªdúe˘_m≠_t
 *
m≠
, 
i€nv_t
 *
io
)

1447 
ii
;

1450 
ii
 = 0; ii < 3; ii++)

1452 
io
->
io_m≠_fd
[
ii
] = ii;

1456 
ii
 = 0; iò< 
m≠
->
rm_nfds
; ii++)

1458 
sfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_sfd
;

1459 
dfd
 = 
m≠
->
rm_ªdú
[
ii
].
r_dfd
;

1460 i‡(
dfd
 >= 0 && dfd <= 2)

1462 
io
->
io_m≠_fd
[
dfd
] = 
sfd
;

1465 
	}
}

1467 
	$de°roy_i€nv
(
i€nv_t
 *
io
Ë{
	}
}

1469 
	$buûtö_exec
(
cmd_t
 *
cmd
, 
¨gc
, *
¨gv
[], 
i€nv_t
 *
io
)

1471  (*
cmd
->
cmd_func
)(
¨gc
, 
¨gv
, 
io
);

1472 
	}
}

1474 
	$execuã
(
¨gc
, *
¨gv
[], 
ªdúe˘_m≠_t
 *
m≠
)

1476 
°©us
, 
pid
;

1477 
cmd_t
 *
cmd
;

1479 
cmd
 = 
buûtö_cmds
; cmd->
cmd_«me
; cmd++)

1481 i‡(!
	`°rcmp
(
cmd
->
cmd_«me
, 
¨gv
[0]))

1486 i‡(
cmd
->
cmd_«me
)

1488 
i€nv_t
 
io
;

1490 
	`buûd_i€nv
(
m≠
, &
io
);

1491 
°©us
 = 
	`buûtö_exec
(
cmd
, 
¨gc
, 
¨gv
, &
io
);

1492 
	`de°roy_i€nv
(&
io
);

1493 
	`˛ónup_ªdúe˘s
(
m≠
);

1497 i‡(!(
pid
 = 
	`f‹k
()))

1499 i‡(
	`do_ªdúe˘
(
m≠
) < 0)

1501 
	`exô
(1);

1504 
	`execve
(
¨gv
[0],árgv, 
my_ívp
);

1506 *
£¨ch_dúe˘‹õs
[] = {"/usr/bin/", "/bin/", "/sbin/"};

1507 
buf
[256];

1509 
i
 = 0;

1510 
î∫o
 =
ENOENT
 && 
i
 < (
£¨ch_dúe˘‹õs
) / (*);

1511 
i
++)

1513 
	`¢¥ötf
(
buf
, (buf), "%s/%s", 
£¨ch_dúe˘‹õs
[
i
], 
¨gv
[0]);

1514 
	`execve
(
buf
, 
¨gv
, 
my_ívp
);

1516 i‡(
î∫o
 =
ENOENT
)

1518 
	`Ârötf
(
°dîr
, "sh: comm™dÇŸ found: %s\n", 
¨gv
[0]);

1522 
	`Ârötf
(
°dîr
, "sh:Éxe¯Áûed f‹ %s: %s\n", 
¨gv
[0],

1523 
	`°ªº‹
(
î∫o
));

1525 
	`exô
(
î∫o
);

1529 i‡(0 > 
pid
)

1531 
	`Ârötf
(
°dîr
, "sh: f‹k faûedÉºnÿ%d\n", 
î∫o
);

1535 
	`˛ónup_ªdúe˘s
(
m≠
);

1536 
ªt
 = 
	`waô
(&
°©us
);

1537 i‡(
°©us
 =
EFAULT
)

1539 
	`Ârötf
(
°dîr
, "sh: childÖrocessáccessed invalid memory\n");

1543  
ªt
;

1544 
	}
}

1546 
	#sh_i§edúe˘
(
ch
Ë((chË='>' || (chË='<')

	)

1548 
	$∑r£_ªdúe˘_dfd
(*
löe
, **
°¨t_p
)

1550 *
°¨t
;

1552 
°¨t
 = *
°¨t_p
;

1554 i‡(
°¨t
 =
löe
)

1560 *
°¨t
 = 0;

1561 
°¨t
--;

1564 (
°¨t
 !
löe
Ë&& 
	`is•a˚
(*start))

1565 
°¨t
--;

1566 i‡(
°¨t
 =
löe
)

1572 (
°¨t
 !
löe
Ë&& 
	`isdigô
(*start))

1573 
°¨t
--;

1574 i‡(!(
	`is•a˚
(*
°¨t
Ë|| 
	`isdigô
(*start)))

1580 *
°¨t_p
 = 
°¨t
;

1581  
	`°πﬁ
(
°¨t
, 
NULL
, 10);

1582 
	}
}

1584 
	$ªdúe˘_deÁu…_fd
(
ty≥
)

1586 i‡(
ty≥
 == '<')

1590 i‡(
ty≥
 == '>')

1596 
	`Ârötf
(
°dîr
, "redirect_default_fd: Eh?\n");

1599 
	}
}

1601 
	$add_ªdúe˘
(
ªdúe˘_m≠_t
 *
m≠
, 
sfd
, 
dfd
)

1603 
	`dbg
((
°dîr
, "add_ªdúe˘: %d -> %d\n", 
sfd
, 
dfd
));

1604 
m≠
->
rm_ªdú
[m≠->
rm_nfds
].
r_sfd
 = 
sfd
;

1605 
m≠
->
rm_ªdú
[m≠->
rm_nfds
].
r_dfd
 = 
dfd
;

1606 ++
m≠
->
rm_nfds
;

1607 
	}
}

1609 
	$∑r£_ªdúe˘_dup
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
, 
dfd
,

1610 
mode
, *
°¨t
, **
íd_p
)

1612 
ªÆ_sfd
, 
sfd
;

1613 *
sfd°r
;

1616 *
°¨t
 && 
	`is•a˚
(*start))

1617 
°¨t
++;

1618 i‡(!*
°¨t
)

1620 
	`Ârötf
(
°dîr
, "sh: badÑedirectátÉnd ofÜine\n");

1624 
sfd°r
 = 
°¨t
;

1627 i‡(!
	`isdigô
(*
°¨t
))

1629 
	`Ârötf
(
°dîr
, "sh:ÖarseÉrror in dupÑedirect: 1\n");

1632 *
°¨t
 && 
	`isdigô
(*start))

1633 
°¨t
++;

1634 i‡(*
°¨t
 && !
	`is•a˚
(*start))

1636 
	`Ârötf
(
°dîr
, "sh:ÖarseÉrror in dupÑedirect: 2\n");

1641 *
°¨t
 = 0;

1642 
ªÆ_sfd
 = 
	`°πﬁ
(
sfd°r
, 
NULL
, 10);

1644 
	`dbg
((
°dîr
, "ªdúe˘_dup: %d -> %d\n", 
ªÆ_sfd
, 
dfd
));

1646 
sfd
 = 
	`dup
(
ªÆ_sfd
);

1647 i‡(
sfd
 < 0)

1649 
	`Ârötf
(
°dîr
, "sh: invÆid fûêdes¸ùt‹: %d\n", 
ªÆ_sfd
);

1653 
	`add_ªdúe˘
(
m≠
, 
sfd
, 
dfd
);

1655 *
íd_p
 = 
°¨t
 + 1;

1657 
	}
}

1659 
	$∑r£_ªdúe˘_n‹m
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
, 
dfd
,

1660 
mode
, *
°¨t
, **
íd_p
)

1662 
sfd
;

1663 *
∑th
;

1666 *
°¨t
 && 
	`is•a˚
(*start))

1667 
°¨t
++;

1668 i‡(!*
°¨t
)

1670 
	`Ârötf
(
°dîr
, "sh: badÑedirectátÉnd ofÜine\n");

1674 
∑th
 = 
°¨t
;

1677 *
°¨t
 && !
	`is•a˚
(*start))

1678 
°¨t
++;

1679 *
°¨t
 = 0;

1681 
	`dbg
((
°dîr
, "ªdúe˘_n‹m: %†-> %d\n", 
∑th
, 
dfd
));

1683 
sfd
 = 
	`›í
(
∑th
, 
mode
, 0666);

1684 i‡(
sfd
 < 0)

1686 
	`Ârötf
(
°dîr
, "sh: u«bÀÅÿ›í %s: %s\n", 
∑th
, 
	`°ªº‹
(
î∫o
));

1690 
	`add_ªdúe˘
(
m≠
, 
sfd
, 
dfd
);

1692 *
íd_p
 = 
°¨t
 + 1;

1694 
	}
}

1696 
	$∑r£_ªdúe˘s
(*
löe
, 
ªdúe˘_m≠_t
 *
m≠
)

1698 *
tmp
;

1700 
m≠
->
rm_nfds
 = 0;

1702 
tmp
 = 
löe
;

1705 *
°¨t
, *
íd
;

1706 
ty≥
, 
dup
, 
≠≥nd
;

1707 
mode
;

1708 
dfd
;

1710 
dup
 = 0;

1711 
≠≥nd
 = 0;

1714 *
tmp
 && !
	`sh_i§edúe˘
(*tmp))

1715 
tmp
++;

1716 i‡(!*
tmp
)

1721 
°¨t
 = 
tmp
;

1722 
ty≥
 = *
tmp
;

1729 
dfd
 = 
	`∑r£_ªdúe˘_dfd
(
löe
, &
°¨t
);

1730 i‡(
dfd
 < 0)

1732 
dfd
 = 
	`ªdúe˘_deÁu…_fd
(
ty≥
);

1737 
tmp
++;

1738 i‡(*
tmp
 == '>')

1740 i‡(
ty≥
 != '>')

1742 
	`Ârötf
(
°dîr
, "sh:Ö¨£Éº‹áà%c%c\n", 
ty≥
, *
tmp
);

1745 
≠≥nd
 = 1;

1746 
tmp
++;

1748 i‡(*
tmp
 == '&')

1750 
dup
 = 1;

1751 
tmp
++;

1756 i‡(
ty≥
 == '<')

1758 
mode
 = 
O_RDONLY
;

1760 i‡(
ty≥
 == '>')

1762 
mode
 = 
O_WRONLY
 | 
O_CREAT
;

1763 i‡(
≠≥nd
)

1765 
mode
 |
O_APPEND
;

1769 
mode
 |
O_TRUNC
;

1774 
	`Ârötf
(
°dîr
, "sh: badÅy≥ i¿ªdúe˘: %c\n", 
ty≥
);

1780 i‡(
dup
)

1782 i‡(
	`∑r£_ªdúe˘_dup
(
löe
, 
m≠
, 
dfd
, 
mode
, 
tmp
, &
íd
) < 0)

1789 i‡(
	`∑r£_ªdúe˘_n‹m
(
löe
, 
m≠
, 
dfd
, 
mode
, 
tmp
, &
íd
) < 0)

1797 
°¨t
 < 
íd
)

1798 *
°¨t
++ = ' ';

1800 
tmp
 = 
íd
;

1804 
	}
}

1806 
	$∑r£
(*
löe
)

1808 *
¨gv
[
ARGV_MAX
];

1809 
¨gc
;

1810 *
tmp
;

1811 
size_t
 
Àn
;

1812 
ªdúe˘_m≠_t
 
m≠
;

1814 
¨gc
 = 0;

1815 
tmp
 = 
löe
;

1817 
Àn
 = 
	`°æí
(
löe
);

1818 i‡(
löe
[
Àn
 - 1] == '\n')

1820 
löe
[
Àn
 - 1] = 0;

1823 i‡(
	`∑r£_ªdúe˘s
(
löe
, &
m≠
) < 0)

1832 *
tmp
 && 
	`is•a˚
(*tmp))

1833 
tmp
++;

1834 i‡(!*
tmp
)

1839 
¨gv
[
¨gc
++] = 
tmp
;

1843 *
tmp
 && !
	`is•a˚
(*tmp))

1844 
tmp
++;

1845 i‡(!*
tmp
)

1852 *
tmp
++ = 0;

1855 
¨gv
[
¨gc
] = 
NULL
;

1857 i‡(!
¨gc
)

1862 
	`execuã
(
¨gc
, 
¨gv
, &
m≠
);

1863 
	}
}

1865 
	#LINEBUF_SIZE
 1024

	)

1866 
	gbuf1
[
LINEBUF_SIZE
] = {
NULL
};

1867 
	gbuf2
[
LINEBUF_SIZE
] = {
NULL
};

1869 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

1871 *
löebuf
 = 
buf1
;

1872 *
¥ev_löebuf
 = 
buf2
;

1874 
ssize_t
 
nbyãs
;

1875 
¥om±
[64];

1877 
my_ívp
 = 
ívp
;

1879 
	`¢¥ötf
(
¥om±
, (prompt), "weenix -> ");

1881 
	`Ârötf
(
°dout
, "%s", 
¥om±
);

1882 
	`fÊush
(
NULL
);

1883 (
nbyãs
 = 
	`ªad
(0, 
löebuf
, 
LINEBUF_SIZE
)) > 0)

1885 
löebuf
[
nbyãs
] = 0;

1887 i‡(
nbyãs
 =3 && 
löebuf
[0] == '!' &&Üinebuf[1] == '!' &&

1888 
löebuf
[2] == '\n')

1890 
	`Ârötf
(
°dout
, "%s\n", 
¥ev_löebuf
);

1891 
	`∑r£
(
¥ev_löebuf
);

1895 
	`∑r£
(
löebuf
);

1896 *
tmp
 = 
löebuf
;

1897 
löebuf
 = 
¥ev_löebuf
;

1898 
¥ev_löebuf
 = 
tmp
;

1900 
	`Ârötf
(
°dout
, "%s", 
¥om±
);

1901 
	`fÊush
(
NULL
);

1904 
	`Ârötf
(
°dout
, "exit\n");

1906 #ifde‡
__°©ic__


1907 
	`exô
(0);

1910 
	}
}

	@user/bin/sl.c

49 
	~<°dio.h
>

50 
	~<uni°d.h
>

52 
	#ERR
 0

	)

53 
	#OK
 1

	)

54 
	#LINES
 25

	)

55 
	#COLS
 80

	)

57 
	#D51HEIGHT
 10

	)

58 
	#D51FUNNEL
 7

	)

59 
	#D51LENGTH
 83

	)

60 
	#D51PATTERNS
 6

	)

62 
	#D51STR1
 " === ________ ___________ "

	)

63 
	#D51STR2
 " _D _| |_______/ \\__I_I_____===__|_________| "

	)

64 
	#D51STR3
 " |(_)--- | H\\________/ | | =|___ ___| "

	)

65 
	#D51STR4
 " / | | H | | | | ||_| |_|| "

	)

66 
	#D51STR5
 " | | | H |__--------------------| [___] | "

	)

67 
	#D51STR6
 " | ________|___H__/__|_____/[][]~\\_______| | "

	)

68 
	#D51STR7
 " |/ | |-----------I_____I [][] [] D |=======|__ "

	)

70 
	#D51WHL11
 "__/ =| o |=-~~\\ /~~\\ /~~\\ /~~\\ ____Y___________|__ "

	)

71 
	#D51WHL12
 " |/-=|___| || || || |_____/~\\___/ "

	)

72 
	#D51WHL13
 " \\_/ \\O=====O=====O=====O_/ \\_/ "

	)

74 
	#D51WHL21
 "__/ =| o |=-~~\\ /~~\\ /~~\\ /~~\\ ____Y___________|__ "

	)

75 
	#D51WHL22
 " |/-=|___|=O=====O=====O=====O |_____/~\\___/ "

	)

76 
	#D51WHL23
 " \\_/ \\__/ \\__/ \\__/ \\__/ \\_/ "

	)

78 
	#D51WHL31
 "__/ =| o |=-O=====O=====O=====O \\ ____Y___________|__ "

	)

79 
	#D51WHL32
 " |/-=|___| || || || |_____/~\\___/ "

	)

80 
	#D51WHL33
 " \\_/ \\__/ \\__/ \\__/ \\__/ \\_/ "

	)

82 
	#D51WHL41
 "__/ =| o |=-~O=====O=====O=====O\\ ____Y___________|__ "

	)

83 
	#D51WHL42
 " |/-=|___| || || || |_____/~\\___/ "

	)

84 
	#D51WHL43
 " \\_/ \\__/ \\__/ \\__/ \\__/ \\_/ "

	)

86 
	#D51WHL51
 "__/ =| o |=-~~\\ /~~\\ /~~\\ /~~\\ ____Y___________|__ "

	)

87 
	#D51WHL52
 " |/-=|___| O=====O=====O=====O|_____/~\\___/ "

	)

88 
	#D51WHL53
 " \\_/ \\__/ \\__/ \\__/ \\__/ \\_/ "

	)

90 
	#D51WHL61
 "__/ =| o |=-~~\\ /~~\\ /~~\\ /~~\\ ____Y___________|__ "

	)

91 
	#D51WHL62
 " |/-=|___| || || || |_____/~\\___/ "

	)

92 
	#D51WHL63
 " \\_/ \\_O=====O=====O=====O/ \\_/ "

	)

94 
	#D51DEL
 " "

	)

96 
	#COAL01
 " "

	)

97 
	#COAL02
 " "

	)

98 
	#COAL03
 " _________________ "

	)

99 
	#COAL04
 " _| \\_____A "

	)

100 
	#COAL05
 " =| | "

	)

101 
	#COAL06
 " -| | "

	)

102 
	#COAL07
 "__|________________________|_ "

	)

103 
	#COAL08
 "|__________________________|_ "

	)

104 
	#COAL09
 " |_D__D__D_| |_D__D__D_| "

	)

105 
	#COAL10
 " \\_/ \\_/ \\_/ \\_/ "

	)

107 
	#COALDEL
 " "

	)

109 
	#LOGOHEIGHT
 6

	)

110 
	#LOGOFUNNEL
 4

	)

111 
	#LOGOLENGTH
 84

	)

112 
	#LOGOPATTERNS
 6

	)

114 
	#LOGO1
 " ++ +------ "

	)

115 
	#LOGO2
 " || |+-+ | "

	)

116 
	#LOGO3
 " /---------|| | | "

	)

117 
	#LOGO4
 " + ======= +-+ | "

	)

119 
	#LWHL11
 " _|--O========O~\\-+ "

	)

120 
	#LWHL12
 "//// \\_/ \\_/ "

	)

122 
	#LWHL21
 " _|--/O========O\\-+ "

	)

123 
	#LWHL22
 "//// \\_/ \\_/ "

	)

125 
	#LWHL31
 " _|--/~O========O-+ "

	)

126 
	#LWHL32
 "//// \\_/ \\_/ "

	)

128 
	#LWHL41
 " _|--/~\\------/~\\-+ "

	)

129 
	#LWHL42
 "//// \\_O========O "

	)

131 
	#LWHL51
 " _|--/~\\------/~\\-+ "

	)

132 
	#LWHL52
 "//// \\O========O/ "

	)

134 
	#LWHL61
 " _|--/~\\------/~\\-+ "

	)

135 
	#LWHL62
 "//// O========O_/ "

	)

137 
	#LCOAL1
 "____ "

	)

138 
	#LCOAL2
 "| \\@@@@@@@@@@@ "

	)

139 
	#LCOAL3
 "| \\@@@@@@@@@@@@@_ "

	)

140 
	#LCOAL4
 "| | "

	)

141 
	#LCOAL5
 "|__________________| "

	)

142 
	#LCOAL6
 " (OË (OË "

	)

144 
	#LCAR1
 "____________________ "

	)

145 
	#LCAR2
 "| ___ ___ ___ ___ | "

	)

146 
	#LCAR3
 "| |_| |_| |_| |_| | "

	)

147 
	#LCAR4
 "|__________________| "

	)

148 
	#LCAR5
 "|__________________| "

	)

149 
	#LCAR6
 " (OË (OË "

	)

151 
	#DELLN
 " "

	)

153 
	#C51HEIGHT
 11

	)

154 
	#C51FUNNEL
 7

	)

155 
	#C51LENGTH
 87

	)

156 
	#C51PATTERNS
 6

	)

158 
	#C51DEL
 " "

	)

160 
	#C51STR1
 " ___ "

	)

161 
	#C51STR2
 " _|_|_ _ __ __ ___________"

	)

162 
	#C51STR3
 " D__/ \\_(_)___| |__H__| |_____I_Ii_()|_________|"

	)

163 
	#C51STR4
 " | `---' |:: `--' H `--' | |___ ___| "

	)

164 
	#C51STR5
 " +|~~~~~~~~++::~~~~~~~H~~+=====+~~~~~~|~~||_| |_|| "

	)

165 
	#C51STR6
 " || | :: H +=====+ | |:: ...| "

	)

166 
	#C51STR7
 "| | _______|_::-----------------[][]-----| | "

	)

168 
	#C51WH61
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

169 
	#C51WH62
 "------'|oOo|==[]=- || || | ||=======_|__"

	)

170 
	#C51WH63
 "/~\\____|___|/~\\_| O=======O=======O |__|+-/~\\_| "

	)

171 
	#C51WH64
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

173 
	#C51WH51
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

174 
	#C51WH52
 "------'|oOo|===[]=- || || | ||=======_|__"

	)

175 
	#C51WH53
 "/~\\____|___|/~\\_| O=======O=======O |__|+-/~\\_| "

	)

176 
	#C51WH54
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

178 
	#C51WH41
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

179 
	#C51WH42
 "------'|oOo|===[]=- O=======O=======O | ||=======_|__"

	)

180 
	#C51WH43
 "/~\\____|___|/~\\_| || || |__|+-/~\\_| "

	)

181 
	#C51WH44
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

183 
	#C51WH31
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

184 
	#C51WH32
 "------'|oOo|==[]=- O=======O=======O | ||=======_|__"

	)

185 
	#C51WH33
 "/~\\____|___|/~\\_| || || |__|+-/~\\_| "

	)

186 
	#C51WH34
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

188 
	#C51WH21
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

189 
	#C51WH22
 "------'|oOo|=[]=- O=======O=======O | ||=======_|__"

	)

190 
	#C51WH23
 "/~\\____|___|/~\\_| || || |__|+-/~\\_| "

	)

191 
	#C51WH24
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

193 
	#C51WH11
 "| /~~ || |-----/~~~~\\ /[I_____I][][] --|||_______|__"

	)

194 
	#C51WH12
 "------'|oOo|=[]=- || || | ||=======_|__"

	)

195 
	#C51WH13
 "/~\\____|___|/~\\_| O=======O=======O |__|+-/~\\_| "

	)

196 
	#C51WH14
 "\\_/ \\_/ \\____/ \\____/ \\____/ \\_/ "

	)

198 
add_smoke
(
y
, 
x
);

199 
add_m™
(
y
, 
x
);

200 
add_C51
(
x
);

201 
add_D51
(
x
);

202 
add_¶
(
x
);

203 
›ti⁄
(*
°r
);

204 
my_mvadd°r
(
y
, 
x
, *
°r
);

206 
	gACCIDENT
 = 0;

207 
	gLOGO
 = 0;

208 
	gFLY
 = 0;

209 
	gC51
 = 0;

211 
	$mvaddch
(
y
, 
x
, 
c
)

213 
	`¥ötf
("\033[%d;%dH%c", 
y
, 
x
, 
c
);

216  
OK
;

217 
	}
}

219 
	$my_mvadd°r
(
y
, 
x
, *
°r
)

221 ; 
x
 < 0; ++x, ++
°r
)

222 i‡(*
°r
 == '\0')

223  
ERR
;

224 ; *
°r
 !'\0'; ++°r, ++
x
)

225 i‡(
	`mvaddch
(
y
, 
x
, *
°r
Ë=
ERR
)

226  
ERR
;

227  
OK
;

228 
	}
}

230 
	$›ti⁄
(*
°r
)

232 *
°r
 != '\0')

234 *
°r
++)

237 
ACCIDENT
 = 1;

240 
FLY
 = 1;

243 
LOGO
 = 1;

246 
C51
 = 1;

252 
	}
}

254 
	$maö
(
¨gc
, *
¨gv
[])

256 
x
, 
i
;

258 
i
 = 1; i < 
¨gc
; ++i)

260 i‡(*
¨gv
[
i
] == '-')

262 
	`›ti⁄
(
¨gv
[
i
] + 1);

266 
	`¥ötf
("\033[?25l");

275 
x
 = 
COLS
 - 1;; --x)

277 i‡(
LOGO
 == 1)

279 i‡(
	`add_¶
(
x
Ë=
ERR
)

282 i‡(
C51
 == 1)

284 i‡(
	`add_C51
(
x
Ë=
ERR
)

289 i‡(
	`add_D51
(
x
Ë=
ERR
)

294 
	`fÊush
(
°dout
);

302 
	`u¶ìp
(200000);

304 
	`¥ötf
("\033[2J\033[1;1H");

305 
	`fÊush
(
°dout
);

308 
	`¥ötf
("\033[?25h");

309 
	`fÊush
(
°dout
);

314 
	}
}

316 
	$add_¶
(
x
)

318 *
¶
[
LOGOPATTERNS
][
LOGOHEIGHT
 + 1] = {

319 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL11
, 
LWHL12
, 
DELLN
},

320 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL21
, 
LWHL22
, 
DELLN
},

321 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL31
, 
LWHL32
, 
DELLN
},

322 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL41
, 
LWHL42
, 
DELLN
},

323 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL51
, 
LWHL52
, 
DELLN
},

324 {
LOGO1
, 
LOGO2
, 
LOGO3
, 
LOGO4
, 
LWHL61
, 
LWHL62
, 
DELLN
}};

326 *
cﬂl
[
LOGOHEIGHT
 + 1] = {
LCOAL1
, 
LCOAL2
, 
LCOAL3
, 
LCOAL4
,

327 
LCOAL5
, 
LCOAL6
, 
DELLN
};

329 *
ˇr
[
LOGOHEIGHT
 + 1] = {
LCAR1
, 
LCAR2
, 
LCAR3
, 
LCAR4
,

330 
LCAR5
, 
LCAR6
, 
DELLN
};

332 
i
, 
y
, 
py1
 = 0, 
py2
 = 0, 
py3
 = 0;

334 i‡(
x
 < -
LOGOLENGTH
)

335  
ERR
;

336 
y
 = 
LINES
 / 2 - 3;

338 i‡(
FLY
 == 1)

340 
y
 = (
x
 / 6Ë+ 
LINES
 - (
COLS
 / 6Ë- 
LOGOHEIGHT
;

341 
py1
 = 2;

342 
py2
 = 4;

343 
py3
 = 6;

345 
i
 = 0; i <
LOGOHEIGHT
; ++i)

347 
	`my_mvadd°r
(
y
 + 
i
, 
x
, 
¶
[(
LOGOLENGTH
 + xË/ 3 % 
LOGOPATTERNS
][i]);

348 
	`my_mvadd°r
(
y
 + 
i
 + 
py1
, 
x
 + 21, 
cﬂl
[i]);

349 
	`my_mvadd°r
(
y
 + 
i
 + 
py2
, 
x
 + 42, 
ˇr
[i]);

350 
	`my_mvadd°r
(
y
 + 
i
 + 
py3
, 
x
 + 63, 
ˇr
[i]);

352 i‡(
ACCIDENT
 == 1)

354 
	`add_m™
(
y
 + 1, 
x
 + 14);

355 
	`add_m™
(
y
 + 1 + 
py2
, 
x
 + 45);

356 
	`add_m™
(
y
 + 1 + 
py2
, 
x
 + 53);

357 
	`add_m™
(
y
 + 1 + 
py3
, 
x
 + 66);

358 
	`add_m™
(
y
 + 1 + 
py3
, 
x
 + 74);

360 
	`add_smoke
(
y
 - 1, 
x
 + 
LOGOFUNNEL
);

361  
OK
;

362 
	}
}

364 
	$add_D51
(
x
)

366 *
d51
[
D51PATTERNS
][
D51HEIGHT
 + 1] = {

367 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

368 
D51WHL11
, 
D51WHL12
, 
D51WHL13
, 
D51DEL
},

369 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

370 
D51WHL21
, 
D51WHL22
, 
D51WHL23
, 
D51DEL
},

371 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

372 
D51WHL31
, 
D51WHL32
, 
D51WHL33
, 
D51DEL
},

373 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

374 
D51WHL41
, 
D51WHL42
, 
D51WHL43
, 
D51DEL
},

375 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

376 
D51WHL51
, 
D51WHL52
, 
D51WHL53
, 
D51DEL
},

377 {
D51STR1
, 
D51STR2
, 
D51STR3
, 
D51STR4
, 
D51STR5
, 
D51STR6
, 
D51STR7
,

378 
D51WHL61
, 
D51WHL62
, 
D51WHL63
, 
D51DEL
}};

379 *
cﬂl
[
D51HEIGHT
 + 1] = {
COAL01
, 
COAL02
, 
COAL03
, 
COAL04
,

380 
COAL05
, 
COAL06
, 
COAL07
, 
COAL08
,

381 
COAL09
, 
COAL10
, 
COALDEL
};

383 
y
, 
i
, 
dy
 = 0;

385 i‡(
x
 < -
D51LENGTH
)

386  
ERR
;

387 
y
 = 
LINES
 / 2 - 5;

389 i‡(
FLY
 == 1)

391 
y
 = (
x
 / 7Ë+ 
LINES
 - (
COLS
 / 7Ë- 
D51HEIGHT
;

392 
dy
 = 1;

394 
i
 = 0; i <
D51HEIGHT
; ++i)

396 
	`my_mvadd°r
(
y
 + 
i
, 
x
, 
d51
[(
D51LENGTH
 + xË% 
D51PATTERNS
][i]);

397 
	`my_mvadd°r
(
y
 + 
i
 + 
dy
, 
x
 + 53, 
cﬂl
[i]);

399 i‡(
ACCIDENT
 == 1)

401 
	`add_m™
(
y
 + 2, 
x
 + 43);

402 
	`add_m™
(
y
 + 2, 
x
 + 47);

404 
	`add_smoke
(
y
 - 1, 
x
 + 
D51FUNNEL
);

405  
OK
;

406 
	}
}

408 
	$add_C51
(
x
)

410 *
c51
[
C51PATTERNS
][
C51HEIGHT
 + 1] = {

411 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH11
,

412 
C51WH12
, 
C51WH13
, 
C51WH14
, 
C51DEL
},

413 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH21
,

414 
C51WH22
, 
C51WH23
, 
C51WH24
, 
C51DEL
},

415 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH31
,

416 
C51WH32
, 
C51WH33
, 
C51WH34
, 
C51DEL
},

417 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH41
,

418 
C51WH42
, 
C51WH43
, 
C51WH44
, 
C51DEL
},

419 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH51
,

420 
C51WH52
, 
C51WH53
, 
C51WH54
, 
C51DEL
},

421 {
C51STR1
, 
C51STR2
, 
C51STR3
, 
C51STR4
, 
C51STR5
, 
C51STR6
, 
C51STR7
, 
C51WH61
,

422 
C51WH62
, 
C51WH63
, 
C51WH64
, 
C51DEL
}};

423 *
cﬂl
[
C51HEIGHT
 + 1] = {
COALDEL
, 
COAL01
, 
COAL02
, 
COAL03
,

424 
COAL04
, 
COAL05
, 
COAL06
, 
COAL07
,

425 
COAL08
, 
COAL09
, 
COAL10
, 
COALDEL
};

427 
y
, 
i
, 
dy
 = 0;

429 i‡(
x
 < -
C51LENGTH
)

430  
ERR
;

431 
y
 = 
LINES
 / 2 - 5;

433 i‡(
FLY
 == 1)

435 
y
 = (
x
 / 7Ë+ 
LINES
 - (
COLS
 / 7Ë- 
C51HEIGHT
;

436 
dy
 = 1;

438 
i
 = 0; i <
C51HEIGHT
; ++i)

440 
	`my_mvadd°r
(
y
 + 
i
, 
x
, 
c51
[(
C51LENGTH
 + xË% 
C51PATTERNS
][i]);

441 
	`my_mvadd°r
(
y
 + 
i
 + 
dy
, 
x
 + 55, 
cﬂl
[i]);

443 i‡(
ACCIDENT
 == 1)

445 
	`add_m™
(
y
 + 3, 
x
 + 45);

446 
	`add_m™
(
y
 + 3, 
x
 + 49);

448 
	`add_smoke
(
y
 - 1, 
x
 + 
C51FUNNEL
);

449  
OK
;

450 
	}
}

452 
	$add_m™
(
y
, 
x
)

454 *
m™
[2][2] = {{"", "(O)"}, {"Help!", "\\O/"}};

455 
i
;

457 
i
 = 0; i < 2; ++i)

459 
	`my_mvadd°r
(
y
 + 
i
, 
x
, 
m™
[(
LOGOLENGTH
 + x) / 12 % 2][i]);

461 
	}
}

463 
	$add_smoke
(
y
, 
x
)

464 
	#SMOKEPTNS
 16

	)

466 
	ssmokes


468 
y
, 
x
;

469 
±∫
, 
köd
;

470 } 
S
[1000];

471 
sum
 = 0;

472 *
Smoke
[2][
SMOKEPTNS
] = {

477 *
Eø£r
[
SMOKEPTNS
] = {

480 
dy
[
SMOKEPTNS
] = {2, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

481 
dx
[
SMOKEPTNS
] = {-2, -1, 0, 1, 1, 1, 1, 1,

483 
i
;

485 i‡(
x
 % 4 == 0)

487 
i
 = 0; i < 
sum
; ++i)

489 
	`my_mvadd°r
(
S
[
i
].
y
, S[i].
x
, 
Eø£r
[S[i].
±∫
]);

490 
S
[
i
].
y
 -
dy
[S[i].
±∫
];

491 
S
[
i
].
x
 +
dx
[S[i].
±∫
];

492 
S
[
i
].
±∫
 +(S[i].±∫ < 
SMOKEPTNS
 - 1) ? 1 : 0;

493 
	`my_mvadd°r
(
S
[
i
].
y
, S[i].
x
, 
Smoke
[S[i].
köd
][S[i].
±∫
]);

495 
	`my_mvadd°r
(
y
, 
x
, 
Smoke
[
sum
 % 2][0]);

496 
S
[
sum
].
y
 = y;

497 
S
[
sum
].
x
 = x;

498 
S
[
sum
].
±∫
 = 0;

499 
S
[
sum
].
köd
 = sum % 2;

500 
sum
++;

502 
	}
}

	@user/bin/sleep.c

1 
	~<°dio.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

4 
	~<uni°d.h
>

6 
	#SECONDS_TO_MICROSECONDS
 1000000

	)

8 
	$hñp
(
¨gc
, *
¨gv
[])

10 
	`Ârötf
(
°dîr
, "ußge: %†[-u (mi¸£c⁄ds)] <time>\n", 
¨gv
[0]);

11 
	`exô
(1);

12 
	}
}

14 
	$maö
(
¨gc
, *
¨gv
[])

16 i‡(
¨gc
 > 3 ||árgc == 1)

18 
	`hñp
(
¨gc
, 
¨gv
);

21 
uöt64_t
 
tm
 = 0;

23 
u£_u£c
 = 0;

24 i‡(
¨gc
 > 2)

26 i‡(
	`°rcmp
(
¨gv
[1], "-u") == 0)

28 
tm
 = 
	`©oi
(
¨gv
[2]);

29 
u£_u£c
 = 1;

33 
	`hñp
(
¨gc
, 
¨gv
);

37 i‡(!
u£_u£c
)

39 
tm
 = 
	`©oi
(
¨gv
[1]);

40 
tm
 *
SECONDS_TO_MICROSECONDS
;

43  
	`u¶ìp
(
tm
);

44 
	}
}

	@user/bin/stat.c

1 
	~<î∫o.h
>

2 
	~<°dio.h
>

3 
	~<°rög.h
>

4 
	~<sys/°©.h
>

5 
	~<uni°d.h
>

7 c⁄° *
	$mode°r
(
mode
)

9 
mode
)

11 
S_IFCHR
:

13 
S_IFBLK
:

15 
S_IFDIR
:

17 
S_IFREG
:

19 
S_IFLNK
:

24 
	}
}

26 
	$maö
(
¨gc
, **
¨gv
)

28 i‡(
¨gc
 != 2)

30 
	`¥ötf
("usage: stat file\n");

34 
°©_t
 
ss
;

35 
rc
 = 
	`°©
(
¨gv
[1], &
ss
);

36 i‡(
rc
 == -1)

38 
	`¥ötf
("°©: %s\n", 
	`°ªº‹
(
î∫o
));

42 
	`¥ötf
(" Fûe: %s\n", 
¨gv
[1]);

43 
	`¥ötf
(" Ty≥: %s\n", 
	`mode°r
(
ss
.
°_mode
));

44 
	`¥ötf
(" Inode: %d\n", 
ss
.
°_öo
);

45 
	`¥ötf
("Lök cou¡: %d\n", 
ss
.
°_∆ök
);

46 
	`¥ötf
(" Size: %d\n", 
ss
.
°_size
);

47 
	`¥ötf
(" Blocks: %d\n", 
ss
.
°_blocks
);

49 
	}
}

	@user/bin/uname.c

7 
	~<°dio.h
>

8 
	~<sys/ut¢ame.h
>

10 *
	gTAS
 =

22 
doÊag
(
c
);

24 
ut¢ame
 
	gun
;

26 
	$maö
(
¨gc
, **
¨gv
)

28 
ii
;

30 
	`u«me
(&
un
);

32 
ii
 = 1; iò< 
¨gc
; ii++)

34 i‡(
¨gv
[
ii
][0] == '-')

36 *
°r
;

37 
°r
 = &
¨gv
[
ii
][1];

38 *
°r
)

40 i‡(
	`doÊag
(*
°r
++) < 0)

42 
ußge
;

48 i‡(
¨gc
 == 1)

50 
	`doÊag
('s');

52 
	`Ârötf
(
°dout
, "\n");

55 
ußge
:

57 
	}
}

59 
	$doÊag
(
c
)

61 
c
)

64 
	`¥ötf
("%s", 
TAS
);

65 
	`¥ötf
("%†", 
un
.
sy¢ame
);

66 
	`¥ötf
("%†", 
un
.
nodíame
);

67 
	`¥ötf
("%†", 
un
.
ªÀa£
);

68 
	`¥ötf
("%†", 
un
.
vîsi⁄
);

69 
	`¥ötf
("%†", 
un
.
machöe
);

72 
	`¥ötf
("%s", 
un
.
sy¢ame
);

75 
	`¥ötf
("%s", 
un
.
nodíame
);

78 
	`¥ötf
("%s", 
un
.
ªÀa£
);

81 
	`¥ötf
("%s", 
TAS
);

84 
	`¥ötf
("%s", 
un
.
vîsi⁄
);

87 
	`¥ötf
("%s", 
un
.
machöe
);

93 
	}
}

	@user/include/pthread/pthread.h

1 #¥agm®
⁄˚


3 
	g±hªad
;

4 
	g±hªad_c⁄d
;

5 
	g±hªad_muãx
;

7 
±hªad
 *
	t±hªad_t
;

8 
±hªad_muãx
 *
	t±hªad_muãx_t
;

9 
±hªad_c⁄d
 *
	t±hªad_c⁄d_t
;

12 
	t±hªad_©å_t
;

13 
	t±hªad_muãx©å_t
;

14 
	t±hªad_c⁄d©å_t
;

16 
±hªad_˛ónup_p›
();

18 
±hªad_˛ónup_push
((*)(*), *
routöe_¨g
);

20 
	`±hªad_c⁄d_brﬂdˇ°
(
±hªad_c⁄d_t
 *
c⁄d
);

22 
	`±hªad_c⁄d_de°roy
(
±hªad_c⁄d_t
 *
c⁄d
);

24 
	`±hªad_c⁄d_öô
(
±hªad_c⁄d_t
 *
c⁄d
, c⁄° 
±hªad_c⁄d©å_t
 *);

26 
	`±hªad_c⁄d_sig«l
(
±hªad_c⁄d_t
 *
c⁄d
);

28 
	`±hªad_c⁄d_waô
(
±hªad_c⁄d_t
 *
c⁄d
, 
±hªad_muãx_t
 *
mtx
);

30 
	`±hªad_¸óã
(
±hªad_t
 *
thr
, c⁄° 
±hªad_©å_t
 *, *(*)(*),

33 
	`±hªad_dëach
(
±hªad_t
 
thr
);

35 
	`±hªad_equÆ
(
±hªad_t
,Öthread_t);

37 
	`±hªad_exô
(*
ªtvÆ
);

39 
	`±hªad_joö
(
±hªad_t
 
thr
, **
ªtvÆ
);

41 
	`±hªad_muãx_öô
(
±hªad_muãx_t
 *
mtx
, c⁄° 
±hªad_muãx©å_t
 *);

43 
	`±hªad_muãx_lock
(
±hªad_muãx_t
 *
mtx
);

45 
	`±hªad_muãx_åylock
(
±hªad_muãx_t
 *
mtx
);

47 
	`±hªad_muãx_u∆ock
(
±hªad_muãx_t
 *
mtx
);

49 
	`±hªad_yõld
();

51 
	`±hªad_ˇn˚l
(
±hªad_t
 
thr
);

55 
	`±hªad_kûl
(
±hªad_t
 
thr
, );

56 
	`±hªad_£tˇn˚l°©e
(, *);

57 
	`±hªad_£tˇn˚…y≥
(, *);

58 
	`±hªad_ã°ˇn˚l
();

59 
	`±hªad_⁄˚
(
±hªad_⁄˚_t
 *, ( *)());

60 
	`±hªad_c⁄d_timedwaô
(
±hªad_c⁄d_t
 *,

61 
±hªad_muãx_t
 *, c⁄° 
time•ec
 *);

62 *
	`±hªad_gë•ecific
(
±hªad_key_t
);

63 
	`±hªad_key_¸óã
(
±hªad_key_t
 *,

65 
	`±hªad_key_dñëe
(
±hªad_key_t
);

66 
	`±hªad_©f‹k
(( *)(), ( *)(), ( *)());

67 
	`±hªad_©å_de°roy
(
±hªad_©å_t
 *);

68 
	`±hªad_©å_gë°ack
(c⁄° 
±hªad_©å_t
 *,

69 **, 
size_t
 *);

70 
	`±hªad_muãx©å_öô
(
±hªad_muãx©å_t
 *);

71 
	`±hªad_muãx©å_de°roy
(
±hªad_muãx©å_t
 *);

72 
	`±hªad_muãx©å_gëty≥
(
±hªad_muãx©å_t
 *, *);

73 
	`±hªad_muãx©å_£ây≥
(
±hªad_muãx©å_t
 *, );

74 
	`±hªad_muãx_de°roy
(
±hªad_muãx_t
 *);

75 
	`±hªad_©å_gë°acksize
(c⁄° 
±hªad_©å_t
 *, 
size_t
 *);

76 
	`±hªad_©å_gë°ackaddr
(c⁄° 
±hªad_©å_t
 *, **);

77 
	`±hªad_©å_gëgu¨dsize
(c⁄° 
±hªad_©å_t
 *, 
size_t
 *);

78 
	`±hªad_©å_gëdëach°©e
(c⁄° 
±hªad_©å_t
 *, *);

79 
	`±hªad_©å_öô
(
±hªad_©å_t
 *);

80 
	`±hªad_©å_£t°acksize
(
±hªad_©å_t
 *, 
size_t
);

81 
	`±hªad_©å_£t°ack
(
±hªad_©å_t
 *, *, 
size_t
);

82 
	`±hªad_©å_£t°ackaddr
(
±hªad_©å_t
 *, *);

83 
	`±hªad_©å_£tgu¨dsize
(
±hªad_©å_t
 *, 
size_t
);

84 
	`±hªad_©å_£tdëach°©e
(
±hªad_©å_t
 *, );

85 
	`±hªad_c⁄d©å_de°roy
(
±hªad_c⁄d©å_t
 *);

86 
	`±hªad_c⁄d©å_öô
(
±hªad_c⁄d©å_t
 *);

87 
	`±hªad_rwlock_de°roy
(
±hªad_rwlock_t
 *);

88 
	`±hªad_rwlock_öô
(
±hªad_rwlock_t
 *,

89 c⁄° 
±hªad_rwlock©å_t
 *);

90 
	`±hªad_rwlock_rdlock
(
±hªad_rwlock_t
 *);

91 
	`±hªad_rwlock_timedrdlock
(
±hªad_rwlock_t
 *,

92 c⁄° 
time•ec
 *);

93 
	`±hªad_rwlock_timedwæock
(
±hªad_rwlock_t
 *,

94 c⁄° 
time•ec
 *);

95 
	`±hªad_rwlock_åyrdlock
(
±hªad_rwlock_t
 *);

96 
	`±hªad_rwlock_åywæock
(
±hªad_rwlock_t
 *);

97 
	`±hªad_rwlock_u∆ock
(
±hªad_rwlock_t
 *);

98 
	`±hªad_rwlock_wæock
(
±hªad_rwlock_t
 *);

99 
	`±hªad_rwlock©å_öô
(
±hªad_rwlock©å_t
 *);

100 
	`±hªad_rwlock©å_gëpsh¨ed
(c⁄° 
±hªad_rwlock©å_t
 *,

102 
	`±hªad_rwlock©å_£çsh¨ed
(
±hªad_rwlock©å_t
 *, );

103 
	`±hªad_rwlock©å_de°roy
(
±hªad_rwlock©å_t
 *);

104 
±hªad_t
 
	`±hªad_£lf
();

105 
	`±hªad_£t•ecific
(
±hªad_key_t
, const *);

106 
	`±hªad_sigmask
(, c⁄° 
sig£t_t
 *, sigset_t *);

108 
	`±hªad_gë¥io
(
±hªad_t
);

109 
	`±hªad_£çrio
(
±hªad_t
, );

111 
	`±hªad_muãx©å_gë¥io˚ûög
(
±hªad_muãx©å_t
 *,

113 
	`±hªad_muãx©å_£çrio˚ûög
(
±hªad_muãx©å_t
 *,

115 
	`±hªad_muãx_gë¥io˚ûög
(
±hªad_muãx_t
 *, *);

116 
	`±hªad_muãx_£çrio˚ûög
(
±hªad_muãx_t
 *, , *);

118 
	`±hªad_muãx©å_gë¥Ÿocﬁ
(
±hªad_muãx©å_t
 *, *);

119 
	`±hªad_muãx©å_£çrŸocﬁ
(
±hªad_muãx©å_t
 *, );

121 
	`±hªad_©å_gëöhîôsched
(c⁄° 
±hªad_©å_t
 *, *);

122 
	`±hªad_©å_gësched∑øm
(c⁄° 
±hªad_©å_t
 *,

123 
sched_∑øm
 *);

124 
	`±hªad_©å_gëschedpﬁicy
(c⁄° 
±hªad_©å_t
 *, *);

125 
	`±hªad_©å_gësc›e
(c⁄° 
±hªad_©å_t
 *, *);

126 
	`±hªad_©å_£töhîôsched
(
±hªad_©å_t
 *, );

127 
	`±hªad_©å_£tsched∑øm
(
±hªad_©å_t
 *,

128 c⁄° 
sched_∑øm
 *);

129 
	`±hªad_©å_£tschedpﬁicy
(
±hªad_©å_t
 *, );

130 
	`±hªad_©å_£tsc›e
(
±hªad_©å_t
 *, );

131 
	`±hªad_gësched∑øm
(
±hªad_t
 
±hªad
, *,

132 
sched_∑øm
 *);

133 
	`±hªad_£tsched∑øm
(
±hªad_t
, ,

134 c⁄° 
sched_∑øm
 *);

135 
	`±hªad_gëc⁄cuºícy
();

136 
	`±hªad_£tc⁄cuºícy
();

	@user/include/stddef.h

1 #¥agm®
⁄˚


3 
	~"sys/ty≥s.h
"

5 
	#ölöe
 
	`__©åibuã__
((
Æways_ölöe
, 
u£d
))

	)

7 
	#off£tof
(
ty≥
, 
membî
) \

8 ((
uöçå_t
)((*)&((
ty≥
 *)(0))->
membî
 - (*)0))

	)

10 #i‚de‡
MIN


11 
	#MIN
(
a
, 
b
Ë(◊Ë< (bË? (aË: (b))

	)

13 #i‚de‡
MAX


14 
	#MAX
(
a
, 
b
Ë(◊Ë> (bË? (aË: (b))

	)

17 
	#CONTAINER_OF
(
obj
, 
ty≥
, 
membî
) \

18 ((
ty≥
 *)((*)(
obj
)-
	`off£tof
—y≥, 
membî
)))

	)

25 
	#QUOTE_BY_NAME
(
x
Ë#x

	)

26 
	#QUOTE_BY_VALUE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

28 
	#QUOTE
(
x
Ë
	`QUOTE_BY_NAME
(x)

	)

	@user/include/stdio.h

1 #¥agm®
⁄˚


3 
	~"l£ek.h
"

4 
	~"°d¨g.h
"

5 
	~"°ddef.h
"

6 
	~"sys/ty≥s.h
"

9 
	#__IONBF
 1

	)

11 #i‚de‡
EOF


12 
	#EOF
 (-1)

	)

15 #i‚de‡
NULL


16 
	#NULL
 0

	)

22 
	mfd
;

23 
	moff£t
;

24 
	mbuf„r
[8192];

25 } 
	tFILE
;

26 
off_t
 
	tÂos_t
;

27 
FILE
 *
°dö
;

28 
FILE
 *
°dout
;

29 
FILE
 *
°dîr
;

32 
	$¥ötf
(c⁄° *
fmt
, ...Ë
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 1, 2)))

33 
	`__©åibuã__
((
	`__n⁄nuŒ__
(1)));

35 
	$Ârötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, ...)

36 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 3))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

38 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

39 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 3))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

41 
	`fÊush
(
FILE
 *
°ªam
);

43 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

44 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 1, 0))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(1)));

46 
	$vÂrötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

47 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 0))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

49 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

50 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 2, 0))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

53 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

54 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 3, 4))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(3)));

56 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

57 
	`__©åibuã__
((
	$__f‹m©__
(
¥ötf
, 3, 0))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(3)));

59 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

60 
	`__©åibuã__
((
	$__f‹m©__
(
sˇnf
, 2, 3))Ë
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

62 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

63 
	`__©åibuã__
((
	`__n⁄nuŒ__
(2)));

	@user/include/stdlib.h

1 #¥agm®
⁄˚


3 
	~"limôs.h
"

4 
	~"sys/ty≥s.h
"

6 #i‚de‡
NULL


7 
	#NULL
 0

	)

10 #i‚de‡
EXIT_SUCCESS


11 
	#EXIT_SUCCESS
 0

	)

14 #i‚de‡
EXIT_FAILURE


15 
	#EXIT_FAILURE
 1

	)

19 
__©åibuã__
((
n‹ëu∫
)Ë
exô
(
°©us
);

21 
©exô
((*
func
)());

22 
	`_Exô
(
°©us
);

25 
	`©oi
(c⁄° *
vÆ
);

28 
	`©ﬁ
(c⁄° *
vÆ
);

30 
	`©of
(c⁄° *
vÆ
);

32 
	#©oi
(
vÆ
Ë(()
	`°πﬁ
(vÆ, 
NULL
, 10))

	)

33 
	#©ﬁ
(
vÆ
Ë
	`°πﬁ
(vÆ, 
NULL
, 10)

	)

34 
	#©ﬁf
(
vÆ
Ë
	`°πof
(vÆ, 
NULL
)

	)

36 
	`°πﬁ
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

38 
	`°πﬁl
(c⁄° *
≈å
, **
íd±r
, 
ba£
);

40 
	`°πod
(c⁄° *
≈å
, **
íd±r
);

42 
	`°πof
(c⁄° *
≈å
, **
íd±r
);

44 
	`°πﬁd
(c⁄° *
≈å
, **
íd±r
);

48 *
	`mÆloc
(
size_t
 
size
);

50 
	`‰ì
(*
±r
);

52 *
	`ªÆloc
(*
±r
, 
size_t
 
size
);

54 *
	`ˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
);

56 
	#RAND_MAX
 
INT_MAX


	)

58 
	`ønd
();

60 
	`§™d
(
£ed
);

	@user/include/string.h

1 #¥agm®
⁄˚


3 
	~"î∫o.h
"

4 
	~"°ddef.h
"

7 *
memchr
(c⁄° *, , 
size_t
);

8 
memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

10 *
mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

12 *
memmove
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

14 *
mem£t
(*
s
, 
c
, 
size_t
 
cou¡
);

16 *
°r˝y
(*
de°
, c⁄° *
§c
);

18 *
°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
);

20 *
°rˇt
(*
de°
, c⁄° *
§c
);

22 *
°∫ˇt
(*, c⁄° *, 
size_t
);

24 
°rcmp
(c⁄° *
cs
, c⁄° *
˘
);

26 
°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
);

28 *
°rchr
(c⁄° *
s
, 
c
);

30 *
°ºchr
(c⁄° *
s
, 
c
);

32 
size_t
 
°r•n
(c⁄° *
s
, c⁄° *
ac˚±
);

34 
size_t
 
°rc•n
(const *, const *);

36 *
°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
);

38 *
°r°r
(c⁄° *
s1
, c⁄° *
s2
);

40 
size_t
 
°æí
(c⁄° *
s
);

42 *
°ªº‹
(
î∫um
);

44 *
°πok
(*
s
, c⁄° *
£p£t
);

47 
size_t
 
°∫Àn
(c⁄° *
s
, size_à
cou¡
);

	@user/include/test/test.h

1 #¥agm®
⁄˚


3 #i‚de‡
__KERNEL__


5 
	~"sys/ty≥s.h
"

6 
	~"uni°d.h
"

9 
	~"ty≥s.h
"

12 
	~<°d¨g.h
>

14 
	#ã°_as£π
(
ex¥
, 
fmt
, 
¨gs
...) \

15 
	`_ã°_as£π
(
ex¥
, 
__FILE__
, 
__LINE__
, #ex¥, 
fmt
, ##
¨gs
)

	)

17 #i‚de‡
__KERNEL__


18 
	#ã°_f‹k_begö
() \

21 
pid_t
 
__ã°_pid
 = 
	`f‹k
(); \

22 i‡(0 =
__ã°_pid
) \

24 do

	)

26 
	#ã°_f‹k_íd
(
°©us
) \

29 
	`exô
(0); \

31 
	`waôpid
(
__ã°_pid
, 
°©us
, 0); \

34 ;

	)

37 
ã°_öô
();

39 
ã°_föi
();

41 c⁄° *
ã°_îr°r
(
îr
);

43 (*
	tã°_∑ss_func_t
)(
	tvÆ
, c⁄° *
	tfûe
, 
	tlöe
,

44 c⁄° *
	t«me
, c⁄° *
	tfmt
,

45 
	tva_li°
 
	t¨gs
);

47 (*
	tã°_Áû_func_t
)(c⁄° *
	tfûe
, 
	tlöe
, c⁄° *
	t«me
,

48 c⁄° *
	tfmt
, 
	tva_li°
 
	t¨gs
);

50 
	`_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

51 c⁄° *
fmt
, ...);

	@user/include/unistd.h

4 #¥agm®
⁄˚


6 
	~"l£ek.h
"

7 
	~"°d¨g.h
"

8 
	~"sys/°©.h
"

9 
	~"sys/ty≥s.h
"

10 
	~"wìnix/c⁄fig.h
"

12 #i‚de‡
NULL


13 
	#NULL
 0

	)

16 
	gdúít
;

19 
f‹k
();

21 
exe˛
(c⁄° *
fûíame
, c⁄° *
¨g
, ...);

22 
exe˛e
(c⁄° *
fûíame
, c⁄° *
¨g
, ...);

23 
execv
(c⁄° *
fûíame
, *c⁄° 
¨gv
[]);

24 
execve
(c⁄° *
fûíame
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[]);

27 
pid_t
 
waô
(*
°©us
);

29 
pid_t
 
waôpid
’id_à
pid
, *
°©us
, 
›ti⁄s
);

31 
thr_exô
(
°©us
);

33 
thr_î∫o
();

35 
thr_£t_î∫o
(
n
);

37 
sched_yõld
();

39 
pid_t
 
gëpid
();

41 
hÆt
();

43 
sync
();

45 
size_t
 
gë_‰ì_mem
();

48 
›í
(c⁄° *
fûíame
, 
Êags
, 
mode
);

50 
˛o£
(
fd
);

52 
ssize_t
 
ªad
(
fd
, *
buf
, 
size_t
 
cou¡
);

54 
ssize_t
 
wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
cou¡
);

56 
off_t
 
l£ek
(
fd
, off_à
off£t
, 
whí˚
);

58 
dup
(
fd
);

60 
dup2
(
ofd
, 
nfd
);

62 
mkdú
(c⁄° *
∑th
, 
mode
);

64 
rmdú
(c⁄° *
∑th
);

66 
u∆ök
(c⁄° *
∑th
);

68 
lök
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

70 
ª«me
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
);

72 
chdú
(c⁄° *
∑th
);

74 
gëdíts
(
fd
, 
dúít
 *
dú
, 
size_t
 
size
);

76 
°©
(c⁄° *
∑th
, °© *
buf
);

78 
pùe
(
pùefd
[2]);

81 *
mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
);

83 
munm≠
(*
addr
, 
size_t
 
Àn
);

85 
brk
(*
addr
);

87 *
sbrk
(
öçå_t
 
ö¸
);

90 
mou¡
(c⁄° *
sour˚
, c⁄° *
èrgë
, c⁄° *
fûesy°emty≥
,

91 
mou¡Êags
, c⁄° *
d©a
);

93 
umou¡
(c⁄° *
èrgë
);

95 
time_t
 
time
—ime_à*
éoc
);

97 
u¶ìp
(
u£c⁄ds_t
 
u£c
);

99 
	#STDIN_FILENO
 0

	)

100 
	#STDOUT_FILENO
 1

	)

101 
	#STDERR_FILENO
 2

	)

	@user/include/weenix/debug.h

1 
	~"°dio.h
"

3 
debug
(c⁄° *
°r
);

5 
	#dbg
(
fmt
, 
¨gs
...) \

8 
ãmp
[2048]; \

9 
	`¢¥ötf
(
ãmp
, —emp), "%s:%d %s(): " 
fmt
, 
__FILE__
, 
__LINE__
, \

10 
__func__
, ##
¨gs
); \

11 
	`debug
(
ãmp
); \

12 } 0);

	)

	@user/include/weenix/trap.h

1 #¥agm®
⁄˚


3 
	~"î∫o.h
"

4 
	~"°ddef.h
"

5 
	~"sys/ty≥s.h
"

6 
	~"wìnix/sysˇŒ.h
"

8 
	#TRAP_INTR_STRING
 
	`QUOTE
(
INTR_SYSCALL
)

	)

14 
ölöe
 
ssize_t
 
	$å≠
(
ssize_t
 
num
, ssize_à
¨g
)

16 
ssize_t
 
ªt
;

17 
__asm__
 vﬁ©ûe("öà$" 
TRAP_INTR_STRING


18 : "˜"(
ªt
)

19 : "a"(
num
), "d"(
¨g
));

22 
__asm__
 vﬁ©ûe("öà$" 
TRAP_INTR_STRING


23 : "˜"(
î∫o
)

24 : "a"(
SYS_î∫o
));

25  
ªt
;

26 
	}
}

	@user/lib/ld-weenix/asm.h

19 #i‚de‡
_ASM_H


20 
	#_ASM_H
 1

	)

23 
	#ALIGNARG
(
log2
Ë1 << 
	)
log2

24 
	#ASM_SIZE_DIRECTIVE
(
«me
Ë.
size
Çame, .-Çame;

	)

27 
	#ENTRY
(
«me
) \

28 .
globl
 
«me
; \

29 .
ty≥
 
«me
, @
fun˘i⁄
; \

30 .
Æign
 
	`ALIGNARG
(4); \

31 
«me
## :.
cfi_°¨çroc
;

	)

33 
	#END
(
«me
) \

34 .
cfi_íd¥oc
; \

35 
	`ASM_SIZE_DIRECTIVE
(
«me
)

	)

	@user/lib/ld-weenix/elf.h

20 #¥agm®
⁄˚


26 #ifde‡
__KERNEL__


27 
	~"ty≥s.h
"

30 
	~<sys/ty≥s.h
>

35 
uöt16_t
 
	tElf32_HÆf
;

36 
uöt16_t
 
	tElf64_HÆf
;

39 
uöt32_t
 
	tElf32_W‹d
;

40 
öt32_t
 
	tElf32_Sw‹d
;

41 
uöt32_t
 
	tElf64_W‹d
;

42 
öt32_t
 
	tElf64_Sw‹d
;

45 
uöt64_t
 
	tElf32_Xw‹d
;

46 
öt64_t
 
	tElf32_Sxw‹d
;

47 
uöt64_t
 
	tElf64_Xw‹d
;

48 
öt64_t
 
	tElf64_Sxw‹d
;

51 
uöt32_t
 
	tElf32_Addr
;

52 
uöt64_t
 
	tElf64_Addr
;

55 
uöt32_t
 
	tElf32_Off
;

56 
uöt64_t
 
	tElf64_Off
;

59 
uöt16_t
 
	tElf32_Se˘i⁄
;

60 
uöt16_t
 
	tElf64_Se˘i⁄
;

63 
Elf32_HÆf
 
	tElf32_Vîsym
;

64 
Elf64_HÆf
 
	tElf64_Vîsym
;

68 
	#EI_NIDENT
 (16)

	)

72 
	me_idít
[
EI_NIDENT
];

73 
Elf32_HÆf
 
	me_ty≥
;

74 
Elf32_HÆf
 
	me_machöe
;

75 
Elf32_W‹d
 
	me_vîsi⁄
;

76 
Elf32_Addr
 
	me_íåy
;

77 
Elf32_Off
 
	me_phoff
;

78 
Elf32_Off
 
	me_shoff
;

79 
Elf32_W‹d
 
	me_Êags
;

80 
Elf32_HÆf
 
	me_ehsize
;

81 
Elf32_HÆf
 
	me_phítsize
;

82 
Elf32_HÆf
 
	me_phnum
;

83 
Elf32_HÆf
 
	me_shítsize
;

84 
Elf32_HÆf
 
	me_shnum
;

85 
Elf32_HÆf
 
	me_sh°∫dx
;

86 } 
	tElf32_Ehdr
;

90 
	me_idít
[
EI_NIDENT
];

91 
Elf64_HÆf
 
	me_ty≥
;

92 
Elf64_HÆf
 
	me_machöe
;

93 
Elf64_W‹d
 
	me_vîsi⁄
;

94 
Elf64_Addr
 
	me_íåy
;

95 
Elf64_Off
 
	me_phoff
;

96 
Elf64_Off
 
	me_shoff
;

97 
Elf64_W‹d
 
	me_Êags
;

98 
Elf64_HÆf
 
	me_ehsize
;

99 
Elf64_HÆf
 
	me_phítsize
;

100 
Elf64_HÆf
 
	me_phnum
;

101 
Elf64_HÆf
 
	me_shítsize
;

102 
Elf64_HÆf
 
	me_shnum
;

103 
Elf64_HÆf
 
	me_sh°∫dx
;

104 } 
	tElf64_Ehdr
;

110 
	#EI_MAG0
 0

	)

111 
	#ELFMAG0
 0x7‡

	)

113 
	#EI_MAG1
 1

	)

114 
	#ELFMAG1
 'E'

	)

116 
	#EI_MAG2
 2

	)

117 
	#ELFMAG2
 'L'

	)

119 
	#EI_MAG3
 3

	)

120 
	#ELFMAG3
 'F'

	)

123 
	#ELFMAG
 "\177ELF"

	)

124 
	#SELFMAG
 4

	)

126 
	#EI_CLASS
 4

	)

127 
	#ELFCLASSNONE
 0

	)

128 
	#ELFCLASS32
 1

	)

129 
	#ELFCLASS64
 2

	)

130 
	#ELFCLASSNUM
 3

	)

132 
	#EI_DATA
 5

	)

133 
	#ELFDATANONE
 0

	)

134 
	#ELFDATA2LSB
 1

	)

135 
	#ELFDATA2MSB
 2

	)

136 
	#ELFDATANUM
 3

	)

138 
	#EI_VERSION
 6

	)

141 
	#EI_OSABI
 7

	)

142 
	#ELFOSABI_NONE
 0

	)

143 
	#ELFOSABI_SYSV
 0

	)

144 
	#ELFOSABI_HPUX
 1

	)

145 
	#ELFOSABI_NETBSD
 2

	)

146 
	#ELFOSABI_LINUX
 3

	)

147 
	#ELFOSABI_SOLARIS
 6

	)

148 
	#ELFOSABI_AIX
 7

	)

149 
	#ELFOSABI_IRIX
 8

	)

150 
	#ELFOSABI_FREEBSD
 9

	)

151 
	#ELFOSABI_TRU64
 10

	)

152 
	#ELFOSABI_MODESTO
 11

	)

153 
	#ELFOSABI_OPENBSD
 12

	)

154 
	#ELFOSABI_ARM
 97

	)

155 
	#ELFOSABI_STANDALONE
 255

	)

157 
	#EI_ABIVERSION
 8

	)

159 
	#EI_PAD
 9

	)

163 
	#ET_NONE
 0

	)

164 
	#ET_REL
 1

	)

165 
	#ET_EXEC
 2

	)

166 
	#ET_DYN
 3

	)

167 
	#ET_CORE
 4

	)

168 
	#ET_NUM
 5

	)

169 
	#ET_LOOS
 0x„00

	)

170 
	#ET_HIOS
 0x„f‡

	)

171 
	#ET_LOPROC
 0xff00

	)

172 
	#ET_HIPROC
 0xfff‡

	)

176 
	#EM_NONE
 0

	)

177 
	#EM_M32
 1

	)

178 
	#EM_SPARC
 2

	)

179 
	#EM_386
 3

	)

180 
	#EM_68K
 4

	)

181 
	#EM_88K
 5

	)

182 
	#EM_860
 7

	)

183 
	#EM_MIPS
 8

	)

184 
	#EM_S370
 9

	)

185 
	#EM_MIPS_RS3_LE
 10

	)

187 
	#EM_PARISC
 15

	)

188 
	#EM_VPP500
 17

	)

189 
	#EM_SPARC32PLUS
 18

	)

190 
	#EM_960
 19

	)

191 
	#EM_PPC
 20

	)

192 
	#EM_PPC64
 21

	)

193 
	#EM_S390
 22

	)

195 
	#EM_V800
 36

	)

196 
	#EM_FR20
 37

	)

197 
	#EM_RH32
 38

	)

198 
	#EM_RCE
 39

	)

199 
	#EM_ARM
 40

	)

200 
	#EM_FAKE_ALPHA
 41

	)

201 
	#EM_SH
 42

	)

202 
	#EM_SPARCV9
 43

	)

203 
	#EM_TRICORE
 44

	)

204 
	#EM_ARC
 45

	)

205 
	#EM_H8_300
 46

	)

206 
	#EM_H8_300H
 47

	)

207 
	#EM_H8S
 48

	)

208 
	#EM_H8_500
 49

	)

209 
	#EM_IA_64
 50

	)

210 
	#EM_MIPS_X
 51

	)

211 
	#EM_COLDFIRE
 52

	)

212 
	#EM_68HC12
 53

	)

213 
	#EM_MMA
 54

	)

214 
	#EM_PCP
 55

	)

215 
	#EM_NCPU
 56

	)

216 
	#EM_NDR1
 57

	)

217 
	#EM_STARCORE
 58

	)

218 
	#EM_ME16
 59

	)

219 
	#EM_ST100
 60

	)

220 
	#EM_TINYJ
 61

	)

221 
	#EM_X86_64
 62

	)

222 
	#EM_PDSP
 63

	)

224 
	#EM_FX66
 66

	)

225 
	#EM_ST9PLUS
 67

	)

226 
	#EM_ST7
 68

	)

227 
	#EM_68HC16
 69

	)

228 
	#EM_68HC11
 70

	)

229 
	#EM_68HC08
 71

	)

230 
	#EM_68HC05
 72

	)

231 
	#EM_SVX
 73

	)

232 
	#EM_ST19
 74

	)

233 
	#EM_VAX
 75

	)

234 
	#EM_CRIS
 76

	)

235 
	#EM_JAVELIN
 77

	)

236 
	#EM_FIREPATH
 78

	)

237 
	#EM_ZSP
 79

	)

238 
	#EM_MMIX
 80

	)

239 
	#EM_HUANY
 81

	)

240 
	#EM_PRISM
 82

	)

241 
	#EM_AVR
 83

	)

242 
	#EM_FR30
 84

	)

243 
	#EM_D10V
 85

	)

244 
	#EM_D30V
 86

	)

245 
	#EM_V850
 87

	)

246 
	#EM_M32R
 88

	)

247 
	#EM_MN10300
 89

	)

248 
	#EM_MN10200
 90

	)

249 
	#EM_PJ
 91

	)

250 
	#EM_OPENRISC
 92

	)

251 
	#EM_ARC_A5
 93

	)

252 
	#EM_XTENSA
 94

	)

253 
	#EM_NUM
 95

	)

259 
	#EM_ALPHA
 0x9026

	)

263 
	#EV_NONE
 0

	)

264 
	#EV_CURRENT
 1

	)

265 
	#EV_NUM
 2

	)

271 
Elf32_W‹d
 
	msh_«me
;

272 
Elf32_W‹d
 
	msh_ty≥
;

273 
Elf32_W‹d
 
	msh_Êags
;

274 
Elf32_Addr
 
	msh_addr
;

275 
Elf32_Off
 
	msh_off£t
;

276 
Elf32_W‹d
 
	msh_size
;

277 
Elf32_W‹d
 
	msh_lök
;

278 
Elf32_W‹d
 
	msh_öfo
;

279 
Elf32_W‹d
 
	msh_addølign
;

280 
Elf32_W‹d
 
	msh_ítsize
;

281 } 
	tElf32_Shdr
;

285 
Elf64_W‹d
 
	msh_«me
;

286 
Elf64_W‹d
 
	msh_ty≥
;

287 
Elf64_Xw‹d
 
	msh_Êags
;

288 
Elf64_Addr
 
	msh_addr
;

289 
Elf64_Off
 
	msh_off£t
;

290 
Elf64_Xw‹d
 
	msh_size
;

291 
Elf64_W‹d
 
	msh_lök
;

292 
Elf64_W‹d
 
	msh_öfo
;

293 
Elf64_Xw‹d
 
	msh_addølign
;

294 
Elf64_Xw‹d
 
	msh_ítsize
;

295 } 
	tElf64_Shdr
;

299 
	#SHN_UNDEF
 0

	)

300 
	#SHN_LORESERVE
 0xff00

	)

301 
	#SHN_LOPROC
 0xff00

	)

302 
	#SHN_BEFORE
 \

303 0xff00

	)

305 
	#SHN_AFTER
 \

306 0xff01

	)

308 
	#SHN_HIPROC
 0xff1‡

	)

309 
	#SHN_LOOS
 0xff20

	)

310 
	#SHN_HIOS
 0xff3‡

	)

311 
	#SHN_ABS
 0xfff1

	)

312 
	#SHN_COMMON
 0xfff2

	)

313 
	#SHN_XINDEX
 0xfff‡

	)

314 
	#SHN_HIRESERVE
 0xfff‡

	)

318 
	#SHT_NULL
 0

	)

319 
	#SHT_PROGBITS
 1

	)

320 
	#SHT_SYMTAB
 2

	)

321 
	#SHT_STRTAB
 3

	)

322 
	#SHT_RELA
 4

	)

323 
	#SHT_HASH
 5

	)

324 
	#SHT_DYNAMIC
 6

	)

325 
	#SHT_NOTE
 7

	)

326 
	#SHT_NOBITS
 8

	)

327 
	#SHT_REL
 9

	)

328 
	#SHT_SHLIB
 10

	)

329 
	#SHT_DYNSYM
 11

	)

330 
	#SHT_INIT_ARRAY
 14

	)

331 
	#SHT_FINI_ARRAY
 15

	)

332 
	#SHT_PREINIT_ARRAY
 16

	)

333 
	#SHT_GROUP
 17

	)

334 
	#SHT_SYMTAB_SHNDX
 18

	)

335 
	#SHT_NUM
 19

	)

336 
	#SHT_LOOS
 0x60000000

	)

337 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

338 
	#SHT_CHECKSUM
 0x6ffffff8

	)

339 
	#SHT_LOSUNW
 0x6fffffÁ

	)

340 
	#SHT_SUNW_move
 0x6fffffÁ

	)

341 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

342 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

343 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

344 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

345 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

346 
	#SHT_HISUNW
 0x6ffffff‡

	)

347 
	#SHT_HIOS
 0x6ffffff‡

	)

348 
	#SHT_LOPROC
 0x70000000

	)

349 
	#SHT_HIPROC
 0x7ffffff‡

	)

350 
	#SHT_LOUSER
 0x80000000

	)

351 
	#SHT_HIUSER
 0x8ffffff‡

	)

355 
	#SHF_WRITE
 (1 << 0Ë

	)

356 
	#SHF_ALLOC
 (1 << 1Ë

	)

357 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

358 
	#SHF_MERGE
 (1 << 4Ë

	)

359 
	#SHF_STRINGS
 (1 << 5Ë

	)

360 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

361 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

362 
	#SHF_OS_NONCONFORMING
 \

363 (1 << 8Ë

	)

365 
	#SHF_GROUP
 (1 << 9Ë

	)

366 
	#SHF_TLS
 (1 << 10Ë

	)

367 
	#SHF_MASKOS
 0x0ff00000

	)

368 
	#SHF_MASKPROC
 0xf0000000

	)

369 
	#SHF_ORDERED
 \

370 (1 << 30Ë

	)

372 
	#SHF_EXCLUDE
 \

373 (1 << 31Ë

	)

377 
	#GRP_COMDAT
 0x1

	)

383 
Elf32_W‹d
 
	m°_«me
;

384 
Elf32_Addr
 
	m°_vÆue
;

385 
Elf32_W‹d
 
	m°_size
;

386 
	m°_öfo
;

387 
	m°_Ÿhî
;

388 
Elf32_Se˘i⁄
 
	m°_shndx
;

389 } 
	tElf32_Sym
;

393 
Elf64_W‹d
 
	m°_«me
;

394 
	m°_öfo
;

395 
	m°_Ÿhî
;

396 
Elf64_Se˘i⁄
 
	m°_shndx
;

397 
Elf64_Addr
 
	m°_vÆue
;

398 
Elf64_Xw‹d
 
	m°_size
;

399 } 
	tElf64_Sym
;

406 
Elf32_HÆf
 
	msi_boundto
;

407 
Elf32_HÆf
 
	msi_Êags
;

408 } 
	tElf32_Symöfo
;

412 
Elf64_HÆf
 
	msi_boundto
;

413 
Elf64_HÆf
 
	msi_Êags
;

414 } 
	tElf64_Symöfo
;

417 
	#SYMINFO_BT_SELF
 0xfff‡

	)

418 
	#SYMINFO_BT_PARENT
 0xff„

	)

419 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

422 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

423 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

424 
	#SYMINFO_FLG_COPY
 0x0004

	)

425 
	#SYMINFO_FLG_LAZYLOAD
 \

426 0x0008

	)

428 
	#SYMINFO_NONE
 0

	)

429 
	#SYMINFO_CURRENT
 1

	)

430 
	#SYMINFO_NUM
 2

	)

434 
	#ELF32_ST_BIND
(
vÆ
Ë((()(vÆ)Ë>> 4)

	)

435 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆ)&0xf)

	)

436 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥)&0xf))

	)

439 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
(vÆ)

	)

440 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
(vÆ)

	)

441 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
((böd), (ty≥))

	)

445 
	#STB_LOCAL
 0

	)

446 
	#STB_GLOBAL
 1

	)

447 
	#STB_WEAK
 2

	)

448 
	#STB_NUM
 3

	)

449 
	#STB_LOOS
 10

	)

450 
	#STB_HIOS
 12

	)

451 
	#STB_LOPROC
 13

	)

452 
	#STB_HIPROC
 15

	)

456 
	#STT_NOTYPE
 0

	)

457 
	#STT_OBJECT
 1

	)

458 
	#STT_FUNC
 2

	)

459 
	#STT_SECTION
 3

	)

460 
	#STT_FILE
 4

	)

461 
	#STT_COMMON
 5

	)

462 
	#STT_TLS
 6

	)

463 
	#STT_NUM
 7

	)

464 
	#STT_LOOS
 10

	)

465 
	#STT_HIOS
 12

	)

466 
	#STT_LOPROC
 13

	)

467 
	#STT_HIPROC
 15

	)

473 
	#STN_UNDEF
 0

	)

477 
	#ELF32_ST_VISIBILITY
(
o
Ë((o)&0x03)

	)

480 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
(o)

	)

483 
	#STV_DEFAULT
 0

	)

484 
	#STV_INTERNAL
 1

	)

485 
	#STV_HIDDEN
 2

	)

486 
	#STV_PROTECTED
 3

	)

492 
Elf32_Addr
 
	mr_off£t
;

493 
Elf32_W‹d
 
	mr_öfo
;

494 } 
	tElf32_Rñ
;

503 
Elf64_Addr
 
	mr_off£t
;

504 
Elf64_Xw‹d
 
	mr_öfo
;

505 } 
	tElf64_Rñ
;

511 
Elf32_Addr
 
	mr_off£t
;

512 
Elf32_W‹d
 
	mr_öfo
;

513 
Elf32_Sw‹d
 
	mr_addíd
;

514 } 
	tElf32_Rña
;

518 
Elf64_Addr
 
	mr_off£t
;

519 
Elf64_Xw‹d
 
	mr_öfo
;

520 
Elf64_Sxw‹d
 
	mr_addíd
;

521 } 
	tElf64_Rña
;

525 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

526 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆ)&0xff)

	)

527 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥)&0xff))

	)

529 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

530 
	#ELF64_R_TYPE
(
i
Ë((i)&0xffffffff)

	)

531 
	#ELF64_R_INFO
(
sym
, 
ty≥
Ë((((
Elf64_Xw‹d
)(sym)Ë<< 32Ë+ (ty≥))

	)

537 
Elf32_W‹d
 
	mp_ty≥
;

538 
Elf32_Off
 
	mp_off£t
;

539 
Elf32_Addr
 
	mp_vaddr
;

540 
Elf32_Addr
 
	mp_∑ddr
;

541 
Elf32_W‹d
 
	mp_fûesz
;

542 
Elf32_W‹d
 
	mp_memsz
;

543 
Elf32_W‹d
 
	mp_Êags
;

544 
Elf32_W‹d
 
	mp_Æign
;

545 } 
	tElf32_Phdr
;

549 
Elf64_W‹d
 
	mp_ty≥
;

550 
Elf64_W‹d
 
	mp_Êags
;

551 
Elf64_Off
 
	mp_off£t
;

552 
Elf64_Addr
 
	mp_vaddr
;

553 
Elf64_Addr
 
	mp_∑ddr
;

554 
Elf64_Xw‹d
 
	mp_fûesz
;

555 
Elf64_Xw‹d
 
	mp_memsz
;

556 
Elf64_Xw‹d
 
	mp_Æign
;

557 } 
	tElf64_Phdr
;

561 
	#PT_NULL
 0

	)

562 
	#PT_LOAD
 1

	)

563 
	#PT_DYNAMIC
 2

	)

564 
	#PT_INTERP
 3

	)

565 
	#PT_NOTE
 4

	)

566 
	#PT_SHLIB
 5

	)

567 
	#PT_PHDR
 6

	)

568 
	#PT_TLS
 7

	)

569 
	#PT_NUM
 8

	)

570 
	#PT_LOOS
 0x60000000

	)

571 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

572 
	#PT_GNU_STACK
 0x6474e551

	)

573 
	#PT_GNU_RELRO
 0x6474e552

	)

574 
	#PT_LOSUNW
 0x6fffffÁ

	)

575 
	#PT_SUNWBSS
 0x6fffffÁ

	)

576 
	#PT_SUNWSTACK
 0x6ffffffb

	)

577 
	#PT_HISUNW
 0x6fffffff

	)

578 
	#PT_HIOS
 0x6ffffff‡

	)

579 
	#PT_LOPROC
 0x70000000

	)

580 
	#PT_HIPROC
 0x7ffffff‡

	)

584 
	#PF_X
 (1 << 0Ë

	)

585 
	#PF_W
 (1 << 1Ë

	)

586 
	#PF_R
 (1 << 2Ë

	)

587 
	#PF_MASKOS
 0x0ff00000

	)

588 
	#PF_MASKPROC
 0xf0000000

	)

592 
	#NT_PRSTATUS
 1

	)

593 
	#NT_FPREGSET
 2

	)

594 
	#NT_PRPSINFO
 3

	)

595 
	#NT_PRXREG
 4

	)

596 
	#NT_TASKSTRUCT
 4

	)

597 
	#NT_PLATFORM
 5

	)

598 
	#NT_AUXV
 6

	)

599 
	#NT_GWINDOWS
 7

	)

600 
	#NT_ASRS
 8

	)

601 
	#NT_PSTATUS
 10

	)

602 
	#NT_PSINFO
 13

	)

603 
	#NT_PRCRED
 14

	)

604 
	#NT_UTSNAME
 15

	)

605 
	#NT_LWPSTATUS
 16

	)

606 
	#NT_LWPSINFO
 17

	)

607 
	#NT_PRFPXREG
 20

	)

611 
	#NT_VERSION
 1

	)

617 
Elf32_Sw‹d
 
	md_èg
;

619 
Elf32_W‹d
 
	md_vÆ
;

620 
Elf32_Addr
 
	md_±r
;

621 } 
	md_un
;

622 } 
	tElf32_Dyn
;

626 
Elf64_Sxw‹d
 
	md_èg
;

628 
Elf64_Xw‹d
 
	md_vÆ
;

629 
Elf64_Addr
 
	md_±r
;

630 } 
	md_un
;

631 } 
	tElf64_Dyn
;

635 
	#DT_NULL
 0

	)

636 
	#DT_NEEDED
 1

	)

637 
	#DT_PLTRELSZ
 2

	)

638 
	#DT_PLTGOT
 3

	)

639 
	#DT_HASH
 4

	)

640 
	#DT_STRTAB
 5

	)

641 
	#DT_SYMTAB
 6

	)

642 
	#DT_RELA
 7

	)

643 
	#DT_RELASZ
 8

	)

644 
	#DT_RELAENT
 9

	)

645 
	#DT_STRSZ
 10

	)

646 
	#DT_SYMENT
 11

	)

647 
	#DT_INIT
 12

	)

648 
	#DT_FINI
 13

	)

649 
	#DT_SONAME
 14

	)

650 
	#DT_RPATH
 15

	)

651 
	#DT_SYMBOLIC
 16

	)

652 
	#DT_REL
 17

	)

653 
	#DT_RELSZ
 18

	)

654 
	#DT_RELENT
 19

	)

655 
	#DT_PLTREL
 20

	)

656 
	#DT_DEBUG
 21

	)

657 
	#DT_TEXTREL
 22

	)

658 
	#DT_JMPREL
 23

	)

659 
	#DT_BIND_NOW
 24

	)

660 
	#DT_INIT_ARRAY
 25

	)

661 
	#DT_FINI_ARRAY
 26

	)

662 
	#DT_INIT_ARRAYSZ
 27

	)

663 
	#DT_FINI_ARRAYSZ
 28

	)

664 
	#DT_RUNPATH
 29

	)

665 
	#DT_FLAGS
 30

	)

666 
	#DT_ENCODING
 32

	)

667 
	#DT_PREINIT_ARRAY
 32

	)

668 
	#DT_PREINIT_ARRAYSZ
 33

	)

669 
	#DT_NUM
 34

	)

670 
	#DT_LOOS
 0x6000000d

	)

671 
	#DT_HIOS
 0x6ffff000

	)

672 
	#DT_LOPROC
 0x70000000

	)

673 
	#DT_HIPROC
 0x7ffffff‡

	)

674 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

679 
	#DT_VALRNGLO
 0x6ffffd00

	)

680 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

681 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

682 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

683 
	#DT_CHECKSUM
 0x6ffffdf8

	)

684 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

685 
	#DT_MOVEENT
 0x6ffffdÁ

	)

686 
	#DT_MOVESZ
 0x6ffffdfb

	)

687 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

688 
	#DT_POSFLAG_1
 \

689 0x6ffffdfd

	)

691 
	#DT_SYMINSZ
 0x6ffffd„

	)

692 
	#DT_SYMINENT
 0x6ffffdf‡

	)

693 
	#DT_VALRNGHI
 0x6ffffdff

	)

694 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

695 
	#DT_VALNUM
 12

	)

702 
	#DT_ADDRRNGLO
 0x6fff„00

	)

703 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

704 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

705 
	#DT_CONFIG
 0x6fff„Á

	)

706 
	#DT_DEPAUDIT
 0x6fff„fb

	)

707 
	#DT_AUDIT
 0x6fff„f¯

	)

708 
	#DT_PLTPAD
 0x6fff„fd

	)

709 
	#DT_MOVETAB
 0x6fff„„

	)

710 
	#DT_SYMINFO
 0x6fff„f‡

	)

711 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

712 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

713 
	#DT_ADDRNUM
 10

	)

717 
	#DT_VERSYM
 0x6ffffff0

	)

719 
	#DT_RELACOUNT
 0x6ffffff9

	)

720 
	#DT_RELCOUNT
 0x6fffffÁ

	)

723 
	#DT_FLAGS_1
 0x6ffffffb

	)

724 
	#DT_VERDEF
 \

725 0x6ffffff¯

	)

727 
	#DT_VERDEFNUM
 0x6ffffffd

	)

728 
	#DT_VERNEED
 \

729 0x6fffff„

	)

731 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

732 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

733 
	#DT_VERSIONTAGNUM
 16

	)

737 
	#DT_AUXILIARY
 0x7ffffffd

	)

738 
	#DT_FILTER
 0x7ffffff‡

	)

739 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
Ë- ((
Elf32_Sw‹d
)—agË<< 1 >> 1Ë- 1)

	)

740 
	#DT_EXTRANUM
 3

	)

743 
	#DF_ORIGIN
 0x00000001

	)

744 
	#DF_SYMBOLIC
 0x00000002

	)

745 
	#DF_TEXTREL
 0x00000004

	)

746 
	#DF_BIND_NOW
 0x00000008

	)

747 
	#DF_STATIC_TLS
 0x00000010

	)

751 
	#DF_1_NOW
 0x00000001

	)

752 
	#DF_1_GLOBAL
 0x00000002

	)

753 
	#DF_1_GROUP
 0x00000004

	)

754 
	#DF_1_NODELETE
 0x00000008

	)

755 
	#DF_1_LOADFLTR
 0x00000010

	)

756 
	#DF_1_INITFIRST
 0x00000020

	)

757 
	#DF_1_NOOPEN
 0x00000040

	)

758 
	#DF_1_ORIGIN
 0x00000080

	)

759 
	#DF_1_DIRECT
 0x00000100

	)

760 
	#DF_1_TRANS
 0x00000200

	)

761 
	#DF_1_INTERPOSE
 0x00000400

	)

762 
	#DF_1_NODEFLIB
 0x00000800

	)

763 
	#DF_1_NODUMP
 0x00001000

	)

764 
	#DF_1_CONFALT
 0x00002000

	)

765 
	#DF_1_ENDFILTEE
 0x00004000

	)

766 
	#DF_1_DISPRELDNE
 0x00008000

	)

767 
	#DF_1_DISPRELPND
 0x00010000

	)

770 
	#DTF_1_PARINIT
 0x00000001

	)

771 
	#DTF_1_CONFEXP
 0x00000002

	)

774 
	#DF_P1_LAZYLOAD
 0x00000001

	)

775 
	#DF_P1_GROUPPERM
 \

776 0x00000002

	)

783 
Elf32_HÆf
 
	mvd_vîsi⁄
;

784 
Elf32_HÆf
 
	mvd_Êags
;

785 
Elf32_HÆf
 
	mvd_ndx
;

786 
Elf32_HÆf
 
	mvd_˙t
;

787 
Elf32_W‹d
 
	mvd_hash
;

788 
Elf32_W‹d
 
	mvd_aux
;

789 
Elf32_W‹d
 
	mvd_√xt
;

791 } 
	tElf32_Vîdef
;

795 
Elf64_HÆf
 
	mvd_vîsi⁄
;

796 
Elf64_HÆf
 
	mvd_Êags
;

797 
Elf64_HÆf
 
	mvd_ndx
;

798 
Elf64_HÆf
 
	mvd_˙t
;

799 
Elf64_W‹d
 
	mvd_hash
;

800 
Elf64_W‹d
 
	mvd_aux
;

801 
Elf64_W‹d
 
	mvd_√xt
;

803 } 
	tElf64_Vîdef
;

806 
	#VER_DEF_NONE
 0

	)

807 
	#VER_DEF_CURRENT
 1

	)

808 
	#VER_DEF_NUM
 2

	)

811 
	#VER_FLG_BASE
 0x1

	)

812 
	#VER_FLG_WEAK
 0x2

	)

815 
	#VER_NDX_LOCAL
 0

	)

816 
	#VER_NDX_GLOBAL
 1

	)

817 
	#VER_NDX_LORESERVE
 0xff00

	)

818 
	#VER_NDX_ELIMINATE
 0xff01

	)

824 
Elf32_W‹d
 
	mvda_«me
;

825 
Elf32_W‹d
 
	mvda_√xt
;

827 } 
	tElf32_Vîdaux
;

831 
Elf64_W‹d
 
	mvda_«me
;

832 
Elf64_W‹d
 
	mvda_√xt
;

834 } 
	tElf64_Vîdaux
;

840 
Elf32_HÆf
 
	mvn_vîsi⁄
;

841 
Elf32_HÆf
 
	mvn_˙t
;

842 
Elf32_W‹d
 
	mvn_fûe
;

844 
Elf32_W‹d
 
	mvn_aux
;

845 
Elf32_W‹d
 
	mvn_√xt
;

847 } 
	tElf32_Vî√ed
;

851 
Elf64_HÆf
 
	mvn_vîsi⁄
;

852 
Elf64_HÆf
 
	mvn_˙t
;

853 
Elf64_W‹d
 
	mvn_fûe
;

855 
Elf64_W‹d
 
	mvn_aux
;

856 
Elf64_W‹d
 
	mvn_√xt
;

858 } 
	tElf64_Vî√ed
;

861 
	#VER_NEED_NONE
 0

	)

862 
	#VER_NEED_CURRENT
 1

	)

863 
	#VER_NEED_NUM
 2

	)

869 
Elf32_W‹d
 
	mv«_hash
;

870 
Elf32_HÆf
 
	mv«_Êags
;

871 
Elf32_HÆf
 
	mv«_Ÿhî
;

872 
Elf32_W‹d
 
	mv«_«me
;

873 
Elf32_W‹d
 
	mv«_√xt
;

875 } 
	tElf32_Vî«ux
;

879 
Elf64_W‹d
 
	mv«_hash
;

880 
Elf64_HÆf
 
	mv«_Êags
;

881 
Elf64_HÆf
 
	mv«_Ÿhî
;

882 
Elf64_W‹d
 
	mv«_«me
;

883 
Elf64_W‹d
 
	mv«_√xt
;

885 } 
	tElf64_Vî«ux
;

888 
	#VER_FLG_WEAK
 0x2

	)

901 
	ma_ty≥
;

903 
	ma_vÆ
;

904 *
	ma_±r
;

905 (*
	ma_f˙
)();

906 } 
	ma_un
;

907 } 
	tElf32_auxv_t
;

911 
	ma_ty≥
;

913 
	ma_vÆ
;

914 *
	ma_±r
;

915 (*
	ma_f˙
)();

916 } 
	ma_un
;

917 } 
	tElf64_auxv_t
;

921 
	#AT_NULL
 0

	)

922 
	#AT_IGNORE
 1

	)

923 
	#AT_EXECFD
 2

	)

924 
	#AT_PHDR
 3

	)

925 
	#AT_PHENT
 4

	)

926 
	#AT_PHNUM
 5

	)

927 
	#AT_PAGESZ
 6

	)

928 
	#AT_BASE
 7

	)

929 
	#AT_FLAGS
 8

	)

930 
	#AT_ENTRY
 9

	)

931 
	#AT_NOTELF
 10

	)

932 
	#AT_UID
 11

	)

933 
	#AT_EUID
 12

	)

934 
	#AT_GID
 13

	)

935 
	#AT_EGID
 14

	)

936 
	#AT_CLKTCK
 17

	)

939 
	#AT_PLATFORM
 15

	)

940 
	#AT_HWCAP
 \

941 16

	)

946 
	#AT_FPUCW
 18

	)

949 
	#AT_DCACHEBSIZE
 19

	)

950 
	#AT_ICACHEBSIZE
 20

	)

951 
	#AT_UCACHEBSIZE
 21

	)

955 
	#AT_IGNOREPPC
 22

	)

957 
	#AT_SECURE
 23

	)

961 
	#AT_SYSINFO
 32

	)

962 
	#AT_SYSINFO_EHDR
 33

	)

966 
	#AT_L1I_CACHESHAPE
 34

	)

967 
	#AT_L1D_CACHESHAPE
 35

	)

968 
	#AT_L2_CACHESHAPE
 36

	)

969 
	#AT_L3_CACHESHAPE
 37

	)

976 
Elf32_W‹d
 
	mn_«mesz
;

977 
Elf32_W‹d
 
	mn_descsz
;

978 
Elf32_W‹d
 
	mn_ty≥
;

979 } 
	tElf32_Nhdr
;

983 
Elf64_W‹d
 
	mn_«mesz
;

984 
Elf64_W‹d
 
	mn_descsz
;

985 
Elf64_W‹d
 
	mn_ty≥
;

986 } 
	tElf64_Nhdr
;

991 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

994 
	#ELF_NOTE_GNU
 "GNU"

	)

999 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1009 
	#ELF_NOTE_ABI
 1

	)

1013 
	#ELF_NOTE_OS_LINUX
 0

	)

1014 
	#ELF_NOTE_OS_GNU
 1

	)

1015 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1016 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1021 
Elf32_Xw‹d
 
	mm_vÆue
;

1022 
Elf32_W‹d
 
	mm_öfo
;

1023 
Elf32_W‹d
 
	mm_poff£t
;

1024 
Elf32_HÆf
 
	mm_ª≥©
;

1025 
Elf32_HÆf
 
	mm_°ride
;

1026 } 
	tElf32_Move
;

1030 
Elf64_Xw‹d
 
	mm_vÆue
;

1031 
Elf64_Xw‹d
 
	mm_öfo
;

1032 
Elf64_Xw‹d
 
	mm_poff£t
;

1033 
Elf64_HÆf
 
	mm_ª≥©
;

1034 
Elf64_HÆf
 
	mm_°ride
;

1035 } 
	tElf64_Move
;

1038 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1039 
	#ELF32_M_SIZE
(
öfo
Ë(()(öfo))

	)

1040 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ ()(size))

	)

1042 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
(öfo)

	)

1043 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
(öfo)

	)

1044 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
(sym, size)

	)

1049 
	#EF_CPU32
 0x00810000

	)

1053 
	#R_68K_NONE
 0

	)

1054 
	#R_68K_32
 1

	)

1055 
	#R_68K_16
 2

	)

1056 
	#R_68K_8
 3

	)

1057 
	#R_68K_PC32
 4

	)

1058 
	#R_68K_PC16
 5

	)

1059 
	#R_68K_PC8
 6

	)

1060 
	#R_68K_GOT32
 7

	)

1061 
	#R_68K_GOT16
 8

	)

1062 
	#R_68K_GOT8
 9

	)

1063 
	#R_68K_GOT32O
 10

	)

1064 
	#R_68K_GOT16O
 11

	)

1065 
	#R_68K_GOT8O
 12

	)

1066 
	#R_68K_PLT32
 13

	)

1067 
	#R_68K_PLT16
 14

	)

1068 
	#R_68K_PLT8
 15

	)

1069 
	#R_68K_PLT32O
 16

	)

1070 
	#R_68K_PLT16O
 17

	)

1071 
	#R_68K_PLT8O
 18

	)

1072 
	#R_68K_COPY
 19

	)

1073 
	#R_68K_GLOB_DAT
 20

	)

1074 
	#R_68K_JMP_SLOT
 21

	)

1075 
	#R_68K_RELATIVE
 22

	)

1077 
	#R_68K_NUM
 23

	)

1083 
	#R_386_NONE
 0

	)

1084 
	#R_386_32
 1

	)

1085 
	#R_386_PC32
 2

	)

1086 
	#R_386_GOT32
 3

	)

1087 
	#R_386_PLT32
 4

	)

1088 
	#R_386_COPY
 5

	)

1089 
	#R_386_GLOB_DAT
 6

	)

1090 
	#R_386_JMP_SLOT
 7

	)

1091 
	#R_386_RELATIVE
 8

	)

1092 
	#R_386_GOTOFF
 9

	)

1093 
	#R_386_GOTPC
 10

	)

1094 
	#R_386_32PLT
 11

	)

1095 
	#R_386_TLS_TPOFF
 14

	)

1096 
	#R_386_TLS_IE
 \

1097 15

	)

1099 
	#R_386_TLS_GOTIE
 \

1100 16

	)

1102 
	#R_386_TLS_LE
 \

1103 17

	)

1105 
	#R_386_TLS_GD
 \

1106 18

	)

1108 
	#R_386_TLS_LDM
 \

1109 19

	)

1112 
	#R_386_16
 20

	)

1113 
	#R_386_PC16
 21

	)

1114 
	#R_386_8
 22

	)

1115 
	#R_386_PC8
 23

	)

1116 
	#R_386_TLS_GD_32
 \

1117 24

	)

1119 
	#R_386_TLS_GD_PUSH
 25

	)

1120 
	#R_386_TLS_GD_CALL
 \

1121 26

	)

1123 
	#R_386_TLS_GD_POP
 27

	)

1124 
	#R_386_TLS_LDM_32
 \

1125 28

	)

1127 
	#R_386_TLS_LDM_PUSH
 29

	)

1128 
	#R_386_TLS_LDM_CALL
 \

1129 30

	)

1131 
	#R_386_TLS_LDM_POP
 31

	)

1132 
	#R_386_TLS_LDO_32
 32

	)

1133 
	#R_386_TLS_IE_32
 \

1134 33

	)

1136 
	#R_386_TLS_LE_32
 \

1137 34

	)

1139 
	#R_386_TLS_DTPMOD32
 35

	)

1140 
	#R_386_TLS_DTPOFF32
 36

	)

1141 
	#R_386_TLS_TPOFF32
 37

	)

1143 
	#R_386_NUM
 38

	)

1149 
	#STT_SPARC_REGISTER
 13

	)

1153 
	#EF_SPARCV9_MM
 3

	)

1154 
	#EF_SPARCV9_TSO
 0

	)

1155 
	#EF_SPARCV9_PSO
 1

	)

1156 
	#EF_SPARCV9_RMO
 2

	)

1157 
	#EF_SPARC_LEDATA
 0x800000

	)

1158 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1159 
	#EF_SPARC_32PLUS
 0x000100

	)

1160 
	#EF_SPARC_SUN_US1
 0x000200

	)

1161 
	#EF_SPARC_HAL_R1
 0x000400

	)

1162 
	#EF_SPARC_SUN_US3
 0x000800

	)

1166 
	#R_SPARC_NONE
 0

	)

1167 
	#R_SPARC_8
 1

	)

1168 
	#R_SPARC_16
 2

	)

1169 
	#R_SPARC_32
 3

	)

1170 
	#R_SPARC_DISP8
 4

	)

1171 
	#R_SPARC_DISP16
 5

	)

1172 
	#R_SPARC_DISP32
 6

	)

1173 
	#R_SPARC_WDISP30
 7

	)

1174 
	#R_SPARC_WDISP22
 8

	)

1175 
	#R_SPARC_HI22
 9

	)

1176 
	#R_SPARC_22
 10

	)

1177 
	#R_SPARC_13
 11

	)

1178 
	#R_SPARC_LO10
 12

	)

1179 
	#R_SPARC_GOT10
 13

	)

1180 
	#R_SPARC_GOT13
 14

	)

1181 
	#R_SPARC_GOT22
 15

	)

1182 
	#R_SPARC_PC10
 16

	)

1183 
	#R_SPARC_PC22
 17

	)

1184 
	#R_SPARC_WPLT30
 18

	)

1185 
	#R_SPARC_COPY
 19

	)

1186 
	#R_SPARC_GLOB_DAT
 20

	)

1187 
	#R_SPARC_JMP_SLOT
 21

	)

1188 
	#R_SPARC_RELATIVE
 22

	)

1189 
	#R_SPARC_UA32
 23

	)

1193 
	#R_SPARC_PLT32
 24

	)

1194 
	#R_SPARC_HIPLT22
 25

	)

1195 
	#R_SPARC_LOPLT10
 26

	)

1196 
	#R_SPARC_PCPLT32
 27

	)

1197 
	#R_SPARC_PCPLT22
 28

	)

1198 
	#R_SPARC_PCPLT10
 29

	)

1199 
	#R_SPARC_10
 30

	)

1200 
	#R_SPARC_11
 31

	)

1201 
	#R_SPARC_64
 32

	)

1202 
	#R_SPARC_OLO10
 33

	)

1203 
	#R_SPARC_HH22
 34

	)

1204 
	#R_SPARC_HM10
 35

	)

1205 
	#R_SPARC_LM22
 36

	)

1206 
	#R_SPARC_PC_HH22
 37

	)

1207 
	#R_SPARC_PC_HM10
 38

	)

1208 
	#R_SPARC_PC_LM22
 39

	)

1209 
	#R_SPARC_WDISP16
 40

	)

1210 
	#R_SPARC_WDISP19
 41

	)

1211 
	#R_SPARC_7
 43

	)

1212 
	#R_SPARC_5
 44

	)

1213 
	#R_SPARC_6
 45

	)

1214 
	#R_SPARC_DISP64
 46

	)

1215 
	#R_SPARC_PLT64
 47

	)

1216 
	#R_SPARC_HIX22
 48

	)

1217 
	#R_SPARC_LOX10
 49

	)

1218 
	#R_SPARC_H44
 50

	)

1219 
	#R_SPARC_M44
 51

	)

1220 
	#R_SPARC_L44
 52

	)

1221 
	#R_SPARC_REGISTER
 53

	)

1222 
	#R_SPARC_UA64
 54

	)

1223 
	#R_SPARC_UA16
 55

	)

1224 
	#R_SPARC_TLS_GD_HI22
 56

	)

1225 
	#R_SPARC_TLS_GD_LO10
 57

	)

1226 
	#R_SPARC_TLS_GD_ADD
 58

	)

1227 
	#R_SPARC_TLS_GD_CALL
 59

	)

1228 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1229 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1230 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1231 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1232 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1233 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1234 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1235 
	#R_SPARC_TLS_IE_HI22
 67

	)

1236 
	#R_SPARC_TLS_IE_LO10
 68

	)

1237 
	#R_SPARC_TLS_IE_LD
 69

	)

1238 
	#R_SPARC_TLS_IE_LDX
 70

	)

1239 
	#R_SPARC_TLS_IE_ADD
 71

	)

1240 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1241 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1242 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1243 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1244 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1245 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1246 
	#R_SPARC_TLS_TPOFF32
 78

	)

1247 
	#R_SPARC_TLS_TPOFF64
 79

	)

1249 
	#R_SPARC_NUM
 80

	)

1253 
	#DT_SPARC_REGISTER
 0x70000001

	)

1254 
	#DT_SPARC_NUM
 2

	)

1258 
	#HWCAP_SPARC_FLUSH
 1

	)

1259 
	#HWCAP_SPARC_STBAR
 2

	)

1260 
	#HWCAP_SPARC_SWAP
 4

	)

1261 
	#HWCAP_SPARC_MULDIV
 8

	)

1262 
	#HWCAP_SPARC_V9
 16

	)

1263 
	#HWCAP_SPARC_ULTRA3
 32

	)

1269 
	#EF_MIPS_NOREORDER
 1

	)

1270 
	#EF_MIPS_PIC
 2

	)

1271 
	#EF_MIPS_CPIC
 4

	)

1272 
	#EF_MIPS_XGOT
 8

	)

1273 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1274 
	#EF_MIPS_ABI2
 32

	)

1275 
	#EF_MIPS_ABI_ON32
 64

	)

1276 
	#EF_MIPS_ARCH
 0xf0000000

	)

1280 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1281 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1282 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1283 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1284 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1285 
	#EF_MIPS_ARCH_32
 0x60000000

	)

1286 
	#EF_MIPS_ARCH_64
 0x70000000

	)

1290 
	#E_MIPS_ARCH_1
 0x00000000

	)

1291 
	#E_MIPS_ARCH_2
 0x10000000

	)

1292 
	#E_MIPS_ARCH_3
 0x20000000

	)

1293 
	#E_MIPS_ARCH_4
 0x30000000

	)

1294 
	#E_MIPS_ARCH_5
 0x40000000

	)

1295 
	#E_MIPS_ARCH_32
 0x60000000

	)

1296 
	#E_MIPS_ARCH_64
 0x70000000

	)

1300 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1301 
	#SHN_MIPS_TEXT
 0xff01

	)

1302 
	#SHN_MIPS_DATA
 0xff02

	)

1303 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1304 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1308 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1309 
	#SHT_MIPS_MSYM
 0x70000001

	)

1310 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1311 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1312 
	#SHT_MIPS_UCODE
 0x70000004

	)

1313 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1314 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1315 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1316 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1317 
	#SHT_MIPS_RELD
 0x70000009

	)

1318 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1319 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1320 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1321 
	#SHT_MIPS_SHDR
 0x70000010

	)

1322 
	#SHT_MIPS_FDESC
 0x70000011

	)

1323 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1324 
	#SHT_MIPS_DENSE
 0x70000013

	)

1325 
	#SHT_MIPS_PDESC
 0x70000014

	)

1326 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1327 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1328 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1329 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1330 
	#SHT_MIPS_LINE
 0x70000019

	)

1331 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1332 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1333 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1334 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1335 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1336 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1337 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1338 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1339 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1340 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1341 
	#SHT_MIPS_XLATE
 0x70000024

	)

1342 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1343 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1344 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1345 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1346 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1350 
	#SHF_MIPS_GPREL
 0x10000000

	)

1351 
	#SHF_MIPS_MERGE
 0x20000000

	)

1352 
	#SHF_MIPS_ADDR
 0x40000000

	)

1353 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1354 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1355 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1356 
	#SHF_MIPS_NAMES
 0x02000000

	)

1357 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1362 
	#STO_MIPS_DEFAULT
 0x0

	)

1363 
	#STO_MIPS_INTERNAL
 0x1

	)

1364 
	#STO_MIPS_HIDDEN
 0x2

	)

1365 
	#STO_MIPS_PROTECTED
 0x3

	)

1366 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1369 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1376 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1377 
Elf32_W‹d
 
	mgt_unu£d
;

1378 } 
	mgt_hódî
;

1381 
Elf32_W‹d
 
	mgt_g_vÆue
;

1382 
Elf32_W‹d
 
	mgt_byãs
;

1383 } 
	mgt_íåy
;

1384 } 
	tElf32_g±ab
;

1390 
Elf32_W‹d
 
	mri_g¥mask
;

1391 
Elf32_W‹d
 
	mri_˝rmask
[4];

1392 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1393 } 
	tElf32_RegInfo
;

1399 
	mköd
;

1401 
	msize
;

1402 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1404 
Elf32_W‹d
 
	möfo
;

1405 } 
	tElf_O±i⁄s
;

1409 
	#ODK_NULL
 0

	)

1410 
	#ODK_REGINFO
 1

	)

1411 
	#ODK_EXCEPTIONS
 2

	)

1412 
	#ODK_PAD
 3

	)

1413 
	#ODK_HWPATCH
 4

	)

1414 
	#ODK_FILL
 5

	)

1415 
	#ODK_TAGS
 6

	)

1416 
	#ODK_HWAND
 7

	)

1417 
	#ODK_HWOR
 8

	)

1421 
	#OEX_FPU_MIN
 0x1‡

	)

1422 
	#OEX_FPU_MAX
 0x1f00

	)

1423 
	#OEX_PAGE0
 0x10000

	)

1424 
	#OEX_SMM
 0x20000

	)

1425 
	#OEX_FPDBUG
 0x40000

	)

1426 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1427 
	#OEX_DISMISS
 0x80000

	)

1429 
	#OEX_FPU_INVAL
 0x10

	)

1430 
	#OEX_FPU_DIV0
 0x08

	)

1431 
	#OEX_FPU_OFLO
 0x04

	)

1432 
	#OEX_FPU_UFLO
 0x02

	)

1433 
	#OEX_FPU_INEX
 0x01

	)

1437 
	#OHW_R4KEOP
 0x1

	)

1438 
	#OHW_R8KPFETCH
 0x2

	)

1439 
	#OHW_R5KEOP
 0x4

	)

1440 
	#OHW_R5KCVTL
 0x8

	)

1442 
	#OPAD_PREFIX
 0x1

	)

1443 
	#OPAD_POSTFIX
 0x2

	)

1444 
	#OPAD_SYMBOL
 0x4

	)

1450 
Elf32_W‹d
 
	mhwp_Êags1
;

1451 
Elf32_W‹d
 
	mhwp_Êags2
;

1452 } 
	tElf_O±i⁄s_Hw
;

1456 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1457 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1461 
	#R_MIPS_NONE
 0

	)

1462 
	#R_MIPS_16
 1

	)

1463 
	#R_MIPS_32
 2

	)

1464 
	#R_MIPS_REL32
 3

	)

1465 
	#R_MIPS_26
 4

	)

1466 
	#R_MIPS_HI16
 5

	)

1467 
	#R_MIPS_LO16
 6

	)

1468 
	#R_MIPS_GPREL16
 7

	)

1469 
	#R_MIPS_LITERAL
 8

	)

1470 
	#R_MIPS_GOT16
 9

	)

1471 
	#R_MIPS_PC16
 10

	)

1472 
	#R_MIPS_CALL16
 11

	)

1473 
	#R_MIPS_GPREL32
 12

	)

1475 
	#R_MIPS_SHIFT5
 16

	)

1476 
	#R_MIPS_SHIFT6
 17

	)

1477 
	#R_MIPS_64
 18

	)

1478 
	#R_MIPS_GOT_DISP
 19

	)

1479 
	#R_MIPS_GOT_PAGE
 20

	)

1480 
	#R_MIPS_GOT_OFST
 21

	)

1481 
	#R_MIPS_GOT_HI16
 22

	)

1482 
	#R_MIPS_GOT_LO16
 23

	)

1483 
	#R_MIPS_SUB
 24

	)

1484 
	#R_MIPS_INSERT_A
 25

	)

1485 
	#R_MIPS_INSERT_B
 26

	)

1486 
	#R_MIPS_DELETE
 27

	)

1487 
	#R_MIPS_HIGHER
 28

	)

1488 
	#R_MIPS_HIGHEST
 29

	)

1489 
	#R_MIPS_CALL_HI16
 30

	)

1490 
	#R_MIPS_CALL_LO16
 31

	)

1491 
	#R_MIPS_SCN_DISP
 32

	)

1492 
	#R_MIPS_REL16
 33

	)

1493 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1494 
	#R_MIPS_PJUMP
 35

	)

1495 
	#R_MIPS_RELGOT
 36

	)

1496 
	#R_MIPS_JALR
 37

	)

1498 
	#R_MIPS_NUM
 38

	)

1502 
	#PT_MIPS_REGINFO
 0x70000000

	)

1503 
	#PT_MIPS_RTPROC
 0x70000001

	)

1504 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1508 
	#PF_MIPS_LOCAL
 0x10000000

	)

1512 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1513 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1514 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1515 
	#DT_MIPS_IVERSION
 0x70000004

	)

1516 
	#DT_MIPS_FLAGS
 0x70000005

	)

1517 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1518 
	#DT_MIPS_MSYM
 0x70000007

	)

1519 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1520 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1521 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1522 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1523 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1524 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1525 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1526 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1527 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1528 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1529 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1530 
	#DT_MIPS_DELTA_CLASS_NO
 \

1531 0x70000018

	)

1533 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1534 
	#DT_MIPS_DELTA_INSTANCE_NO
 \

1535 0x7000001®

	)

1537 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1538 
	#DT_MIPS_DELTA_RELOC_NO
 \

1539 0x7000001¯

	)

1541 
	#DT_MIPS_DELTA_SYM
 \

1542 0x7000001d

	)

1544 
	#DT_MIPS_DELTA_SYM_NO
 \

1545 0x7000001ê

	)

1547 
	#DT_MIPS_DELTA_CLASSSYM
 \

1548 0x70000020

	)

1550 
	#DT_MIPS_DELTA_CLASSSYM_NO
 \

1551 0x70000021

	)

1553 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1554 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1555 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1556 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1557 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1558 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1559 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1560 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1561 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1562 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1563 
	#DT_MIPS_INTERFACE_SIZE
 \

1564 0x7000002¯

	)

1566 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 \

1567 0x7000002d

	)

1569 
	#DT_MIPS_PERF_SUFFIX
 \

1570 0x7000002ê

	)

1572 
	#DT_MIPS_COMPACT_SIZE
 \

1573 0x7000002‡

	)

1575 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1576 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1577 
	#DT_MIPS_NUM
 0x32

	)

1581 
	#RHF_NONE
 0

	)

1582 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

1583 
	#RHF_NOTPOT
 (1 << 1Ë

	)

1584 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

1585 
	#RHF_NO_MOVE
 (1 << 3)

	)

1586 
	#RHF_SGI_ONLY
 (1 << 4)

	)

1587 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

1588 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

1589 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

1590 
	#RHF_PIXIE
 (1 << 8)

	)

1591 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

1592 
	#RHF_REQUICKSTART
 (1 << 10)

	)

1593 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

1594 
	#RHF_CORD
 (1 << 12)

	)

1595 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

1596 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

1602 
Elf32_W‹d
 
	ml_«me
;

1603 
Elf32_W‹d
 
	ml_time_°amp
;

1604 
Elf32_W‹d
 
	ml_checksum
;

1605 
Elf32_W‹d
 
	ml_vîsi⁄
;

1606 
Elf32_W‹d
 
	ml_Êags
;

1607 } 
	tElf32_Lib
;

1611 
Elf64_W‹d
 
	ml_«me
;

1612 
Elf64_W‹d
 
	ml_time_°amp
;

1613 
Elf64_W‹d
 
	ml_checksum
;

1614 
Elf64_W‹d
 
	ml_vîsi⁄
;

1615 
Elf64_W‹d
 
	ml_Êags
;

1616 } 
	tElf64_Lib
;

1620 
	#LL_NONE
 0

	)

1621 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

1622 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

1623 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

1624 
	#LL_EXPORTS
 (1 << 3)

	)

1625 
	#LL_DELAY_LOAD
 (1 << 4)

	)

1626 
	#LL_DELTA
 (1 << 5)

	)

1630 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

1636 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

1637 
	#EF_PARISC_EXT
 0x00020000

	)

1638 
	#EF_PARISC_LSB
 0x00040000

	)

1639 
	#EF_PARISC_WIDE
 0x00080000

	)

1640 
	#EF_PARISC_NO_KABP
 \

1641 0x00100000

	)

1643 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

1644 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

1648 
	#EFA_PARISC_1_0
 0x020b

	)

1649 
	#EFA_PARISC_1_1
 0x0210

	)

1650 
	#EFA_PARISC_2_0
 0x0214

	)

1654 
	#SHN_PARISC_ANSI_COMMON
 \

1655 0xff00

	)

1657 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

1661 
	#SHT_PARISC_EXT
 0x70000000

	)

1662 
	#SHT_PARISC_UNWIND
 0x70000001

	)

1663 
	#SHT_PARISC_DOC
 0x70000002

	)

1667 
	#SHF_PARISC_SHORT
 0x20000000

	)

1668 
	#SHF_PARISC_HUGE
 0x40000000

	)

1669 
	#SHF_PARISC_SBP
 0x80000000

	)

1673 
	#STT_PARISC_MILLICODE
 13

	)

1675 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

1676 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

1680 
	#R_PARISC_NONE
 0

	)

1681 
	#R_PARISC_DIR32
 1

	)

1682 
	#R_PARISC_DIR21L
 2

	)

1683 
	#R_PARISC_DIR17R
 3

	)

1684 
	#R_PARISC_DIR17F
 4

	)

1685 
	#R_PARISC_DIR14R
 6

	)

1686 
	#R_PARISC_PCREL32
 9

	)

1687 
	#R_PARISC_PCREL21L
 10

	)

1688 
	#R_PARISC_PCREL17R
 11

	)

1689 
	#R_PARISC_PCREL17F
 12

	)

1690 
	#R_PARISC_PCREL14R
 14

	)

1691 
	#R_PARISC_DPREL21L
 18

	)

1692 
	#R_PARISC_DPREL14R
 22

	)

1693 
	#R_PARISC_GPREL21L
 26

	)

1694 
	#R_PARISC_GPREL14R
 30

	)

1695 
	#R_PARISC_LTOFF21L
 34

	)

1696 
	#R_PARISC_LTOFF14R
 38

	)

1697 
	#R_PARISC_SECREL32
 41

	)

1698 
	#R_PARISC_SEGBASE
 48

	)

1699 
	#R_PARISC_SEGREL32
 49

	)

1700 
	#R_PARISC_PLTOFF21L
 50

	)

1701 
	#R_PARISC_PLTOFF14R
 54

	)

1702 
	#R_PARISC_LTOFF_FPTR32
 57

	)

1703 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

1704 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

1705 
	#R_PARISC_FPTR64
 64

	)

1706 
	#R_PARISC_PLABEL32
 65

	)

1707 
	#R_PARISC_PLABEL21L
 66

	)

1708 
	#R_PARISC_PLABEL14R
 70

	)

1709 
	#R_PARISC_PCREL64
 72

	)

1710 
	#R_PARISC_PCREL22F
 74

	)

1711 
	#R_PARISC_PCREL14WR
 75

	)

1712 
	#R_PARISC_PCREL14DR
 76

	)

1713 
	#R_PARISC_PCREL16F
 77

	)

1714 
	#R_PARISC_PCREL16WF
 78

	)

1715 
	#R_PARISC_PCREL16DF
 79

	)

1716 
	#R_PARISC_DIR64
 80

	)

1717 
	#R_PARISC_DIR14WR
 83

	)

1718 
	#R_PARISC_DIR14DR
 84

	)

1719 
	#R_PARISC_DIR16F
 85

	)

1720 
	#R_PARISC_DIR16WF
 86

	)

1721 
	#R_PARISC_DIR16DF
 87

	)

1722 
	#R_PARISC_GPREL64
 88

	)

1723 
	#R_PARISC_GPREL14WR
 91

	)

1724 
	#R_PARISC_GPREL14DR
 92

	)

1725 
	#R_PARISC_GPREL16F
 93

	)

1726 
	#R_PARISC_GPREL16WF
 94

	)

1727 
	#R_PARISC_GPREL16DF
 95

	)

1728 
	#R_PARISC_LTOFF64
 96

	)

1729 
	#R_PARISC_LTOFF14WR
 99

	)

1730 
	#R_PARISC_LTOFF14DR
 100

	)

1731 
	#R_PARISC_LTOFF16F
 101

	)

1732 
	#R_PARISC_LTOFF16WF
 102

	)

1733 
	#R_PARISC_LTOFF16DF
 103

	)

1734 
	#R_PARISC_SECREL64
 104

	)

1735 
	#R_PARISC_SEGREL64
 112

	)

1736 
	#R_PARISC_PLTOFF14WR
 115

	)

1737 
	#R_PARISC_PLTOFF14DR
 116

	)

1738 
	#R_PARISC_PLTOFF16F
 117

	)

1739 
	#R_PARISC_PLTOFF16WF
 118

	)

1740 
	#R_PARISC_PLTOFF16DF
 119

	)

1741 
	#R_PARISC_LTOFF_FPTR64
 120

	)

1742 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

1743 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

1744 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

1745 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

1746 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

1747 
	#R_PARISC_LORESERVE
 128

	)

1748 
	#R_PARISC_COPY
 128

	)

1749 
	#R_PARISC_IPLT
 129

	)

1750 
	#R_PARISC_EPLT
 130

	)

1751 
	#R_PARISC_TPREL32
 153

	)

1752 
	#R_PARISC_TPREL21L
 154

	)

1753 
	#R_PARISC_TPREL14R
 158

	)

1754 
	#R_PARISC_LTOFF_TP21L
 162

	)

1755 
	#R_PARISC_LTOFF_TP14R
 166

	)

1756 
	#R_PARISC_LTOFF_TP14F
 167

	)

1757 
	#R_PARISC_TPREL64
 216

	)

1758 
	#R_PARISC_TPREL14WR
 219

	)

1759 
	#R_PARISC_TPREL14DR
 220

	)

1760 
	#R_PARISC_TPREL16F
 221

	)

1761 
	#R_PARISC_TPREL16WF
 222

	)

1762 
	#R_PARISC_TPREL16DF
 223

	)

1763 
	#R_PARISC_LTOFF_TP64
 224

	)

1764 
	#R_PARISC_LTOFF_TP14WR
 227

	)

1765 
	#R_PARISC_LTOFF_TP14DR
 228

	)

1766 
	#R_PARISC_LTOFF_TP16F
 229

	)

1767 
	#R_PARISC_LTOFF_TP16WF
 230

	)

1768 
	#R_PARISC_LTOFF_TP16DF
 231

	)

1769 
	#R_PARISC_HIRESERVE
 255

	)

1773 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

1774 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

1775 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

1776 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

1777 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

1778 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

1779 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

1780 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

1781 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

1782 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

1783 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

1784 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

1785 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

1786 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

1787 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

1789 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

1790 
	#PT_PARISC_UNWIND
 0x70000001

	)

1794 
	#PF_PARISC_SBP
 0x08000000

	)

1796 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

1797 
	#PF_HP_FAR_SHARED
 0x00200000

	)

1798 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

1799 
	#PF_HP_CODE
 0x01000000

	)

1800 
	#PF_HP_MODIFY
 0x02000000

	)

1801 
	#PF_HP_LAZYSWAP
 0x04000000

	)

1802 
	#PF_HP_SBP
 0x08000000

	)

1808 
	#EF_ALPHA_32BIT
 1

	)

1809 
	#EF_ALPHA_CANRELAX
 2

	)

1814 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

1815 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

1819 
	#SHF_ALPHA_GPREL
 0x10000000

	)

1822 
	#STO_ALPHA_NOPV
 0x80

	)

1823 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

1827 
	#R_ALPHA_NONE
 0

	)

1828 
	#R_ALPHA_REFLONG
 1

	)

1829 
	#R_ALPHA_REFQUAD
 2

	)

1830 
	#R_ALPHA_GPREL32
 3

	)

1831 
	#R_ALPHA_LITERAL
 4

	)

1832 
	#R_ALPHA_LITUSE
 5

	)

1833 
	#R_ALPHA_GPDISP
 6

	)

1834 
	#R_ALPHA_BRADDR
 7

	)

1835 
	#R_ALPHA_HINT
 8

	)

1836 
	#R_ALPHA_SREL16
 9

	)

1837 
	#R_ALPHA_SREL32
 10

	)

1838 
	#R_ALPHA_SREL64
 11

	)

1839 
	#R_ALPHA_GPRELHIGH
 17

	)

1840 
	#R_ALPHA_GPRELLOW
 18

	)

1841 
	#R_ALPHA_GPREL16
 19

	)

1842 
	#R_ALPHA_COPY
 24

	)

1843 
	#R_ALPHA_GLOB_DAT
 25

	)

1844 
	#R_ALPHA_JMP_SLOT
 26

	)

1845 
	#R_ALPHA_RELATIVE
 27

	)

1846 
	#R_ALPHA_TLS_GD_HI
 28

	)

1847 
	#R_ALPHA_TLSGD
 29

	)

1848 
	#R_ALPHA_TLS_LDM
 30

	)

1849 
	#R_ALPHA_DTPMOD64
 31

	)

1850 
	#R_ALPHA_GOTDTPREL
 32

	)

1851 
	#R_ALPHA_DTPREL64
 33

	)

1852 
	#R_ALPHA_DTPRELHI
 34

	)

1853 
	#R_ALPHA_DTPRELLO
 35

	)

1854 
	#R_ALPHA_DTPREL16
 36

	)

1855 
	#R_ALPHA_GOTTPREL
 37

	)

1856 
	#R_ALPHA_TPREL64
 38

	)

1857 
	#R_ALPHA_TPRELHI
 39

	)

1858 
	#R_ALPHA_TPRELLO
 40

	)

1859 
	#R_ALPHA_TPREL16
 41

	)

1861 
	#R_ALPHA_NUM
 46

	)

1864 
	#LITUSE_ALPHA_ADDR
 0

	)

1865 
	#LITUSE_ALPHA_BASE
 1

	)

1866 
	#LITUSE_ALPHA_BYTOFF
 2

	)

1867 
	#LITUSE_ALPHA_JSR
 3

	)

1868 
	#LITUSE_ALPHA_TLS_GD
 4

	)

1869 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

1874 
	#EF_PPC_EMB
 0x80000000

	)

1877 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

1878 
	#EF_PPC_RELOCATABLE_LIB
 \

1879 0x00008000

	)

1883 
	#R_PPC_NONE
 0

	)

1884 
	#R_PPC_ADDR32
 1

	)

1885 
	#R_PPC_ADDR24
 2

	)

1886 
	#R_PPC_ADDR16
 3

	)

1887 
	#R_PPC_ADDR16_LO
 4

	)

1888 
	#R_PPC_ADDR16_HI
 5

	)

1889 
	#R_PPC_ADDR16_HA
 6

	)

1890 
	#R_PPC_ADDR14
 7

	)

1891 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

1892 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

1893 
	#R_PPC_REL24
 10

	)

1894 
	#R_PPC_REL14
 11

	)

1895 
	#R_PPC_REL14_BRTAKEN
 12

	)

1896 
	#R_PPC_REL14_BRNTAKEN
 13

	)

1897 
	#R_PPC_GOT16
 14

	)

1898 
	#R_PPC_GOT16_LO
 15

	)

1899 
	#R_PPC_GOT16_HI
 16

	)

1900 
	#R_PPC_GOT16_HA
 17

	)

1901 
	#R_PPC_PLTREL24
 18

	)

1902 
	#R_PPC_COPY
 19

	)

1903 
	#R_PPC_GLOB_DAT
 20

	)

1904 
	#R_PPC_JMP_SLOT
 21

	)

1905 
	#R_PPC_RELATIVE
 22

	)

1906 
	#R_PPC_LOCAL24PC
 23

	)

1907 
	#R_PPC_UADDR32
 24

	)

1908 
	#R_PPC_UADDR16
 25

	)

1909 
	#R_PPC_REL32
 26

	)

1910 
	#R_PPC_PLT32
 27

	)

1911 
	#R_PPC_PLTREL32
 28

	)

1912 
	#R_PPC_PLT16_LO
 29

	)

1913 
	#R_PPC_PLT16_HI
 30

	)

1914 
	#R_PPC_PLT16_HA
 31

	)

1915 
	#R_PPC_SDAREL16
 32

	)

1916 
	#R_PPC_SECTOFF
 33

	)

1917 
	#R_PPC_SECTOFF_LO
 34

	)

1918 
	#R_PPC_SECTOFF_HI
 35

	)

1919 
	#R_PPC_SECTOFF_HA
 36

	)

1922 
	#R_PPC_TLS
 67

	)

1923 
	#R_PPC_DTPMOD32
 68

	)

1924 
	#R_PPC_TPREL16
 69

	)

1925 
	#R_PPC_TPREL16_LO
 70

	)

1926 
	#R_PPC_TPREL16_HI
 71

	)

1927 
	#R_PPC_TPREL16_HA
 72

	)

1928 
	#R_PPC_TPREL32
 73

	)

1929 
	#R_PPC_DTPREL16
 74

	)

1930 
	#R_PPC_DTPREL16_LO
 75

	)

1931 
	#R_PPC_DTPREL16_HI
 76

	)

1932 
	#R_PPC_DTPREL16_HA
 77

	)

1933 
	#R_PPC_DTPREL32
 78

	)

1934 
	#R_PPC_GOT_TLSGD16
 79

	)

1935 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

1936 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

1937 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

1938 
	#R_PPC_GOT_TLSLD16
 83

	)

1939 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

1940 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

1941 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

1942 
	#R_PPC_GOT_TPREL16
 87

	)

1943 
	#R_PPC_GOT_TPREL16_LO
 88

	)

1944 
	#R_PPC_GOT_TPREL16_HI
 89

	)

1945 
	#R_PPC_GOT_TPREL16_HA
 90

	)

1946 
	#R_PPC_GOT_DTPREL16
 91

	)

1947 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

1948 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

1949 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

1952 
	#R_PPC_NUM
 95

	)

1956 
	#R_PPC_EMB_NADDR32
 101

	)

1957 
	#R_PPC_EMB_NADDR16
 102

	)

1958 
	#R_PPC_EMB_NADDR16_LO
 103

	)

1959 
	#R_PPC_EMB_NADDR16_HI
 104

	)

1960 
	#R_PPC_EMB_NADDR16_HA
 105

	)

1961 
	#R_PPC_EMB_SDAI16
 106

	)

1962 
	#R_PPC_EMB_SDA2I16
 107

	)

1963 
	#R_PPC_EMB_SDA2REL
 108

	)

1964 
	#R_PPC_EMB_SDA21
 109

	)

1965 
	#R_PPC_EMB_MRKREF
 110

	)

1966 
	#R_PPC_EMB_RELSEC16
 111

	)

1967 
	#R_PPC_EMB_RELST_LO
 112

	)

1968 
	#R_PPC_EMB_RELST_HI
 113

	)

1969 
	#R_PPC_EMB_RELST_HA
 114

	)

1970 
	#R_PPC_EMB_BIT_FLD
 115

	)

1971 
	#R_PPC_EMB_RELSDA
 116

	)

1974 
	#R_PPC_DIAB_SDA21_LO
 180

	)

1975 
	#R_PPC_DIAB_SDA21_HI
 181

	)

1976 
	#R_PPC_DIAB_SDA21_HA
 182

	)

1977 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

1978 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

1979 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

1983 
	#R_PPC_TOC16
 255

	)

1986 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

1987 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

1988 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

1989 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

1990 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

1991 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

1992 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

1993 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

1994 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

1995 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

1996 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

1997 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

1998 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

1999 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2000 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2001 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2002 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2003 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2005 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2006 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2007 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2008 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2010 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2011 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2012 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2013 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2014 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2015 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2016 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2017 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2019 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2020 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2021 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2022 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2023 
	#R_PPC64_ADDR30
 37

	)

2024 
	#R_PPC64_ADDR64
 38

	)

2025 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2026 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2027 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2028 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2029 
	#R_PPC64_UADDR64
 43

	)

2030 
	#R_PPC64_REL64
 44

	)

2031 
	#R_PPC64_PLT64
 45

	)

2032 
	#R_PPC64_PLTREL64
 46

	)

2033 
	#R_PPC64_TOC16
 47

	)

2034 
	#R_PPC64_TOC16_LO
 48

	)

2035 
	#R_PPC64_TOC16_HI
 49

	)

2036 
	#R_PPC64_TOC16_HA
 50

	)

2037 
	#R_PPC64_TOC
 51

	)

2038 
	#R_PPC64_PLTGOT16
 52

	)

2039 
	#R_PPC64_PLTGOT16_LO
 53

	)

2040 
	#R_PPC64_PLTGOT16_HI
 54

	)

2041 
	#R_PPC64_PLTGOT16_HA
 55

	)

2043 
	#R_PPC64_ADDR16_DS
 56

	)

2044 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2045 
	#R_PPC64_GOT16_DS
 58

	)

2046 
	#R_PPC64_GOT16_LO_DS
 59

	)

2047 
	#R_PPC64_PLT16_LO_DS
 60

	)

2048 
	#R_PPC64_SECTOFF_DS
 61

	)

2049 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2050 
	#R_PPC64_TOC16_DS
 63

	)

2051 
	#R_PPC64_TOC16_LO_DS
 64

	)

2052 
	#R_PPC64_PLTGOT16_DS
 65

	)

2053 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2056 
	#R_PPC64_TLS
 67

	)

2057 
	#R_PPC64_DTPMOD64
 68

	)

2058 
	#R_PPC64_TPREL16
 69

	)

2059 
	#R_PPC64_TPREL16_LO
 70

	)

2060 
	#R_PPC64_TPREL16_HI
 71

	)

2061 
	#R_PPC64_TPREL16_HA
 72

	)

2062 
	#R_PPC64_TPREL64
 73

	)

2063 
	#R_PPC64_DTPREL16
 74

	)

2064 
	#R_PPC64_DTPREL16_LO
 75

	)

2065 
	#R_PPC64_DTPREL16_HI
 76

	)

2066 
	#R_PPC64_DTPREL16_HA
 77

	)

2067 
	#R_PPC64_DTPREL64
 78

	)

2068 
	#R_PPC64_GOT_TLSGD16
 79

	)

2069 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2070 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2071 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2072 
	#R_PPC64_GOT_TLSLD16
 83

	)

2073 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2074 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2075 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2076 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2077 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2078 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2079 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2080 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2081 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2082 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2083 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2084 
	#R_PPC64_TPREL16_DS
 95

	)

2085 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2086 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2087 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2088 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2089 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2090 
	#R_PPC64_DTPREL16_DS
 101

	)

2091 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2092 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2093 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2094 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2095 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2098 
	#R_PPC64_NUM
 107

	)

2101 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2102 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2103 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2104 
	#DT_PPC64_NUM
 3

	)

2109 
	#EF_ARM_RELEXEC
 0x01

	)

2110 
	#EF_ARM_HASENTRY
 0x02

	)

2111 
	#EF_ARM_INTERWORK
 0x04

	)

2112 
	#EF_ARM_APCS_26
 0x08

	)

2113 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2114 
	#EF_ARM_PIC
 0x20

	)

2115 
	#EF_ARM_ALIGN8
 0x40

	)

2116 
	#EF_ARM_NEW_ABI
 0x80

	)

2117 
	#EF_ARM_OLD_ABI
 0x100

	)

2121 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2122 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2123 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2124 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2126 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((Êags)&
EF_ARM_EABIMASK
)

	)

2127 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2128 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2129 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2132 
	#STT_ARM_TFUNC
 0xd

	)

2135 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2136 
	#SHF_ARM_COMDEF
 \

2137 0x80000000

	)

2141 
	#PF_ARM_SB
 \

2142 0x10000000

	)

2146 
	#R_ARM_NONE
 0

	)

2147 
	#R_ARM_PC24
 1

	)

2148 
	#R_ARM_ABS32
 2

	)

2149 
	#R_ARM_REL32
 3

	)

2150 
	#R_ARM_PC13
 4

	)

2151 
	#R_ARM_ABS16
 5

	)

2152 
	#R_ARM_ABS12
 6

	)

2153 
	#R_ARM_THM_ABS5
 7

	)

2154 
	#R_ARM_ABS8
 8

	)

2155 
	#R_ARM_SBREL32
 9

	)

2156 
	#R_ARM_THM_PC22
 10

	)

2157 
	#R_ARM_THM_PC8
 11

	)

2158 
	#R_ARM_AMP_VCALL9
 12

	)

2159 
	#R_ARM_SWI24
 13

	)

2160 
	#R_ARM_THM_SWI8
 14

	)

2161 
	#R_ARM_XPC25
 15

	)

2162 
	#R_ARM_THM_XPC22
 16

	)

2163 
	#R_ARM_COPY
 20

	)

2164 
	#R_ARM_GLOB_DAT
 21

	)

2165 
	#R_ARM_JUMP_SLOT
 22

	)

2166 
	#R_ARM_RELATIVE
 23

	)

2167 
	#R_ARM_GOTOFF
 24

	)

2168 
	#R_ARM_GOTPC
 25

	)

2169 
	#R_ARM_GOT32
 26

	)

2170 
	#R_ARM_PLT32
 27

	)

2171 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2172 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2173 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2174 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2175 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2176 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2177 
	#R_ARM_GNU_VTENTRY
 100

	)

2178 
	#R_ARM_GNU_VTINHERIT
 101

	)

2179 
	#R_ARM_THM_PC11
 102

	)

2180 
	#R_ARM_THM_PC9
 103

	)

2181 
	#R_ARM_RXPC25
 249

	)

2182 
	#R_ARM_RSBREL32
 250

	)

2183 
	#R_ARM_THM_RPC22
 251

	)

2184 
	#R_ARM_RREL32
 252

	)

2185 
	#R_ARM_RABS22
 253

	)

2186 
	#R_ARM_RPC24
 254

	)

2187 
	#R_ARM_RBASE
 255

	)

2189 
	#R_ARM_NUM
 256

	)

2194 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

2195 
	#EF_IA_64_ABI64
 0x00000010

	)

2196 
	#EF_IA_64_ARCH
 0xff000000

	)

2199 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

2200 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

2201 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

2202 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

2203 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2206 
	#PF_IA_64_NORECOV
 0x80000000

	)

2209 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

2210 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

2213 
	#SHF_IA_64_SHORT
 0x10000000

	)

2214 
	#SHF_IA_64_NORECOV
 0x20000000

	)

2217 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

2218 
	#DT_IA_64_NUM
 1

	)

2221 
	#R_IA64_NONE
 0x00

	)

2222 
	#R_IA64_IMM14
 0x21

	)

2223 
	#R_IA64_IMM22
 0x22

	)

2224 
	#R_IA64_IMM64
 0x23

	)

2225 
	#R_IA64_DIR32MSB
 0x24

	)

2226 
	#R_IA64_DIR32LSB
 0x25

	)

2227 
	#R_IA64_DIR64MSB
 0x26

	)

2228 
	#R_IA64_DIR64LSB
 0x27

	)

2229 
	#R_IA64_GPREL22
 0x2®

	)

2230 
	#R_IA64_GPREL64I
 0x2b

	)

2231 
	#R_IA64_GPREL32MSB
 0x2¯

	)

2232 
	#R_IA64_GPREL32LSB
 0x2d

	)

2233 
	#R_IA64_GPREL64MSB
 0x2ê

	)

2234 
	#R_IA64_GPREL64LSB
 0x2‡

	)

2235 
	#R_IA64_LTOFF22
 0x32

	)

2236 
	#R_IA64_LTOFF64I
 0x33

	)

2237 
	#R_IA64_PLTOFF22
 0x3®

	)

2238 
	#R_IA64_PLTOFF64I
 0x3b

	)

2239 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

2240 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

2241 
	#R_IA64_FPTR64I
 0x43

	)

2242 
	#R_IA64_FPTR32MSB
 0x44

	)

2243 
	#R_IA64_FPTR32LSB
 0x45

	)

2244 
	#R_IA64_FPTR64MSB
 0x46

	)

2245 
	#R_IA64_FPTR64LSB
 0x47

	)

2246 
	#R_IA64_PCREL60B
 0x48

	)

2247 
	#R_IA64_PCREL21B
 0x49

	)

2248 
	#R_IA64_PCREL21M
 0x4®

	)

2249 
	#R_IA64_PCREL21F
 0x4b

	)

2250 
	#R_IA64_PCREL32MSB
 0x4¯

	)

2251 
	#R_IA64_PCREL32LSB
 0x4d

	)

2252 
	#R_IA64_PCREL64MSB
 0x4ê

	)

2253 
	#R_IA64_PCREL64LSB
 0x4‡

	)

2254 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

2255 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

2256 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

2257 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

2258 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

2259 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

2260 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

2261 
	#R_IA64_SEGREL32LSB
 0x5d

	)

2262 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

2263 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

2264 
	#R_IA64_SECREL32MSB
 0x64

	)

2265 
	#R_IA64_SECREL32LSB
 0x65

	)

2266 
	#R_IA64_SECREL64MSB
 0x66

	)

2267 
	#R_IA64_SECREL64LSB
 0x67

	)

2268 
	#R_IA64_REL32MSB
 0x6¯

	)

2269 
	#R_IA64_REL32LSB
 0x6d

	)

2270 
	#R_IA64_REL64MSB
 0x6ê

	)

2271 
	#R_IA64_REL64LSB
 0x6‡

	)

2272 
	#R_IA64_LTV32MSB
 0x74

	)

2273 
	#R_IA64_LTV32LSB
 0x75

	)

2274 
	#R_IA64_LTV64MSB
 0x76

	)

2275 
	#R_IA64_LTV64LSB
 0x77

	)

2276 
	#R_IA64_PCREL21BI
 0x79

	)

2277 
	#R_IA64_PCREL22
 0x7®

	)

2278 
	#R_IA64_PCREL64I
 0x7b

	)

2279 
	#R_IA64_IPLTMSB
 0x80

	)

2280 
	#R_IA64_IPLTLSB
 0x81

	)

2281 
	#R_IA64_COPY
 0x84

	)

2282 
	#R_IA64_SUB
 0x85

	)

2283 
	#R_IA64_LTOFF22X
 0x86

	)

2284 
	#R_IA64_LDXMOV
 0x87

	)

2285 
	#R_IA64_TPREL14
 0x91

	)

2286 
	#R_IA64_TPREL22
 0x92

	)

2287 
	#R_IA64_TPREL64I
 0x93

	)

2288 
	#R_IA64_TPREL64MSB
 0x96

	)

2289 
	#R_IA64_TPREL64LSB
 0x97

	)

2290 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

2291 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

2292 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

2293 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

2294 
	#R_IA64_DTPREL14
 0xb1

	)

2295 
	#R_IA64_DTPREL22
 0xb2

	)

2296 
	#R_IA64_DTPREL64I
 0xb3

	)

2297 
	#R_IA64_DTPREL32MSB
 0xb4

	)

2298 
	#R_IA64_DTPREL32LSB
 0xb5

	)

2299 
	#R_IA64_DTPREL64MSB
 0xb6

	)

2300 
	#R_IA64_DTPREL64LSB
 0xb7

	)

2301 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

2306 
	#R_SH_NONE
 0

	)

2307 
	#R_SH_DIR32
 1

	)

2308 
	#R_SH_REL32
 2

	)

2309 
	#R_SH_DIR8WPN
 3

	)

2310 
	#R_SH_IND12W
 4

	)

2311 
	#R_SH_DIR8WPL
 5

	)

2312 
	#R_SH_DIR8WPZ
 6

	)

2313 
	#R_SH_DIR8BP
 7

	)

2314 
	#R_SH_DIR8W
 8

	)

2315 
	#R_SH_DIR8L
 9

	)

2316 
	#R_SH_SWITCH16
 25

	)

2317 
	#R_SH_SWITCH32
 26

	)

2318 
	#R_SH_USES
 27

	)

2319 
	#R_SH_COUNT
 28

	)

2320 
	#R_SH_ALIGN
 29

	)

2321 
	#R_SH_CODE
 30

	)

2322 
	#R_SH_DATA
 31

	)

2323 
	#R_SH_LABEL
 32

	)

2324 
	#R_SH_SWITCH8
 33

	)

2325 
	#R_SH_GNU_VTINHERIT
 34

	)

2326 
	#R_SH_GNU_VTENTRY
 35

	)

2327 
	#R_SH_TLS_GD_32
 144

	)

2328 
	#R_SH_TLS_LD_32
 145

	)

2329 
	#R_SH_TLS_LDO_32
 146

	)

2330 
	#R_SH_TLS_IE_32
 147

	)

2331 
	#R_SH_TLS_LE_32
 148

	)

2332 
	#R_SH_TLS_DTPMOD32
 149

	)

2333 
	#R_SH_TLS_DTPOFF32
 150

	)

2334 
	#R_SH_TLS_TPOFF32
 151

	)

2335 
	#R_SH_GOT32
 160

	)

2336 
	#R_SH_PLT32
 161

	)

2337 
	#R_SH_COPY
 162

	)

2338 
	#R_SH_GLOB_DAT
 163

	)

2339 
	#R_SH_JMP_SLOT
 164

	)

2340 
	#R_SH_RELATIVE
 165

	)

2341 
	#R_SH_GOTOFF
 166

	)

2342 
	#R_SH_GOTPC
 167

	)

2344 
	#R_SH_NUM
 256

	)

2348 
	#R_390_NONE
 0

	)

2349 
	#R_390_8
 1

	)

2350 
	#R_390_12
 2

	)

2351 
	#R_390_16
 3

	)

2352 
	#R_390_32
 4

	)

2353 
	#R_390_PC32
 5

	)

2354 
	#R_390_GOT12
 6

	)

2355 
	#R_390_GOT32
 7

	)

2356 
	#R_390_PLT32
 8

	)

2357 
	#R_390_COPY
 9

	)

2358 
	#R_390_GLOB_DAT
 10

	)

2359 
	#R_390_JMP_SLOT
 11

	)

2360 
	#R_390_RELATIVE
 12

	)

2361 
	#R_390_GOTOFF32
 13

	)

2362 
	#R_390_GOTPC
 14

	)

2363 
	#R_390_GOT16
 15

	)

2364 
	#R_390_PC16
 16

	)

2365 
	#R_390_PC16DBL
 17

	)

2366 
	#R_390_PLT16DBL
 18

	)

2367 
	#R_390_PC32DBL
 19

	)

2368 
	#R_390_PLT32DBL
 20

	)

2369 
	#R_390_GOTPCDBL
 21

	)

2370 
	#R_390_64
 22

	)

2371 
	#R_390_PC64
 23

	)

2372 
	#R_390_GOT64
 24

	)

2373 
	#R_390_PLT64
 25

	)

2374 
	#R_390_GOTENT
 26

	)

2375 
	#R_390_GOTOFF16
 27

	)

2376 
	#R_390_GOTOFF64
 28

	)

2377 
	#R_390_GOTPLT12
 29

	)

2378 
	#R_390_GOTPLT16
 30

	)

2379 
	#R_390_GOTPLT32
 31

	)

2380 
	#R_390_GOTPLT64
 32

	)

2381 
	#R_390_GOTPLTENT
 33

	)

2382 
	#R_390_PLTOFF16
 34

	)

2383 
	#R_390_PLTOFF32
 35

	)

2384 
	#R_390_PLTOFF64
 36

	)

2385 
	#R_390_TLS_LOAD
 37

	)

2386 
	#R_390_TLS_GDCALL
 \

2387 38

	)

2389 
	#R_390_TLS_LDCALL
 \

2390 39

	)

2392 
	#R_390_TLS_GD32
 \

2393 40

	)

2395 
	#R_390_TLS_GD64
 \

2396 41

	)

2398 
	#R_390_TLS_GOTIE12
 \

2399 42

	)

2401 
	#R_390_TLS_GOTIE32
 \

2402 43

	)

2404 
	#R_390_TLS_GOTIE64
 \

2405 44

	)

2407 
	#R_390_TLS_LDM32
 \

2408 45

	)

2410 
	#R_390_TLS_LDM64
 \

2411 46

	)

2413 
	#R_390_TLS_IE32
 \

2414 47

	)

2416 
	#R_390_TLS_IE64
 \

2417 48

	)

2419 
	#R_390_TLS_IEENT
 \

2420 49

	)

2422 
	#R_390_TLS_LE32
 \

2423 50

	)

2425 
	#R_390_TLS_LE64
 \

2426 51

	)

2428 
	#R_390_TLS_LDO32
 \

2429 52

	)

2431 
	#R_390_TLS_LDO64
 \

2432 53

	)

2434 
	#R_390_TLS_DTPMOD
 54

	)

2435 
	#R_390_TLS_DTPOFF
 55

	)

2436 
	#R_390_TLS_TPOFF
 \

2437 56

	)

2439 
	#R_390_20
 57

	)

2440 
	#R_390_GOT20
 58

	)

2441 
	#R_390_GOTPLT20
 59

	)

2442 
	#R_390_TLS_GOTIE20
 \

2443 60

	)

2446 
	#R_390_NUM
 61

	)

2449 
	#R_CRIS_NONE
 0

	)

2450 
	#R_CRIS_8
 1

	)

2451 
	#R_CRIS_16
 2

	)

2452 
	#R_CRIS_32
 3

	)

2453 
	#R_CRIS_8_PCREL
 4

	)

2454 
	#R_CRIS_16_PCREL
 5

	)

2455 
	#R_CRIS_32_PCREL
 6

	)

2456 
	#R_CRIS_GNU_VTINHERIT
 7

	)

2457 
	#R_CRIS_GNU_VTENTRY
 8

	)

2458 
	#R_CRIS_COPY
 9

	)

2459 
	#R_CRIS_GLOB_DAT
 10

	)

2460 
	#R_CRIS_JUMP_SLOT
 11

	)

2461 
	#R_CRIS_RELATIVE
 12

	)

2462 
	#R_CRIS_16_GOT
 13

	)

2463 
	#R_CRIS_32_GOT
 14

	)

2464 
	#R_CRIS_16_GOTPLT
 15

	)

2465 
	#R_CRIS_32_GOTPLT
 16

	)

2466 
	#R_CRIS_32_GOTREL
 17

	)

2467 
	#R_CRIS_32_PLT_GOTREL
 18

	)

2468 
	#R_CRIS_32_PLT_PCREL
 19

	)

2470 
	#R_CRIS_NUM
 20

	)

2473 
	#R_X86_64_NONE
 0

	)

2474 
	#R_X86_64_64
 1

	)

2475 
	#R_X86_64_PC32
 2

	)

2476 
	#R_X86_64_GOT32
 3

	)

2477 
	#R_X86_64_PLT32
 4

	)

2478 
	#R_X86_64_COPY
 5

	)

2479 
	#R_X86_64_GLOB_DAT
 6

	)

2480 
	#R_X86_64_JUMP_SLOT
 7

	)

2481 
	#R_X86_64_RELATIVE
 8

	)

2482 
	#R_X86_64_GOTPCREL
 \

2483 9

	)

2485 
	#R_X86_64_32
 10

	)

2486 
	#R_X86_64_32S
 11

	)

2487 
	#R_X86_64_16
 12

	)

2488 
	#R_X86_64_PC16
 13

	)

2489 
	#R_X86_64_8
 14

	)

2490 
	#R_X86_64_PC8
 15

	)

2491 
	#R_X86_64_DTPMOD64
 16

	)

2492 
	#R_X86_64_DTPOFF64
 17

	)

2493 
	#R_X86_64_TPOFF64
 18

	)

2494 
	#R_X86_64_TLSGD
 \

2495 19

	)

2497 
	#R_X86_64_TLSLD
 \

2498 20

	)

2500 
	#R_X86_64_DTPOFF32
 21

	)

2501 
	#R_X86_64_GOTTPOFF
 \

2502 22

	)

2504 
	#R_X86_64_TPOFF32
 23

	)

2506 
	#R_X86_64_NUM
 24

	)

2509 
	#R_MN10300_NONE
 0

	)

2510 
	#R_MN10300_32
 1

	)

2511 
	#R_MN10300_16
 2

	)

2512 
	#R_MN10300_8
 3

	)

2513 
	#R_MN10300_PCREL32
 4

	)

2514 
	#R_MN10300_PCREL16
 5

	)

2515 
	#R_MN10300_PCREL8
 6

	)

2516 
	#R_MN10300_GNU_VTINHERIT
 7

	)

2517 
	#R_MN10300_GNU_VTENTRY
 8

	)

2518 
	#R_MN10300_24
 9

	)

2519 
	#R_MN10300_GOTPC32
 10

	)

2520 
	#R_MN10300_GOTPC16
 11

	)

2521 
	#R_MN10300_GOTOFF32
 12

	)

2522 
	#R_MN10300_GOTOFF24
 13

	)

2523 
	#R_MN10300_GOTOFF16
 14

	)

2524 
	#R_MN10300_PLT32
 15

	)

2525 
	#R_MN10300_PLT16
 16

	)

2526 
	#R_MN10300_GOT32
 17

	)

2527 
	#R_MN10300_GOT24
 18

	)

2528 
	#R_MN10300_GOT16
 19

	)

2529 
	#R_MN10300_COPY
 20

	)

2530 
	#R_MN10300_GLOB_DAT
 21

	)

2531 
	#R_MN10300_JMP_SLOT
 22

	)

2532 
	#R_MN10300_RELATIVE
 23

	)

2534 
	#R_MN10300_NUM
 24

	)

2537 
	#R_M32R_NONE
 0

	)

2538 
	#R_M32R_16
 1

	)

2539 
	#R_M32R_32
 2

	)

2540 
	#R_M32R_24
 3

	)

2541 
	#R_M32R_10_PCREL
 4

	)

2542 
	#R_M32R_18_PCREL
 5

	)

2543 
	#R_M32R_26_PCREL
 6

	)

2544 
	#R_M32R_HI16_ULO
 7

	)

2545 
	#R_M32R_HI16_SLO
 8

	)

2546 
	#R_M32R_LO16
 9

	)

2547 
	#R_M32R_SDA16
 10

	)

2548 
	#R_M32R_GNU_VTINHERIT
 11

	)

2549 
	#R_M32R_GNU_VTENTRY
 12

	)

2551 
	#R_M32R_16_RELA
 33

	)

2552 
	#R_M32R_32_RELA
 34

	)

2553 
	#R_M32R_24_RELA
 35

	)

2554 
	#R_M32R_10_PCREL_RELA
 36

	)

2555 
	#R_M32R_18_PCREL_RELA
 37

	)

2556 
	#R_M32R_26_PCREL_RELA
 38

	)

2557 
	#R_M32R_HI16_ULO_RELA
 39

	)

2558 
	#R_M32R_HI16_SLO_RELA
 40

	)

2559 
	#R_M32R_LO16_RELA
 41

	)

2560 
	#R_M32R_SDA16_RELA
 42

	)

2561 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

2562 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

2564 
	#R_M32R_GOT24
 48

	)

2565 
	#R_M32R_26_PLTREL
 49

	)

2566 
	#R_M32R_COPY
 50

	)

2567 
	#R_M32R_GLOB_DAT
 51

	)

2568 
	#R_M32R_JMP_SLOT
 52

	)

2569 
	#R_M32R_RELATIVE
 53

	)

2570 
	#R_M32R_GOTOFF
 54

	)

2571 
	#R_M32R_GOTPC24
 55

	)

2572 
	#R_M32R_GOT16_HI_ULO
 \

2573 56

	)

2575 
	#R_M32R_GOT16_HI_SLO
 \

2576 57

	)

2578 
	#R_M32R_GOT16_LO
 58

	)

2579 
	#R_M32R_GOTPC_HI_ULO
 \

2580 59

	)

2582 
	#R_M32R_GOTPC_HI_SLO
 \

2583 60

	)

2585 
	#R_M32R_GOTPC_LO
 \

2586 61

	)

2588 
	#R_M32R_GOTOFF_HI_ULO
 \

2589 62

	)

2591 
	#R_M32R_GOTOFF_HI_SLO
 \

2592 63

	)

2594 
	#R_M32R_GOTOFF_LO
 64

	)

2595 
	#R_M32R_NUM
 256

	)

	@user/lib/ld-weenix/ldalloc.c

8 
	~"ldÆloc.h
"

9 
	~"ldutû.h
"

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<sys/mm™.h
>

13 
	~<uni°d.h
>

15 
	g°¨t
;

16 
	gpos
;

17 
	gamou¡
;

28 
	$_ldaöô
(
∑gesize
, 
∑ges
)

30 
amou¡
 = 
∑gesize
 * 
∑ges
;

31 
pos
 = 0;

33 
°¨t
 = ()
	`mm≠
(
NULL
, 
amou¡
, 
PROT_READ
 | 
PROT_WRITE
,

34 
MAP_PRIVATE
 | 
MAP_ANON
, -1, 0);

35 i‡(
°¨t
 =()
MAP_FAILED
)

37 
	`Ârötf
(
°dîr
, "ld-weenix:Öanic - unableÅo map /dev/zero\n");

38 
	`exô
(1);

40 
	}
}

45 *
	$_ldÆloc
(
size
)

47 
√xt
;

49 i‡(
size
 & 3)

51 
size
 = (size & ~3) + 4;

54 i‡(
pos
 + 
size
 > 
amou¡
)

56 
	`Ârötf
(
°dîr
,

58 
size
);

59 
	`exô
(1);

62 
√xt
 = 
°¨t
 + 
pos
;

63 
pos
 +
size
;

65  (*)
√xt
;

66 
	}
}

	@user/lib/ld-weenix/ldalloc.h

1 #¥agm®
⁄˚


3 
_ldaöô
(
∑gesize
, 
∑ges
);

4 *
_ldÆloc
(
size
);

	@user/lib/ld-weenix/ldnames.c

8 
	~"sys/ty≥s.h
"

10 
	~"°dlib.h
"

11 
	~"°rög.h
"

13 
	~"ldÆloc.h
"

14 
	~"ld«mes.h
"

16 
modít
 
	tmodít_t
;

17 
	smodít


19 c⁄° *
	m«me
;

20 
modít_t
 *
	m√xt
;

23 
modít_t
 *
	g«mes
 = 
NULL
;

33 
	$_ldadd«me
(c⁄° *
«me
)

35 
modít_t
 *
√wít
;

37 
√wít
 = (
modít_t
 *)
	`_ldÆloc
((*newent));

38 
√wít
->
«me
 =Çame;

39 
√wít
->
√xt
 = 
«mes
;

40 
«mes
 = 
√wít
;

41 
	}
}

47 
	$_ldchk«me
(c⁄° *
«me
)

51 
modít_t
 *
cuª¡
;

53 
cuª¡
 = 
«mes
;

54 
cuª¡
)

56 i‡(
	`°rcmp
(
cuª¡
->
«me
,Çame))

57 
cuª¡
 = cuª¡->
√xt
;

63 
	}
}

	@user/lib/ld-weenix/ldnames.h

8 #i‚de‡
_ld«mes_h_


9 
	#_ld«mes_h_


	)

11 #ifde‡
__˝lu•lus


16 
_ldadd«me
(c⁄° *
«me
);

17 
_ldchk«me
(c⁄° *
«me
);

19 #ifde‡
__˝lu•lus


	@user/lib/ld-weenix/ldreloc_x86_64.c

8 
	~"°dio.h
"

9 
	~"°dlib.h
"

10 
	~"°rög.h
"

11 
	~"sys/ty≥s.h
"

13 
	~"ldªsﬁve.h
"

14 
	~"ldty≥s.h
"

15 
	~"ldutû.h
"

17 
_ld_böd
();

19 
ldöô_t
 
	$_ldlﬂdπld
(
¨gc
, **
¨gv
, **
ívp
, 
Elf64_auxv_t
 *
auxv
)

22 
Elf64_Addr
 
ba£
 = 0;

23 
size_t
 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++)

25 i‡(
auxv
[
i
].
a_ty≥
 =
AT_BASE
)

27 
ba£
 = (
Elf64_Addr
)
auxv
[
i
].
a_un
.
a_vÆ
;

31 i‡(!
ba£
)

32 
	`exô
(1);

35 
Elf64_Ehdr
 *
hdr
 = (Elf64_Ehd∏*)
ba£
;

36 i‡(
hdr
->
e_idít
[
EI_MAG0
] !
ELFMAG0
 || hdr->e_idít[
EI_MAG1
] !
ELFMAG1
 ||

37 
hdr
->
e_idít
[
EI_MAG2
] !
ELFMAG2
 || hdr->e_idít[
EI_MAG3
] !
ELFMAG3
)

39 
	`exô
(1);

43 
Elf64_Phdr
 *
phdr
 = (Elf64_Phd∏*)(
ba£
 + 
hdr
->
e_phoff
);

46 
phdr
->
p_ty≥
 !
PT_DYNAMIC
)

48 
phdr
++;

52 
size_t
 
d_ªloff
 = 0;

53 
size_t
 
d_ªlcou¡
 = 0;

54 
Elf64_Dyn
 *
dyn
 = (Elf64_Dy¿*)(
ba£
 + 
phdr
->
p_vaddr
);

55 ; 
dyn
->
d_èg
 !
DT_NULL
; dyn++)

57 i‡(
dyn
->
d_èg
 =
DT_RELA
)

59 
d_ªloff
 = 
dyn
->
d_un
.
d_±r
;

61 i‡(
dyn
->
d_èg
 =
DT_RELACOUNT
)

63 
d_ªlcou¡
 = 
dyn
->
d_un
.
d_vÆ
;

68 
Elf64_Rña
 *
ªl
 = (Elf64_Rñ®*)(
ba£
 + 
d_ªloff
);

69 
size_t
 
i
 = 0; i < 
d_ªlcou¡
; i++)

71 
size_t
 
ty≥
 = 
	`ELF64_R_TYPE
(
ªl
[
i
].
r_öfo
);

72 i‡(
ty≥
 =
R_X86_64_RELATIVE
)

74 
Elf64_Addr
 *
addr
 = (Elf64_Add∏*)(
ba£
 + 
ªl
[
i
].
r_off£t
);

75 *
addr
 = 
ba£
 + 
ªl
[
i
].
r_addíd
;

79 
	`Ârötf
(
°dîr
, "_ldloadrtld: unsupportedÑelocationÅype: %lu\n",

80 
ty≥
);

81 
	`exô
(1);

86  
	`_ld°¨t
(
ívp
, 
auxv
);

87 
	}
}

89 
	$_ldªlocobj
(
moduÀ_t
 *
moduÀ
)

91 
Elf64_Addr
 
ba£
 = 
moduÀ
->base;

93 
size_t
 
i
 = 0; i < 
moduÀ
->
ƒñoc
; i++)

95 
Elf64_Rña
 
ªl
 = 
moduÀ
->
ªloc
[
i
];

97 
uöt64_t
 
sym
 = 
	`ELF64_R_SYM
(
ªl
.
r_öfo
);

98 
uöt64_t
 
ty≥
 = 
	`ELF64_R_TYPE
(
ªl
.
r_öfo
);

99 c⁄° *
«me
 = 
moduÀ
->
dyn°r
 + moduÀ->
dynsym
[
sym
].
°_«me
;

100 *
addr
 = (*)(
ba£
 + 
ªl
.
r_off£t
);

102 
Elf64_W‹d
 
size
;

103 
ldsym_t
 
symbﬁ
;

104 
ty≥
)

106 
R_X86_64_RELATIVE
:

107 *(
Elf64_Addr
 *)
addr
 = 
ba£
 + 
ªl
.
r_addíd
;

109 
R_X86_64_COPY
:

110 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, &
size
, 1);

111 
	`mem˝y
(
addr
, 
symbﬁ
, 
size
);

113 
R_X86_64_JUMP_SLOT
:

114 
R_X86_64_GLOB_DAT
:

115 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

116 *(
Elf64_Addr
 *)
addr
 = (Elf64_Addr)
symbﬁ
;

118 
R_X86_64_32
:

119 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

120 *(
Elf64_Addr
 *)
addr
 = (Elf64_Addr)
symbﬁ
 + 
ªl
.
r_addíd
;

122 
R_X86_64_PC32
:

123 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

124 *(
Elf64_Addr
 *)
addr
 =

125 (
Elf64_Addr
)
symbﬁ
 + 
ªl
.
r_addíd
 - (Elf64_Addr)
addr
;

128 
	`Ârötf
(
°dîr
,

130 
ty≥
);

131 
	`exô
(1);

134 
	}
}

136 
	$_ldªlo˝…
(
moduÀ_t
 *
moduÀ
)

138 
size_t
 
i
 = 0; i < 
moduÀ
->
≈…ªloc
; i++)

140 
Elf64_Rña
 
ªl
 = 
moduÀ
->
∂åñoc
[
i
];

142 
uöt64_t
 
ty≥
 = 
	`ELF64_R_TYPE
(
ªl
.
r_öfo
);

143 i‡(
ty≥
 !
R_X86_64_JUMP_SLOT
)

145 
	`Ârötf
(
°dîr
, "_ldrelocplt: unsupportedÑelocationÅype: %lu\n",

146 
ty≥
);

147 
	`exô
(1);

150 *(
Elf64_Addr
 *)(
moduÀ
->
ba£
 + 
ªl
.
r_off£t
) += module->base;

152 
	}
}

154 
	$_ld∂tgŸ_öô
(
moduÀ_t
 *
moduÀ
)

156 
Elf64_Addr
 *
∂tba£
 = 
moduÀ
->
∂tgŸ
;

157 
∂tba£
[1] = (
Elf64_Addr
)
moduÀ
;

158 
∂tba£
[2] = (
Elf64_Addr
)&
_ld_böd
;

159 
	}
}

161 
	$_ldbödnow
(
moduÀ_t
 *
moduÀ
)

163 
Elf64_Addr
 
ba£
 = 
moduÀ
->base;

165 
size_t
 
i
 = 0; i < 
moduÀ
->
≈…ªloc
; i++)

167 
Elf64_Rña
 
ªl
 = 
moduÀ
->
∂åñoc
[
i
];

169 
uöt64_t
 
sym
 = 
	`ELF64_R_SYM
(
ªl
.
r_öfo
);

170 
uöt64_t
 
ty≥
 = 
	`ELF64_R_TYPE
(
ªl
.
r_öfo
);

171 c⁄° *
«me
 = 
moduÀ
->
dyn°r
 + moduÀ->
dynsym
[
sym
].
°_«me
;

172 *
addr
 = (*)(
ba£
 + 
ªl
.
r_off£t
);

174 i‡(
ty≥
 !
R_X86_64_JUMP_SLOT
)

176 
	`Ârötf
(
°dîr
, "_ldbindnow: unsupportedÑelocationÅype: %lu\n",

177 
ty≥
);

178 
	`exô
(1);

181 
ldsym_t
 
symbﬁ
 = 
	`_ldªsﬁve
(
moduÀ
, 
«me
, -1, 0, 0);

182 *(
Elf64_Addr
 *)
addr
 = (Elf64_Addr)
symbﬁ
;

184 
	}
}

	@user/lib/ld-weenix/ldresolve.c

13 
	~"°rög.h
"

15 
	~"ldªsﬁve.h
"

16 
	~"ldutû.h
"

18 
	#H_nbuckë
 0

	)

19 
	#H_nchaö
 1

	)

20 
	#H_buckë
 2

	)

26 
	$_ldlookup
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
)

28 
hashvÆ
;

29 
y
;

31 
hashvÆ
 = 
	`_ldñfhash
(
«me
);

32 
hashvÆ
 %
moduÀ
->
hash
[
H_nbuckë
];

34 
y
 = 
moduÀ
->
hash
[
H_buckë
 + 
hashvÆ
];

36 (
y
 !
STN_UNDEF
) &&

37 
	`°rcmp
(
moduÀ
->
dyn°r
 + moduÀ->
dynsym
[
y
].
°_«me
, 
«me
))

39 
y
 = 
moduÀ
->
hash
[
H_buckë
 + moduÀ->hash[
H_nbuckë
] + y];

42  
y
;

43 
	}
}

52 
ldsym_t
 
	$_ldsymbﬁ
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
bödög
, 
ty≥
,

53 
Elf64_W‹d
 *
size
)

55 
ªsu…
;

58 i‡(((
ªsu…
 = 
	`_ldlookup
(
moduÀ
, 
«me
)Ë!
STN_UNDEF
) &&

59 ((
bödög
 < 0) ||

60 (
	`ELF64_ST_BIND
(
moduÀ
->
dynsym
[
ªsu…
].
°_öfo
Ë=
bödög
)) &&

61 ((
ty≥
 < 0) ||

62 (
	`ELF64_ST_TYPE
(
moduÀ
->
dynsym
[
ªsu…
].
°_öfo
Ë=
ty≥
)) &&

63 (
moduÀ
->
dynsym
[
ªsu…
].
°_shndx
 !
SHN_UNDEF
))

65 i‡(
size
)

66 *
size
 = 
moduÀ
->
dynsym
[
ªsu…
].
°_size
;

67  (
ldsym_t
)((
uöçå_t
)
moduÀ
->
ba£
 +

68 (
uöçå_t
)
moduÀ
->
dynsym
[
ªsu…
].
°_vÆue
);

72 
	}
}

82 
ldsym_t
 
	$_ldªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

83 
Elf64_W‹d
 *
size
, 
ex˛ude
)

85 
moduÀ_t
 *
curmod
;

86 
ldsym_t
 
sym
;

88 
curmod
 = 
moduÀ
->
fú°
;

90 
curmod
)

92 i‡(!
ex˛ude
 || 
curmod
 !
moduÀ
)

94 i‡((
sym
 = 
	`_ldsymbﬁ
(
curmod
, 
«me
, 
STB_GLOBAL
, 
ty≥
, 
size
)))

95  
sym
;

97 
curmod
 = curmod->
√xt
;

100 
curmod
 = 
moduÀ
->
fú°
;

101 
curmod
)

103 i‡((
sym
 = 
	`_ldsymbﬁ
(
curmod
, 
«me
, 
STB_WEAK
, 
ty≥
, 
size
)))

104  
sym
;

105 
curmod
 = curmod->
√xt
;

108  
	`_ldsymbﬁ
(
moduÀ
, 
«me
, 
STB_LOCAL
, 
ty≥
, 
size
);

109 
	}
}

111 
Elf64_Addr
 
	$_πªsﬁve
(
moduÀ_t
 *
mod
, 
Elf64_W‹d
 
ªloff
)

113 
Elf64_Rña
 *
ªl
 = 
mod
->
∂åñoc
 + 
ªloff
;

114 
sym
 = 
	`ELF64_R_SYM
(
ªl
->
r_öfo
);

115 c⁄° *
«me
 = 
mod
->
dyn°r
 + mod->
dynsym
[
sym
].
°_«me
;

116 
ldsym_t
 
symbﬁ
 = 
	`_ldªsﬁve
(
mod
, 
«me
, -1, 0, 0);

117 *(
Elf64_Addr
 *)(
mod
->
ba£
 + 
ªl
->
r_off£t
Ë(Elf64_Addr)
symbﬁ
;

118  (
Elf64_Addr
)
symbﬁ
;

119 
	}
}

	@user/lib/ld-weenix/ldresolve.h

13 #i‚de‡
_ldªsﬁve_h_


14 
	#_ldªsﬁve_h_


	)

16 #ifde‡
__˝lu•lus


21 
	~"ldty≥s.h
"

23 
_ldlookup
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
);

24 
ldsym_t
 
_ldsymbﬁ
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
bödög
, 
ty≥
,

25 
Elf64_W‹d
 *
size
);

26 
ldsym_t
 
_ldªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

27 
Elf64_W‹d
 *
size
, 
c›y
);

28 
ldsym_t
 
_ldexªsﬁve
(
moduÀ_t
 *
moduÀ
, c⁄° *
«me
, 
ty≥
,

29 
Elf64_W‹d
 *
size
);

31 #ifde‡
__˝lu•lus


	@user/lib/ld-weenix/ldstart.c

17 
	~"f˙é.h
"

18 
	~"°dio.h
"

19 
	~"°dlib.h
"

20 
	~"°rög.h
"

21 
	~"sys/mm™.h
"

22 
	~"sys/ty≥s.h
"

23 
	~"uni°d.h
"

25 
	~"ñf.h
"

27 
	~"ldÆloc.h
"

28 
	~"ld«mes.h
"

29 
	~"ldutû.h
"

31 #i‚de‡
DEFAULT_RUNPATH


32 
	#DEFAULT_RUNPATH
 "/lib:/u§/lib"

	)

35 
_ldbödnow
(
moduÀ_t
 *
curmod
);

37 c⁄° *
	gdeÁu…_ru≈©h
 = 
DEFAULT_RUNPATH
;

39 c⁄° *
	gîr_ˇ¡föd
 =

41 c⁄° *
	gîr_n€¡ry
 = "ld.so.1:Öanic -ÇoÉntryÖoint\n";

42 c⁄° *
	gîr_m≠pög
 =

44 c⁄° *
	gîr_zîom≠
 = "ld.so.1:Öanic - failureÅo map /dev/zero\n";

46 
moduÀ_t
 *
	g_ldfú°
;

47 
moduÀ_t
 **
	g_ldœ°
;

49 
size_t
 
	g∑gesize
;

50 **
	gív
;

51 
ldív_t
 
	g_ldív
;

53 
	#åunc_∑ge
(
x
Ë((xË& ~(
∑gesize
 - 1))

	)

54 
	#round_∑ge
(
x
Ë(((xË+ 
∑gesize
 - 1Ë& ~’agesizê- 1))

	)

56 c⁄° *
	$_ldgëív
(c⁄° *
v¨
)

58 **
e
 = 
ív
;

59 *
e
)

61 c⁄° *
p
 = *
e
;

62 *
p
 =*
v¨
)

63 
p
++, 
v¨
++;

64 i‡(*
p
 ='=' && *
v¨
 == 0)

66  
p
++;

68 
e
++;

71 
	}
}

73 
	$_ldív_öô
(**
ívú⁄
)

75 
ív
 = 
ívú⁄
;

76 i‡(
	`_ldgëív
("LD_BIND_NOW"))

78 
_ldív
.
ld_böd_now
 = 1;

80 i‡(
	`_ldgëív
("LD_DEBUG"))

82 
_ldív
.
ld_debug
 = 1;

84 
_ldív
.
ld_¥ñﬂd
 = 
	`_ldgëív
("LD_PRELOAD");

85 
_ldív
.
ld_libøry_∑th
 = 
	`_ldgëív
("LD_LIBRARY_PATH");

86 
	}
}

88 
moduÀ_t
 *
	$_ldlökobj
(
moduÀ_t
 *
öfo
, c⁄° *
ba£addr
,

89 
Elf64_Dyn
 *
dyn
)

91 
Elf64_Dyn
 *
curdyn
;

92 
moduÀ_t
 **
curmod
;

93 *
«me
;

96 
uöt64_t
 
d_Ω©h
 = 0;

97 
uöt64_t
 
d_ªlocsz
 = 0;

98 
uöt64_t
 
d_ªlo˚¡
 = 0;

100 
uöt64_t
 
d_∂ây≥
 = 0;

101 
uöt64_t
 
d_∂tsize
 = 0;

104 i‡(!
öfo
)

106 
öfo
 = (
moduÀ_t
 *)
	`_ldÆloc
((*info));

107 
	`mem£t
(
öfo
, 0, (*info));

108 
_ldfú°
 = 
öfo
->
fú°
 = info;

109 
curmod
 = &(
öfo
->
√xt
);

113 
curmod
 = 
_ldœ°
;

116 
öfo
->
ba£
 = ()
ba£addr
;

118 
curdyn
 = 
dyn
; curdyn->
d_èg
 !
DT_NULL
; curdyn++)

120 
curdyn
->
d_èg
)

122 
DT_HASH
:

123 
öfo
->
hash
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

125 
DT_SYMTAB
:

126 
öfo
->
dynsym
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

128 
DT_STRTAB
:

129 
öfo
->
dyn°r
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

131 
DT_JMPREL
:

132 
öfo
->
∂åñoc
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

134 
DT_RELA
:

135 
DT_REL
:

136 
öfo
->
ªloc
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

138 
DT_INIT
:

139 
öfo
->
öô
 = (
ldfunc_t
)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

141 
DT_FINI
:

142 
öfo
->
föi
 = (
ldfunc_t
)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

144 
DT_NEEDED
:

147 
DT_RPATH
:

148 
d_Ω©h
 = 
curdyn
->
d_un
.
d_vÆ
;

150 
DT_PLTGOT
:

151 
öfo
->
∂tgŸ
 = (*)(öfo->
ba£
 + 
curdyn
->
d_un
.
d_±r
);

153 
DT_PLTRELSZ
:

154 
d_∂tsize
 = 
curdyn
->
d_un
.
d_vÆ
;

156 
DT_PLTREL
:

157 
d_∂ây≥
 = 
curdyn
->
d_un
.
d_vÆ
;

159 
DT_BIND_NOW
:

160 
_ldív
.
ld_böd_now
 = 1;

162 
DT_RELENT
:

163 
DT_RELAENT
:

164 
d_ªlo˚¡
 = 
curdyn
->
d_un
.
d_vÆ
;

166 
DT_RELSZ
:

167 
DT_RELASZ
:

168 
d_ªlocsz
 = 
curdyn
->
d_un
.
d_vÆ
;

175 i‡(
öfo
->
ªloc
)

177 
öfo
->
ƒñoc
 = 
d_ªlocsz
 / 
d_ªlo˚¡
;

180 i‡(
öfo
->
∂åñoc
)

183 
size_t
 
b≥
 =

184 
d_∂ây≥
 =
DT_REL
 ? (
Elf64_Rñ
Ë: (
Elf64_Rña
);

185 
öfo
->
≈…ªloc
 = 
d_∂tsize
 / 
b≥
;

189 i‡(
öfo
->
∂tgŸ
)

191 
	`_ld∂tgŸ_öô
(
öfo
);

195 
curdyn
 = 
dyn
; curdyn->
d_èg
 !
DT_NULL
; curdyn++)

197 i‡(
curdyn
->
d_èg
 =
DT_NEEDED
)

199 
«me
 = 
öfo
->
dyn°r
 + 
curdyn
->
d_un
.
d_vÆ
;

200 i‡(
	`_ldchk«me
(
«me
))

202 
	`_ldadd«me
(
«me
);

203 *
curmod
 = (
moduÀ_t
 *)
	`_ldÆloc
((module_t));

204 (**
curmod
).
«me
 =Çame;

205 
	`_ldadd«me
((**
curmod
).
«me
);

206 i‡(
d_Ω©h
)

208 (**
curmod
).
ru≈©h
 = 
öfo
->
dyn°r
 + 
d_Ω©h
;

212 (**
curmod
).
ru≈©h
 = 
NULL
;

214 (**
curmod
).
√xt
 = 
NULL
;

215 (**
curmod
).
fú°
 = 
_ldfú°
;

216 
curmod
 = &((**curmod).
√xt
);

219 
_ldœ°
 = 
curmod
;

221  
öfo
;

222 
	}
}

229 
	$_ldåy›í
(c⁄° *
fûíame
, c⁄° *
∑th
)

231 
buf„r
[2048];

232 c⁄° *
pos
, *
ﬁdpos
;

233 
size_t
 
Àn
, 
Êí
;

234 
fd
;

236 i‡(!
∑th
 || !*path)

239 
Êí
 = 
	`°æí
(
fûíame
) + 1;

241 
ﬁdpos
 = 
pos
 = 
∑th
;

244 
	`°∫˝y
(
buf„r
, 
fûíame
, 
Êí
);

245 
fd
 = 
	`›í
(
buf„r
, 
O_RDONLY
, 0);

246 i‡(
fd
 >= 0)

248  
fd
;

252 *
pos
)

254 *
pos
 && *pos != ':')

255 
pos
++;

257 
Àn
 = 
pos
 - 
ﬁdpos
;

258 
	`°∫˝y
(
buf„r
, 
ﬁdpos
, 
Àn
 + 1);

259 
buf„r
[
Àn
] = '/';

260 
	`°∫˝y
(
buf„r
 + 
Àn
 + 1, 
fûíame
, 
Êí
);

262 
fd
 = 
	`›í
(
buf„r
, 
O_RDONLY
, 0);

263 i‡(
fd
 >= 0)

265  
fd
;

268 
ﬁdpos
 = ++
pos
;

272 
	}
}

295 
	$_ldm≠£˘
(
fd
, 
ba£addr
, 
Elf64_Phdr
 *
phdr
, 
ãxåñ
)

297 
uöçå_t
 
vmaddr
 = ((uöçå_t)
phdr
->
p_vaddr
Ë+ 
ba£addr
;

298 
uöçå_t
 
off£t
 = 
phdr
->
p_off£t
;

299 
uöçå_t
 
memsz
 = 
phdr
->
p_memsz
;

300 
uöçå_t
 
fûsz
 = 
phdr
->
p_fûesz
;

302 
uöçå_t
 
m≠_addr
 = 
	`åunc_∑ge
(
vmaddr
);

303 
uöçå_t
 
fûe_addr
 = 
	`åunc_∑ge
(
off£t
);

304 
uöçå_t
 
m≠_Àn
;

305 
uöçå_t
 
c›y_Àn
;

306 
≥rms
 = 0;

308 i‡(
phdr
->
p_Êags
 & 
PF_R
)

309 
≥rms
 |
PROT_READ
;

310 i‡(
phdr
->
p_Êags
 & 
PF_W
)

311 
≥rms
 |
PROT_WRITE
;

312 i‡(
phdr
->
p_Êags
 & 
PF_X
)

313 
≥rms
 |
PROT_EXEC
;

316 i‡(
ãxåñ
)

317 
≥rms
 |
PROT_WRITE
;

319 i‡(
memsz
 > 
fûsz
)

321 
m≠_Àn
 = 
	`åunc_∑ge
(
off£t
 + 
fûsz
Ë- 
fûe_addr
;

325 
m≠_Àn
 = 
	`round_∑ge
(
off£t
 + 
fûsz
Ë- 
fûe_addr
;

328 i‡(
m≠_Àn
 != 0)

330 i‡(
	`mm≠
((*)
m≠_addr
, 
m≠_Àn
, 
≥rms
,

331 ((
≥rms
 & 
PROT_WRITE
Ë? 
MAP_PRIVATE
 : 
MAP_SHARED
Ë| 
MAP_FIXED
,

332 
fd
, 
fûe_addr
Ë=
MAP_FAILED
)

334 
	`¥ötf
(
îr_m≠pög
, 
m≠_Àn
, 
m≠_addr
);

335 
	`exô
(1);

339 i‡(
memsz
 =
fûsz
)

344 
fûe_addr
 = 
	`åunc_∑ge
(
off£t
 + 
fûsz
);

345 
c›y_Àn
 = (
off£t
 + 
fûsz
Ë- 
fûe_addr
;

346 
m≠_addr
 = 
	`åunc_∑ge
(
vmaddr
 + 
fûsz
);

347 
m≠_Àn
 = 
	`round_∑ge
(
vmaddr
 + 
memsz
Ë- 
m≠_addr
;

349 i‡(
m≠_Àn
 != 0)

351 *
addr
;

352 
zfd
 = 
	`_ldzîo
();

353 
addr
 = 
	`mm≠
((*)
m≠_addr
, 
m≠_Àn
, 
≥rms
, 
MAP_PRIVATE
 | 
MAP_FIXED
,

354 
zfd
, 0);

355 i‡(
addr
 =
MAP_FAILED
)

357 
	`¥ötf
("%s", 
îr_zîom≠
);

358 
	`exô
(1);

360 
	`˛o£
(
zfd
);

362 i‡(
c›y_Àn
 != 0)

364 
	`l£ek
(
fd
, 
fûe_addr
, 
SEEK_SET
);

365 
	`ªad
(
fd
, 
addr
, 
c›y_Àn
);

368 
	}
}

375 
	$_ldlﬂdobj
(
moduÀ_t
 *
moduÀ
)

377 
bŸtom
, 
t›
, 
size
;

378 
Elf64_Ehdr
 *
hdr
;

379 
Elf64_Phdr
 *
phdr
;

380 
Elf64_Dyn
 *
dyn
 = 0;

381 *
loc
;

382 
fd
;

385 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, 
_ldív
.
ld_libøry_∑th
);

386 i‡(
fd
 == -1)

387 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, moduÀ->
ru≈©h
);

388 i‡(
fd
 == -1)

389 
fd
 = 
	`_ldåy›í
(
moduÀ
->
«me
, 
deÁu…_ru≈©h
);

390 i‡(
fd
 == -1)

392 
	`¥ötf
(
îr_ˇ¡föd
, 
moduÀ
->
«me
);

393 
	`exô
(1);

397 
hdr
 = (
Elf64_Ehdr
 *)
	`mm≠
(0, 
∑gesize
, 
PROT_READ
 | 
PROT_EXEC
, 
MAP_SHARED
, 
fd
,

399 
phdr
 = (
Elf64_Phdr
 *)(
hdr
->
e_phoff
 + ()hdr);

401 
bŸtom
 = ()-1;

402 
t›
 = 0;

403 
size_t
 
i
 = 0; i < 
hdr
->
e_phnum
; i++)

405 i‡(
phdr
[
i
].
p_ty≥
 =
PT_LOAD
)

407 i‡(
phdr
[
i
].
p_vaddr
 < 
bŸtom
)

408 
bŸtom
 = 
phdr
[
i
].
p_vaddr
;

409 i‡(
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
 > 
t›
)

410 
t›
 = 
phdr
[
i
].
p_vaddr
 +Öhdr[i].
p_memsz
;

414 
bŸtom
 = 
	`åunc_∑ge
(bottom);

415 
t›
 = 
	`round_∑ge
(top);

416 
size
 = 
t›
 - 
bŸtom
;

418 
loc
 = (*)
	`mm≠
(
NULL
, 
size
, 
PROT_NONE
, 
MAP_SHARED
, 
fd
, 0);

419 
	`munm≠
(
loc
, 
size
);

425 
off_t
 
dynoff
 = 0;

426 
Elf64_Dyn
 
curdyn
;

427 
ãxåñ
 = 0;

428 
size_t
 
i
 = 0; i < 
hdr
->
e_phnum
; i++)

430 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
)

432 
dynoff
 = 
phdr
[
i
].
p_off£t
;

436 
	`l£ek
(
fd
, 
dynoff
, 
SEEK_SET
);

439 i‡((
ssize_t
)(
curdyn
Ë> 
	`ªad
(
fd
, &curdyn, (curdyn)))

440 
	`exô
(1);

442 i‡(
curdyn
.
d_èg
 =
DT_TEXTREL
)

444 
ãxåñ
 = 1;

447 } 
curdyn
.
d_èg
 !
DT_NULL
);

449 
size_t
 
i
 = 0; i < 
hdr
->
e_phnum
; i++)

451 i‡(
phdr
[
i
].
p_ty≥
 =
PT_LOAD
)

452 
	`_ldm≠£˘
(
fd
, ()
loc
 - 
bŸtom
, 
phdr
 + 
i
, 
ãxåñ
);

453 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
)

454 
dyn
 = (
Elf64_Dyn
 *)(
loc
 + 
phdr
[
i
].
p_vaddr
);

456 
	`munm≠
(
hdr
, 
∑gesize
);

457 
	`˛o£
(
fd
);

460 
	`_ldlökobj
(
moduÀ
, 
loc
 - 
bŸtom
, 
dyn
);

461 
	}
}

463 
	$_ld˛ónup
(
°©us
)

465 
moduÀ_t
 *
curmod
;

468 
curmod
 = 
_ldfú°
->
√xt
;

469 
curmod
)

471 i‡(
curmod
->
föi
)

472 
curmod
->
	`föi
();

473 
curmod
 = curmod->
√xt
;

476 
	`exô
(
°©us
);

477 
	}
}

488 
ldöô_t
 
	$_ld°¨t
(**
ívú⁄
, 
auxv_t
 *
auxv
)

490 
uöt64_t
 
abuf
[10];

491 
moduÀ_t
 *
curmod
;

492 
Elf64_Phdr
 *
phdr
;

495 
	`mem£t
(
abuf
, 0, 10 * ());

496 
size_t
 
i
 = 0; 
auxv
[i].
a_ty≥
 !
AT_NULL
; i++)

498 i‡(
auxv
[
i
].
a_ty≥
 < 10)

500 
abuf
[
auxv
[
i
].
a_ty≥
] = (
uöt64_t
Ôuxv[i].
a_un
.
a_vÆ
;

504 
∑gesize
 = 
abuf
[
AT_PAGESZ
];

507 
	`_ldaöô
(
∑gesize
, 1);

509 
	`_ldív_öô
(
ívú⁄
);

511 
phdr
 = (
Elf64_Phdr
 *)
abuf
[
AT_PHDR
];

513 
size_t
 
i
 = 0; i < 
abuf
[
AT_PHNUM
]; i++)

515 i‡(
phdr
[
i
].
p_ty≥
 =
PT_DYNAMIC
)

517 
	`_ldlökobj
(
NULL
, (*)0, (
Elf64_Dyn
 *)
phdr
[
i
].
p_vaddr
);

522 
curmod
 = 
_ldfú°
->
√xt
;

523 
curmod
)

525 
	`_ldlﬂdobj
(
curmod
);

526 
curmod
 = curmod->
√xt
;

534 
curmod
 = 
_ldfú°
->
√xt
;

535 
curmod
)

537 
	`_ldªlocobj
(
curmod
);

538 
curmod
 = curmod->
√xt
;

540 
	`_ldªlocobj
(
_ldfú°
);

542 
curmod
 = 
_ldfú°
;

543 
curmod
)

545 
	`_ldªlo˝…
(
curmod
);

546 
curmod
 = curmod->
√xt
;

549 i‡(
_ldív
.
ld_böd_now
)

551 
curmod
 = 
_ldfú°
;

552 
curmod
)

554 
	`_ldbödnow
(
curmod
);

555 
curmod
 = curmod->
√xt
;

560 
curmod
 = 
_ldfú°
->
√xt
;

561 
curmod
)

563 i‡(
curmod
->
öô
)

565 
curmod
->
	`öô
();

567 
curmod
 = curmod->
√xt
;

571 
	`_ldvîify
(!
abuf
[
AT_ENTRY
], 
îr_n€¡ry
);

572  (
ldöô_t
)
abuf
[
AT_ENTRY
];

573 
	}
}

	@user/lib/ld-weenix/ldtypes.h

13 #i‚de‡
_ldty≥s_h_


14 
	#_ldty≥s_h_


	)

16 
	~"ñf.h
"

18 
	#LD_ERR_EXIT
 13

	)

20 
Elf64_auxv_t
 
	tauxv_t
;

22 (*
	gldfunc_t
)();

23 *
	tldsym_t
;

24 (*
	tldöô_t
)(
	t¨gc
, **
	t¨gv
, **
	tívp
, 
	tauxv_t
 *
	tauxv
);

26 
	sldív_t


28 
ld_böd_now
;

29 
ld_debug
;

30 c⁄° *
ld_¥ñﬂd
;

31 c⁄° *
ld_libøry_∑th
;

32 } 
	tldív_t
;

34 
ldív_t
 
_ldív
;

36 
	smoduÀ


38 *
«me
;

39 *
ru≈©h
;

41 
ba£
;

42 
Elf64_W‹d
 *
hash
;

43 
Elf64_Sym
 *
dynsym
;

44 *
dyn°r
;

46 
ldfunc_t
 
öô
;

47 
ldfunc_t
 
föi
;

49 
Elf64_Rña
 *
∂åñoc
;

50 
Elf64_Rña
 *
ªloc
;

52 
size_t
 
ƒñoc
;

53 
size_t
 
≈…ªloc
;

55 
moduÀ
 *
√xt
;

56 
moduÀ
 *
fú°
;

57 
Elf64_Addr
 *
∂tgŸ
;

58 } 
	tmoduÀ_t
;

	@user/lib/ld-weenix/ldutil.c

15 
	~"f˙é.h
"

16 
	~"°dio.h
"

17 
	~"°dlib.h
"

18 
	~"°rög.h
"

19 
	~"uni°d.h
"

21 
	~"ldty≥s.h
"

22 
	~"ldutû.h
"

24 c⁄° *
	gîr_zîo
 = "ld.so.1:Öanic - unableÅo open /dev/zero\n";

28 
	$_ldvîify
(
ã°
, c⁄° *
msg
)

30 i‡(
ã°
)

32 ()
	`wrôe
(
STDERR_FILENO
, 
msg
, 
	`°æí
(msg));

33 
	`exô
(
LD_ERR_EXIT
);

35 
	}
}

41 
	$_ldzîo
()

43 
zfd
;

45 i‡((
zfd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
, 0)) < 0)

47 
	`¥ötf
("%s", 
îr_zîo
);

48 
	`exô
(1);

51  
zfd
;

52 
	}
}

58 
	$_ldñfhash
(c⁄° *
«me
)

60 
uöt32_t
 
h
 = 0, 
g
;

62 *
«me
)

64 
h
 = (h << 4Ë+ *
«me
++;

66 i‡((
g
 = 
h
 & 0xf0000000))

67 
h
 ^
g
 >> 24;

68 
h
 &~
g
;

71  
h
;

72 
	}
}

	@user/lib/ld-weenix/ldutil.h

13 #i‚de‡
_ldutû_h_


14 
	#_ldutû_h_


	)

15 
	~"ldty≥s.h
"

16 #ifde‡
__˝lu•lus


21 
_ldvîify
(
ã°
, c⁄° *
msg
);

22 
_ldzîo
();

24 
_ldñfhash
(c⁄° *
«me
);

25 
_ldåy›í
(c⁄° *
fûíame
, c⁄° *
∑th
);

26 
_ldm≠£˘
(
fd
, 
ba£addr
, 
Elf64_Phdr
 *
phdr
, 
ãxåñ
);

27 
_ldlﬂdobj
(
moduÀ_t
 *
moduÀ
);

28 
_ldªlocobj
(
moduÀ_t
 *
moduÀ
);

29 
_ld˛ónup
();

30 
ldöô_t
 
_ld°¨t
(**
ívú⁄
, 
auxv_t
 *
auxv
);

32 
_ldªlo˝…
(
moduÀ_t
 *
moduÀ
);

33 
_ld∂tgŸ_öô
(
moduÀ_t
 *
moduÀ
);

35 #ifde‡
__˝lu•lus


	@user/lib/ld-weenix/smacros.h

8 #i‚de‡
_sma¸os_h_


9 
	#_sma¸os_h_


	)

11 #ifde‡
__˝lu•lus


18 
	#LENTRY
(
x
) \

19 .
£˘i⁄
 ".text"; \

20 .
Æign
 4; \

21 .
ty≥
 
x
, #function; \

22 
x
:

	)

24 
	#ALTLENTRY
(
x
) \

25 .
ty≥
 
x
, #function; \

26 
x
:

	)

30 
	#GET_GOT
(
x
) \

31 
ˇŒ
 1f; \

32 
£thi
 % 
	`hi
(
_GLOBAL_OFFSET_TABLE_
 + 4), 
x
; \

33 1 : 
‹
 
x
, % 
	`lo
(
_GLOBAL_OFFSET_TABLE_
 + 8), x; \

34 
add
 % 
o7
, 
x
, 
	)
x

36 #ifde‡
__˝lu•lus


	@user/lib/libc/errno.c

1 
	~<î∫o.h
>

3 
	g_libc_î∫o
;

	@user/lib/libc/malloc.c

10 
	~"f˙é.h
"

11 
	~"°ddef.h
"

12 
	~"°dlib.h
"

13 
	~"°rög.h
"

14 
	~"sys/mm™.h
"

15 
	~"sys/ty≥s.h
"

16 
	~"uni°d.h
"

18 
	#__ölöe__
 
ölöe


	)

21 
	tu_sh‹t
;

22 
	tu_ch¨
;

23 
	tu_öt
;

24 
	tu_l⁄g
;

25 
	#_›í
 
›í


	)

26 
	#_wrôe
 
wrôe


	)

35 #i‚de‡
MALLOC_EXTRA_SANITY


36 #unde‡
MALLOC_EXTRA_SANITY


43 
	#SOME_JUNK
 0xd0

	)

59 
	#mÆloc_∑geshi·
 12U

	)

60 
	#mÆloc_mösize
 16U

	)

62 
	gfdzîo
;

63 
	#MMAP_FD
 
fdzîo


	)

64 
	#INIT_MMAP
() \

66 i‡((
fdzîo
 = 
	`_›í
("/dev/zîo", 
O_RDWR
, 0000)) == -1) \

67 
	`wπîr‹
("open of /dev/zero"); \

68 }

	)

69 
	#MADV_FREE
 
MADV_DONTNEED


	)

79 
	spgöfo


81 
pgöfo
 *
	m√xt
;

82 *
	m∑ge
;

83 
u_sh‹t
 
	msize
;

84 
u_sh‹t
 
	mshi·
;

85 
u_sh‹t
 
	m‰ì
;

86 
u_sh‹t
 
	mtŸÆ
;

87 
u_öt
 
	mbôs
[1];

94 
	spg‰ì


96 
pg‰ì
 *
	m√xt
;

97 
pg‰ì
 *
	m¥ev
;

98 *
	m∑ge
;

99 *
	míd
;

100 
size_t
 
	msize
;

107 
	#MALLOC_BITS
 (8 * (
u_öt
))

	)

112 
	#MALLOC_NOT_MINE
 ((
pgöfo
 *)0)

	)

113 
	#MALLOC_FREE
 ((
pgöfo
 *)1)

	)

114 
	#MALLOC_FIRST
 ((
pgöfo
 *)2)

	)

115 
	#MALLOC_FOLLOW
 ((
pgöfo
 *)3)

	)

116 
	#MALLOC_MAGIC
 ((
pgöfo
 *)4)

	)

118 #i‚de‡
mÆloc_∑geshi·


119 
	#mÆloc_∑geshi·
 12U

	)

122 #i‚de‡
mÆloc_mösize


123 
	#mÆloc_mösize
 16U

	)

126 #i‡!
deföed
(
mÆloc_∑gesize
)

127 
	#mÆloc_∑gesize
 (1UL << 
mÆloc_∑geshi·
)

	)

130 #i‡((1 << 
mÆloc_∑geshi·
Ë!
mÆloc_∑gesize
)

134 #i‚de‡
mÆloc_maxsize


135 
	#mÆloc_maxsize
 ((
mÆloc_∑gesize
Ë>> 1)

	)

139 
	#mÆloc_∑gemask
 ((
mÆloc_∑gesize
)-1)

	)

141 
	#∑gîound
(
foo
Ë(((fooË+ (
mÆloc_∑gemask
)Ë& (~(mÆloc_∑gemask)))

	)

142 
	#±r2ödex
(
foo
Ë(((
u_l⁄g
)(fooË>> 
mÆloc_∑geshi·
Ë- 
mÆloc_‹igo
)

	)

144 #i‚de‡
THREAD_LOCK


145 
	#THREAD_LOCK
()

	)

148 #i‚de‡
THREAD_UNLOCK


149 
	#THREAD_UNLOCK
()

	)

152 #i‚de‡
MMAP_FD


153 
	#MMAP_FD
 (-1)

	)

156 #i‚de‡
INIT_MMAP


157 
	#INIT_MMAP
()

	)

161 
	gmÆloc_°¨ãd
;

164 
	gmÆloc_a˘ive
;

167 
	gmÆloc_ˇche
 = 16;

170 
u_l⁄g
 
	gmÆloc_‹igo
;

173 
u_l⁄g
 
	gœ°_ödex
;

176 
pgöfo
 **
	g∑ge_dú
;

179 
	gmÆloc_nöfo
;

182 
pg‰ì
 
	g‰ì_li°
;

185 
	gmÆloc_ab‹t
;

188 
	gsuicide
;

191 
	gmÆloc_ªÆloc
;

194 
	gmÆloc_höt
 = 0;

197 
	gmÆloc_xmÆloc
;

200 
	gmÆloc_sysv
;

203 
	gmÆloc_zîo
;

206 
	gmÆloc_junk
;

208 #ifde‡
HAS_UTRACE


211 
	gmÆloc_uåa˚
;

213 
	sut


215 *
	mp
;

216 
size_t
 
	ms
;

217 *
	mr
;

220 
uåa˚
 
__P
((
ut
 *, ));

222 
	#UTRACE
(
a
, 
b
, 
c
) \

223 i‡(
mÆloc_uåa˚
) \

225 
ut
 
u
; \

226 
u
.
p
 = 
a
; \

227 
u
.
s
 = 
b
; \

228 
u
.
r
 = 
c
; \

229 
	`uåa˚
(&
u
,  u); \

230 }

	)

232 
	#UTRACE
(
a
, 
b
, 
c
)

	)

236 *
	gmÆloc_brk
;

239 
pg‰ì
 *
	gpx
;

242 *
	gmÆloc_›ti⁄s
;

243 *
	tˇddr_t
;

245 *
	gmÆloc_func
;

248 
	#MMAP
(
size
) \

249 
	`mm≠
(0, (
size
), 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
MMAP_FD
, 0);

	)

254 
exãnd_pgdú
(
u_l⁄g
 
ödex
);

256 *
imÆloc
(
size_t
 
size
);

258 
i‰ì
(*
±r
);

260 *
úóŒoc
(*
±r
, 
size_t
 
size
);

262 #ifde‡
HAS_PROGNAME


263 *
__¥og«me
;

265 *
	g__¥og«me
 = "";

268 #i‚de‡
HAS_ABORT


269 
	#ab‹t
(Ë
	`exô
(1)

	)

272 
	$wπîr‹
(*
p
)

274 *
q
 = "Érror: ";

275 
	`_wrôe
(
STDERR_FILENO
, 
__¥og«me
, 
	`°æí
(__progname));

276 
	`_wrôe
(
STDERR_FILENO
, 
mÆloc_func
, 
	`°æí
(malloc_func));

277 
	`_wrôe
(
STDERR_FILENO
, 
q
, 
	`°æí
(q));

278 
	`_wrôe
(
STDERR_FILENO
, 
p
, 
	`°æí
(p));

279 
suicide
 = 1;

280 
	`ab‹t
();

281 
	}
}

283 
	$wπw¨nög
(*
p
)

285 *
q
 = " warning: ";

286 i‡(
mÆloc_ab‹t
)

288 
	`wπîr‹
(
p
);

290 
	`_wrôe
(
STDERR_FILENO
, 
__¥og«me
, 
	`°æí
(__progname));

291 
	`_wrôe
(
STDERR_FILENO
, 
mÆloc_func
, 
	`°æí
(malloc_func));

292 
	`_wrôe
(
STDERR_FILENO
, 
q
, 
	`°æí
(q));

293 
	`_wrôe
(
STDERR_FILENO
, 
p
, 
	`°æí
(p));

294 
	}
}

299 *
	$m≠_∑ges
(
∑ges
)

301 
ˇddr_t
 
ªsu…
, 
èû
;

303 
ªsu…
 = (
ˇddr_t
)
	`∑gîound
((
u_l⁄g
)
	`sbrk
(0));

304 
èû
 = 
ªsu…
 + (
∑ges
 << 
mÆloc_∑geshi·
);

306 i‡(
	`brk
(
èû
))

308 #ifde‡
EXTRA_SANITY


309 
	`wπîr‹
("(ES): map_pages fails\n");

314 
œ°_ödex
 = 
	`±r2ödex
(
èû
) - 1;

315 
mÆloc_brk
 = 
èû
;

317 i‡((
œ°_ödex
 + 1Ë>
mÆloc_nöfo
 && !
	`exãnd_pgdú
(last_index))

322  
ªsu…
;

323 
	}
}

328 
	$exãnd_pgdú
(
u_l⁄g
 
ödex
)

330 
pgöfo
 **
√w
, **
ﬁd
;

331 
i
, 
ﬁdÀn
;

334 
i
 = 
ödex
 *  *
∑ge_dú
;

335 
i
 /
mÆloc_∑gesize
;

336 
i
 += 2;

339 
ﬁdÀn
 = 
mÆloc_nöfo
 *  *
∑ge_dú
;

357 
√w
 = (
pgöfo
 **)
	`MMAP
(
i
 * 
mÆloc_∑gesize
);

358 i‡(
√w
 =(
pgöfo
 **)-1)

364 
	`mem˝y
(
√w
, 
∑ge_dú
, 
mÆloc_nöfo
 *  *page_dir);

367 
mÆloc_nöfo
 = 
i
 * 
mÆloc_∑gesize
 /  *
∑ge_dú
;

370 
ﬁd
 = 
∑ge_dú
;

371 
∑ge_dú
 = 
√w
;

374 
	`munm≠
((*)
ﬁd
, 
ﬁdÀn
);

376 
	}
}

381 
	$mÆloc_öô
()

383 *
p
;

384 
i
, 
j
;

386 
	`INIT_MMAP
();

388 #ifde‡
EXTRA_SANITY


389 
mÆloc_junk
 = 1;

392 
i
 = 0; i < 3; i++)

394 i‡(
i
 == 0)

396 #ifde‡
HAS_READLINK


397 
î∫oßve
 = 
î∫o
;

398 
j
 = 
	`ªadlök
("/ëc/mÆloc.c⁄f", 
b
,  b - 1);

399 
î∫o
 = 
î∫oßve
;

400 i‡(
j
 <= 0)

402 
b
[
j
] = '\0';

403 
p
 = 
b
;

405 
p
 = 
NULL
;

408 i‡(
i
 == 1)

410 #ifde‡
HAS_GETENV


411 
p
 = 
	`gëív
("MALLOC_OPTIONS");

413 
p
 = 
NULL
;

418 
p
 = 
mÆloc_›ti⁄s
;

420 ; 
p
 && *p;Ö++)

422 *
p
)

425 
mÆloc_ˇche
 <<= 1;

428 
mÆloc_ˇche
 >>= 1;

431 
mÆloc_ab‹t
 = 0;

434 
mÆloc_ab‹t
 = 1;

437 
mÆloc_höt
 = 0;

440 
mÆloc_höt
 = 1;

443 
mÆloc_ªÆloc
 = 0;

446 
mÆloc_ªÆloc
 = 1;

449 
mÆloc_junk
 = 0;

452 
mÆloc_junk
 = 1;

454 #ifde‡
HAS_UTRACE


456 
mÆloc_uåa˚
 = 0;

459 
mÆloc_uåa˚
 = 1;

463 
mÆloc_sysv
 = 0;

466 
mÆloc_sysv
 = 1;

469 
mÆloc_xmÆloc
 = 0;

472 
mÆloc_xmÆloc
 = 1;

475 
mÆloc_zîo
 = 0;

478 
mÆloc_zîo
 = 1;

481 
j
 = 
mÆloc_ab‹t
;

482 
mÆloc_ab‹t
 = 0;

483 
	`wπw¨nög
("unknown char in MALLOC_OPTIONS\n");

484 
mÆloc_ab‹t
 = 
j
;

490 
	`UTRACE
(0, 0, 0);

496 i‡(
mÆloc_zîo
)

498 
mÆloc_junk
 = 1;

505 i‡(
mÆloc_junk
)

507 
mÆloc_ªÆloc
 = 1;

511 
∑ge_dú
 = (
pgöfo
 **)
	`MMAP
(
mÆloc_∑gesize
);

513 i‡(
∑ge_dú
 =(
pgöfo
 **)-1)

515 
	`wπîr‹
("mmap(2) failed, checkÜimits\n");

522 
mÆloc_‹igo
 = ((
u_l⁄g
)
	`∑gîound
((u_l⁄g)
	`sbrk
(0))Ë>> 
mÆloc_∑geshi·
;

523 
mÆloc_‹igo
 -
mÆloc_∑geshi·
;

525 
mÆloc_nöfo
 = 
mÆloc_∑gesize
 /  *
∑ge_dú
;

529 i‡(!
mÆloc_ˇche
)

531 
mÆloc_ˇche
++;

534 
mÆloc_ˇche
 <<
mÆloc_∑geshi·
;

540 
px
 = (
pg‰ì
 *)
	`imÆloc
( *px);

543 
mÆloc_°¨ãd
++;

544 
	}
}

549 *
	$mÆloc_∑ges
(
size_t
 
size
)

551 *
p
, *
dñay_‰ì
 = 0;

552 
i
;

553 
pg‰ì
 *
pf
;

554 
u_l⁄g
 
ödex
;

556 
size
 = 
	`∑gîound
(size);

558 
p
 = 0;

561 
pf
 = 
‰ì_li°
.
√xt
;Öf;Öf =Öf->next)

563 #ifde‡
EXTRA_SANITY


564 i‡(
pf
->
size
 & 
mÆloc_∑gemask
)

565 
	`wπîr‹
("(ES): junkÜengthÉntry on free_list\n");

566 i‡(!
pf
->
size
)

567 
	`wπîr‹
("(ES): zeroÜengthÉntry on free_list\n");

568 i‡(
pf
->
∑ge
 =pf->
íd
)

569 
	`wπîr‹
("(ES): zeroÉntry on free_list\n");

570 i‡(
pf
->
∑ge
 >Öf->
íd
)

571 
	`wπîr‹
("(ES): sickÉntry on free_list\n");

572 i‡((*)
pf
->
∑ge
 >(*)
	`sbrk
(0))

573 
	`wπîr‹
("(ES):Éntry on free_listÖast brk\n");

574 i‡(
∑ge_dú
[
	`±r2ödex
(
pf
->
∑ge
)] !
MALLOC_FREE
)

575 
	`wπîr‹
("(ES):Çon-free firstÖage on free-list\n");

576 i‡(
∑ge_dú
[
	`±r2ödex
(
pf
->
íd
Ë- 1] !
MALLOC_FREE
)

577 
	`wπîr‹
("(ES):Çon-freeÜastÖage on free-list\n");

580 i‡(
pf
->
size
 < size)

585 i‡(
pf
->
size
 == size)

587 
p
 = 
pf
->
∑ge
;

588 i‡(
pf
->
√xt
)

590 
pf
->
√xt
->
¥ev
 =Öf->prev;

592 
pf
->
¥ev
->
√xt
 =Öf->next;

593 
dñay_‰ì
 = 
pf
;

597 
p
 = 
pf
->
∑ge
;

598 
pf
->
∑ge
 = (*Ìf->∑gê+ 
size
;

599 
pf
->
size
 -= size;

603 #ifde‡
EXTRA_SANITY


604 i‡(
p
 && 
∑ge_dú
[
	`±r2ödex
’)] !
MALLOC_FREE
)

605 
	`wπîr‹
("(ES):állocatedÇon-freeÖage on free-list\n");

608 
size
 >>
mÆloc_∑geshi·
;

611 i‡(!
p
)

613 
p
 = 
	`m≠_∑ges
(
size
);

616 i‡(
p
)

618 
ödex
 = 
	`±r2ödex
(
p
);

619 
∑ge_dú
[
ödex
] = 
MALLOC_FIRST
;

620 
i
 = 1; i < 
size
; i++)

622 
∑ge_dú
[
ödex
 + 
i
] = 
MALLOC_FOLLOW
;

625 i‡(
mÆloc_junk
)

627 
	`mem£t
(
p
, 
SOME_JUNK
, 
size
 << 
mÆloc_∑geshi·
);

631 i‡(
dñay_‰ì
)

633 i‡(!
px
)

635 
px
 = 
dñay_‰ì
;

639 
	`i‰ì
(
dñay_‰ì
);

643  
p
;

644 
	}
}

650 
__ölöe__
 
	$mÆloc_make_chunks
(
bôs
)

652 
pgöfo
 *
bp
;

653 *
µ
;

654 
i
, 
k
, 
l
;

657 
µ
 = 
	`mÆloc_∑ges
(
mÆloc_∑gesize
);

658 i‡(!
µ
)

664 
l
 = 
	`off£tof
(
pgöfo
, 
bôs
[0]);

665 
l
 + 
bp
->
bôs
[0] *

666 (((
mÆloc_∑gesize
 >> 
bôs
Ë+ 
MALLOC_BITS
 - 1) / MALLOC_BITS);

669 i‡((1 << 
bôs
Ë<
l
 +Ü)

671 
bp
 = (
pgöfo
 *)
µ
;

675 
bp
 = (
pgöfo
 *)
	`imÆloc
(
l
);

676 i‡(!
bp
)

678 
	`i‰ì
(
µ
);

683 
bp
->
size
 = (1 << 
bôs
);

684 
bp
->
shi·
 = 
bôs
;

685 
bp
->
tŸÆ
 = bp->
‰ì
 = 
mÆloc_∑gesize
 >> 
bôs
;

686 
bp
->
∑ge
 = 
µ
;

689 
k
 = 
bp
->
tŸÆ
;

690 
i
 = 0;

693 ; 
k
 - 
i
 >()
MALLOC_BITS
; i += MALLOC_BITS)

695 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] = ~0;

698 ; 
i
 < 
k
; i++)

700 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] |= 1 << (i % MALLOC_BITS);

703 i‡(
bp
 =bp->
∑ge
)

706 
i
 = 0; 
l
 > 0; i++)

708 
bp
->
bôs
[
i
 / 
MALLOC_BITS
] &= ~(1 << (i % MALLOC_BITS));

709 
bp
->
‰ì
--;

710 
bp
->
tŸÆ
--;

711 
l
 -(1 << 
bôs
);

717 
∑ge_dú
[
	`±r2ödex
(
µ
)] = 
bp
;

719 
bp
->
√xt
 = 
∑ge_dú
[
bôs
];

720 
∑ge_dú
[
bôs
] = 
bp
;

725 
	}
}

730 *
	$mÆloc_byãs
(
size_t
 
size
)

732 
i
, 
j
;

733 
u_öt
 
u
;

734 
pgöfo
 *
bp
;

735 
k
;

736 
u_öt
 *
Õ
;

739 i‡(
size
 < 
mÆloc_mösize
)

741 
size
 = 
mÆloc_mösize
;

745 
j
 = 1;

746 
i
 = 
size
 - 1;

747 
i
 >>= 1)

748 
j
++;

751 i‡(!
∑ge_dú
[
j
] && !
	`mÆloc_make_chunks
(j))

756 
bp
 = 
∑ge_dú
[
j
];

759 
Õ
 = 
bp
->
bôs
; !*lp;Üp++)

763 
u
 = 1;

764 
k
 = 0;

765 !(*
Õ
 & 
u
))

767 
u
 += u;

768 
k
++;

770 *
Õ
 ^
u
;

773 i‡(!--
bp
->
‰ì
)

775 
∑ge_dú
[
j
] = 
bp
->
√xt
;

776 
bp
->
√xt
 = 0;

780 
k
 +(
Õ
 - 
bp
->
bôs
Ë* 
MALLOC_BITS
;

781 
k
 <<
bp
->
shi·
;

783 i‡(
mÆloc_junk
)

785 
	`mem£t
((
u_ch¨
 *)
bp
->
∑ge
 + 
k
, 
SOME_JUNK
, bp->
size
);

788  (
u_ch¨
 *)
bp
->
∑ge
 + 
k
;

789 
	}
}

794 *
	$imÆloc
(
size_t
 
size
)

796 *
ªsu…
;

798 i‡(
suicide
)

799 
	`ab‹t
();

801 i‡((
size
 + 
mÆloc_∑gesize
) < size)

803 
ªsu…
 = 0;

805 i‡(
size
 <
mÆloc_maxsize
)

807 
ªsu…
 = 
	`mÆloc_byãs
(
size
);

811 
ªsu…
 = 
	`mÆloc_∑ges
(
size
);

814 i‡(
mÆloc_ab‹t
 && !
ªsu…
)

816 
	`wπîr‹
("allocation failed.\n");

819 i‡(
mÆloc_zîo
 && 
ªsu…
)

821 
	`mem£t
(
ªsu…
, 0, 
size
);

824  
ªsu…
;

825 
	}
}

830 *
	$úóŒoc
(*
±r
, 
size_t
 
size
)

832 *
p
;

833 
u_l⁄g
 
osize
, 
ödex
;

834 
pgöfo
 **
mp
;

835 
i
;

837 i‡(
suicide
)

838 
	`ab‹t
();

840 
ödex
 = 
	`±r2ödex
(
±r
);

842 i‡(
ödex
 < 
mÆloc_∑geshi·
)

844 
	`wπw¨nög
("junkÖointer,ÅooÜowÅo make sense.\n");

848 i‡(
ödex
 > 
œ°_ödex
)

850 
	`wπw¨nög
("junkÖointer,Åoo highÅo make sense.\n");

854 
mp
 = &
∑ge_dú
[
ödex
];

856 i‡(*
mp
 =
MALLOC_FIRST
)

860 i‡((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
)

862 
	`wπw¨nög
("modified (page-)Öointer.\n");

867 
osize
 = 
mÆloc_∑gesize
; *++
mp
 =
MALLOC_FOLLOW
;)

869 
osize
 +
mÆloc_∑gesize
;

872 i‡(!
mÆloc_ªÆloc
 &&

873 
size
 <
osize
 &&

874 
size
 > (
osize
 - 
mÆloc_∑gesize
))

876  
±r
;

879 i‡(*
mp
 >
MALLOC_MAGIC
)

883 i‡(((
u_l⁄g
)
±r
 & ((*
mp
)->
size
 - 1)))

885 
	`wπw¨nög
("modified (chunk-)Öointer.\n");

890 
i
 = ((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
Ë>> (*
mp
)->
shi·
;

893 i‡((*
mp
)->
bôs
[
i
 / 
MALLOC_BITS
] & (1 << (i % MALLOC_BITS)))

895 
	`wπw¨nög
("chunk isálready free.\n");

899 
osize
 = (*
mp
)->
size
;

901 i‡(!
mÆloc_ªÆloc
 &&

902 
size
 < 
osize
 &&

903 (
size
 > 
osize
 / 2 ||

904 
osize
 =
mÆloc_mösize
))

906  
±r
;

911 
	`wπw¨nög
("pointerÅo wrongÖage.\n");

915 
p
 = 
	`imÆloc
(
size
);

917 i‡(
p
)

920 i‡(!
size
 || !
osize
)

923 i‡(
osize
 < 
size
)

925 
	`mem˝y
(
p
, 
±r
, 
osize
);

929 
	`mem˝y
(
p
, 
±r
, 
size
);

931 
	`i‰ì
(
±r
);

933  
p
;

934 
	}
}

940 
__ölöe__
 
	$‰ì_∑ges
(*
±r
, 
ödex
, 
pgöfo
 *
öfo
)

942 
i
;

943 
pg‰ì
 *
pf
, *
±
 = 0;

944 
u_l⁄g
 
l
;

945 *
èû
;

947 i‡(
öfo
 =
MALLOC_FREE
)

949 
	`wπw¨nög
("page isálready free.\n");

953 i‡(
öfo
 !
MALLOC_FIRST
)

955 
	`wπw¨nög
("pointerÅo wrongÖage.\n");

959 i‡((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
)

961 
	`wπw¨nög
("modified (page-)Öointer.\n");

966 
∑ge_dú
[
ödex
] = 
MALLOC_FREE
;

967 
i
 = 1; 
∑ge_dú
[
ödex
 + i] =
MALLOC_FOLLOW
; i++)

969 
∑ge_dú
[
ödex
 + 
i
] = 
MALLOC_FREE
;

972 
l
 = 
i
 << 
mÆloc_∑geshi·
;

974 i‡(
mÆloc_junk
)

976 
	`mem£t
(
±r
, 
SOME_JUNK
, 
l
);

979 #ifde‡
HAS_MADVISE


980 i‡(
mÆloc_höt
)

981 
	`madvi£
(
±r
, 
l
, 
MADV_FREE
);

984 
èû
 = (*)
±r
 + 
l
;

987 i‡(!
px
)

989 
px
 = 
	`imÆloc
( *
±
);

991 
px
->
∑ge
 = 
±r
;

992 
px
->
íd
 = 
èû
;

993 
px
->
size
 = 
l
;

994 i‡(!
‰ì_li°
.
√xt
)

997 
px
->
√xt
 = 
‰ì_li°
.next;

998 
px
->
¥ev
 = &
‰ì_li°
;

999 
‰ì_li°
.
√xt
 = 
px
;

1000 
pf
 = 
px
;

1001 
px
 = 0;

1006 
èû
 = (*)
±r
 + 
l
;

1008 
pf
 = 
‰ì_li°
.
√xt
;Öf->
íd
 < 
±r
 &&Öf->next;Öf =Öf->next)

1011 i‡(
pf
->
∑ge
 > 
èû
)

1014 
px
->
√xt
 = 
pf
;

1015 
px
->
¥ev
 = 
pf
->prev;

1016 
pf
->
¥ev
 = 
px
;

1017 
px
->
¥ev
->
√xt
 =Öx;

1018 
pf
 = 
px
;

1019 
px
 = 0;

1021 i‡(
pf
->
íd
 =
±r
)

1024 
pf
->
íd
 = (*Ìf->íd + 
l
;

1025 
pf
->
size
 +
l
;

1026 i‡(
pf
->
√xt
 &&Öf->
íd
 =pf->√xt->
∑ge
)

1029 
±
 = 
pf
->
√xt
;

1030 
pf
->
íd
 = 
±
->end;

1031 
pf
->
size
 +
±
->size;

1032 
pf
->
√xt
 = 
±
->next;

1033 i‡(
pf
->
√xt
)

1034 
pf
->
√xt
->
¥ev
 =Öf;

1037 i‡(
pf
->
∑ge
 =
èû
)

1040 
pf
->
size
 +
l
;

1041 
pf
->
∑ge
 = 
±r
;

1043 i‡(!
pf
->
√xt
)

1046 
px
->
√xt
 = 0;

1047 
px
->
¥ev
 = 
pf
;

1048 
pf
->
√xt
 = 
px
;

1049 
pf
 = 
px
;

1050 
px
 = 0;

1054 
	`wπîr‹
("freelist is destroyed.\n");

1059 i‡(!
pf
->
√xt
 &&

1060 
pf
->
size
 > 
mÆloc_ˇche
 &&

1061 
pf
->
íd
 =
mÆloc_brk
 &&

1062 
mÆloc_brk
 =
	`sbrk
(0))

1069 
pf
->
íd
 = (*Ìf->
∑ge
 + 
mÆloc_ˇche
;

1070 
pf
->
size
 = 
mÆloc_ˇche
;

1072 
	`brk
(
pf
->
íd
);

1073 
mÆloc_brk
 = 
pf
->
íd
;

1075 
ödex
 = 
	`±r2ödex
(
pf
->
íd
);

1076 
œ°_ödex
 = 
ödex
 - 1;

1078 
i
 = 
ödex
; i <
œ°_ödex
;)

1079 
∑ge_dú
[
i
++] = 
MALLOC_NOT_MINE
;

1083 i‡(
±
)

1084 
	`i‰ì
(
±
);

1085 
	}
}

1091 
__ölöe__
 
	$‰ì_byãs
(*
±r
, 
ödex
, 
pgöfo
 *
öfo
)

1093 
i
;

1094 
pgöfo
 **
mp
;

1095 *
vp
;

1098 
i
 = ((
u_l⁄g
)
±r
 & 
mÆloc_∑gemask
Ë>> 
öfo
->
shi·
;

1100 i‡(((
u_l⁄g
)
±r
 & (
öfo
->
size
 - 1)))

1102 
	`wπw¨nög
("modified (chunk-)Öointer.\n");

1106 i‡(
öfo
->
bôs
[
i
 / 
MALLOC_BITS
] & (1 << (i % MALLOC_BITS)))

1108 
	`wπw¨nög
("chunk isálready free.\n");

1112 i‡(
mÆloc_junk
)

1114 
	`mem£t
(
±r
, 
SOME_JUNK
, 
öfo
->
size
);

1117 
öfo
->
bôs
[
i
 / 
MALLOC_BITS
] |= 1 << (i % MALLOC_BITS);

1118 
öfo
->
‰ì
++;

1120 
mp
 = 
∑ge_dú
 + 
öfo
->
shi·
;

1122 i‡(
öfo
->
‰ì
 == 1)

1126 
mp
 = 
∑ge_dú
 + 
öfo
->
shi·
;

1128 *
mp
 && (*mp)->
√xt
 && (*mp)->√xt->
∑ge
 < 
öfo
->page)

1129 
mp
 = &(*mp)->
√xt
;

1130 
öfo
->
√xt
 = *
mp
;

1131 *
mp
 = 
öfo
;

1135 i‡(
öfo
->
‰ì
 !öfo->
tŸÆ
)

1141 *
mp
 !
öfo
)

1143 
mp
 = &((*mp)->
√xt
);

1144 #ifde‡
EXTRA_SANITY


1145 i‡(!*
mp
)

1146 
	`wπîr‹
("(ES): Not on queue\n");

1149 *
mp
 = 
öfo
->
√xt
;

1152 
∑ge_dú
[
	`±r2ödex
(
öfo
->
∑ge
)] = 
MALLOC_FIRST
;

1153 
vp
 = 
öfo
->
∑ge
;

1154 i‡(
vp
 !(*)
öfo
)

1156 
	`i‰ì
(
öfo
);

1158 
	`i‰ì
(
vp
);

1159 
	}
}

1161 
	$i‰ì
(*
±r
)

1163 
pgöfo
 *
öfo
;

1164 
ödex
;

1167 i‡(!
±r
)

1172 i‡(!
mÆloc_°¨ãd
)

1174 
	`wπw¨nög
("malloc() hasÇever been called.\n");

1179 i‡(
suicide
)

1184 
ödex
 = 
	`±r2ödex
(
±r
);

1186 i‡(
ödex
 < 
mÆloc_∑geshi·
)

1188 
	`wπw¨nög
("junkÖointer,ÅooÜowÅo make sense.\n");

1192 i‡(
ödex
 > 
œ°_ödex
)

1194 
	`wπw¨nög
("junkÖointer,Åoo highÅo make sense.\n");

1198 
öfo
 = 
∑ge_dú
[
ödex
];

1200 i‡(
öfo
 < 
MALLOC_MAGIC
)

1202 
	`‰ì_∑ges
(
±r
, 
ödex
, 
öfo
);

1206 
	`‰ì_byãs
(
±r
, 
ödex
, 
öfo
);

1209 
	}
}

1215 *
	$mÆloc
(
size_t
 
size
)

1217 *
r
;

1219 
	`THREAD_LOCK
();

1220 
mÆloc_func
 = " in malloc():";

1221 i‡(
mÆloc_a˘ive
++)

1223 
	`wπw¨nög
("recursive call.\n");

1224 
mÆloc_a˘ive
--;

1227 i‡(!
mÆloc_°¨ãd
)

1229 
	`mÆloc_öô
();

1231 i‡(
mÆloc_sysv
 && !
size
)

1233 
r
 = 0;

1237 
r
 = 
	`imÆloc
(
size
);

1239 
	`UTRACE
(0, 
size
, 
r
);

1240 
mÆloc_a˘ive
--;

1241 
	`THREAD_UNLOCK
();

1242 i‡(
mÆloc_xmÆloc
 && !
r
)

1244 
	`wπîr‹
("out of memory.\n");

1246  (
r
);

1247 
	}
}

1249 
	$‰ì
(*
±r
)

1251 
	`THREAD_LOCK
();

1252 
mÆloc_func
 = " in free():";

1253 i‡(
mÆloc_a˘ive
++)

1255 
	`wπw¨nög
("recursive call.\n");

1256 
mÆloc_a˘ive
--;

1261 
	`i‰ì
(
±r
);

1262 
	`UTRACE
(
±r
, 0, 0);

1264 
mÆloc_a˘ive
--;

1265 
	`THREAD_UNLOCK
();

1267 
	}
}

1269 *
	$ªÆloc
(*
±r
, 
size_t
 
size
)

1271 *
r
;

1273 
	`THREAD_LOCK
();

1274 
mÆloc_func
 = " inÑealloc():";

1275 i‡(
mÆloc_a˘ive
++)

1277 
	`wπw¨nög
("recursive call.\n");

1278 
mÆloc_a˘ive
--;

1281 i‡(
±r
 && !
mÆloc_°¨ãd
)

1283 
	`wπw¨nög
("malloc() hasÇever been called.\n");

1284 
±r
 = 0;

1286 i‡(!
mÆloc_°¨ãd
)

1288 
	`mÆloc_öô
();

1290 i‡(
mÆloc_sysv
 && !
size
)

1292 
	`i‰ì
(
±r
);

1293 
r
 = 0;

1295 i‡(!
±r
)

1297 
r
 = 
	`imÆloc
(
size
);

1301 
r
 = 
	`úóŒoc
(
±r
, 
size
);

1303 
	`UTRACE
(
±r
, 
size
, 
r
);

1304 
mÆloc_a˘ive
--;

1305 
	`THREAD_UNLOCK
();

1306 i‡(
mÆloc_xmÆloc
 && !
r
)

1308 
	`wπîr‹
("out of memory.\n");

1310  (
r
);

1311 
	}
}

1314 *
	$ˇŒoc
(
size_t
 
√Àm
, size_à
ñsize
)

1316 *
tmp
;

1317 i‡(
NULL
 =(
tmp
 = 
	`mÆloc
(
√Àm
 * 
ñsize
)))

1319  
NULL
;

1323 
	`mem£t
(
tmp
, 0, 
√Àm
 * 
ñsize
);

1324  
tmp
;

1326 
	}
}

	@user/lib/libc/printf.c

57 
	~"°dio.h
"

58 
	~"uni°d.h
"

60 
	$¥ötf
(c⁄° *
fmt
, ...)

62 
va_li°
 
¨gs
;

63 
i
;

65 
	`va_°¨t
(
¨gs
, 
fmt
);

66 
i
 = 
	`v¥ötf
(
fmt
, 
¨gs
);

67 
	`va_íd
(
¨gs
);

68  
i
;

69 
	}
}

71 
	$Ârötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, ...)

73 
va_li°
 
¨gs
;

74 
i
;

76 
	`va_°¨t
(
¨gs
, 
fmt
);

77 
i
 = 
	`vÂrötf
(
°ªam
, 
fmt
, 
¨gs
);

78 
	`va_íd
(
¨gs
);

79  
i
;

80 
	}
}

82 
	$•rötf
(*
buf
, c⁄° *
fmt
, ...)

84 
va_li°
 
¨gs
;

85 
i
;

87 
	`va_°¨t
(
¨gs
, 
fmt
);

88 
i
 = 
	`v•rötf
(
buf
, 
fmt
, 
¨gs
);

89 
	`va_íd
(
¨gs
);

90  
i
;

91 
	}
}

93 
	$¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, ...)

95 
va_li°
 
¨gs
;

96 
i
;

98 
	`va_°¨t
(
¨gs
, 
fmt
);

99 
i
 = 
	`v¢¥ötf
(
buf
, 
size
, 
fmt
, 
¨gs
);

100 
	`va_íd
(
¨gs
);

101  
i
;

102 
	}
}

104 
	$v¥ötf
(c⁄° *
fmt
, 
va_li°
 
¨gs
)

106  
	`vÂrötf
(
°dout
, 
fmt
, 
¨gs
);

107 
	}
}

109 
	#__LIBC_PRINTF_BUFSIZE
 1024

	)

111 
	$vÂrötf
(
FILE
 *
°ªam
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

114 
buf
[
__LIBC_PRINTF_BUFSIZE
];

115 
ªt
 = 
	`v¢¥ötf
(
buf
, 
__LIBC_PRINTF_BUFSIZE
, 
fmt
, 
¨gs
);

116 i‡(
ªt
 > 0)

122 
i
 = 0; i < 
ªt
; i++)

124 
°ªam
->
buf„r
[°ªam->
off£t
++] = 
buf
[
i
];

125 i‡(
°ªam
->
off£t
 =(°ªam->
buf„r
Ë|| 
buf
[
i
] == '\n')

128 
	`fÊush
(
°ªam
);

133  
ªt
;

134 
	}
}

136 
	$v•rötf
(*
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

138  
	`v¢¥ötf
(
buf
, 0xffffffffUL, 
fmt
, 
¨gs
);

139 
	}
}

141 
	$__do_fÊush
(
FILE
 *
°ªam
)

143 i‡(!
°ªam
)

148 i‡(
°ªam
->
off£t
 > 0)

150 
	`wrôe
(
°ªam
->
fd
, såóm->
buf„r
, såóm->
off£t
);

151 
°ªam
->
off£t
 = 0;

153 
	}
}

155 
	$fÊush
(
FILE
 *
°ªam
)

157 i‡(!
°ªam
)

159 
	`__do_fÊush
(
°dö
);

160 
	`__do_fÊush
(
°dout
);

161 
	`__do_fÊush
(
°dîr
);

165 
	`__do_fÊush
(
°ªam
);

169 
	}
}

	@user/lib/libc/quad.c

64 
	uuu
 {

65 
	mq
;

66 
	muq
;

67 
	m¶
[2];

68 
	mul
[2];

71 
	#_QUAD_HIGHWORD
 1

	)

72 
	#_QUAD_LOWWORD
 0

	)

76 
	#H
 
_QUAD_HIGHWORD


	)

77 
	#L
 
_QUAD_LOWWORD


	)

84 
	#CHAR_BIT
 8

	)

85 
	#QUAD_BITS
 ((Ë* 
CHAR_BIT
)

	)

86 
	#LONG_BITS
 ((Ë* 
CHAR_BIT
)

	)

87 
	#HALF_BITS
 ((Ë* 
CHAR_BIT
 / 2)

	)

98 
	#HHALF
(
x
Ë((xË>> 
HALF_BITS
)

	)

99 
	#LHALF
(
x
Ë((xË& ((1UL << 
HALF_BITS
Ë- 1))

	)

100 
	#LHUP
(
x
Ë((xË<< 
HALF_BITS
)

	)

106 
	#B
 (1UL << 
HALF_BITS
Ë

	)

109 
	#COMBINE
(
a
, 
b
Ë((()◊Ë<< 
HALF_BITS
Ë| (b))

	)

115 
	tdigô
;

123 
	$shl
(
digô
 *
p
, 
Àn
, 
sh
)

125 
i
;

127 
i
 = 0; i < 
Àn
; i++)

129 
p
[
i
] = 
	`LHALF
’[i] << 
sh
Ë| (p[ò+ 1] >> (
HALF_BITS
 - sh));

131 
p
[
i
] = 
	`LHALF
’[i] << 
sh
);

132 
	}
}

142 
	$__qdivªm
(
uq
, 
vq
,

143 *
¨q
)

145 
uu
 
tmp
 = {.
q
 = 0};

146 
digô
 *
u
, *
v
, *
q
;

147 
digô
 
v1
, 
v2
;

148 
qh©
, 
rh©
, 
t
;

149 
m
, 
n
, 
d
, 
j
, 
i
;

150 
digô
 
u•a˚
[5], 
v•a˚
[5], 
q•a˚
[5];

155 i‡(
vq
 == 0)

158 vﬁ©ûêc⁄° 
zîo
 = 0;

160 
tmp
.
ul
[
H
] =Åmp.ul[
L
] = 1 / 
zîo
;

161 i‡(
¨q
)

163 *
¨q
 = 
uq
;

165  (
tmp
.
q
);

167 i‡(
uq
 < 
vq
)

169 i‡(
¨q
)

171 *
¨q
 = 
uq
;

175 
u
 = &
u•a˚
[0];

176 
v
 = &
v•a˚
[0];

177 
q
 = &
q•a˚
[0];

192 
tmp
.
uq
 = uq;

193 
u
[0] = 0;

194 
u
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

195 
u
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

196 
u
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

197 
u
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

198 
tmp
.
uq
 = 
vq
;

199 
v
[1] = 
	`HHALF
(
tmp
.
ul
[
H
]);

200 
v
[2] = 
	`LHALF
(
tmp
.
ul
[
H
]);

201 
v
[3] = 
	`HHALF
(
tmp
.
ul
[
L
]);

202 
v
[4] = 
	`LHALF
(
tmp
.
ul
[
L
]);

203 
n
 = 4; 
v
[1] == 0; v++)

205 i‡(--
n
 == 1)

207 
rbj
;

208 
digô
 
q1
, 
q2
, 
q3
, 
q4
;

218 
t
 = 
v
[2];

219 
q1
 = 
u
[1] / 
t
;

220 
rbj
 = 
	`COMBINE
(
u
[1] % 
t
, u[2]);

221 
q2
 = 
rbj
 / 
t
;

222 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[3]);

223 
q3
 = 
rbj
 / 
t
;

224 
rbj
 = 
	`COMBINE
‘bj % 
t
, 
u
[4]);

225 
q4
 = 
rbj
 / 
t
;

226 i‡(
¨q
)

228 *
¨q
 = 
rbj
 % 
t
;

230 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q1
, 
q2
);

231 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q3
, 
q4
);

232  (
tmp
.
q
);

241 
m
 = 4 - 
n
; 
u
[1] == 0; u++)

243 
m
--;

245 
i
 = 4 - 
m
; --i >= 0;)

247 
q
[
i
] = 0;

249 
q
 +4 - 
m
;

257 
d
 = 0;

258 
t
 = 
v
[1];Å < 
B
 / 2;Å <<= 1)

260 
d
++;

262 i‡(
d
 > 0)

264 
	`shl
(&
u
[0], 
m
 + 
n
, 
d
);

265 
	`shl
(&
v
[1], 
n
 - 1, 
d
);

270 
j
 = 0;

271 
v1
 = 
v
[1];

272 
v2
 = 
v
[2];

275 
digô
 
uj0
, 
uj1
, 
uj2
;

285 
uj0
 = 
u
[
j
 + 0];

286 
uj1
 = 
u
[
j
 + 1];

287 
uj2
 = 
u
[
j
 + 2];

288 i‡(
uj0
 =
v1
)

290 
qh©
 = 
B
;

291 
rh©
 = 
uj1
;

292 
qh©_too_big
;

296 
¬
 = 
	`COMBINE
(
uj0
, 
uj1
);

297 
qh©
 = 
¬
 / 
v1
;

298 
rh©
 = 
¬
 % 
v1
;

300 
v2
 * 
qh©
 > 
	`COMBINE
(
rh©
, 
uj2
))

302 
qh©_too_big
:

303 
qh©
--;

304 i‡((
rh©
 +
v1
Ë>
B
)

315 
t
 = 0, 
i
 = 
n
; i > 0; i--)

317 
t
 = 
u
[
i
 + 
j
] - 
v
[i] * 
qh©
 -Å;

318 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

319 
t
 = (
B
 - 
	`HHALF
(t)) & (B - 1);

321 
t
 = 
u
[
j
] -Å;

322 
u
[
j
] = 
	`LHALF
(
t
);

329 i‡(
	`HHALF
(
t
))

331 
qh©
--;

332 
t
 = 0, 
i
 = 
n
; i > 0; i--)

334 
t
 +
u
[
i
 + 
j
] + 
v
[i];

335 
u
[
i
 + 
j
] = 
	`LHALF
(
t
);

336 
t
 = 
	`HHALF
(t);

338 
u
[
j
] = 
	`LHALF
(u[j] + 
t
);

340 
q
[
j
] = 
qh©
;

341 } ++
j
 <
m
);

348 i‡(
¨q
)

350 i‡(
d
)

352 
i
 = 
m
 + 
n
; i > m; --i)

354 
u
[
i
] = (u[i] >> 
d
Ë| 
	`LHALF
(u[ò- 1] << (
HALF_BITS
 - d));

356 
u
[
i
] = 0;

358 
tmp
.
ul
[
H
] = 
	`COMBINE
(
u•a˚
[1], uspace[2]);

359 
tmp
.
ul
[
L
] = 
	`COMBINE
(
u•a˚
[3], uspace[4]);

360 *
¨q
 = 
tmp
.
q
;

363 
tmp
.
ul
[
H
] = 
	`COMBINE
(
q•a˚
[1], qspace[2]);

364 
tmp
.
ul
[
L
] = 
	`COMBINE
(
q•a˚
[3], qspace[4]);

365  (
tmp
.
q
);

366 
	}
}

372 
	$__divdi3
(
a
, 
b
)

374 
ua
, 
ub
, 
uq
;

375 
√g
;

377 i‡(
a
 < 0)

379 
ua
 = -()
a
, 
√g
 = 1;

383 
ua
 = 
a
, 
√g
 = 0;

385 i‡(
b
 < 0)

387 
ub
 = -()
b
, 
√g
 ^= 1;

391 
ub
 = 
b
;

393 
uq
 = 
	`__qdivªm
(
ua
, 
ub
, (*)0);

394  (
√g
 ? -
uq
 : uq);

395 
	}
}

400 
	$__udivdi3
(
a
, 
b
)

402  (
	`__qdivªm
(
a
, 
b
, (*)0));

403 
	}
}

408 
	$__umoddi3
(
a
, 
b
)

410 
r
;

412 ()
	`__qdivªm
(
a
, 
b
, &
r
);

413  (
r
);

414 
	}
}

	@user/lib/libc/rand.c

1 
	~<°dlib.h
>

9 
	#RANDOM
(
lo
, 
hi
) \

10 ((
lo
) + \

11 (((
hi
Ë- (
lo
Ë+ 1Ë* (
ønd£ed
 = (randseed * 4096 + 150889) % 714025)) / \

12 714025)

	)

14 
	gønd£ed
 = 123456L;

16 
	$ønd
()

18 
ønd£ed
 = (ønd£ed * 4096 + 150889Ë% 
RAND_MAX
;

19  
ønd£ed
;

20 
	}
}

22 
	$§™d
(
£ed
Ë{ 
ønd£ed
 = sìd; 
	}
}

	@user/lib/libc/scanf.c

56 
	~"°dio.h
"

64 
	$ssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, ...)

66 
va_li°
 
¨gs
;

67 
i
;

69 
	`va_°¨t
(
¨gs
, 
fmt
);

70 
i
 = 
	`vssˇnf
(
buf
, 
fmt
, 
¨gs
);

71 
	`va_íd
(
¨gs
);

72  
i
;

73 
	}
}

	@user/lib/libc/stream.c

1 
	~"°dio.h
"

3 
FILE
 
	g°d°ªams
[3] = {

4 {.
fd
 = 0, .
	goff£t
 = 0},

5 {.
	gfd
 = 1, .
	goff£t
 = 0},

6 {.
	gfd
 = 2, .
	goff£t
 = 0},

9 
FILE
 *
	g°dö
 = &
°d°ªams
[0];

10 
FILE
 *
	g°dout
 = &
°d°ªams
[1];

11 
FILE
 *
	g°dîr
 = &
°d°ªams
[2];

	@user/lib/libc/string.c

1 
	~"°rög.h
"

2 
	~"î∫o.h
"

3 
	~"sys/ty≥s.h
"

4 
	~<°dlib.h
>

6 
	$memcmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

8 c⁄° *
su1
, *
su2
;

9 sig√d 
ªs
 = 0;

11 
su1
 = 
cs
, 
su2
 = 
˘
; 0 < 
cou¡
; ++su1, ++su2, count--)

13 i‡((
ªs
 = *
su1
 - *
su2
) != 0)

18  
ªs
;

19 
	}
}

21 *
	$mem˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

23 *
tmp
 = (*)
de°
;

24 c⁄° *
s
 = 
§c
;

26 
cou¡
--)

27 *
tmp
++ = *
s
++;

29  
de°
;

30 
	}
}

32 
	$°∫cmp
(c⁄° *
cs
, c⁄° *
˘
, 
size_t
 
cou¡
)

34 sig√d 
__ªs
 = 0;

36 
cou¡
)

38 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

42 
cou¡
--;

45  
__ªs
;

46 
	}
}

48 
	$°rcmp
(c⁄° *
cs
, c⁄° *
˘
)

50 sig√d 
__ªs
;

54 i‡((
__ªs
 = *
cs
 - *
˘
++) != 0 || !*cs++)

60  
__ªs
;

61 
	}
}

63 *
	$°r˝y
(*
de°
, c⁄° *
§c
)

65 *
tmp
 = 
de°
;

67 (*
de°
++ = *
§c
++) != '\0')

69  
tmp
;

70 
	}
}

72 *
	$°∫˝y
(*
de°
, c⁄° *
§c
, 
size_t
 
cou¡
)

74 *
tmp
 = 
de°
;

76 
cou¡
)

78 i‡((*
de°
 = *
§c
) != 0)

79 
§c
++;

80 
de°
++;

81 
cou¡
--;

84  
tmp
;

85 
	}
}

87 *
	$mem£t
(*
s
, 
c
, 
size_t
 
cou¡
)

89 *
xs
 = (*)
s
;

91 
cou¡
--)

92 *
xs
++ = 
c
;

94  
s
;

95 
	}
}

97 
size_t
 
	$°∫Àn
(c⁄° *
s
, 
size_t
 
cou¡
)

99 c⁄° *
sc
;

101 
sc
 = 
s
; 
cou¡
-- && *sc != '\0'; ++sc)

104  
sc
 - 
s
;

105 
	}
}

107 *
	$°rˇt
(*
de°
, c⁄° *
§c
)

109 *
tmp
 = 
de°
;

111 *
de°
)

112 
de°
++;

114 (*
de°
++ = *
§c
++) != '\0')

117  
tmp
;

118 
	}
}

120 
size_t
 
	$°æí
(c⁄° *
s
)

122 c⁄° *
sc
;

124 
sc
 = 
s
; *sc != '\0'; ++sc)

127  
sc
 - 
s
;

128 
	}
}

130 *
	$°rchr
(c⁄° *
s
, 
c
)

132 ; *
s
 !()
c
; ++s)

134 i‡(*
s
 == '\0')

136  
NULL
;

139  (*)
s
;

140 
	}
}

142 *
	$°ºchr
(c⁄° *
s
, 
c
)

144 *
r
 = 
NULL
;

145 ; *
s
; ++s)

147 i‡(*
s
 =()
c
)

149 
r
 = (*)
s
;

152  
r
;

153 
	}
}

155 *
	$°r°r
(c⁄° *
s1
, c⁄° *
s2
)

157 
l1
, 
l2
;

159 
l2
 = 
	`°æí
(
s2
);

160 i‡(!
l2
)

162  (*)
s1
;

164 
l1
 = 
	`°æí
(
s1
);

165 
l1
 >
l2
)

167 
l1
--;

168 i‡(!
	`memcmp
(
s1
, 
s2
, 
l2
))

170  (*)
s1
;

172 
s1
++;

174  
NULL
;

175 
	}
}

177 *
	$°rdup
(c⁄° *
s
)

179 
size_t
 
Àn
 = 
	`°æí
(
s
) + 1;

180 *
°r
 = (*)
	`mÆloc
(
Àn
);

181 
	`mem˝y
(
°r
, 
s
, 
Àn
);

182  
°r
;

183 
	}
}

191 *
	$°Ωbrk
(c⁄° *
°rög
, c⁄° *
brk£t
)

193 c⁄° *
p
;

197 
p
 = 
brk£t
; *∞!'\0' && *∞!*
°rög
; ++p)

199 i‡(*
p
 != '\0')

201  ((*)
°rög
);

203 } *
°rög
++);

205  (
NULL
);

206 
	}
}

208 
size_t
 
	$°r•n
(c⁄° *
°rög
, c⁄° *
ch¨£t
)

210 c⁄° *
p
, *
q
;

212 
q
 = 
°rög
; *q != '\0'; ++q)

214 
p
 = 
ch¨£t
; *∞!'\0' && *∞!*
q
; ++p)

216 i‡(*
p
 == '\0')

222  (
q
 - 
°rög
);

223 
	}
}

225 *
	$°πok
(*
°rög
, c⁄° *
£p£t
)

227 *
p
, *
q
, *
r
;

228 *
ßvït
;

233 
p
 = (
°rög
 =
NULL
Ë? 
ßvït
 : string;

234 i‡(
p
 =
NULL
)

236  (
NULL
);

242 
q
 = 
p
 + 
	`°r•n
’, 
£p£t
);

243 i‡(*
q
 == '\0')

245  (
NULL
);

251 i‡((
r
 = 
	`°Ωbrk
(
q
, 
£p£t
)Ë=
NULL
)

253 
ßvït
 = 
NULL
;

257 *
r
 = '\0';

258 
ßvït
 = ++
r
;

261  (
q
);

262 
	}
}

268 *
	$°ªº‹
(
î∫um
)

270 
î∫um
)

272 
EPERM
:

274 
ENOENT
:

276 
ESRCH
:

278 
EINTR
:

280 
EIO
:

282 
ENXIO
:

284 
E2BIG
:

286 
ENOEXEC
:

288 
EBADF
:

290 
ECHILD
:

292 
EAGAIN
:

294 
ENOMEM
:

296 
EACCES
:

298 
EFAULT
:

300 
ENOTBLK
:

302 
EBUSY
:

304 
EEXIST
:

306 
EXDEV
:

308 
ENODEV
:

310 
ENOTDIR
:

312 
EISDIR
:

314 
EINVAL
:

316 
ENFILE
:

318 
EMFILE
:

320 
ENOTTY
:

322 
ETXTBSY
:

324 
EFBIG
:

326 
ENOSPC
:

328 
ESPIPE
:

330 
EROFS
:

332 
EMLINK
:

334 
EPIPE
:

336 
EDOM
:

338 
ERANGE
:

340 
ENOMSG
:

342 
EIDRM
:

344 
ECHRNG
:

346 
EL2NSYNC
:

348 
EL3HLT
:

350 
EL3RST
:

352 
ELNRNG
:

354 
EUNATCH
:

356 
ENOCSI
:

358 
EL2HLT
:

360 
EDEADLK
:

362 
ENOLCK
:

364 
ECANCELED
:

366 
ENOTSUP
:

368 
EDQUOT
:

370 
EBADE
:

372 
EBADR
:

374 
EXFULL
:

376 
ENOANO
:

378 
EBADRQC
:

380 
EBADSLT
:

382 
EBFONT
:

384 
EOWNERDEAD
:

386 
ENOTRECOVERABLE
:

388 
ENOSTR
:

390 
ENODATA
:

392 
ETIME
:

394 
ENOSR
:

396 
ENONET
:

398 
ENOPKG
:

400 
EREMOTE
:

402 
ENOLINK
:

404 
EADV
:

406 
ESRMNT
:

408 
ECOMM
:

410 
EPROTO
:

412 
EMULTIHOP
:

414 
EBADMSG
:

416 
ENAMETOOLONG
:

418 
EOVERFLOW
:

420 
ENOTUNIQ
:

422 
EBADFD
:

424 
EREMCHG
:

426 
ELIBACC
:

428 
ELIBBAD
:

430 
ELIBSCN
:

432 
ELIBMAX
:

434 
ELIBEXEC
:

436 
EILSEQ
:

438 
ENOSYS
:

440 
ELOOP
:

442 
ERESTART
:

444 
ESTRPIPE
:

446 
ENOTEMPTY
:

448 
EUSERS
:

450 
ENOTSOCK
:

452 
EDESTADDRREQ
:

454 
EMSGSIZE
:

456 
EPROTOTYPE
:

458 
ENOPROTOOPT
:

460 
EPROTONOSUPPORT
:

462 
ESOCKTNOSUPPORT
:

464 
EPFNOSUPPORT
:

466 
EAFNOSUPPORT
:

468 
EADDRINUSE
:

470 
EADDRNOTAVAIL
:

472 
ENETDOWN
:

474 
ENETUNREACH
:

476 
ENETRESET
:

478 
ECONNABORTED
:

480 
ECONNRESET
:

482 
ENOBUFS
:

484 
EISCONN
:

486 
ENOTCONN
:

488 
ESHUTDOWN
:

490 
ETOOMANYREFS
:

492 
ETIMEDOUT
:

494 
ECONNREFUSED
:

496 
EHOSTDOWN
:

498 
EHOSTUNREACH
:

500 
EALREADY
:

502 
EINPROGRESS
:

504 
ESTALE
:

509 
	}
}

	@user/lib/libc/strtol.c

30 
	~<˘y≥.h
>

31 
	~<î∫o.h
>

32 
	~<limôs.h
>

33 
	~<°dlib.h
>

41 
	$°πﬁ
(c⁄° *
__ª°ri˘
 
≈å
, **__ª°ri˘ 
íd±r
, 
ba£
)

43 c⁄° *
s
;

44 
acc
;

45 
c
;

46 
cutoff
;

47 
√g
, 
™y
, 
cuéim
;

54 
s
 = 
≈å
;

57 
c
 = *
s
++;

58 } 
	`is•a˚
(()
c
));

59 i‡(
c
 == '-')

61 
√g
 = 1;

62 
c
 = *
s
++;

66 
√g
 = 0;

67 i‡(
c
 == '+')

69 
c
 = *
s
++;

72 i‡((
ba£
 =0 || ba£ =16Ë&& 
c
 ='0' && (*
s
 == 'x' || *s == 'X') &&

73 ((
s
[1] >= '0' && s[1] <= '9') || (s[1] >= 'A' && s[1] <= 'F') ||

74 (
s
[1] >= 'a' && s[1] <= 'f')))

76 
c
 = 
s
[1];

77 
s
 += 2;

78 
ba£
 = 16;

80 i‡(
ba£
 == 0)

82 
ba£
 = 
c
 == '0' ? 8 : 10;

84 
acc
 = 
™y
 = 0;

85 i‡(
ba£
 < 2 || base > 36)

87 
noc⁄v
;

107 
cutoff
 = 
√g
 ? ()-(
LONG_MIN
 + 
LONG_MAX
) + LONG_MAX : LONG_MAX;

108 
cuéim
 = 
cutoff
 % 
ba£
;

109 
cutoff
 /
ba£
;

110 ;; 
c
 = *
s
++)

112 i‡(
c
 >= '0' && c <= '9')

114 
c
 -= '0';

116 i‡(
c
 >= 'A' && c <= 'Z')

118 
c
 -= 'A' - 10;

120 i‡(
c
 >= 'a' && c <= 'z')

122 
c
 -= 'a' - 10;

128 i‡(
c
 >
ba£
)

132 i‡(
™y
 < 0 || 
acc
 > 
cutoff
 || (ac¯=cutof‡&& 
c
 > 
cuéim
))

134 
™y
 = -1;

138 
™y
 = 1;

139 
acc
 *
ba£
;

140 
acc
 +
c
;

143 i‡(
™y
 < 0)

145 
acc
 = 
√g
 ? 
LONG_MIN
 : 
LONG_MAX
;

146 
î∫o
 = 
ERANGE
;

148 i‡(!
™y
)

150 
noc⁄v
:

151 
î∫o
 = 
EINVAL
;

153 i‡(
√g
)

155 
acc
 = -acc;

157 i‡(
íd±r
 !
NULL
)

159 *
íd±r
 = (*)(
™y
 ? 
s
 - 1 : 
≈å
);

161  (
acc
);

162 
	}
}

	@user/lib/libc/syscall.c

1 
	~"sys/ty≥s.h
"

3 
	~"°dlib.h
"

4 
	~"°rög.h
"

5 
	~"uni°d.h
"

7 
	~"°dio.h
"

8 
	~"wìnix/å≠.h
"

10 
	~"dúít.h
"

12 *
	g__curbrk
 = 
NULL
;

13 
	#MAX_EXIT_HANDLERS
 32

	)

15 (*
	g©exô_func
[
MAX_EXIT_HANDLERS
])();

17 
	g©exô_h™dÀrs
 = 0;

19 *
	$sbrk
(
öçå_t
 
ö¸
)

21 
uöçå_t
 
ﬁdbrk
;

24 i‡(!
__curbrk
)

26 i‡(0 > ()(
__curbrk
 = (*)
	`å≠
(
SYS_brk
, (
uöçå_t
)
NULL
)))

32 
ﬁdbrk
 = (
uöçå_t
)
__curbrk
;

36 i‡(
ö¸
 < 0)

38 i‡((
uöçå_t
)-
ö¸
 > 
ﬁdbrk
)

42 i‡(
	`brk
((*)(
ﬁdbrk
 - (
uöçå_t
)-
ö¸
)) < 0)

47 i‡(
ö¸
 > 0)

49 i‡(
	`brk
((*)(
ﬁdbrk
 + (
uöçå_t
)
ö¸
)) < 0)

54  (*)
ﬁdbrk
;

55 
	}
}

57 
	$brk
(*
addr
)

59 i‡(
NULL
 =
addr
)

63 *
√wbrk
 = (*)
	`å≠
(
SYS_brk
, (
uöçå_t
)
addr
);

64 i‡(
√wbrk
 == (*)-1)

68 
__curbrk
 = 
√wbrk
;

70 
	}
}

72 
pid_t
 
	$f‹k
(Ë{  (
pid_t
)
	`å≠
(
SYS_f‹k
, 0); 
	}
}

74 
	$©exô
((*
func
)())

76 i‡(
©exô_h™dÀrs
 < 
MAX_EXIT_HANDLERS
)

78 
©exô_func
[
©exô_h™dÀrs
++] = 
func
;

83 
	}
}

85 
__©åibuã__
((
n‹ëu∫
)Ë
	$exô
(
°©us
)

87 
©exô_h™dÀrs
--)

89 
©exô_func
[
©exô_h™dÀrs
]();

92 
	`fÊush
(
NULL
);

93 
	`å≠
(
SYS_exô
, (
ssize_t
)
°©us
);

94 
	`__buûtö_uƒóchabÀ
();

95 
	}
}

97 
	$_Exô
(
°©us
)

99 
	`å≠
(
SYS_exô
, (
ssize_t
)
°©us
);

100 
	`__buûtö_uƒóchabÀ
();

101 
	}
}

103 
	$sched_yõld
(Ë{  ()
	`å≠
(
SYS_sched_yõld
, 
NULL
); 
	}
}

105 
pid_t
 
	$waô
(*
°©us
)

107 
waôpid_¨gs_t
 
¨gs
;

109 
¨gs
.
w∑_pid
 = -1;

110 
¨gs
.
w∑_›ti⁄s
 = 0;

111 
¨gs
.
w∑_°©us
 = 
°©us
;

113  ()
	`å≠
(
SYS_waôpid
, (
uöçå_t
)&
¨gs
);

114 
	}
}

116 
pid_t
 
	$waôpid
(
pid_t
 
pid
, *
°©us
, 
›ti⁄s
)

118 
waôpid_¨gs_t
 
¨gs
;

120 
¨gs
.
w∑_pid
 = 
pid
;

121 
¨gs
.
w∑_°©us
 = 
°©us
;

122 
¨gs
.
w∑_›ti⁄s
 = 
›ti⁄s
;

124  ()
	`å≠
(
SYS_waôpid
, (
uöçå_t
)&
¨gs
);

125 
	}
}

127 
	$thr_exô
(
°©us
Ë{ 
	`å≠
(
SYS_thr_exô
, (
ssize_t
)°©us); 
	}
}

129 
pid_t
 
	$gëpid
(Ë{  ()
	`å≠
(
SYS_gëpid
, 0); 
	}
}

131 
	$hÆt
(Ë{  ()
	`å≠
(
SYS_hÆt
, 0); 
	}
}

133 *
	$mm≠
(*
addr
, 
size_t
 
Àn
, 
¥Ÿ
, 
Êags
, 
fd
, 
off_t
 
off
)

135 
mm≠_¨gs_t
 
¨gs
;

137 
¨gs
.
mma_addr
 = 
addr
;

138 
¨gs
.
mma_Àn
 = 
Àn
;

139 
¨gs
.
mma_¥Ÿ
 = 
¥Ÿ
;

140 
¨gs
.
mma_Êags
 = 
Êags
;

141 
¨gs
.
mma_fd
 = 
fd
;

142 
¨gs
.
mma_off
 = 
off
;

144  (*)
	`å≠
(
SYS_mm≠
, (
uöçå_t
)&
¨gs
);

145 
	}
}

147 
	$munm≠
(*
addr
, 
size_t
 
Àn
)

149 
munm≠_¨gs_t
 
¨gs
;

151 
¨gs
.
addr
 =áddr;

152 
¨gs
.
Àn
 =Üen;

154  ()
	`å≠
(
SYS_munm≠
, (
uöçå_t
)&
¨gs
);

155 
	}
}

157 
	$debug
(c⁄° *
°r
)

159 
¨g°r_t
 
¨g°r
;

160 
¨g°r
.
as_Àn
 = 
	`°æí
(
°r
);

161 
¨g°r
.
as_°r
 = 
°r
;

162  ()
	`å≠
(
SYS_debug
, (
uöçå_t
)&
¨g°r
);

163 
	}
}

165 
	$sync
(Ë{ 
	`å≠
(
SYS_sync
, 
NULL
); 
	}
}

167 
	$›í
(c⁄° *
fûíame
, 
Êags
, 
mode
)

169 
›í_¨gs_t
 
¨gs
;

171 
¨gs
.
fûíame
.
as_Àn
 = 
	`°æí
(filename);

172 
¨gs
.
fûíame
.
as_°r
 = filename;

173 
¨gs
.
Êags
 = flags;

174 
¨gs
.
mode
 = mode;

176  ()
	`å≠
(
SYS_›í
, (
uöçå_t
)&
¨gs
);

177 
	}
}

179 
off_t
 
	$l£ek
(
fd
, 
off_t
 
off£t
, 
whí˚
)

181 
l£ek_¨gs_t
 
¨gs
;

183 
¨gs
.
fd
 = fd;

184 
¨gs
.
off£t
 = offset;

185 
¨gs
.
whí˚
 = whence;

187  ()
	`å≠
(
SYS_l£ek
, (
uöçå_t
)&
¨gs
);

188 
	}
}

190 
ssize_t
 
	$ªad
(
fd
, *
buf
, 
size_t
 
nbyãs
)

192 
ªad_¨gs_t
 
¨gs
;

194 
¨gs
.
fd
 = fd;

195 
¨gs
.
buf
 = buf;

196 
¨gs
.
nbyãs
 =Çbytes;

198  
	`å≠
(
SYS_ªad
, (
uöçå_t
)&
¨gs
);

199 
	}
}

201 
ssize_t
 
	$wrôe
(
fd
, c⁄° *
buf
, 
size_t
 
nbyãs
)

203 
wrôe_¨gs_t
 
¨gs
;

205 
¨gs
.
fd
 = fd;

206 
¨gs
.
buf
 = (*)buf;

207 
¨gs
.
nbyãs
 =Çbytes;

209  
	`å≠
(
SYS_wrôe
, (
uöçå_t
)&
¨gs
);

210 
	}
}

212 
	$˛o£
(
fd
Ë{  ()
	`å≠
(
SYS_˛o£
, (
ssize_t
)fd); 
	}
}

214 
	$dup
(
fd
Ë{  ()
	`å≠
(
SYS_dup
, (
ssize_t
)fd); 
	}
}

216 
	$dup2
(
ofd
, 
nfd
)

218 
dup2_¨gs_t
 
¨gs
;

220 
¨gs
.
ofd
 = ofd;

221 
¨gs
.
nfd
 =Çfd;

223  ()
	`å≠
(
SYS_dup2
, (
uöçå_t
)&
¨gs
);

224 
	}
}

226 
	$mkdú
(c⁄° *
∑th
, 
mode
)

228 
mkdú_¨gs_t
 
¨gs
;

230 
¨gs
.
∑th
.
as_Àn
 = 
	`°æí
(path);

231 
¨gs
.
∑th
.
as_°r
 =Öath;

232 
¨gs
.
mode
 = mode;

234  ()
	`å≠
(
SYS_mkdú
, (
uöçå_t
)&
¨gs
);

235 
	}
}

237 
	$rmdú
(c⁄° *
∑th
)

239 
¨g°r_t
 
¨gs
;

240 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

241 
¨gs
.
as_°r
 = 
∑th
;

242  ()
	`å≠
(
SYS_rmdú
, (
uöçå_t
)&
¨gs
);

243 
	}
}

245 
	$u∆ök
(c⁄° *
∑th
)

247 
¨g°r_t
 
¨gs
;

248 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

249 
¨gs
.
as_°r
 = 
∑th
;

250  ()
	`å≠
(
SYS_u∆ök
, (
uöçå_t
)&
¨gs
);

251 
	}
}

253 
	$lök
(c⁄° *
‰om
, c⁄° *
to
)

255 
lök_¨gs_t
 
¨gs
;

257 
¨gs
.
‰om
.
as_Àn
 = 
	`°æí
(from);

258 
¨gs
.
‰om
.
as_°r
 = from;

259 
¨gs
.
to
.
as_Àn
 = 
	`°æí
(to);

260 
¨gs
.
to
.
as_°r
 =Åo;

262  ()
	`å≠
(
SYS_lök
, (
uöçå_t
)&
¨gs
);

263 
	}
}

265 
	$ª«me
(c⁄° *
ﬁd∑th
, c⁄° *
√w∑th
)

267 
ª«me_¨gs_t
 
¨gs
;

269 
¨gs
.
ﬁd∑th
.
as_Àn
 = 
	`°æí
(oldpath);

270 
¨gs
.
ﬁd∑th
.
as_°r
 = oldpath;

271 
¨gs
.
√w∑th
.
as_Àn
 = 
	`°æí
(newpath);

272 
¨gs
.
√w∑th
.
as_°r
 =Çewpath;

274  ()
	`å≠
(
SYS_ª«me
, (
uöçå_t
)&
¨gs
);

275 
	}
}

277 
	$chdú
(c⁄° *
∑th
)

279 
¨g°r_t
 
¨gs
;

280 
¨gs
.
as_Àn
 = 
	`°æí
(
∑th
);

281 
¨gs
.
as_°r
 = 
∑th
;

282  ()
	`å≠
(
SYS_chdú
, (
uöçå_t
)&
¨gs
);

283 
	}
}

285 
size_t
 
	$gë_‰ì_mem
(Ë{  (
size_t
)
	`å≠
(
SYS_gë_‰ì_mem
, 0); 
	}
}

287 
	$execve
(c⁄° *
fûíame
, *c⁄° 
¨gv
[], *c⁄° 
ívp
[])

289 
execve_¨gs_t
 
¨gs
;

291 
size_t
 
i
;

293 
¨gs
.
fûíame
.
as_Àn
 = 
	`°æí
(filename);

294 
¨gs
.
fûíame
.
as_°r
 = filename;

297 
i
 = 0; 
¨gv
[i] !
NULL
; i++)

299 
¨gs
.
¨gv
.
av_Àn
 = 
i
;

300 
¨gs
.
¨gv
.
av_vec
 = 
	`mÆloc
(◊rgs.¨gv.
av_Àn
 + 1Ë* (
¨g°r_t
));

301 
i
 = 0; 
¨gv
[i] !
NULL
; i++)

303 
¨gs
.
¨gv
.
av_vec
[
i
].
as_Àn
 = 
	`°æí
(argv[i]);

304 
¨gs
.
¨gv
.
av_vec
[
i
].
as_°r
 =árgv[i];

306 
¨gs
.
¨gv
.
av_vec
[
i
].
as_Àn
 = 0;

307 
¨gs
.
¨gv
.
av_vec
[
i
].
as_°r
 = 
NULL
;

310 
i
 = 0; 
ívp
[i] !
NULL
; i++)

312 
¨gs
.
ívp
.
av_Àn
 = 
i
;

313 
¨gs
.
ívp
.
av_vec
 = 
	`mÆloc
(◊rgs.ívp.
av_Àn
 + 1Ë* (
¨g°r_t
));

314 
i
 = 0; 
ívp
[i] !
NULL
; i++)

316 
¨gs
.
ívp
.
av_vec
[
i
].
as_Àn
 = 
	`°æí
(envp[i]);

317 
¨gs
.
ívp
.
av_vec
[
i
].
as_°r
 =Énvp[i];

319 
¨gs
.
ívp
.
av_vec
[
i
].
as_Àn
 = 0;

320 
¨gs
.
ívp
.
av_vec
[
i
].
as_°r
 = 
NULL
;

325  ()
	`å≠
(
SYS_execve
, (
uöçå_t
)&
¨gs
);

326 
	}
}

328 
	$thr_£t_î∫o
(
n
Ë{ 
	`å≠
(
SYS_£t_î∫o
, (
ssize_t
Í); 
	}
}

330 
	$thr_î∫o
(Ë{  ()
	`å≠
(
SYS_î∫o
, 0); 
	}
}

332 
	$gëdíts
(
fd
, 
dúít_t
 *
dú
, 
size_t
 
size
)

334 
gëdíts_¨gs_t
 
¨gs
;

336 
¨gs
.
fd
 = fd;

337 
¨gs
.
dúp
 = 
dú
;

338 
¨gs
.
cou¡
 = 
size
;

340  ()
	`å≠
(
SYS_gëdíts
, (
uöçå_t
)&
¨gs
);

341 
	}
}

343 #ifde‡
__MOUNTING__


344 
	$mou¡
(c⁄° *
•ec
, c⁄° *
dú
, c⁄° *
f°y≥
)

346 
mou¡_¨gs_t
 
¨gs
;

348 
¨gs
.
•ec
.
as_Àn
 = 
	`°æí
(spec);

349 
¨gs
.
•ec
.
as_°r
 = spec;

350 
¨gs
.
dú
.
as_Àn
 = 
	`°æí
(dir);

351 
¨gs
.
dú
.
as_°r
 = dir;

352 
¨gs
.
f°y≥
.
as_Àn
 = 
	`°æí
(fstype);

353 
¨gs
.
f°y≥
.
as_°r
 = fstype;

355  ()
	`å≠
(
SYS_mou¡
, (
uöçå_t
)&
¨gs
);

356 
	}
}

358 
	$umou¡
(c⁄° *
∑th
)

360 
¨g°r_t
 
¨g°r
;

362 
¨g°r
.
as_Àn
 = 
	`°æí
(
∑th
);

363 
¨g°r
.
as_°r
 = 
∑th
;

365  ()
	`å≠
(
SYS_umou¡
, (
uöçå_t
)&
¨g°r
);

366 
	}
}

369 
	$°©
(c⁄° *
∑th
, 
°©_t
 *
buf
)

371 
°©_¨gs_t
 
¨gs
;

373 
¨gs
.
∑th
.
as_Àn
 = 
	`°æí
(path);

374 
¨gs
.
∑th
.
as_°r
 =Öath;

375 
¨gs
.
buf
 = buf;

377  ()
	`å≠
(
SYS_°©
, (
uöçå_t
)&
¨gs
);

378 
	}
}

380 
	$pùe
(
pùefd
[2]Ë{  ()
	`å≠
(
SYS_pùe
, (
uöçå_t
Ìùefd); 
	}
}

382 
	$u«me
(
ut¢ame
 *
buf
Ë{  ()
	`å≠
(
SYS_u«me
, (
uöçå_t
)buf); 
	}
}

384 
time_t
 
	$time
(
time_t
 *
éoc
Ë{  (time_t)
	`å≠
(
SYS_time
, (
uöçå_t
Èloc); 
	}
}

386 
	$u¶ìp
(
u£c⁄ds_t
 
u£c
)

388 
u¶ìp_¨gs_t
 
¨gs
;

389 
¨gs
.
u£c
 = usec;

390  ()
	`å≠
(
SYS_u¶ìp
, (
uöçå_t
)&
¨gs
);

391 
	}
}

	@user/lib/libc/vsnprintf.c

57 
	~"˘y≥.h
"

58 
	~"°d¨g.h
"

59 
	~"°dio.h
"

60 
	~"°rög.h
"

62 
	$skù_©oi
(c⁄° **
s
)

64 
i
 = 0;

66 
	`isdigô
(**
s
))

67 
i
 = i * 10 + *((*
s
)++) - '0';

68  
i
;

69 
	}
}

71 
	#ZEROPAD
 1

	)

72 
	#SIGN
 2

	)

73 
	#PLUS
 4

	)

74 
	#SPACE
 8

	)

75 
	#LEFT
 16

	)

76 
	#SPECIAL
 32

	)

77 
	#LARGE
 64

	)

79 *
	$numbî
(*
buf
, *
íd
, 
num
, 
ba£
, 
size
,

80 
¥ecisi⁄
, 
ty≥
)

82 
c
, 
sign
, 
tmp
[66];

83 c⁄° *
digôs
;

84 c⁄° 
smÆl_digôs
[] = "0123456789abcdefghijklmnopqrstuvwxyz";

85 c⁄° 
œrge_digôs
[] = "0123456789ABCDEFGHIJKLMNOPQRSTUVWXYZ";

86 
i
;

88 
digôs
 = (
ty≥
 & 
LARGE
Ë? 
œrge_digôs
 : 
smÆl_digôs
;

89 i‡(
ty≥
 & 
LEFT
)

91 
ty≥
 &~
ZEROPAD
;

93 i‡(
ba£
 < 2 || base > 36)

95  
buf
;

97 
c
 = (
ty≥
 & 
ZEROPAD
) ? '0' : ' ';

98 
sign
 = 0;

99 i‡(
ty≥
 & 
SIGN
)

101 i‡(
num
 < 0)

103 
sign
 = '-';

104 
num
 = -num;

105 
size
--;

107 i‡(
ty≥
 & 
PLUS
)

109 
sign
 = '+';

110 
size
--;

112 i‡(
ty≥
 & 
SPACE
)

114 
sign
 = ' ';

115 
size
--;

118 i‡(
ty≥
 & 
SPECIAL
)

120 i‡(
ba£
 == 16)

122 
size
 -= 2;

124 i‡(
ba£
 == 8)

126 
size
--;

129 
i
 = 0;

130 i‡(
num
 == 0)

132 
tmp
[
i
++] = '0';

138 
num2
 = ()
num
;

139 
ba£2
 = ()
ba£
;

140 
num2
 != 0)

142 
tmp
[
i
++] = 
digôs
[
num2
 % 
ba£2
];

143 
num2
 /
ba£2
;

146 i‡(
i
 > 
¥ecisi⁄
)

148 
¥ecisi⁄
 = 
i
;

150 
size
 -
¥ecisi⁄
;

151 i‡(!(
ty≥
 & (
ZEROPAD
 + 
LEFT
)))

153 
size
-- > 0)

155 i‡(
buf
 <
íd
)

157 *
buf
 = ' ';

159 ++
buf
;

162 i‡(
sign
)

164 i‡(
buf
 <
íd
)

166 *
buf
 = 
sign
;

168 ++
buf
;

170 i‡(
ty≥
 & 
SPECIAL
)

172 i‡(
ba£
 == 8)

174 i‡(
buf
 <
íd
)

176 *
buf
 = '0';

178 ++
buf
;

180 i‡(
ba£
 == 16)

182 i‡(
buf
 <
íd
)

184 *
buf
 = '0';

186 ++
buf
;

187 i‡(
buf
 <
íd
)

189 *
buf
 = 
digôs
[33];

191 ++
buf
;

194 i‡(!(
ty≥
 & 
LEFT
))

196 
size
-- > 0)

198 i‡(
buf
 <
íd
)

200 *
buf
 = 
c
;

202 ++
buf
;

205 
i
 < 
¥ecisi⁄
--)

207 i‡(
buf
 <
íd
)

209 *
buf
 = '0';

211 ++
buf
;

213 
i
-- > 0)

215 i‡(
buf
 <
íd
)

217 *
buf
 = 
tmp
[
i
];

219 ++
buf
;

221 
size
-- > 0)

223 i‡(
buf
 <
íd
)

225 *
buf
 = ' ';

227 ++
buf
;

229  
buf
;

230 
	}
}

245 
	$v¢¥ötf
(*
buf
, 
size_t
 
size
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

247 
Àn
;

248 
num
;

249 
i
, 
ba£
;

250 *
°r
, *
íd
, 
c
;

251 c⁄° *
s
;

253 
Êags
;

255 
fõld_width
;

256 
¥ecisi⁄
;

258 
quÆifõr
;

262 
°r
 = 
buf
;

263 
íd
 = 
buf
 + 
size
 - 1;

265 i‡(
íd
 < 
buf
 - 1)

267 
íd
 = ((*)-1);

268 
size
 = 
íd
 - 
buf
 + 1;

271 ; *
fmt
; ++fmt)

273 i‡(*
fmt
 != '%')

275 i‡(
°r
 <
íd
)

277 *
°r
 = *
fmt
;

279 ++
°r
;

284 
Êags
 = 0;

285 
ª≥©
:

286 ++
fmt
;

287 *
fmt
)

290 
Êags
 |
LEFT
;

291 
ª≥©
;

293 
Êags
 |
PLUS
;

294 
ª≥©
;

296 
Êags
 |
SPACE
;

297 
ª≥©
;

299 
Êags
 |
SPECIAL
;

300 
ª≥©
;

302 
Êags
 |
ZEROPAD
;

303 
ª≥©
;

307 
fõld_width
 = -1;

308 i‡(
	`isdigô
(*
fmt
))

310 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

312 i‡(*
fmt
 == '*')

314 ++
fmt
;

316 
fõld_width
 = 
	`va_¨g
(
¨gs
, );

317 i‡(
fõld_width
 < 0)

319 
fõld_width
 = -field_width;

320 
Êags
 |
LEFT
;

325 
¥ecisi⁄
 = -1;

326 i‡(*
fmt
 == '.')

328 ++
fmt
;

329 i‡(
	`isdigô
(*
fmt
))

331 
¥ecisi⁄
 = 
	`skù_©oi
(&
fmt
);

333 i‡(*
fmt
 == '*')

335 ++
fmt
;

337 
¥ecisi⁄
 = 
	`va_¨g
(
¨gs
, );

339 i‡(
¥ecisi⁄
 < 0)

341 
¥ecisi⁄
 = 0;

346 
quÆifõr
 = -1;

347 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z')

349 
quÆifõr
 = *
fmt
;

350 ++
fmt
;

351 i‡(
quÆifõr
 ='l' && *
fmt
 == 'l')

353 
quÆifõr
 = 'L';

354 ++
fmt
;

357 i‡(*
fmt
 == 'q')

359 
quÆifõr
 = 'L';

360 ++
fmt
;

364 
ba£
 = 10;

366 *
fmt
)

369 i‡(!(
Êags
 & 
LEFT
))

371 --
fõld_width
 > 0)

373 i‡(
°r
 <
íd
)

375 *
°r
 = ' ';

377 ++
°r
;

380 
c
 = ()
	`va_¨g
(
¨gs
, );

381 i‡(
°r
 <
íd
)

383 *
°r
 = 
c
;

385 ++
°r
;

386 --
fõld_width
 > 0)

388 i‡(
°r
 <
íd
)

390 *
°r
 = ' ';

392 ++
°r
;

397 
s
 = 
	`va_¨g
(
¨gs
, *);

398 i‡(!
s
)

400 
s
 = "<NULL>";

403 
Àn
 = 
	`°∫Àn
(
s
, 
¥ecisi⁄
);

405 i‡(!(
Êags
 & 
LEFT
))

407 
Àn
 < 
fõld_width
--)

409 i‡(
°r
 <
íd
)

411 *
°r
 = ' ';

413 ++
°r
;

416 
i
 = 0; i < 
Àn
; ++i)

418 i‡(
°r
 <
íd
)

420 *
°r
 = *
s
;

422 ++
°r
;

423 ++
s
;

425 
Àn
 < 
fõld_width
--)

427 i‡(
°r
 <
íd
)

429 *
°r
 = ' ';

431 ++
°r
;

436 i‡(
fõld_width
 == -1)

438 
fõld_width
 = 2 * (*);

439 
Êags
 |
ZEROPAD
;

441 
°r
 = 
	`numbî
(°r, 
íd
, ()
	`va_¨g
(
¨gs
, *), 16,

442 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

448 i‡(
quÆifõr
 == 'l')

450 *
ù
 = 
	`va_¨g
(
¨gs
, *);

451 *
ù
 = (
°r
 - 
buf
);

453 i‡(
quÆifõr
 == 'Z')

455 
size_t
 *
ù
 = 
	`va_¨g
(
¨gs
, size_t *);

456 *
ù
 = (
°r
 - 
buf
);

460 *
ù
 = 
	`va_¨g
(
¨gs
, *);

461 *
ù
 = (
°r
 - 
buf
);

466 i‡(
°r
 <
íd
)

468 *
°r
 = '%';

470 ++
°r
;

475 
ba£
 = 8;

479 
Êags
 |
LARGE
;

480 
ba£
 = 16;

483 
ba£
 = 16;

488 
Êags
 |
SIGN
;

499 i‡(
°r
 <
íd
)

501 *
°r
 = '%';

503 ++
°r
;

504 i‡(*
fmt
)

506 i‡(
°r
 <
íd
)

508 *
°r
 = *
fmt
;

510 ++
°r
;

514 --
fmt
;

518 i‡(
quÆifõr
 == 'L')

520 
num
 = 
	`va_¨g
(
¨gs
, );

522 i‡(
quÆifõr
 == 'l')

524 
num
 = 
	`va_¨g
(
¨gs
, );

525 i‡(
Êags
 & 
SIGN
)

527 
num
 = (signed )num;

530 i‡(
quÆifõr
 == 'Z')

532 
num
 = 
	`va_¨g
(
¨gs
, 
size_t
);

534 i‡(
quÆifõr
 == 'h')

536 
num
 = ()
	`va_¨g
(
¨gs
, );

537 i‡(
Êags
 & 
SIGN
)

539 
num
 = (signed )num;

544 
num
 = 
	`va_¨g
(
¨gs
, );

545 i‡(
Êags
 & 
SIGN
)

547 
num
 = (signed )num;

551 
°r
 = 
	`numbî
(°r, 
íd
, 
num
, 
ba£
, 
fõld_width
, 
¥ecisi⁄
, 
Êags
);

553 i‡(
°r
 <
íd
)

555 *
°r
 = '\0';

557 i‡(
size
 > 0)

560 *
íd
 = '\0';

565  
°r
 - 
buf
;

566 
	}
}

	@user/lib/libc/vsscanf.c

56 
	~"˘y≥.h
"

57 
	~"limôs.h
"

58 
	~"°d¨g.h
"

59 
	~"°ddef.h
"

61 
	$skù_©oi
(c⁄° **
s
)

63 
i
 = 0;

65 
	`isdigô
(**
s
))

66 
i
 = i * 10 + *((*
s
)++) - '0';

67  
i
;

68 
	}
}

76 
	$sim∂e_°πoul
(c⁄° *
˝
, **
ídp
, 
ba£
)

78 
ªsu…
 = 0, 
vÆue
;

80 i‡(!
ba£
)

82 
ba£
 = 10;

83 i‡(*
˝
 == '0')

85 
ba£
 = 8;

86 
˝
++;

87 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1]))

89 
˝
++;

90 
ba£
 = 16;

94 
	`isxdigô
(*
˝
) &&

95 (
vÆue
 = 
	`isdigô
(*
˝
Ë? *˝ - '0' : 
	`touµî
(*cp) - 'A' + 10) <

96 
ba£
)

98 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

99 
˝
++;

101 i‡(
ídp
)

103 *
ídp
 = (*)
˝
;

105  
ªsu…
;

106 
	}
}

114 
	$sim∂e_°πﬁ
(c⁄° *
˝
, **
ídp
, 
ba£
)

116 i‡(*
˝
 == '-')

118  -
	`sim∂e_°πoul
(
˝
 + 1, 
ídp
, 
ba£
);

120  
	`sim∂e_°πoul
(
˝
, 
ídp
, 
ba£
);

121 
	}
}

129 
	$sim∂e_°πouŒ
(c⁄° *
˝
, **
ídp
,

130 
ba£
)

132 
ªsu…
 = 0, 
vÆue
;

134 i‡(!
ba£
)

136 
ba£
 = 10;

137 i‡(*
˝
 == '0')

139 
ba£
 = 8;

140 
˝
++;

141 i‡((*
˝
 ='x'Ë&& 
	`isxdigô
(cp[1]))

143 
˝
++;

144 
ba£
 = 16;

148 
	`isxdigô
(*
˝
) &&

149 (
vÆue
 = 
	`isdigô
(*
˝
) ? *cp - '0'

150 : (
	`i¶owî
(*
˝
Ë? 
	`touµî
(*cp) : *cp) - 'A' +

151 10Ë< 
ba£
)

153 
ªsu…
 =Ñesu… * 
ba£
 + 
vÆue
;

154 
˝
++;

156 i‡(
ídp
)

158 *
ídp
 = (*)
˝
;

160  
ªsu…
;

161 
	}
}

169 
	$sim∂e_°πﬁl
(c⁄° *
˝
, **
ídp
, 
ba£
)

171 i‡(*
˝
 == '-')

173  -
	`sim∂e_°πouŒ
(
˝
 + 1, 
ídp
, 
ba£
);

175  
	`sim∂e_°πouŒ
(
˝
, 
ídp
, 
ba£
);

176 
	}
}

184 
	$vssˇnf
(c⁄° *
buf
, c⁄° *
fmt
, 
va_li°
 
¨gs
)

186 c⁄° *
°r
 = 
buf
;

187 *
√xt
;

188 
digô
;

189 
num
 = 0;

190 
quÆifõr
;

191 
ba£
;

192 
fõld_width
;

193 
is_sign
 = 0;

195 *
fmt
 && *
°r
)

201 i‡(
	`is•a˚
(*
fmt
))

203 
	`is•a˚
(*
fmt
))

204 ++
fmt
;

205 
	`is•a˚
(*
°r
))

206 ++
°r
;

210 i‡(*
fmt
 != '%' && *fmt)

212 i‡(*
fmt
++ !*
°r
++)

219 i‡(!*
fmt
)

223 ++
fmt
;

228 i‡(*
fmt
 == '*')

230 !
	`is•a˚
(*
fmt
) && *fmt)

231 
fmt
++;

232 !
	`is•a˚
(*
°r
) && *str)

233 
°r
++;

238 
fõld_width
 = -1;

239 i‡(
	`isdigô
(*
fmt
))

241 
fõld_width
 = 
	`skù_©oi
(&
fmt
);

245 
quÆifõr
 = -1;

246 i‡(*
fmt
 == 'h' || *fmt == 'l' || *fmt == 'L' || *fmt == 'Z' ||

247 *
fmt
 == 'z')

249 
quÆifõr
 = *
fmt
++;

250 i‡(
quÆifõr
 =*
fmt
)

252 i‡(
quÆifõr
 == 'h')

254 
quÆifõr
 = 'H';

255 
fmt
++;

257 i‡(
quÆifõr
 == 'l')

259 
quÆifõr
 = 'L';

260 
fmt
++;

264 
ba£
 = 10;

265 
is_sign
 = 0;

267 i‡(!*
fmt
 || !*
°r
)

272 *
fmt
++)

276 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

277 i‡(
fõld_width
 == -1)

279 
fõld_width
 = 1;

283 *
s
++ = *
°r
++;

284 } --
fõld_width
 > 0 && *
°r
);

285 
num
++;

290 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

291 i‡(
fõld_width
 == -1)

293 
fõld_width
 = 
INT_MAX
;

296 
	`is•a˚
(*
°r
))

297 
°r
++;

300 *
°r
 && !
	`is•a˚
(*°rË&& 
fõld_width
--)

302 *
s
++ = *
°r
++;

304 *
s
 = '\0';

305 
num
++;

311 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

312 *
i
 = 
°r
 - 
buf
;

316 
ba£
 = 8;

320 
ba£
 = 16;

323 
ba£
 = 0;

324 
is_sign
 = 1;

327 
is_sign
 = 1;

333 i‡(*
°r
++ != '%')

335  
num
;

340  
num
;

346 
	`is•a˚
(*
°r
))

347 
°r
++;

349 
digô
 = *
°r
;

350 i‡(
is_sign
 && 
digô
 == '-')

352 
digô
 = *(
°r
 + 1);

355 i‡(!
digô
 || (
ba£
 =16 && !
	`isxdigô
(digit)) ||

356 (
ba£
 =10 && !
	`isdigô
(
digô
)) ||

357 (
ba£
 =8 && (!
	`isdigô
(
digô
) || digit > '7')) ||

358 (
ba£
 =0 && !
	`isdigô
(
digô
)))

363 
quÆifõr
)

366 i‡(
is_sign
)

368 sig√d *
s
 = (sig√d *)
	`va_¨g
(
¨gs
, signed *);

369 *
s
 = (sig√d )
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

373 *
s
 =

374 (*)
	`va_¨g
(
¨gs
, *);

375 *
s
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

379 i‡(
is_sign
)

381 *
s
 = (*)
	`va_¨g
(
¨gs
, *);

382 *
s
 = ()
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

386 *
s
 =

387 (*)
	`va_¨g
(
¨gs
, *);

388 *
s
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

392 i‡(
is_sign
)

394 *
l
 = (*)
	`va_¨g
(
¨gs
, *);

395 *
l
 = 
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

399 *
l
 =

400 (*)
	`va_¨g
(
¨gs
, *);

401 *
l
 = 
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

405 i‡(
is_sign
)

407 *
l
 = (*)
	`va_¨g
(
¨gs
, *);

408 *
l
 = 
	`sim∂e_°πﬁl
(
°r
, &
√xt
, 
ba£
);

412 *
l
 = (*)
	`va_¨g
(

413 
¨gs
, *);

414 *
l
 = 
	`sim∂e_°πouŒ
(
°r
, &
√xt
, 
ba£
);

420 
size_t
 *
s
 = (size_à*)
	`va_¨g
(
¨gs
, size_t *);

421 *
s
 = (
size_t
)
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

425 i‡(
is_sign
)

427 *
i
 = (*)
	`va_¨g
(
¨gs
, *);

428 *
i
 = ()
	`sim∂e_°πﬁ
(
°r
, &
√xt
, 
ba£
);

432 *
i
 =

433 (*)
	`va_¨g
(
¨gs
, *);

434 *
i
 = ()
	`sim∂e_°πoul
(
°r
, &
√xt
, 
ba£
);

438 
num
++;

440 i‡(!
√xt
)

444 
°r
 = 
√xt
;

446  
num
;

447 
	}
}

	@user/lib/libtest/test.c

1 
	~<ã°/ã°.h
>

3 
	~<f˙é.h
>

4 
	~<sys/mm™.h
>

6 
	~<î∫o.h
>

7 
	~<°dio.h
>

8 
	~<°dlib.h
>

9 
	~<°rög.h
>

11 
	sã°_d©a


13 
	mtd_∑s£d
;

14 
	mtd_Áûed
;

15 } 
	tã°_d©a_t
;

17 
_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

18 c⁄° *
fmt
, 
va_li°
 
¨gs
);

20 
_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
,

21 c⁄° *
«me
, c⁄° *
fmt
, 
va_li°
 
¨gs
);

23 
ã°_d©a_t
 *
	g_ã°_d©a
 = 
NULL
;

24 
ã°_∑ss_func_t
 
	g_∑ss_func
 = 
_deÁu…_ã°_∑ss
;

25 
ã°_Áû_func_t
 
	g_Áû_func
 = 
_deÁu…_ã°_Áû
;

27 
	$ã°_öô
()

29 
zfd
 = -1;

31 i‡(0 > (
zfd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0)))

33 
	`¥ötf
("ã°_öô: o≥n(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

34 
Áûed
;

37 i‡(
MAP_FAILED
 ==

38 (
_ã°_d©a
 = 
	`mm≠
(
NULL
, (*_ã°_d©a), 
PROT_READ
 | 
PROT_WRITE
,

39 
MAP_SHARED
, 
zfd
, 0)))

41 
	`¥ötf
("ã°_öô: mm≠(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

42 
Áûed
;

45 i‡(0 > 
	`˛o£
(
zfd
))

47 
	`¥ötf
("ã°_öô: clo£(\"/dev/zîo\"): %s\n", 
	`°ªº‹
(
î∫o
));

48 
Áûed
;

51 
_ã°_d©a
->
td_∑s£d
 = 0;

52 
_ã°_d©a
->
td_Áûed
 = 0;

55 
Áûed
:

56 
	`¥ötf
("couldÇot initializeÅestingÜibrary,Éxiting\n");

57 
	`exô
(-1);

58 
	}
}

60 
	$ã°_föi
()

62 
	`¥ötf
("tests completed:\n");

63 
	`¥ötf
("%dÖas£d\n", 
_ã°_d©a
->
td_∑s£d
);

64 
	`¥ötf
("%d faûed\n", 
_ã°_d©a
->
td_Áûed
);

65 
	}
}

67 c⁄° *
	$ã°_îr°r
(
îr
)

69 
îr
)

154 
	}
}

156 
	$_deÁu…_ã°_Áû
(c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

157 c⁄° *
fmt
, 
va_li°
 
¨gs
)

159 
_ã°_d©a
->
td_Áûed
++;

160 i‡(
NULL
 =
fmt
)

162 
	`¥ötf
("FAILED: %s(%d): %s\n", 
fûe
, 
löe
, 
«me
);

166 
	`¥ötf
("FAILED: %s(%d): %s: ", 
fûe
, 
löe
, 
«me
);

167 
	`v¥ötf
(
fmt
, 
¨gs
);

168 
	`¥ötf
("\n");

170 
	}
}

172 
	$_deÁu…_ã°_∑ss
(
vÆ
, c⁄° *
fûe
, 
löe
,

173 c⁄° *
«me
, c⁄° *
fmt
,

174 
va_li°
 
¨gs
)

176 
_ã°_d©a
->
td_∑s£d
++;

177 
	}
}

179 
	$_ã°_as£π
(
vÆ
, c⁄° *
fûe
, 
löe
, c⁄° *
«me
,

180 c⁄° *
fmt
, ...)

182 
va_li°
 
¨gs
;

183 
	`va_°¨t
(
¨gs
, 
fmt
);

185 i‡(0 =
vÆ
)

187 i‡(
NULL
 !
_Áû_func
)

189 
	`_Áû_func
(
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

194 i‡(
NULL
 !
_∑ss_func
)

196 
	`_∑ss_func
(
vÆ
, 
fûe
, 
löe
, 
«me
, 
fmt
, 
¨gs
);

200 
	`va_íd
(
¨gs
);

201  
vÆ
;

202 
	}
}

	@user/sbin/halt.c

1 
	~<uni°d.h
>

3 
	$maö
(
¨gc
, **
¨gv
)

5 
	`hÆt
();

7 
	}
}

	@user/sbin/init.c

7 
	~<dúít.h
>

8 
	~<î∫o.h
>

9 
	~<f˙é.h
>

10 
	~<°dio.h
>

11 
	~<°dlib.h
>

12 
	~<°rög.h
>

13 
	~<sys/ty≥s.h
>

14 
	~<uni°d.h
>

16 *
	gem±y
[] = {
NULL
};

18 c⁄° *
	ghi
 = "init: starting shell on ";

19 c⁄° *
	gsh
 = "/bin/sh";

20 c⁄° *
	gây°r
 = "tty";

21 c⁄° *
	ghome
 = "/";

22 c⁄° *
	gÆld⁄e
 = "init:ÇoÑemainingÖrocesses\n";

24 
	$›í_ây
(*
ây
)

26 i‡(-1 =
	`›í
(
ây
, 
O_RDONLY
, 0))

30 i‡(-1 =
	`›í
(
ây
, 
O_WRONLY
, 0))

34 i‡(2 !
	`dup
(1))

42 
	}
}

44 
	gˇ«ry
 = 0x12345678;

46 
	$•awn_shñl_⁄
(*
ây
)

48 i‡(!
	`f‹k
())

50 
	`˛o£
(0);

51 
	`˛o£
(1);

52 
	`˛o£
(2);

53 i‡(-1 =
	`›í_ây
(
ây
))

55 
	`exô
(1);

58 
	`chdú
(
home
);

60 
	`¥ötf
("%s%s\n", 
hi
, 
ây
);

62 
	`execve
(
sh
, 
em±y
,Émpty);

63 
	`Ârötf
(
°dîr
, "exec failed!\n");

65 
	}
}

67 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

69 
devdú
, 
ii
;

70 
dúít_t
 
d
;

71 
°©us
;

73 
ii
 = 0; iò< 
NFILES
; ii++)

75 
	`˛o£
(
ii
);

77 
ii
 = ii;

79 i‡(-1 =
	`›í_ây
("/dev/tty0"))

81 
	`exô
(1);

84 
	`chdú
("/dev");

86 
devdú
 = 
	`›í
("/dev", 
O_RDONLY
, 0);

87 
	`gëdíts
(
devdú
, &
d
, (d)) > 0)

89 i‡(0 =
	`°∫cmp
(
d
.
d_«me
, 
ây°r
, 
	`°æí
(ttystr)))

91 
	`•awn_shñl_⁄
(
d
.
d_«me
);

94 
	`˛o£
(
devdú
);

96 
pid
;

97 0 <(
pid
 = 
	`waô
(&
°©us
)))

99 i‡(
EFAULT
 =
°©us
)

101 
	`¥ötf
("¥o˚s†%òÁu…ed\n", 
pid
);

105 i‡(
ECHILD
 !
î∫o
)

107 
	`¥ötf
("îr‹: waô: %s\n", 
	`°ªº‹
(
î∫o
));

112 
	`¥ötf
("%s", 
Æld⁄e
);

115 
	}
}

	@user/usr/bin/args.c

6 
	~<f˙é.h
>

7 
	~<°dio.h
>

8 
	~<°rög.h
>

9 
	~<uni°d.h
>

11 
	$maö
(
¨gc
, **
¨gv
, **
ívp
)

13 
i
;

14 
buf
[100];

16 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

17 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

19 
	`¢¥ötf
(
buf
, (buf), "Argumíts: (¨g¯%d,árgv = %p)\n", 
¨gc
,

20 
¨gv
);

21 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

22 
i
 = 0; 
¨gv
[i]; i++)

24 
	`¢¥ötf
(
buf
, (buf), " %d \"%s\"\n", 
i
, 
¨gv
[i]);

25 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

27 
	`¢¥ötf
(
buf
, (buf), "Envú⁄mít: (ív∞%p)\n", 
ívp
);

28 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

29 
i
 = 0; 
ívp
[i]; i++)

31 
	`¢¥ötf
(
buf
, (buf), " %d \"%s\"\n", 
i
, 
ívp
[i]);

32 
	`wrôe
(1, 
buf
, 
	`°æí
(buf));

36 
	}
}

	@user/usr/bin/hello.c

8 
	~<f˙é.h
>

9 
	~<uni°d.h
>

11 
	$maö
(
¨gc
, **
¨gv
)

13 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

14 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

15 
	`wrôe
(1, "Hello, world!\n", 14);

17 
	}
}

	@user/usr/bin/kshell.c

5 
	~"wìnix/sysˇŒ.h
"

6 
	~"wìnix/å≠.h
"

8 
	$maö
(
¨gc
, **
¨gv
Ë{  ()
	`å≠
(
SYS_kshñl
, (
uöt32_t
)0); 
	}
}

	@user/usr/bin/spin.c

5 
	$maö
(
¨gc
, **
¨gv
)

10 
	}
}

	@user/usr/bin/tests/eatinodes.c

1 
	~<î∫o.h
>

2 
	~<°dlib.h
>

3 
	~<°rög.h
>

5 
	~<f˙é.h
>

6 
	~<°dio.h
>

7 
	~<uni°d.h
>

9 
	groŸ_dú
[64];

11 
	$ótöodes_°¨t
()

13 
îr
;

15 
roŸ_dú
[0] = '\0';

18 
	`¢¥ötf
(
roŸ_dú
, ‘oŸ_dú), "ótöodes-%d", 
	`ønd
());

19 
îr
 = 
	`mkdú
(
roŸ_dú
, 0777);

20 i‡(
îr
 && 
î∫o
 !
EEXIST
)

22 
	`¥ötf
("FaûedÅÿmakêã°ÑoŸ dúe˘‹y: %s\n", 
	`°ªº‹
(
î∫o
));

23 
	`exô
(
î∫o
);

25 } 
îr
 != 0);

26 
	`¥ötf
("Cª©edÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

28 
îr
 = 
	`chdú
(
roŸ_dú
);

29 i‡(
îr
 < 0)

31 
	`¥ötf
("CouldÇot cd intoÅest directory\n");

32 
	`exô
(1);

34 
	}
}

36 
	$ótöodes
()

38 
i
;

39 
fd
;

40 
îr
 = 0;

41 
‚ame
[32];

43 
i
 = 0; !
îr
; ++i)

45 
	`¢¥ötf
(
‚ame
, (‚ame), "ã°-%d", 
i
);

46 
fd
 = 
	`›í
(
‚ame
, 
O_CREAT
 | 
O_TRUNC
 | 
O_WRONLY
, 0666);

47 i‡(
fd
 < 0)

49 
	`¥ötf
("CouldÇŸ o≥¿fûê%d: %s\n", 
i
, 
	`°ªº‹
(
î∫o
));

52 
îr
 = 
	`˛o£
(
fd
);

53 i‡(
îr
 < 0)

55 
	`¥ötf
("CouldÇŸ clo£ fd %d: %s\n", 
fd
, 
	`°ªº‹
(
î∫o
));

58 
	`¥ötf
("Cª©ed %d fûes\n", 
i
);

60 
j
;

61 
	`¥ötf
("Cleaning up...\n");

62 
j
 = 0; j < 
i
; ++j)

64 
	`¢¥ötf
(
‚ame
, (‚ame), "ã°-%d", 
j
);

65 
îr
 = 
	`u∆ök
(
‚ame
);

66 i‡(
îr
 < 0)

68 
	`¥ötf
("CouldÇŸÑemovêfûê%d: %s\n", 
j
, 
	`°ªº‹
(
î∫o
));

71 
	}
}

73 
	$ótöodes_íd
()

75 
	`chdú
("..");

76 
îr
 = 
	`rmdú
(
roŸ_dú
);

77 i‡(
îr
 < 0)

79 
	`¥ötf
("CouldÇŸÑemovêã° dúe˘‹y: %s\n", 
	`°ªº‹
(
î∫o
));

81 
	}
}

83 
	$maö
(
¨gc
, **
¨gv
)

85 
	`ótöodes_°¨t
();

86 
	`ótöodes
();

87 
	`ótöodes_íd
();

90 
	}
}

	@user/usr/bin/tests/eatmem.c

5 
	~<î∫o.h
>

6 
	~<°dlib.h
>

7 
	~<°rög.h
>

9 
	~<°dio.h
>

10 
	~<sys/mm™.h
>

11 
	~<uni°d.h
>

13 
	~<ã°/ã°.h
>

15 
	#PAGE_SIZE
 4096

	)

17 
	$ót
(*
addr
, *
cou¡
, *
num
)

19 
°©us
;

20 
	`ã°_f‹k_begö
()

22 i‡(*
num
 <= 0)

27 
foo
 = *((*)
addr
 + ((*
cou¡
)++ * 
PAGE_SIZE
));

28 i‡((*
cou¡
 & 0x7f) == 0)

30 
	`¥ötf
("Aã %dÖages\n", *
cou¡
);

37 *
cou¡
 < *
num
)

39 
foo
 = *((*)
addr
 + ((*
cou¡
)++ * 
PAGE_SIZE
));

40 i‡((*
cou¡
 & 0x7f) == 0)

42 
	`¥ötf
("Aã %dÖages\n", *
cou¡
);

47 
	`ã°_f‹k_íd
(&
°©us
);

48 i‡(*
num
 <0 && 
EFAULT
 !
°©us
)

50 
	`Ârötf
(
°dîr
, "ChildÖrocess didn't segfault!\n");

51 
	`exô
(1);

53 i‡(*
num
 < 0)

56 
	`munm≠
(
addr
, 
PAGE_SIZE
 * (-*
num
));

57 
	`¥ötf
("Gavêback %dÖages\n", -*
num
);

58 *
cou¡
 +*
num
;

60 
	}
}

62 
	#FLAG_DAEMON
 "-d"

	)

63 
	#FLAG_INFINITE
 "-i"

	)

64 
	#FLAG_ITER
 "-y"

	)

65 
	#FLAG_NUM
 "-#"

	)

67 
	#OPT_DAEMON
 1

	)

68 
	#OPT_INFINITE
 2

	)

69 
	#OPT_ITER
 4

	)

70 
	#OPT_NUM
 8

	)

72 
	$∑r£_¨gs
(
¨gc
, **
¨gv
, *
›ts
, *
ôî
, *
num
)

74 
i
;

75 *
›ts
 = *
ôî
 = *
num
 = 0;

76 
i
 = 1; i < 
¨gc
; i++)

78 i‡(!
	`°rcmp
(
FLAG_DAEMON
, 
¨gv
[
i
]))

80 *
›ts
 |
OPT_DAEMON
;

82 i‡(!
	`°rcmp
(
FLAG_INFINITE
, 
¨gv
[
i
]))

84 *
›ts
 |
OPT_INFINITE
;

86 i‡(!
	`°rcmp
(
FLAG_ITER
, 
¨gv
[
i
]))

88 *
›ts
 |
OPT_ITER
;

89 i‡(++
i
 >
¨gc
 ||

90 (
î∫o
 = 0, *
ôî
 = 
	`°πﬁ
(
¨gv
[
i
], 
NULL
, 0), 0 !=Érrno))

95 i‡(!
	`°rcmp
(
FLAG_NUM
, 
¨gv
[
i
]))

97 *
›ts
 |
OPT_NUM
;

98 i‡(++
i
 >
¨gc
 ||

99 (
î∫o
 = 0, *
num
 = 
	`°πﬁ
(
¨gv
[
i
], 
NULL
, 0), 0 !=Érrno))

110 
	}
}

112 
	$maö
(
¨gc
, **
¨gv
)

114 
°©us
;

115 *
addr
;

116 *
cou¡
;

117 *
›ts
, *
ôî
, *
num
;

121 i‡(
MAP_FAILED
 ==

122 (
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10000, 
PROT_READ
 | 
PROT_WRITE
,

123 
MAP_SHARED
 | 
MAP_ANON
, -1, 0)))

128 
i
;

129 
i
 = 0; i < 40; i++)

131 i‡(
MAP_FAILED
 =
	`mm≠
((*)
addr
 + 
PAGE_SIZE
 * 25 * 
i
,

132 
PAGE_SIZE
 * 25, 
PROT_READ
 | 
PROT_WRITE
,

133 
MAP_FIXED
 | 
MAP_SHARED
 | 
MAP_ANON
, -1, 0))

140 
cou¡
 = 
addr
;

141 *
cou¡
 = 0;

142 
›ts
 = 
cou¡
 + 1;

143 
ôî
 = 
cou¡
 + 2;

144 
num
 = 
cou¡
 + 3;

146 i‡(0 > 
	`∑r£_¨gs
(
¨gc
, 
¨gv
, 
›ts
, 
ôî
, 
num
))

148 
	`Ârötf
(

149 
°dîr
,

150 "USAGE:É©mem [›ti⁄s]\n" 
FLAG_DAEMON


151 "Ñu¿a†d´m⁄\n" 
FLAG_INFINITE


152 "Ñu¿f‹evî\n" 
FLAG_ITER


153 " [num]Çumbî o‡ôî©i⁄†tÿyõld\n" 
FLAG_NUM


158 
addr
 = (*Ôdd∏+ 
PAGE_SIZE
;

160 
	`¥ötf
("OM NOM NOM NOM\n");

162 i‡(*
›ts
 & 
OPT_DAEMON
)

164 i‡(
	`f‹k
())

166 
	`exô
(0);

170 
	`ót
(
addr
, 
cou¡
, 
num
);

172 
	`¥ötf
("Aã %dÖage†öÅŸÆ\n", *
cou¡
);

174 i‡(*
›ts
 & 
OPT_INFINITE
)

178 
	`sched_yõld
();

181 i‡(*
›ts
 & 
OPT_ITER
)

183 --
ôî
)

185 
	`sched_yõld
();

188 
	`¥ötf
("Giving memory backÇow\n");

190 
	}
}

	@user/usr/bin/tests/elf_test-64.c

1 
	~<°dio.h
>

5 
	ma_ty≥
;

7 
	ma_vÆ
;

8 *
	ma_±r
;

9 (*
	ma_f˙
)();

10 } 
	ma_un
;

11 } 
	tElf64_auxv_t
;

13 
	$maö
(
¨gc
, **
¨gv
, **
ívp
, 
Elf64_auxv_t
 *
auxv
)

16 
	`¥ötf
("¨gc: %d\n", 
¨gc
);

19 
i
;

20 
i
 = 0; 
¨gv
[i] != 0; i++)

22 
	`¥ötf
("¨gv[%d] (%p): %s\n", 
i
, 
¨gv
[i],árgv[i]);

26 
i
 = 0; 
ívp
[i] != 0; i++)

28 
	`¥ötf
("ívp[%d] (%p): %s\n", 
i
, 
ívp
[i],Énvp[i]);

32 
i
 = 0; 
auxv
[i].
a_ty≥
 != 0; i++)

34 
	`¥ötf
("auxv[%d]:Åy≥ %ld\n", 
i
, 
auxv
[i].
a_ty≥
);

38 
	}
}

	@user/usr/bin/tests/forkbomb.c

1 
	~<f˙é.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<uni°d.h
>

9 
	$maö
(
¨gc
, **
¨gv
)

11 
n
 = 1;

12 
pid_t
 
pid
;

14 
	`›í
("/dev/ây0", 
O_RDONLY
, 0);

15 
	`›í
("/dev/ây0", 
O_WRONLY
, 0);

16 
	`¥ötf
("Forking upá storm!\n");

17 
	`¥ötf
("IfÅhisÑuns for 10 minutes without crashing,Åhen you ");

18 
	`¥ötf
("probablyáren't \nleakingÑesources\n");

20 i‡(
	`f‹k
())

24 
	`¥ötf
("F‹kÇumbî : %d\n", 
n
);

25 i‡((
pid
 = 
	`f‹k
()))

27 i‡(
pid
 == -1)

29 
	`¥ötf
("F‹k %d faûed. F‹kbomb st›pög.\n", 
n
);

30 
	`exô
(1);

32 
°©us
;

33 
	`sched_yõld
();

34 
	`waô
(&
°©us
);

35 i‡(
°©us
 != 0)

37 
	`¥ötf
("Te° faûed. ChûdÉxô wôh sètu†%d\n", 
°©us
);

38 
	`exô
(1);

43 
a
 = 0;

44 
	`sched_yõld
();

45 
	`exô
(0);

47 
n
++;

53 i‡(!
	`f‹k
())

57 
	`¥ötf
("Iám f‹kÇumbî %d\n", 
n
);

58 i‡((
pid
 = 
	`f‹k
()))

60 i‡(-1 !
pid
)

62 
	`exô
(0);

66 
	`¥ötf
(

69 
n
);

70 
	`exô
(1);

73 ++
n
;

78 
°©us
;

79 
	`waô
(&
°©us
) > 0)

84 
	}
}

	@user/usr/bin/tests/forktest.c

1 
	~<î∫o.h
>

2 
	~<°dio.h
>

3 
	~<uni°d.h
>

5 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

7 
	`¥ötf
("pid %d: E¡îög f‹kã°\n", 
	`gëpid
());

8 
pid
 = 
	`f‹k
();

9 
	`¥ötf
("pid %d: F‹kÑëu∫ed %d\n", 
	`gëpid
(), 
pid
);

10 
	`¥ötf
("pid %d: Abouàtÿíã∏waôpid\n", 
	`gëpid
());

11 
rc
 = 
	`waôpid
(-1, 0, 0);

12 
	`¥ötf
("pid %d: WaôpidÑëu∫ed %d\n", 
	`gëpid
(), 
rc
);

13 i‡(
rc
 == -1)

15 
	`¥ötf
("pid %d: ERRNO = %d\n", 
	`gëpid
(), 
î∫o
);

17 
	`¥ötf
("pid %d: Exôög\n", 
	`gëpid
());

19 
	}
}

	@user/usr/bin/tests/linkermagic.h

1 #¥agm®
⁄˚


4 *
__execuèbÀ_°¨t
;

5 *
_ëext
;

6 *
_ed©a
;

7 *
_íd
;

9 
	#ãxt_°¨t
 ((*)&
__execuèbÀ_°¨t
)

	)

10 
	#ãxt_íd
 ((*)&
_ëext
)

	)

11 
	#d©a_°¨t
 ((*)&
_ëext
)

	)

12 
	#d©a_íd
 ((*)&
_ed©a
)

	)

13 
	#bss_°¨t
 ((*)&
_ed©a
)

	)

14 
	#bss_íd
 ((*)&
_íd
)

	)

28 
OUTPUT_FORMAT
("elf32-i386", "elf32-i386",

30 
	$OUTPUT_ARCH
(
i386
)

31 
	$ENTRY
(
_°¨t
)

32 
	`SEARCH_DIR
("/usr/i486-linux-gnu/lib32"); SEARCH_DIR("/usr/local/lib32"); SEARCH_DIR("/lib32"); SEARCH_DIR("/usr/lib32"); SEARCH_DIR("/usr/i486-linux-gnu/lib"); SEARCH_DIR("/usr/local/lib"); SEARCH_DIR("/lib"); SEARCH_DIR("/usr/lib");

33 
SECTIONS
 {

35 
	`PROVIDE
(
__execuèbÀ_°¨t
 = 0x08048000); . = 0x08048000 + 
SIZEOF_HEADERS
;

36 .
öãΩ
 : { *(.interp) }

37 .
nŸe
.
gnu
.
buûd
 - 
id
 : { *(.note.gnu.build - id) }

38 .
hash
 : { *(.hash) }

39 .
gnu
.
hash
 : { *(.gnu.hash) }

40 .
dynsym
 : { *(.dynsym) }

41 .
dyn°r
 : { *(.dynstr) }

42 .
gnu
.
vîsi⁄
 : { *(.gnu.version) }

43 .
gnu
.
vîsi⁄_d
 : { *(.gnu.version_d) }

44 .
gnu
.
vîsi⁄_r
 : { *(.gnu.version_r) }

45 .
ªl
.
dyn
 :

47 *(.
ªl
.
öô
)

48 *(.
ªl
.
ãxt
 .ªl.ãxt.* .ªl.
gnu
.
lök⁄˚
.
t
.*)

49 *(.
ªl
.
föi
)

50 *(.
ªl
.
rod©a
 .ªl.rod©a.* .ªl.
gnu
.
lök⁄˚
.
r
.*)

51 *(.
ªl
.
d©a
.ªl.
ro
 *.ªl.
gnu
.
lök⁄˚
.
d
.rel.ro.*)

52 *(.
ªl
.
d©a
 .ªl.d©a.* .ªl.
gnu
.
lök⁄˚
.
d
.*)

53 *(.
ªl
.
td©a
 .ªl.td©a.* .ªl.
gnu
.
lök⁄˚
.
td
.*)

54 *(.
ªl
.
tbss
 .ªl.tbss.* .ªl.
gnu
.
lök⁄˚
.
tb
.*)

55 *(.
ªl
.
˘‹s
)

56 *(.
ªl
.
dt‹s
)

57 *(.
ªl
.
gŸ
)

58 *(.
ªl
.
bss
 .ªl.bss.* .ªl.
gnu
.
lök⁄˚
.
b
.*)

60 .
ªœ
.
dyn
 :

62 *(.
ªœ
.
öô
)

63 *(.
ªœ
.
ãxt
 .ªœ.ãxt.* .ªœ.
gnu
.
lök⁄˚
.
t
.*)

64 *(.
ªœ
.
föi
)

65 *(.
ªœ
.
rod©a
 .ªœ.rod©a.* .ªœ.
gnu
.
lök⁄˚
.
r
.*)

66 *(.
ªœ
.
d©a
 .ªœ.d©a.* .ªœ.
gnu
.
lök⁄˚
.
d
.*)

67 *(.
ªœ
.
td©a
 .ªœ.td©a.* .ªœ.
gnu
.
lök⁄˚
.
td
.*)

68 *(.
ªœ
.
tbss
 .ªœ.tbss.* .ªœ.
gnu
.
lök⁄˚
.
tb
.*)

69 *(.
ªœ
.
˘‹s
)

70 *(.
ªœ
.
dt‹s
)

71 *(.
ªœ
.
gŸ
)

72 *(.
ªœ
.
bss
 .ªœ.bss.* .ªœ.
gnu
.
lök⁄˚
.
b
.*)

74 .
ªl
.
∂t
 : { *(.rel.plt) }

75 .
ªœ
.
∂t
 : { *(.rela.plt) }

76 .
öô
 :

78 
	`KEEP
(*(.
öô
))

80 .
∂t
 : { *(.plt) }

81 .
ãxt
 :

83 *(.
ãxt
 .
°ub
 .ãxt.* .
gnu
.
lök⁄˚
.
t
.*)

84 
	`KEEP
(*(.
ãxt
.*
≥rs⁄Æôy
 *))

86 *(.
gnu
.
w¨nög
)

88 .
föi
 :

90 
	`KEEP
(*(.
föi
))

92 
	`PROVIDE
(
__ëext
 = .);

93 
	`PROVIDE
(
_ëext
 = .);

94 
	`PROVIDE
(
ëext
 = .);

95 .
rod©a
 : { *(.rod©®.rod©a.* .
gnu
.
lök⁄˚
.
r
.*) }

96 .
rod©a1
 : { *(.rodata1) }

97 .
eh_‰ame_hdr
 : { *(.eh_frame_hdr) }

98 .
eh_‰ame
 : 
ONLY_IF_RO
 { 
	`KEEP
(*(.eh_frame)) }

99 .
gcc_ex˚±_èbÀ
 : 
ONLY_IF_RO
 { *(.gcc_except_table .gcc_except_table.*) }

102 . = 
	`ALIGN
(
	`CONSTANT
(
MAXPAGESIZE
)Ë- ((CONSTANT(MAXPAGESIZEË- .Ë& (CONSTANT(MAXPAGESIZEË- 1)); . = 
	`DATA_SEGMENT_ALIGN
(CONSTANT(MAXPAGESIZE), CONSTANT(
COMMONPAGESIZE
));

104 .
eh_‰ame
 : 
ONLY_IF_RW
 { 
	`KEEP
(*(.eh_frame)) }

105 .
gcc_ex˚±_èbÀ
 : 
ONLY_IF_RW
 { *(.gcc_except_table .gcc_except_table.*) }

107 .
td©a
 : { *(.td©®.td©a.* .
gnu
.
lök⁄˚
.
td
.*) }

108 .
tbss
 : { *(.tbs†.tbss.* .
gnu
.
lök⁄˚
.
tb
.*Ë*(.
tcomm⁄
) }

109 .
¥eöô_¨øy
 :

111 
	`PROVIDE_HIDDEN
(
__¥eöô_¨øy_°¨t
 = .);

112 
	`KEEP
(*(.
¥eöô_¨øy
))

113 
	`PROVIDE_HIDDEN
(
__¥eöô_¨øy_íd
 = .);

115 .
öô_¨øy
 :

117 
	`PROVIDE_HIDDEN
(
__öô_¨øy_°¨t
 = .);

118 
	`KEEP
(*(
	`SORT
(.
öô_¨øy
.*)))

119 
	`KEEP
(*(.
öô_¨øy
))

120 
	`PROVIDE_HIDDEN
(
__öô_¨øy_íd
 = .);

122 .
föi_¨øy
 :

124 
	`PROVIDE_HIDDEN
(
__föi_¨øy_°¨t
 = .);

125 
	`KEEP
(*(.
föi_¨øy
))

126 
	`KEEP
(*(
	`SORT
(.
föi_¨øy
.*)))

127 
	`PROVIDE_HIDDEN
(
__föi_¨øy_íd
 = .);

129 .
˘‹s
 :

140 
	`KEEP
(*
¸tbegö
.
	`o
(.
˘‹s
))

141 
	`KEEP
(*
¸tbegö
 ? .
	`o
(.
˘‹s
))

146 
	`KEEP
(*(
	`EXCLUDE_FILE
(*
¸ãnd
.
o
 *¸ãnd ? .oË.
˘‹s
))

147 
	`KEEP
(*(
	`SORT
(.
˘‹s
.*)))

148 
	`KEEP
(*(.
˘‹s
))

150 .
dt‹s
 :

152 
	`KEEP
(*
¸tbegö
.
	`o
(.
dt‹s
))

153 
	`KEEP
(*
¸tbegö
 ? .
	`o
(.
dt‹s
))

154 
	`KEEP
(*(
	`EXCLUDE_FILE
(*
¸ãnd
.
o
 *¸ãnd ? .oË.
dt‹s
))

155 
	`KEEP
(*(
	`SORT
(.
dt‹s
.*)))

156 
	`KEEP
(*(.
dt‹s
))

158 .
j¸
 : { 
	`KEEP
(*(.jcr)) }

159 .
d©a
.
ªl
.
ro
 : { *(.d©a.ªl.ro.
loˇl
 *.
gnu
.
lök⁄˚
.
d
.rel.ro.local.*) *(.data.rel.ro *.gnu.linkonce.d.rel.ro.*) }

160 .
dy«mic
 : { *(.dynamic) }

161 .
gŸ
 : { *(.got) }

162 . = 
	`DATA_SEGMENT_RELRO_END
(12, .);

163 .
gŸ
.
∂t
 : { *(.got.plt) }

164 .
d©a
 :

166 *(.
d©a
 .d©a.* .
gnu
.
lök⁄˚
.
d
.*)

167 
	`KEEP
(*(.
gnu
.
lök⁄˚
.
d
.*
≥rs⁄Æôy
 *))

168 
	`SORT
(
CONSTRUCTORS
)

170 .
d©a1
 : { *(.data1) }

171 
_ed©a
 = .; 
	`PROVIDE
(
ed©a
 = .);

172 
__bss_°¨t
 = .;

173 .
bss
 :

175 *(.
dynbss
)

176 *(.
bss
 .bss.* .
gnu
.
lök⁄˚
.
b
.*)

177 *(
COMMON
)

183 . = 
	`ALIGN
(. != 0 ? 32 / 8 : 1);

185 . = 
	`ALIGN
(32 / 8);

186 . = 
	`ALIGN
(32 / 8);

187 
_íd
 = .; 
	`PROVIDE
(
íd
 = .);

188 . = 
	`DATA_SEGMENT_END
(.);

190 .
°ab
 0 : { *(.stab) }

191 .
°ab°r
 0 : { *(.stabstr) }

192 .
°ab
.
ex˛
 0 : { *(.stab.excl) }

193 .
°ab
.
ex˛°r
 0 : { *(.stab.exclstr) }

194 .
°ab
.
ödex
 0 : { *(.stab.index) }

195 .
°ab
.
ödex°r
 0 : { *(.stab.indexstr) }

196 .
commít
 0 : { *(.comment) }

201 .
debug
 0 : { *(.debug) }

202 .
löe
 0 : { *(.line) }

204 .
debug_§cöfo
 0 : { *(.debug_srcinfo) }

205 .
debug_s‚ames
 0 : { *(.debug_sfnames) }

207 .
debug_¨™ges
 0 : { *(.debug_aranges) }

208 .
debug_pub«mes
 0 : { *(.debug_pubnames) }

210 .
debug_öfo
 0 : { *(.debug_öfÿ.
gnu
.
lök⁄˚
.
wi
.*) }

211 .
debug_abbªv
 0 : { *(.debug_abbrev) }

212 .
debug_löe
 0 : { *(.debug_line) }

213 .
debug_‰ame
 0 : { *(.debug_frame) }

214 .
debug_°r
 0 : { *(.debug_str) }

215 .
debug_loc
 0 : { *(.debug_loc) }

216 .
debug_macöfo
 0 : { *(.debug_macinfo) }

218 .
debug_wók«mes
 0 : { *(.debug_weaknames) }

219 .
debug_fun˙ames
 0 : { *(.debug_funcnames) }

220 .
debug_ty≥«mes
 0 : { *(.debug_typenames) }

221 .
debug_v¨«mes
 0 : { *(.debug_varnames) }

223 .
debug_pubty≥s
 0 : { *(.debug_pubtypes) }

224 .
debug_ønges
 0 : { *(.debug_ranges) }

225 .
gnu
.
©åibuãs
 0 : { 
	`KEEP
(*(.gnu.attributes)) }

226 / 
DISCARD
 / : { *(.
nŸe
.
GNU
 - 
°ack
Ë*(.
gnu_debuglök
) }

227 
	}
}

	@user/usr/bin/tests/memtest.c

9 
	~<î∫o.h
>

10 
	~<°dlib.h
>

11 
	~<°rög.h
>

13 
	~<dúít.h
>

14 
	~<f˙é.h
>

15 
	~<°dio.h
>

16 
	~<sys/mm™.h
>

17 
	~<uni°d.h
>

18 
	~<wìnix/sysˇŒ.h
>

20 
	~<ã°/ã°.h
>

23 
	~"∑ge.h
"

25 
	~"lökîmagic.h
"

27 
	#sysˇŒ_suc˚ss
(
ex¥
) \

28 
	`ã°_as£π
(0 <(
ex¥
), "\nunexpectedÉrror: %s (%d)", \

29 
	`ã°_îr°r
(
î∫o
),Éºno)

	)

32 
	#as£π_Áu…
(
°©emít
, 
msg
) \

35 
__°©us
; \

36 
	`ã°_f‹k_begö
() \

38 
°©emít
; \

41 
	`ã°_f‹k_íd
(&
__°©us
); \

42 
	`ã°_as£π
(
EFAULT
 =
__°©us
, \

43 "U√x≥˘edÜack o‡£gÁu… o¿" #°©emíà" : " 
msg
); \

44 } 0);

	)

46 
	#as£π_noÁu…
(
°©emít
, 
msg
) \

49 
__°©us
; \

50 
	`ã°_f‹k_begö
() \

52 
°©emít
; \

55 
	`ã°_f‹k_íd
(&
__°©us
); \

56 
	`ã°_as£π
(0 =
__°©us
, \

57 "U√x≥˘ed segÁu… o¿" #°©emíà" : " 
msg
); \

58 } 0);

	)

60 
	groŸ_dú
[64];

63 
	$ovîÊow
()

65 
junk
[1000];

66 
	`ovîÊow
();

67 
	}
}

69 
	$ã°_ovîÊow
()

71 
	`¥ötf
("Testing stack overflow\n");

72 
	`as£π_Áu…
(
	`ovîÊow
(), "Stack overflow");

74 
	}
}

76 
	$ã°_mm≠_bounds
()

78 
fd
, 
°©us
;

79 *
addr
;

81 
	`¥ötf
("Testing boundariesándÖermissions of mmap()\n");

83 
	`ã°_as£π
(0 < (
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0)), 
NULL
);

84 
	`ã°_as£π
(

85 
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 3, 
PROT_READ
 | 
PROT_WRITE
,

86 
MAP_PRIVATE
, 
fd
, 0)),

87 
NULL
);

89 
	`ã°_as£π
('\0' =*(*)
addr
, 
NULL
);

90 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
), 
NULL
);

91 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 * 2), 
NULL
);

92 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 * 3 - 1), 
NULL
);

95 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 
PAGE_SIZE
), 
NULL
);

96 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 + 
PAGE_SIZE
 * 2, PAGE_SIZE), 
NULL
);

99 
addr
 = (*Ôdd∏+ 
PAGE_SIZE
;

102 
	`ã°_as£π
('\0' =*((*)
addr
), 
NULL
);

103 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 - 1), 
NULL
);

104 
	`as£π_noÁu…
(*(*)
addr
 = 'a', "");

105 
	`as£π_noÁu…
(*((*)
addr
 + 
PAGE_SIZE
 - 1) = 'b', "");

108 
	`as£π_Áu…
(
foo
 = *((*)
addr
 + 
PAGE_SIZE
), "");

109 
	`as£π_Áu…
(
foo
 = *((*)
addr
 - 
PAGE_SIZE
), "");

110 
	`as£π_Áu…
(
foo
 = *((*)
addr
 - 1), "");

111 
	`as£π_Áu…
(*((*)
addr
 + 
PAGE_SIZE
) = 'a', "");

112 
	`as£π_Áu…
(*((*)
addr
 - 1) = 'a', "");

113 
	`as£π_Áu…
(*((*)
addr
 + 
PAGE_SIZE
 * 2 - 1) = 'a', "");

116 
	`ã°_as£π
(

117 
addr
 =
	`mm≠
◊ddr, 1, 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

119 
	`as£π_Áu…
(*((*)
addr
) = 'a', "");

120 
	`as£π_Áu…
(*((*)
addr
 + 
PAGE_SIZE
 - 1) = 'a', "");

123 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 - 
PAGE_SIZE
, PAGE_SIZE), 
NULL
);

124 
	`ã°_as£π
(0 =
	`munm≠
((*)
addr
 + 
PAGE_SIZE
, PAGE_SIZE), 
NULL
);

127 
	`ã°_as£π
('\0' =*((*)
addr
), 
NULL
);

128 
	`ã°_as£π
('\0' =*((*)
addr
 + 
PAGE_SIZE
 - 1), 
NULL
);

131 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 1), 
NULL
);

133 
	`as£π_Áu…
(
foo
 = *(*)
addr
, "");

134 
	`as£π_Áu…
(
foo
 = *((*)
addr
 + 
PAGE_SIZE
 - 1), "");

137 
	`ã°_as£π
(
addr
 =
	`mm≠
◊ddr, 
PAGE_SIZE
, 
PROT_EXEC
,

138 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

139 
NULL
);

140 
	`as£π_Áu…
(
foo
 = *(*)
addr
, "");

141 
	`as£π_Áu…
(
foo
 = *((*)
addr
 + 
PAGE_SIZE
 - 1), "");

142 
	`as£π_Áu…
(*((*)
addr
) = 'a', "");

144 
	`ã°_as£π
(

145 
addr
 =
	`mm≠
◊ddr, 
PAGE_SIZE
, 0, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0), 
NULL
);

146 
	`as£π_Áu…
(
foo
 = *(*)
addr
, "");

147 
	`as£π_Áu…
(
foo
 = *((*)
addr
 + 
PAGE_SIZE
 - 1), "");

148 
	`as£π_Áu…
(*((*)
addr
) = 'a', "");

151 
	}
}

153 
	$ã°_brk_bounds
()

155 *
ﬁdbrk
, *
√wbrk
;

156 
°©us
;

158 
	`¥ötf
("Testing boundariesándÖermissions of brk()\n");

161 
	`ã°_as£π
((*)-1 !(
ﬁdbrk
 = 
	`sbrk
(0)), 
NULL
);

162 
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(oldbrk);

163 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

166 
√wbrk
 = (*)
ﬁdbrk
 + 
PAGE_SIZE
;

168 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

169 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

172 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

175 
	`ã°_as£π
('\0' =*(*)
ﬁdbrk
, 
NULL
);

176 
	`ã°_as£π
('\0' =*((*)
√wbrk
 - 1), 
NULL
);

177 *((*)
√wbrk
 - 1) = 'a';

179 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

180 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

183 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 + 1), 
NULL
);

186 
	`ã°_as£π
('\0' =*(*)
√wbrk
, 
NULL
);

187 
	`ã°_as£π
('\0' =*((*)
√wbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

188 
	`as£π_noÁu…
(*(*)
√wbrk
 = 'b', "");

191 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

194 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

196 
	`as£π_Áu…
(
foo
 = *(*)
√wbrk
, "");

197 
	`as£π_Áu…
(*(*)
√wbrk
 = 'a', "");

202 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 + 
PAGE_SIZE
), 
NULL
);

203 
	`ã°_as£π
('\0' =*(*)
√wbrk
, 
NULL
);

204 
	`ã°_as£π
('\0' =*((*)
√wbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

207 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 - 1), 
NULL
);

210 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

211 *((*)
√wbrk
 - 2) = 'z';

214 
	`ã°_as£π
(0 =
	`brk
((*)
√wbrk
 - 1000), 
NULL
);

215 
	`ã°_as£π
('z' =*((*)
√wbrk
 - 2), 
NULL
);

216 
	`ã°_as£π
(0 =
	`brk
((*)
ﬁdbrk
 + 1), 
NULL
);

217 
	`ã°_as£π
('z' =*((*)
√wbrk
 - 2), 
NULL
);

218 
	`ã°_as£π
(0 =
	`brk
((*)
ﬁdbrk
 + 1000), 
NULL
);

219 
	`ã°_as£π
('a' =*((*)
√wbrk
 - 1), 
NULL
);

222 
	}
}

224 
	$ã°_munm≠
()

226 *
addr
, *
middÀ
;

228 
	`¥ötf
("Testing munmap()\n");

232 
	`ã°_as£π
(

233 
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 20, 
PROT_READ
 | 
PROT_WRITE
,

234 
MAP_PRIVATE
 | 
MAP_ANON
, -1, 0)),

235 
NULL
);

237 *(
addr
 + 
PAGE_SIZE
 * 8) = '^';

238 *(
addr
 + 
PAGE_SIZE
 * 12) = '$';

241 
	`as£π_Áu…
(*
addr
 = 'a'; 
	`munm≠
◊ddr, 
PAGE_SIZE
); 
foo
 = *addr;, "");

242 
	`as£π_Áu…
(*
addr
 = 'a'; 
	`munm≠
◊ddr, 
PAGE_SIZE
 * 20); 
foo
 = *addr;

244 
	`as£π_Áu…
(*(
addr
 + 
PAGE_SIZE
 * 10) = 'a';

245 
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE * 5);

246 
foo
 = *(
addr
 + 
PAGE_SIZE
 * 10);, "");

249 
	`ã°_as£π
(

250 
MAP_FAILED
 !(
middÀ
 = 
	`mm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE,

251 
PROT_READ
 | 
PROT_WRITE
,

252 
MAP_SHARED
 | 
MAP_ANON
 | 
MAP_FIXED
, -1, 0)),

253 
NULL
);

256 
	`ã°_as£π
('\0' =*
middÀ
, 
NULL
);

257 
	`as£π_noÁu…
(*
middÀ
 = 'a', "");

258 
	`ã°_as£π
('a' =*
middÀ
, 
NULL
);

260 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 9), 
NULL
);

261 
	`as£π_noÁu…
(*(
addr
 + 
PAGE_SIZE
 * 9) = 'a', "");

262 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 9), 
NULL
);

264 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 11), 
NULL
);

265 
	`as£π_noÁu…
(*(
addr
 + 
PAGE_SIZE
 * 11) = 'a', "");

266 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 11), 
NULL
);

268 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

269 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 20 - 1), 
NULL
);

272 
	`ã°_as£π
('^' =*(
addr
 + 
PAGE_SIZE
 * 8), 
NULL
);

273 
	`ã°_as£π
('$' =*(
addr
 + 
PAGE_SIZE
 * 12), 
NULL
);

276 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 9, PAGE_SIZE * 3), 
NULL
);

279 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 9), "");

280 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 10), "");

281 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 12 - 1), "");

284 
	`ã°_as£π
('^' =*(
addr
 + 
PAGE_SIZE
 * 8), 
NULL
);

285 
	`ã°_as£π
('$' =*(
addr
 + 
PAGE_SIZE
 * 12), 
NULL
);

288 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 10, PAGE_SIZE), 
NULL
);

289 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
 * 9, PAGE_SIZE * 3), 
NULL
);

292 
	`ã°_as£π
(0 =
	`munm≠
(
addr
 + 
PAGE_SIZE
, PAGE_SIZE * 19), 
NULL
);

295 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

298 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 
PAGE_SIZE
 * 15), 
NULL
);

299 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
), "");

300 
	`as£π_Áu…
(
foo
 = *(
addr
), "");

301 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 20 - 1), "");

304 
	}
}

306 
	$ã°_°¨t_brk
()

308 
	`¥ötf
("Testing using brk()Çear starting brk\n");

309 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), "brk shouldÇot have moved yet");

310 
	`ã°_as£π
(!
	`PAGE_ALIGNED
(
bss_íd
) && !PAGE_ALIGNED((*)bss_end + 1),

314 *
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

315 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

316 *(
ﬁdbrk
 - 1) = 'a';

317 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

320 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

321 
	`ã°_as£π
('a' =*(
ﬁdbrk
 - 1), 
NULL
);

322 *(
ﬁdbrk
 - 1) = 'b';

323 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

324 
	`as£π_Áu…
(
foo
 = *(
ﬁdbrk
 + 
PAGE_SIZE
), "");

327 
	`ã°_as£π
(0 !
	`brk
((*)
bss_íd
 - 1), 
NULL
);

328 
	`ã°_as£π
(0 !
	`brk
(
	`PAGE_ALIGN_DOWN
(
bss_íd
)), 
NULL
);

331 *
√wbrk
 = 
ﬁdbrk
 + 
PAGE_SIZE
;

332 
	`ã°_as£π
(0 =
	`brk
(
√wbrk
), 
NULL
);

335 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

336 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

337 
	`ã°_as£π
('\0' =*(
√wbrk
 - 1), 
NULL
);

338 *
ﬁdbrk
 = 'z';

339 *(
√wbrk
 - 1) = 'y';

340 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

341 
	`as£π_Áu…
(
foo
 = *(
√wbrk
 + 
PAGE_SIZE
), "");

344 
	`ã°_as£π
(0 !
	`brk
((*)
bss_íd
 - 1), 
NULL
);

345 
	`ã°_as£π
(0 !
	`brk
(
	`PAGE_ALIGN_DOWN
(
bss_íd
)), 
NULL
);

348 
	`ã°_as£π
(0 =
	`brk
((*)
bss_íd
 + 1), 
NULL
);

350 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

351 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

352 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

355 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
 + 1), 
NULL
);

361 
	`as£π_Áu…
(
foo
 = *
√wbrk
, "");

364 
	`ã°_as£π
(0 =
	`brk
(
bss_íd
), 
NULL
);

365 
	`ã°_as£π
('b' =*(
ﬁdbrk
 - 1), 
NULL
);

368 
	}
}

370 
	$ã°_brk_mm≠
()

372 
	`¥ötf
("Testing interactions of brk()ánd mmap()\n");

373 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), "brk shouldÇot have moved yet");

374 *
ﬁdbrk
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

377 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
ﬁdbrk
, 
PAGE_SIZE
 * 2, 
PROT_READ
,

378 
MAP_ANON
 | 
MAP_FIXED
 | 
MAP_PRIVATE
, -1, 0),

379 
NULL
);

381 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

382 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

385 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
), 
NULL
);

386 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

387 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

388 
	`ã°_as£π
(0 =
	`brk
((*)
bss_íd
 + 1), 
NULL
);

389 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

390 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 - 1), 
NULL
);

393 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 1), 
NULL
);

394 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
), 
NULL
);

395 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 2), 
NULL
);

396 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 3), 
NULL
);

399 
	`ã°_as£π
(0 =
	`munm≠
(
ﬁdbrk
, 
PAGE_SIZE
), 
NULL
);

401 
	`as£π_Áu…
(
foo
 = *
ﬁdbrk
, "");

402 
	`as£π_Áu…
(
foo
 = *(
ﬁdbrk
 + 
PAGE_SIZE
 - 1), "");

405 
	`ã°_as£π
(0 =
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
), 
NULL
);

406 
	`ã°_as£π
('\0' =*
ﬁdbrk
, 
NULL
);

407 
	`ã°_as£π
('\0' =*(
ﬁdbrk
 + 
PAGE_SIZE
 - 1), 
NULL
);

408 *
ﬁdbrk
 = 'a';

411 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 + 1), 
NULL
);

412 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 2), 
NULL
);

413 
	`ã°_as£π
(0 !
	`brk
(
ﬁdbrk
 + 
PAGE_SIZE
 * 3), 
NULL
);

416 
	}
}

418 
	$ã°_mm≠_fûl
()

420 
	`¥ötf
("Testing filling up virtualáddress space\n");

421 *
hi
, *
lo
, *
addr
;

423 
	`ã°_as£π
(

424 
MAP_FAILED
 !(
hi
 = 
	`mm≠
(
NULL
, 1, 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0)),

425 
NULL
);

426 
	`ã°_as£π
(0 =
	`munm≠
(
hi
, 1), 
NULL
);

427 
hi
 +
PAGE_SIZE
;

429 
	`ã°_as£π
(
bss_íd
 =
	`sbrk
(0), 
NULL
);

430 
lo
 = 
	`PAGE_ALIGN_UP
(
bss_íd
);

433 
	#MID_ADDR
 ((*)0x80000000)

	)

434 i‡(
MID_ADDR
 > 
lo
)

436 
	`ã°_as£π
(

437 
MID_ADDR
 =
	`mm≠
(
NULL
,

438 (
size_t
)((
uöçå_t
)
hi
 - (uöçå_t)
MID_ADDR
), 0,

439 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

440 
NULL
);

442 i‡(
MID_ADDR
 < 
hi
)

444 
	`ã°_as£π
(

445 
lo
 =
	`mm≠
(
NULL
, (
size_t
)((
uöçå_t
)
MID_ADDR
 - (uintptr_t)lo), 0,

446 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

447 
NULL
);

451 
	`ã°_as£π
(
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 1, 
PROT_READ
,

452 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0)),

453 
NULL
);

454 
	`ã°_as£π
((
uöçå_t
)
addr
 < (uöçå_t)&addr, 
NULL
);

455 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

457 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
addr
, 1, 
PROT_READ
,

458 
MAP_FIXED
 | 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

459 
NULL
);

460 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

463 
	`ã°_as£π
(
MAP_FAILED
 ==

464 
	`mm≠
(
NULL
, (
size_t
)
addr
, 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

465 
NULL
);

468 #ifde‡
ﬁd


469 
	`ã°_as£π
(

470 
MAP_FAILED
 !
	`mm≠
(
NULL
,

471 (
size_t
)((
uöçå_t
)
addr
 - (uöçå_t)
USER_MEM_LOW
),

472 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

473 
NULL
);

478 #ifde‡
ﬁd


480 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, 1, 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

481 
NULL
);

484 
	`ã°_as£π
(0 =
	`munm≠
(
addr
, 1), 
NULL
);

485 
	`ã°_as£π
(
addr
 =
	`mm≠
(
NULL
, 1, 
PROT_READ
, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

486 
NULL
);

487 
	`ã°_as£π
('\0' =*
addr
, 
NULL
);

489 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(
NULL
, 1, 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

490 
NULL
);

494 
	`ã°_as£π
(0 =
	`munm≠
(
MID_ADDR
 - 
PAGE_SIZE
, PAGE_SIZE * 2), 
NULL
);

495 
	`ã°_as£π
(
MID_ADDR
 - 
PAGE_SIZE
 =
	`mm≠
(
NULL
, PAGE_SIZE * 2, 
PROT_READ
,

496 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

497 
NULL
);

498 
	`ã°_as£π
('\0' =*
MID_ADDR
, 
NULL
);

499 
	`ã°_as£π
('\0' =*(
MID_ADDR
 - 
PAGE_SIZE
), 
NULL
);

500 
	`ã°_as£π
('\0' =*(
MID_ADDR
 + 
PAGE_SIZE
 - 1), 
NULL
);

503 *
p
;

504 
p
 = 
lo
 + 
PAGE_SIZE
;Ö <Üo + PAGE_SIZE * 20;Ö += PAGE_SIZE * 2)

506 
	`ã°_as£π
(

507 
MAP_FAILED
 !
	`mm≠
(
p
, 1, 
PROT_READ
 | 
PROT_WRITE
,

508 
MAP_ANON
 | 
MAP_PRIVATE
 | 
MAP_FIXED
, -1, 0),

509 
NULL
);

510 
	`ã°_as£π
('\0' =*
p
, 
NULL
);

511 *
p
 = 'a';

512 
	`as£π_Áu…
(
foo
 = *(
p
 + 
PAGE_SIZE
), "");

516 
	`ã°_as£π
(
MAP_FAILED
 !
	`mm≠
(
NULL
, 1, 0, 
MAP_ANON
 | 
MAP_PRIVATE
, -1, 0),

517 
NULL
);

520 
	`ã°_as£π
(0 =
	`brk
(
lo
), 
NULL
);

521 
	`ã°_as£π
(0 !
	`brk
(
lo
 + 1), 
NULL
);

524 
	`ã°_as£π
(0 =
	`munm≠
(
lo
, (
size_t
)((
uöçå_t
)
hi
 - (uöçå_tÓo)), 
NULL
);

526 
	}
}

528 
	$ã°_mm≠_ª≥©
()

530 
	#MMAP_REPEAT_FILE
 "mm≠ª≥©ã°"

	)

531 
	#REPEAT_STR
 "FooFooFoo"

	)

533 
fd
, 
i
;

534 *
addrs
[10];

535 
	`¥ötf
("TestingÑepeated mmap() of same file\n");

538 
	`ã°_as£π
(-1 !(
fd
 = 
	`›í
(
MMAP_REPEAT_FILE
, 
O_RDWR
 | 
O_CREAT
, 0)), 
NULL
);

539 
	`ã°_as£π
(10 =
	`wrôe
(
fd
, 
REPEAT_STR
, 10), 
NULL
);

540 
	`ã°_as£π
(0 =
	`u∆ök
(
MMAP_REPEAT_FILE
), 
NULL
);

543 
i
 = 0; i < 10; i++)

545 
	`ã°_as£π
(
MAP_FAILED
 !(
addrs
[
i
] = 
	`mm≠
(
NULL
, 
PAGE_SIZE
,

546 
PROT_READ
 | 
PROT_WRITE
,

547 
MAP_PRIVATE
, 
fd
, 0)),

548 
NULL
);

549 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

552 *
addrs
[0] = 'Z';

553 *(
addrs
[0] + 
PAGE_SIZE
 - 1) = 'Q';

554 
i
 = 1; i < 10; i++)

556 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

557 
	`ã°_as£π
('\0' =*(
addrs
[
i
] + 
PAGE_SIZE
 - 1), 
NULL
);

561 
i
 = 0; i < 10; i++)

563 
	`ã°_as£π
(
MAP_FAILED
 !(
addrs
[
i
] = 
	`mm≠
(
NULL
, 
PAGE_SIZE
,

564 
PROT_READ
 | 
PROT_WRITE
,

565 
MAP_SHARED
, 
fd
, 0)),

566 
NULL
);

567 
	`ã°_as£π
(!
	`°rcmp
(
addrs
[
i
], 
REPEAT_STR
), 
NULL
);

570 *
addrs
[3] = 'Z';

571 *(
addrs
[5] + 
PAGE_SIZE
 - 1) = 'Q';

572 
i
 = 0; i < 10; i++)

574 
	`ã°_as£π
('Z' =*
addrs
[
i
], 
NULL
);

575 
	`ã°_as£π
('Q' =*(
addrs
[
i
] + 
PAGE_SIZE
 - 1), 
NULL
);

579 
	}
}

581 
	$ã°_mm≠_bey⁄d
()

584 
	#MMAP_BEYOND_FILE
 "mm≠bey⁄dã°"

	)

585 
	#BEYOND_STR
 "FOOBAR!"

	)

587 
fd
;

588 *
addr
, *
addr2
;

589 
°©us
;

591 
	`¥ötf
("Testing mmap() beyondÉnd of backing object\n");

594 
	`ã°_as£π
(-1 !(
fd
 = 
	`›í
(
MMAP_BEYOND_FILE
, 
O_RDWR
 | 
O_CREAT
, 0)), 
NULL
);

595 
	`ã°_as£π
(8 =
	`wrôe
(
fd
, 
BEYOND_STR
, 8), 
NULL
);

596 
	`ã°_as£π
(0 =
	`u∆ök
(
MMAP_BEYOND_FILE
), 
NULL
);

599 
	`ã°_as£π
(

600 
MAP_FAILED
 !(
addr
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10, 
PROT_READ
 | 
PROT_WRITE
,

601 
MAP_SHARED
, 
fd
, 0)),

602 
NULL
);

604 
	`ã°_as£π
(!
	`°rcmp
(
addr
, 
BEYOND_STR
), 
NULL
);

607 
	`ã°_as£π
(
MAP_FAILED
 !=

608 (
addr2
 = 
	`mm≠
(
NULL
, 
PAGE_SIZE
 * 10, 
PROT_READ
 | 
PROT_WRITE
,

609 
MAP_PRIVATE
, 
fd
, 0)),

610 
NULL
);

612 
	`ã°_as£π
(!
	`°rcmp
(
addr2
, 
BEYOND_STR
), 
NULL
);

613 *
addr2
 = 'a';

616 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
), "");

617 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 5), "");

618 
	`as£π_Áu…
(*((*)
addr
 + 
PAGE_SIZE
 * 5) = 'a', "");

620 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
), "");

621 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 5), "");

622 
	`as£π_Áu…
(*(
addr2
 + 
PAGE_SIZE
 * 5) = 'a', "");

625 
	`ã°_as£π
(
PAGE_SIZE
 * 3 =
	`l£ek
(
fd
, PAGE_SIZE * 3, 
SEEK_SET
), 
NULL
);

626 
	`ã°_as£π
(8 =
	`wrôe
(
fd
, 
BEYOND_STR
, 8), 
NULL
);

629 
	`ã°_as£π
(!
	`°rcmp
(
addr
, 
BEYOND_STR
), 
NULL
);

630 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
), 
NULL
);

631 
	`ã°_as£π
('\0' =*(
addr
 + 
PAGE_SIZE
 * 2), 
NULL
);

632 
	`ã°_as£π
(!
	`°rcmp
(
addr
 + 
PAGE_SIZE
 * 3, 
BEYOND_STR
), 
NULL
);

634 
	`ã°_as£π
('a' =*
addr2
, 
NULL
);

635 
	`ã°_as£π
('\0' =*(
addr2
 + 
PAGE_SIZE
), 
NULL
);

636 
	`ã°_as£π
('\0' =*(
addr2
 + 
PAGE_SIZE
 * 2), 
NULL
);

639 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 4), "");

640 
	`as£π_Áu…
(
foo
 = *(
addr
 + 
PAGE_SIZE
 * 8), "");

641 
	`as£π_Áu…
(*(
addr
 + 
PAGE_SIZE
 * 5) = 'a', "");

643 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 4), "");

644 
	`as£π_Áu…
(
foo
 = *(
addr2
 + 
PAGE_SIZE
 * 8), "");

645 
	`as£π_Áu…
(*(
addr2
 + 
PAGE_SIZE
 * 5) = 'a', "");

648 
	}
}

652 
	$make_roŸdú
()

654 
îr
;

656 
roŸ_dú
[0] = '\0';

659 
	`¢¥ötf
(
roŸ_dú
, ‘oŸ_dú), "memã°-%d", 
	`ønd
());

660 
îr
 = 
	`mkdú
(
roŸ_dú
, 0777);

661 i‡(
îr
 && 
î∫o
 !
EEXIST
)

663 
	`¥ötf
("FaûedÅÿmakêã°ÑoŸ dúe˘‹y: %s\n", 
	`°ªº‹
(
î∫o
));

664 
	`exô
(
î∫o
);

666 } 
îr
 != 0);

667 
	`¥ötf
("Cª©edÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

668 
	}
}

671 
	$gëdít
(c⁄° *
dú
, 
dúít_t
 *
dúít
)

673 
ªt
, 
fd
 = -1;

675 i‡(0 > (
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0777)))

680 
ªt
 = 1;

681 
ªt
 != 0)

683 i‡(0 > (
ªt
 = 
	`gëdíts
(
fd
, 
dúít
, (*dirent))))

687 i‡(0 !
	`°rcmp
(".", 
dúít
->
d_«me
) &&

688 0 !
	`°rcmp
("..", 
dúít
->
d_«me
))

690 
	`˛o£
(
fd
);

695 
	`˛o£
(
fd
);

697 
	}
}

700 
	$ªmovóŒ
(c⁄° *
dú
)

702 
ªt
, 
fd
 = -1;

703 
dúít_t
 
dúít
;

704 
°©_t
 
°©us
;

706 i‡(0 > 
	`chdú
(
dú
))

708 
îr‹
;

711 
ªt
 = 1;

712 
ªt
 != 0)

714 i‡(0 > (
ªt
 = 
	`gëdít
(".", &
dúít
)))

716 
îr‹
;

718 i‡(0 =
ªt
)

723 i‡(0 > 
	`°©
(
dúít
.
d_«me
, &
°©us
))

725 
îr‹
;

728 i‡(
	`S_ISDIR
(
°©us
.
°_mode
))

730 i‡(0 > 
	`ªmovóŒ
(
dúít
.
d_«me
))

732 
îr‹
;

737 i‡(0 > 
	`u∆ök
(
dúít
.
d_«me
))

739 
îr‹
;

744 i‡(0 > 
	`chdú
(".."))

746  
î∫o
;

749 i‡(0 > 
	`rmdú
(
dú
))

751  
î∫o
;

754 
	`˛o£
(
fd
);

757 
îr‹
:

758 i‡(0 <
fd
)

760 
	`˛o£
(
fd
);

763  
î∫o
;

764 
	}
}

767 
	$de°roy_roŸdú
()

769 i‡(0 !
	`ªmovóŒ
(
roŸ_dú
))

771 
	`Ârötf
(
°dîr
, "ERROR: couldÇotÑemoveÅestingÑoot %s: %s\n",

772 
roŸ_dú
, 
	`°ªº‹
(
î∫o
));

773 
	`exô
(-1);

775 
	`¥ötf
("RemovedÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

776 
	}
}

778 
	$maö
(
¨gc
, **
¨gv
)

780 i‡(
¨gc
 != 1)

782 
	`Ârötf
(
°dîr
, "USAGE: memtest\n");

785 
°©us
;

788 
	#chûdã°
(
fun
) \

791 
	`ã°_f‹k_begö
(Ë{  
	`fun
(); } \

792 
	`ã°_f‹k_íd
(&
°©us
); \

793 
	`ã°_as£π
(
EFAULT
 !
°©us
, "TestÖrocess shouldn't segfault!"); \

794 
	`ã°_as£π
(0 =
°©us
, "TestÖrocessÑeturnedÉrror"); \

795 } 0)

	)

799 
	`ã°_öô
();

800 
	`make_roŸdú
();

801 
	`sysˇŒ_suc˚ss
(
	`chdú
(
roŸ_dú
));

802 
	`chûdã°
(
ã°_ovîÊow
);

803 
	`chûdã°
(
ã°_mm≠_bounds
);

804 
	`chûdã°
(
ã°_brk_bounds
);

805 
	`chûdã°
(
ã°_munm≠
);

806 
	`chûdã°
(
ã°_°¨t_brk
);

807 
	`chûdã°
(
ã°_brk_mm≠
);

809 
	`chûdã°
(
ã°_mm≠_ª≥©
);

810 
	`chûdã°
(
ã°_mm≠_bey⁄d
);

811 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

812 
	`de°roy_roŸdú
();

813 
	`ã°_föi
();

816 
	}
}

	@user/usr/bin/tests/pipetest.c

1 
	~<î∫o.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

7 
	#IMAX
 256

	)

8 
	#JMAX
 16

	)

9 
	#KMAX
 16

	)

10 
	#ISTEP
 (
JMAX
 * 
KMAX
)

	)

12 
	#WAIT
 \

15 
	`waôpid
(-1, &
°©us
, 0) > 0) \

17 i‡(
°©us
 == 0) \

19 
∑s£d
++; \

23 
Áûed
++; \

26 } 0)

	)

28 
	$maö
(
¨gc
, **
¨gv
)

30 
∑s£d
 = 0;

31 
Áûed
 = 0;

33 
°©us
;

34 
pùefd
[2];

41 
	`¥ötf
("TestingÇormal operation...\n");

42 
ªt
 = 
	`pùe
(
pùefd
);

44 i‡(
ªt
 < 0)

46 
	`Ârötf
(
°dîr
, "pùe: %s\n", 
	`°ªº‹
(
î∫o
));

47 
	`exô
(1);

50 
i
, 
j
, 
k
;

51 
buf
[
KMAX
];

53 i‡(!
	`f‹k
())

55 
	`˛o£
(
pùefd
[0]);

56 
i
 = 0; i < 
IMAX
; ++i)

58 
j
 = 0; j < 
JMAX
; ++j)

60 
k
 = 0; k < 
KMAX
; ++k)

62 
buf
[
k
] = 
i
 ^ (
j
 * 
KMAX
 + k);

64 i‡(
	`wrôe
(
pùefd
[1], 
buf
, 
KMAX
) < 0)

66 
	`¥ötf
("WriteÅoÖipe failed\n");

67 
	`exô
(1);

71 
	`exô
(0);

74 i‡(!
	`f‹k
())

76 
	`˛o£
(
pùefd
[1]);

77 
i
 = 0; i < 
IMAX
; ++i)

79 
j
 = 0; j < 
JMAX
; ++j)

81 i‡(
	`ªad
(
pùefd
[0], 
buf
, 
KMAX
) == 0)

83 
	`¥ötf
("UnexpectedÉnd ofÖipe\n");

84 
	`exô
(1);

86 
k
 = 0; k < 
KMAX
; ++k)

88 i‡(
buf
[
k
] !(
i
 ^ (
j
 * 
KMAX
 + k)))

90 
	`¥ötf
("Byte %d incorrect (expected %2x, got %2x)\n",

91 
i
 * 
ISTEP
 + 
j
 * 
KMAX
 + 
k
, (i ^ (j * KMAX + k)),

92 
buf
[
k
]);

93 
	`exô
(1);

98 
	`exô
(0);

101 
	`˛o£
(
pùefd
[0]);

102 
	`˛o£
(
pùefd
[1]);

104 
WAIT
;

109 
	`¥ötf
("Testing withÇoÑeaders...\n");

110 
ªt
 = 
	`pùe
(
pùefd
);

112 i‡(
ªt
 < 0)

114 
	`Ârötf
(
°dîr
, "pùe: %s\n", 
	`°ªº‹
(
î∫o
));

115 
	`exô
(1);

118 i‡(!
	`f‹k
())

120 
	`˛o£
(
pùefd
[0]);

121 
i
 = 0; i < 
IMAX
; ++i)

123 
j
 = 0; j < 
JMAX
; ++j)

125 
k
 = 0; k < 
KMAX
; ++k)

127 
buf
[
k
] = 
i
 ^ (
j
 * 
KMAX
 + k);

129 i‡(
	`wrôe
(
pùefd
[1], 
buf
, 
KMAX
) < 0)

131 i‡(
î∫o
 =
EPIPE
)

133 
	`exô
(0);

137 
	`¥ötf
("WriteÅoÖipe failed\n");

138 
	`exô
(1);

143 
	`exô
(1);

146 
	`˛o£
(
pùefd
[0]);

147 
	`˛o£
(
pùefd
[1]);

149 
WAIT
;

155 
	`¥ötf
("Testing withÇo writers...\n");

156 
ªt
 = 
	`pùe
(
pùefd
);

158 i‡(
ªt
 < 0)

160 
	`Ârötf
(
°dîr
, "pùe: %s\n", 
	`°ªº‹
(
î∫o
));

161 
	`exô
(1);

164 i‡(!
	`f‹k
())

166 
	`˛o£
(
pùefd
[1]);

167 i‡(
	`ªad
(
pùefd
[0], 
buf
, 
KMAX
) == 0)

169 
	`exô
(0);

171 
	`exô
(1);

174 i‡(!
	`f‹k
())

176 
	`˛o£
(
pùefd
[1]);

177 i‡(
	`ªad
(
pùefd
[0], 
buf
, 
KMAX
) == 0)

179 
	`exô
(0);

181 
	`exô
(1);

184 
	`˛o£
(
pùefd
[0]);

185 
	`˛o£
(
pùefd
[1]);

187 
WAIT
;

189 
	`¥ötf
("%dÖas£d. %d faûed.\n", 
∑s£d
, 
Áûed
);

191 
	}
}

	@user/usr/bin/tests/prime.c

1 
	~<î∫o.h
>

2 
	~<°dio.h
>

3 
	~<°dlib.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

7 
uöt64_t
 
	tbômask_w‹d_t
;

8 
	#BITMASK_WORD_BITWIDTH
 64

	)

9 
	#BITMASK_WORD_BITWIDTH_LOG2
 6

	)

10 
	#BITMASK_IDX
(
x
Ë((xË>> 
BITMASK_WORD_BITWIDTH_LOG2
)

	)

11 
	#BITMASK_POS
(
x
Ë((xË& ~(~0UL << 
BITMASK_WORD_BITWIDTH_LOG2
))

	)

14 
	#BITMASK_POS_MASK
(
x
Ë(1UL << 
	`BITMASK_POS
(x))

	)

16 
	#BITMASK_MAX_IDX
(
x
Ë(
	`BITMASK_IDX
((x)-1ULË+ 1UL)

	)

17 
	#BITMASK_SIZE
(
x
Ë((
bômask_w‹d_t
Ë* 
	`BITMASK_MAX_IDX
(x))

	)

18 
	#GET_BIT
(
bômask
, 
x
) \

19 (((
bômask_w‹d_t
 *)
bômask
)[
	`BITMASK_IDX
(
x
)] & 
	`BITMASK_POS_MASK
(x))

	)

20 
	#SET_BIT
(
bômask
, 
x
) \

21 (((
bômask_w‹d_t
 *)
bômask
)[
	`BITMASK_IDX
(
x
)] |
	`BITMASK_POS_MASK
(x))

	)

22 
	#UNSET_BIT
(
bômask
, 
x
) \

23 (((
bômask_w‹d_t
 *)
bômask
)[
	`BITMASK_IDX
(
x
)] &~
	`BITMASK_POS_MASK
(x))

	)

25 
ölöe
 
uöt64_t
 *
	$föd_√64
(c⁄° 
uöt64_t
 
nŸ
, c⁄° uöt64_à*
°¨t
,

26 
size_t
 
cou¡
)

28 
uöt64_t
 *
ªt
;

29 
__asm__
 volatile(

31 : "=D"(
ªt
), "=c"(
cou¡
)

32 : "A"(
nŸ
), "D"(
°¨t
), "c"(
cou¡
)

34  
cou¡
 ? (
ªt
 - 1Ë: 
NULL
;

35 
	}
}

37 
size_t
 
	$√xt_£t_bô
(c⁄° 
bômask_w‹d_t
 *
bômask
, 
size_t
 
°¨t
,

38 
size_t
 
max_idx
)

40 
size_t
 
idx
 = 
	`BITMASK_IDX
(
°¨t
);

41 
bômask_w‹d_t
 
c›y
 = (
bômask
[
idx
++] >> 
	`BITMASK_POS
(
°¨t
)) - 1;

42 i‡(
c›y
)

44  
°¨t
 + 
	`__buûtö_˘zl
(
c›y
);

46 i‡(
idx
 < 
max_idx
)

48 
uöt64_t
 *
íd
 = 
	`föd_√64
(0, 
bômask
 + 
idx
, 
max_idx
 - idx);

49 i‡(
íd
)

50  (((
íd
 - 
bômask
Ë<< 
BITMASK_WORD_BITWIDTH_LOG2
) +

51 ()
	`__buûtö_˘zl
(*
íd
));

54 
	}
}

56 
	$compuã_œrge°_¥ime
(
n
)

58 i‡(
n
 <= 1)

60 i‡(
n
 <= 3)

61  
n
;

62 
n
 = (n - 1) >> 1;

64 
bômask_w‹d_t
 *
bômask
 =

65 
	`mÆloc
(
	`BITMASK_SIZE
(
n
));

66 
size_t
 
max_idx
 = 
	`BITMASK_MAX_IDX
(
n
);

67 
	`mem£t
(
bômask
, 0xff, 
	`BITMASK_SIZE
(
n
));

69 
	`UNSET_BIT
(
bômask
, 0);

70 
size_t
 
¥ime_idx
 = 1;

74 
ö¸emít
 = (
¥ime_idx
 << 1) | 1;

75 
mu…ùÀ
 = 
¥ime_idx
 + 
ö¸emít
; mu…ùÀ <
n
;

76 
mu…ùÀ
 +
ö¸emít
)

78 
	`UNSET_BIT
(
bômask
, 
mu…ùÀ
);

85 
size_t
 
√xt_¥ime_idx
 = 
	`√xt_£t_bô
(
bômask
, 
¥ime_idx
, 
max_idx
);

87 i‡(
√xt_¥ime_idx
 > (
size_t
)
n
)

89 
¥ime_idx
 = 
√xt_¥ime_idx
;

92 
	`‰ì
(
bômask
);

93  (
¥ime_idx
 << 1) | 1;

94 
	}
}

96 
	$maö
(
¨gc
, *
¨gv
[], *
ívp
[])

98 i‡(
¨gc
 <= 1)

100 
	`Ârötf
(
°dîr
,

102 
	`exô
(1);

104 
n
 = 
	`°πﬁ
(
¨gv
[1], 
NULL
, 0);

105 
	`Ârötf
(
°dout
, "%ld\n", 
	`compuã_œrge°_¥ime
(
n
));

107 
	}
}

	@user/usr/bin/tests/s5fstest.c

6 #ifde‡
__KERNEL__


8 
	~"c⁄fig.h
"

9 
	~"î∫o.h
"

10 
	~"globÆs.h
"

11 
	~"limôs.h
"

13 
	~"ã°/u£πe°.h
"

15 
	~"utû/debug.h
"

16 
	~"utû/¥ötf.h
"

17 
	~"utû/°rög.h
"

19 
	~"fs/f˙é.h
"

20 
	~"fs/l£ek.h
"

21 
	~"fs/s5fs/s5fs.h
"

22 
	~"fs/vfs_sysˇŒ.h
"

26 
	~<î∫o.h
>

27 
	~<f˙é.h
>

28 
	~<°dio.h
>

29 
	~<°dlib.h
>

30 
	~<°rög.h
>

31 
	~<ã°/ã°.h
>

32 
	~<uni°d.h
>

34 
	#do_wrôe
 
wrôe


	)

35 
	#do_ªad
 
ªad


	)

36 
	#do_l£ek
 
l£ek


	)

37 
	#do_›í
(
x
, 
y
Ë
	`›í
((x), (y), 0777)

	)

38 
	#do_lök
 
lök


	)

39 
	#do_u∆ök
 
u∆ök


	)

40 
	#do_mknod
 
mknod


	)

41 
	#do_˛o£
 
˛o£


	)

42 
	#do_mkdú
(
x
Ë
	`mkdú
((x), 0777)

	)

43 
	#do_chdú
 
chdú


	)

44 
	#do_rmdú
 
rmdú


	)

46 
	#S5_BLOCK_SIZE
 4096

	)

47 
	#S5_MAX_FILE_BLOCKS
 1052

	)

49 
	#KASSERT
(
x
Ë
	`ã°_as£π
(x, 
NULL
)

	)

50 
	#dbg
(
code
, 
fmt
, 
¨gs
...Ë
	`¥ötf
(fmt, ##¨gs)

	)

54 
	#BUFSIZE
 256

	)

55 
	#BIG_BUFSIZE
 2056

	)

57 
	#S5_MAX_FILE_SIZE
 
S5_BLOCK_SIZE
 *
S5_MAX_FILE_BLOCKS


	)

59 
	$gë_fûe_«me
(*
buf
, 
size_t
 
sz
, 
fûío
)

61 
	`¢¥ötf
(
buf
, 
sz
, "fûe%d", 
fûío
);

62 
	}
}

65 
	$wrôe_u¡û_Áû
(
fd
)

67 
size_t
 
tŸÆ_wrôãn
 = 0;

68 
buf
[
BIG_BUFSIZE
] = {42};

69 
tŸÆ_wrôãn
 < 
S5_MAX_FILE_SIZE
)

71 
ªs
 = 
	`do_wrôe
(
fd
, 
buf
, 
BIG_BUFSIZE
);

72 i‡(
ªs
 < 0)

74  
ªs
;

76 
tŸÆ_wrôãn
 +
ªs
;

78 
	`KASSERT
(
tŸÆ_wrôãn
 =
S5_MAX_FILE_SIZE
);

79 
	`KASSERT
(
	`do_l£ek
(
fd
, 0, 
SEEK_END
Ë=
S5_MAX_FILE_SIZE
);

82 
	}
}

87 
	$is_fú°_n_byãs_zîo
(
fd
, 
n
)

89 
tŸÆ_ªad
 = 0;

90 
tŸÆ_ªad
 < 
n
)

92 
amt_to_ªad
 = 
	`MIN
(
BIG_BUFSIZE
, 
n
 - 
tŸÆ_ªad
);

93 
buf
[
BIG_BUFSIZE
] = {1};

94 
ªs
 = 
	`do_ªad
(
fd
, 
buf
, 
amt_to_ªad
);

95 i‡(
ªs
 !
amt_to_ªad
)

97 
	`dbg
(
DBG_TESTFAIL
, "do_ªadÑesu… wa†%d\n", 
ªs
);

101 
tŸÆ_ªad
 +
ªs
;

104 
i
 = 0; i < 
amt_to_ªad
; ++i)

106 i‡(
buf
[
i
] != 0)

108 
	`dbg
(
DBG_TESTFAIL
, "bu‡c⁄èö†ch¨ %d\n", ()
buf
[
i
]);

115 
	}
}

117 
	$ã°_ru¬ög_out_of_öodes
()

120 
ªs
 = -1;

121 
fûío
 = 0;

122 
fûíame
[
BUFSIZE
];

127 
	`gë_fûe_«me
(
fûíame
, 
BUFSIZE
, 
fûío
);

128 
ªs
 = 
	`do_›í
(
fûíame
, 
O_RDONLY
 | 
O_CREAT
);

129 i‡(
ªs
 >= 0)

131 
fûío
++;

132 
	`ã°_as£π
(
	`do_˛o£
(
ªs
) == 0, "couldn't close");

139 #ifde‡
__KERNEL__


140 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "DidÇot get ENOSPCÉrror");

142 
	`ã°_as£π
(
î∫o
 =
ENOSPC
, "DidÇot get ENOSPCÉrror");

146 
	`ã°_as£π
(
	`do_mkdú
("directory") < 0, "do_mkdir worked!?");

147 #ifde‡
__KERNEL__


148 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "unexpectedÉrror");

150 
	`ã°_as£π
(
î∫o
 =
ENOSPC
, "unexpectedÉrror");

153 #ifde‡
__KERNEL__


154 
	`ã°_as£π
(
	`do_mknod
("nod", 
S_IFCHR
, 123) != 0, "mknod worked!?");

155 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "wrongÉrror code");

159 
fûío
--;

163 
	`gë_fûe_«me
(
fûíame
, 
BUFSIZE
, 
fûío
);

164 
ªs
 = 
	`do_u∆ök
(
fûíame
);

165 
	`ã°_as£π
(
ªs
 == 0, "couldnt unlink");

166 
fûío
--;

167 } 
fûío
 >= 0);

170 
fd
 = 
	`do_›í
("fûe", 
O_RDONLY
 | 
O_CREAT
);

171 
	`ã°_as£π
(
fd
 >= 0, "Still cannot create files");

172 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "CouldÇot do_close fd");

173 
	`ã°_as£π
(
	`do_u∆ök
("file") == 0, "CouldÇotÑemove file");

174 
	}
}

176 
	$ã°_fûlög_fûe
()

178 
ªs
 = 0;

179 
fd
 = 
	`do_›í
("hugefûe", 
O_RDWR
 | 
O_CREAT
);

180 
	`KASSERT
(
fd
 >= 0);

182 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd
);

183 
	`ã°_as£π
(
ªs
 == 0, "DidÇot writeÅoÉntire file");

186 
buf
[
BIG_BUFSIZE
] = {0};

187 
ªs
 = 
	`do_wrôe
(
fd
, 
buf
, (buf));

188 
	`ã°_as£π
(
ªs
 < 0, "AbleÅo writeálthoughÅhe file is full");

189 #ifde‡
__KERNEL__


190 
	`ã°_as£π
(
ªs
 =-
EFBIG
 ||Ñe†=-
EINVAL
, "WrongÉrror code");

192 
	`ã°_as£π
(
î∫o
 =
EFBIG
 ||Éºnÿ=
EINVAL
, "WrongÉrror code");

195 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldnt close hugefile");

196 
	`ã°_as£π
(
	`do_u∆ök
("hugefile") == 0, "couldnt unlink hugefile");

197 
	}
}

202 
	$ã°_ru¬ög_out_of_blocks
()

204 
ªs
 = 0;

206 
fd1
 = 
	`do_›í
("fuŒfûe", 
O_RDWR
 | 
O_CREAT
);

208 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd1
);

209 
	`ã°_as£π
(
ªs
 == 0, "Ran out of space quickerÅhan weÉxpected");

211 
fd2
 = 
	`do_›í
("∑πüŒyfuŒfûe", 
O_RDWR
 | 
O_CREAT
);

212 
ªs
 = 
	`wrôe_u¡û_Áû
(
fd2
);

213 #ifde‡
__KERNEL__


214 
	`ã°_as£π
(
ªs
 =-
ENOSPC
, "DidÇot getÇospcÉrror");

216 
	`ã°_as£π
(
î∫o
 =
ENOSPC
, "DidÇot getÇospcÉrror");

219 
	`ã°_as£π
(
	`do_˛o£
(
fd1
) == 0, "couldÇot close");

220 
	`ã°_as£π
(
	`do_˛o£
(
fd2
) == 0, "couldÇot close");

222 
	`ã°_as£π
(
	`do_u∆ök
("fullfile") == 0, "couldnt do_unlink file");

223 
	`ã°_as£π
(
	`do_u∆ök
("partiallyfullfile") == 0, "couldnt do_unlink file");

224 
	}
}

228 
	$ã°_•¨£√ss_dúe˘_blocks
()

230 c⁄° *
fûíame
 = "sparsefile";

231 
fd
 = 
	`do_›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
);

234 c⁄° 
addr
 = 10000;

235 c⁄° *
b
 = "iboros";

236 c⁄° 
sz
 = 
	`°æí
(
b
);

238 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 
addr
, 
SEEK_SET
) ==áddr, "couldnt seek");

239 
	`ã°_as£π
(
	`do_wrôe
(
fd
, 
b
, 
sz
) == sz, "couldnt writeÅoÑandomáddress");

241 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 0, 
SEEK_SET
) == 0, "couldnt seek backÅo begin");

242 
	`ã°_as£π
(
	`is_fú°_n_byãs_zîo
(
fd
, 
addr
) == 1, "sparseness don't work");

245 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldn't close file");

246 
	`ã°_as£π
(
	`do_u∆ök
(
fûíame
) == 0, "couldnt unlink file");

249 
	}
}

254 
	$ã°_•¨£√ss_ödúe˘_blocks
()

256 c⁄° *
fûíame
 = "bigsparsefile";

257 
fd
 = 
	`do_›í
(
fûíame
, 
O_RDWR
 | 
O_CREAT
);

260 
øndomg¨bage
[4050];

261 
	`ã°_as£π
(
	`do_wrôe
(
fd
, 
øndomg¨bage
, 4050) == 4050,

265 c⁄° 
addr
 = 1000000;

266 c⁄° *
b
 = "iboros";

267 c⁄° 
sz
 = 
	`°æí
(
b
);

269 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 
addr
, 
SEEK_SET
) ==áddr, "couldnt seek");

270 
	`ã°_as£π
(
	`do_wrôe
(
fd
, 
b
, 
sz
) == sz, "couldnt writeÅoÑandomáddress");

272 
	`ã°_as£π
(
	`do_l£ek
(
fd
, 4050, 
SEEK_SET
) == 4050,

274 
	`ã°_as£π
(
	`is_fú°_n_byãs_zîo
(
fd
, 
addr
 - 4050) == 1,

278 
	`ã°_as£π
(
	`do_˛o£
(
fd
) == 0, "couldn't close file");

279 
	`ã°_as£π
(
	`do_u∆ök
(
fûíame
) == 0, "couldnt unlink file");

282 
	}
}

284 #ifde‡
__KERNEL__


285 
uöt64_t
 
jiffõs
;

288 
	$£ed_øndom√ss
()

290 #ifde‡
__KERNEL__


291 
	`§™d
(
jiffõs
);

293 
	`§™d
(
	`time
(
NULL
));

295 
	`ønd
();

296 
	}
}

298 #ifde‡
__KERNEL__


299 
	$s5f°e°_maö
()

302 
	$maö
()

305 
	`dbg
(
DBG_TEST
, "Starting S5FSÅest\n");

307 
	`ã°_öô
();

308 
	`£ed_øndom√ss
();

310 
	`KASSERT
(
	`do_mkdú
("s5fstest") == 0);

311 
	`KASSERT
(
	`do_chdú
("s5fstest") == 0);

312 
	`dbg
(
DBG_TEST
, "Test dir initialized\n");

314 
	`dbg
(
DBG_TEST
, "Testing sparseness for direct blocks\n");

315 
	`ã°_•¨£√ss_dúe˘_blocks
();

316 
	`dbg
(
DBG_TEST
, "Testing sparseness for indirect blocks\n");

317 
	`ã°_•¨£√ss_ödúe˘_blocks
();

319 
	`dbg
(
DBG_TEST
, "TestingÑunning out of inodes\n");

320 
	`ã°_ru¬ög_out_of_öodes
();

321 
	`dbg
(
DBG_TEST
, "Testing fillingá fileÅo max capacity\n");

322 
	`ã°_fûlög_fûe
();

323 
	`dbg
(
DBG_TEST
, "Testing usingállávailable blocks on disk\n");

324 
	`ã°_ru¬ög_out_of_blocks
();

326 
	`ã°_as£π
(
	`do_chdú
("..") == 0, "");

327 
	`ã°_as£π
(
	`do_rmdú
("s5fstest") == 0, "");

329 
	`ã°_föi
();

332 
	}
}

	@user/usr/bin/tests/stress.c

8 
	~"mm.h
"

9 
	~<î∫o.h
>

10 
	~<f˙é.h
>

11 
	~<°dio.h
>

12 
	~<°dlib.h
>

13 
	~<°rög.h
>

14 
	~<sys/mm™.h
>

15 
	~<uni°d.h
>

17 
	$check_Áûed
(c⁄° *
cmd
)

19 ()
	`¥ötf
("°ªss: %†Áûed:Éºnÿ%d\n", 
cmd
, 
î∫o
);

20 
	`exô
(1);

21 
	}
}

23 
	$myf‹k
()

25 
ªsu…
;

27 
ªsu…
 = 
	`f‹k
();

28 i‡(
ªsu…
 == -1)

30 ()
	`¥ötf
("F‹k faûed (î∫o=%d)\n", 
î∫o
);

31 
	`exô
(1);

34 
	`sched_yõld
();

35  
ªsu…
;

36 
	}
}

38 
	$f‹k_ã°
()

40 ()
	`¥ötf
("-- ForkÅortureÅest start\n");

42 ()
	`¥ötf
(

46 ()
	`¥ötf
("(noteÅhatÅhis isÑunning inÅhe background)\n");

47 i‡(!
	`myf‹k
())

51 i‡(
	`myf‹k
())

53 
	`exô
(0);

57 
	}
}

59 
	$cow_f‹k
()

61 
°©us
;

62 
foo
 = 0;

64 ()
	`¥ötf
("-- COW forkÅest start\n");

66 i‡(!
	`myf‹k
())

71 
foo
 = 1;

72 
	`exô
(0);

75 i‡(
	`waô
(&
°©us
) == -1)

77 ()
	`¥ötf
("waô faûed (î∫o=%d)\n", 
î∫o
);

78 
	`exô
(1);

81 i‡(
foo
)

83 ()
	`¥ötf
(

86 ()
	`¥ötf
("Copy-on-write failed.\n");

87 
	`exô
(1);

90 ()
	`¥ötf
("-- COW forkÅestÖassed\n");

91 
	}
}

93 
	$Áu…_ã°
()

95 
°©us
;

97 ()
	`¥ötf
("-- faultÅest start\n");

99 ()
	`¥ötf
(

101 ()
	`¥ötf
("Do youÖroperly killÖrocessesÅhat segv? ");

103 i‡(!
	`myf‹k
())

106 
	`¥ötf
("P%d didn'àÁu…!\n", 
	`gëpid
());

107 
	`exô
(0);

110 i‡(
	`waô
(&
°©us
) == -1)

112 ()
	`¥ötf
("waô faûed (î∫o=%d)\n", 
î∫o
);

113 
	`exô
(1);

115 i‡(
°©us
)

117 ()
	`¥ötf
("yes\n");

122 ()
	`¥ötf
("no\n");

123 
	`exô
(1);

126 ()
	`¥ötf
("-- faultÅestÖassed\n");

127 
	}
}

129 
	$mm≠_ã°
()

131 
fd
;

132 *
addr1
, *
addr2
;

133 c⁄° *
°r1
 = "Coconuts!!!!\n";

134 c⁄° *
°r2
 = "HelloÅhere.\n";

135 
size_t
 
Àn
;

137 ()
	`¥ötf
("-- mmapÅest start\n");

141 
fd
 = 
	`›í
("/ã°/°ªss0", 
O_RDWR
 | 
O_CREAT
, 0);

142 i‡(
fd
 < 0)

144 
	`check_Áûed
("open");

148 i‡(1 > 
	`wrôe
(
fd
, "\0", 1))

150 
	`check_Áûed
("write");

155 
	`¥ötf
("MAP_PRIVATEÅest\n");

156 
Àn
 = 
	`°æí
(
°r1
) + 1;

157 
addr1
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0);

158 i‡(
addr1
 =
MAP_FAILED
)

160 
	`check_Áûed
("mmap");

162 
addr2
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

163 i‡(
addr2
 =
MAP_FAILED
)

165 
	`check_Áûed
("mmap");

168 i‡(
	`˛o£
(
fd
))

170 
	`check_Áûed
("close");

173 
	`¥ötf
("wrôög i¡ÿ%p\n", 
addr1
);

174 ()
	`¢¥ötf
((*)
addr1
, 
Àn
, "%s", 
°r1
);

178 
	`¥ötf
("reading fromÖrivmapÖage\n");

182 
	`¥ötf
("making sure string in mapping okay\n");

183 i‡(
	`°rcmp
(
°r1
, (*)
addr1
))

185 ()
	`¥ötf
("stress: writeÅo shared mapping failed\n");

186 
	`exô
(1);

188 i‡(
	`°rcmp
(
°r1
, (*)
addr2
))

190 ()
	`¥ötf
("stress:Örivate mappingÖrematurely copied\n");

191 
	`exô
(1);

194 ()
	`¢¥ötf
((*)
addr2
, 
Àn
, "%s", 
°r2
);

198 
	`¥ötf
("making sure overwriting okay\n");

199 i‡(
	`°rcmp
(
°r2
, (*)
addr2
))

201 ()
	`¥ötf
("stress: writeÅoÖrivate mapping failed\n");

202 
	`exô
(1);

205 i‡(!
	`°rcmp
(
°r2
, (*)
addr1
))

207 ()
	`¥ötf
("stress: wroteÅhroughÖrivate mapping!\n");

208 
	`exô
(1);

211 
	`¥ötf
("unm≠pögáà%p\n", 
addr1
);

212 i‡(
	`munm≠
(
addr1
, 
Àn
))

214 
	`check_Áûed
("munmap");

216 
	`¥ötf
("unm≠pögáà%p\n", 
addr2
);

217 i‡(
	`munm≠
(
addr2
, 
Àn
))

219 
	`check_Áûed
("munmap");

222 i‡(!
	`munm≠
((*)
USER_MEM_HIGH
, 15Ë|| (
î∫o
 !
EINVAL
))

224 
	`¥ötf
("munm≠ bad o√ faûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

225 
	`exô
(1);

228 i‡(!
	`munm≠
(0, 0Ë|| (
î∫o
 !
EINVAL
))

230 
	`¥ötf
("munm≠ badÅwÿÁûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

231 
	`exô
(1);

234 i‡(!
	`munm≠
((*)137, 100Ë|| (
î∫o
 !
EINVAL
))

236 
	`¥ötf
("munm≠ badÅhªêÁûÉºno=%dÉövÆ=%d\n", 
î∫o
, 
EINVAL
);

237 
	`exô
(1);

240 ()
	`¥ötf
("-- mmapÅestÖassed\n");

241 
	}
}

243 
	$nuŒ_ã°
()

245 
fd
;

246 
nbyãs
;

247 
buf
[256];

249 ()
	`¥ötf
("--ÇullÅest start\n");

251 
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0600);

252 i‡(
fd
 < 0)

254 
	`check_Áûed
("open");

257 ()
	`mem£t
(
buf
, 0xCC, (buf));

262 
nbyãs
 = 
	`wrôe
(
fd
, 
buf
, (buf));

263 i‡(
nbyãs
 !(
buf
))

265 
	`check_Áûed
("write");

271 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

272 i‡(
nbyãs
 != 0)

274 
	`check_Áûed
("read");

277 i‡(
	`˛o£
(
fd
))

279 
	`check_Áûed
("close");

282 ()
	`¥ötf
("--ÇullÅestÖassed\n");

283 
	}
}

285 
	$zîo_ã°
()

287 *
addr
;

288 
fd
;

289 
buf
[256];

290 
nbyãs
;

291 
ii
;

292 
size_t
 
Àn
;

293 *
Õ
;

294 *
˝
;

296 ()
	`¥ötf
("-- zeroÅest start\n");

298 
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0600);

299 i‡(
fd
 < 0)

301 
	`check_Áûed
("open");

308 
	`mem£t
(
buf
, 0xCC, (buf));

310 
nbyãs
 = 
	`ªad
(
fd
, 
buf
, (buf));

311 i‡(
nbyãs
 !(
buf
))

313 
	`check_Áûed
("read");

316 
ii
 = 0; iò< (
buf
); ii++)

318 i‡(
buf
[
ii
] != 0)

320 
	`¥ötf
("ªad %xÇŸ zîo\n", 
buf
[
ii
]);

321 
	`check_Áûed
("verifyÑead");

328 
Àn
 = 8192 * 5;

330 
addr
 = 
	`mm≠
(0, 
Àn
, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_PRIVATE
, 
fd
, 0);

331 i‡(
addr
 =
MAP_FAILED
)

333 
	`check_Áûed
("mmap");

336 i‡(
	`˛o£
(
fd
))

338 
	`check_Áûed
("close");

341 
˝
 = (*)
addr
;

342 
ii
 = 0; iò< 
Àn
; ii++, 
˝
++)

344 i‡(*
˝
 != 0)

346 
	`check_Áûed
("verify mmap zeros");

353 
Õ
 = (*)
addr
;

354 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

356 *
Õ
 = 
ii
;

359 
Õ
 = (*)
addr
;

360 
ii
 = 0; iò< (
Àn
 / (*
Õ
)); ii++,Üp++)

362 i‡(*
Õ
 !
ii
)

364 
	`check_Áûed
("verify map write");

368 i‡(
	`munm≠
(
addr
, 
Àn
))

370 
	`check_Áûed
("munmap");

373 ()
	`¥ötf
("-- zeroÅestÖassed\n");

374 
	}
}

376 
	$waô_ã°
()

378 
°©us
;

380 ()
	`¥ötf
("-- waitÅest start\n");

382 i‡(!
	`waô
(&
°©us
Ë|| (
î∫o
 !
ECHILD
))

384 ()
	`¥ötf
(

387 
	`exô
(1);

390 ()
	`¥ötf
("-- waitÅestÖassed\n");

391 
	}
}

393 
	$brk_ã°
()

395 *
ﬁdbrk1
, *
ﬁdbrk2
;

396 c⁄° *
brk_Áûed
 = (*)-1;

397 
Àn
;

398 *
tmp
;

399 
ii
;

401 ()
	`¥ötf
("-- brkÅest start\n");

405 
Àn
 = 8192 * 5 + 128;

409 
ﬁdbrk1
 = 
	`sbrk
(
Àn
);

410 i‡(
ﬁdbrk1
 =
brk_Áûed
)

412 
	`check_Áûed
("sbrkálloc");

417 
	`¥ötf
("wrôögÅÿmem‹yáà%p\n", 
ﬁdbrk1
);

418 
tmp
 = (*)
ﬁdbrk1
;

419 
ii
 = 0; iò< (
Àn
 / ()); ii++)

421 *
tmp
++ = 
ii
;

426 
	`¥ötf
("verifying memory\n");

427 
tmp
 = (*)
ﬁdbrk1
;

428 
ii
 = 0; iò< (
Àn
 / ()); ii++)

430 i‡(*
tmp
++ !
ii
)

432 ()
	`¥ötf
("vîify faûedáà0x%lx\n", ()
tmp
);

433 
	`exô
(1);

439 
	`¥ötf
("freeing memory\n");

440 
ﬁdbrk2
 = 
	`sbrk
(-
Àn
);

441 i‡(
ﬁdbrk2
 =
brk_Áûed
)

443 
	`check_Áûed
("sbrk dealloc");

448 i‡(()
ﬁdbrk2
 < (()
ﬁdbrk1
 + 
Àn
))

450 ()
	`¥ötf
("sbrk didn'tÑeturn old brk??\n");

451 
	`exô
(1);

454 ()
	`¥ötf
("-- brkÅestÖassed\n");

455 
	}
}

457 
	$maö
(
¨gc
, **
¨gv
)

459 ()
	`¥ötf
("Congrats! You'reÑunningÅhisÉxecutable.\n");

460 ()
	`¥ötf
("NowÜet's see how you handleÅheÅests...\n");

462 
	`mm≠_ã°
();

464 
	`nuŒ_ã°
();

465 
	`zîo_ã°
();

466 
	`brk_ã°
();

468 
	`Áu…_ã°
();

470 
	`waô_ã°
();

471 
	`cow_f‹k
();

473 
	`f‹k_ã°
();

476 
	}
}

	@user/usr/bin/tests/vfstest.c

1 #ifde‡
__KERNEL__


3 
	~"c⁄fig.h
"

4 
	~"î∫o.h
"

5 
	~"globÆs.h
"

6 
	~"kî√l.h
"

7 
	~"limôs.h
"

9 
	~"utû/debug.h
"

10 
	~"utû/¥ötf.h
"

11 
	~"utû/°rög.h
"

13 
	~"¥oc/kthªad.h
"

14 
	~"¥oc/¥oc.h
"

16 
	~"fs/dúít.h
"

17 
	~"fs/f˙é.h
"

18 
	~"fs/l£ek.h
"

19 
	~"fs/°©.h
"

20 
	~"fs/vfs_sysˇŒ.h
"

21 
	~"mm/kmÆloc.h
"

22 
	~"mm/mm™.h
"

24 
	~"ã°/u£πe°.h
"

25 
	~"ã°/vf°e°/vf°e°.h
"

27 #unde‡
__VM__


31 
	~<î∫o.h
>

32 
	~<°dlib.h
>

33 
	~<°rög.h
>

35 
	~<dúít.h
>

36 
	~<f˙é.h
>

37 
	~<°dio.h
>

38 
	~<sys/mm™.h
>

39 
	~<sys/°©.h
>

40 
	~<uni°d.h
>

41 
	~<wìnix/sysˇŒ.h
>

43 
	~<ã°/ã°.h
>

48 
	#LONGNAME
 "su≥rˇli‰agûi°i˚xpülidocious"

	)

51 
	#TESTSTR
 \

61 "su¡ i¿cuÕ®quòofficü de£ru¡ mﬁlôánim idÉ°Üab‹um."

	)

63 
	#SHORTSTR
 "QuidquidÜ©öêdi˘um,á…um vidëur"

	)

65 
	groŸ_dú
[64];

67 
	$makedús
(c⁄° *
dú
)

69 
ªt
 = 0;

70 *
d
, *
p
;

72 i‡(
NULL
 =(
d
 = 
	`mÆloc
(
	`°æí
(
dú
) + 1)))

74  
ENOMEM
;

76 
	`°r˝y
(
d
, 
dú
);

78 
p
 = 
d
;

79 
NULL
 !(
p
 = 
	`°rchr
(p + 1, '/')))

81 *
p
 = '\0';

82 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
)

84 
ªt
 = 
î∫o
;

85 
îr‹
;

87 *
p
 = '/';

89 i‡(0 !
	`mkdú
(
d
, 0777Ë&& 
EEXIST
 !
î∫o
)

91 
ªt
 = 
î∫o
;

92 
îr‹
;

95 
îr‹
:

96 
	`‰ì
(
d
);

97  
ªt
;

98 
	}
}

100 
	$gëdít
(c⁄° *
dú
, 
dúít_t
 *
dúít
)

102 
ªt
, 
fd
 = -1;

104 i‡(0 > (
fd
 = 
	`›í
(
dú
, 
O_RDONLY
, 0777)))

109 
ªt
 = 1;

110 
ªt
 != 0)

112 i‡(0 > (
ªt
 = 
	`gëdíts
(
fd
, 
dúít
, (*dirent))))

116 i‡(0 !
	`°rcmp
(".", 
dúít
->
d_«me
) &&

117 0 !
	`°rcmp
("..", 
dúít
->
d_«me
))

119 
	`˛o£
(
fd
);

124 
	`˛o£
(
fd
);

126 
	}
}

128 
	$ªmovóŒ
(c⁄° *
dú
)

130 
ªt
;

131 
dúít_t
 
dúít
;

132 
°©_t
 
°©us
;

134 i‡(0 > 
	`chdú
(
dú
))

136  
î∫o
;

139 
ªt
 = 1;

140 
ªt
 != 0)

142 i‡(0 > (
ªt
 = 
	`gëdít
(".", &
dúít
)))

144  
î∫o
;

146 i‡(0 =
ªt
)

151 i‡(0 > 
	`°©
(
dúít
.
d_«me
, &
°©us
))

153  
î∫o
;

156 i‡(
	`S_ISDIR
(
°©us
.
°_mode
))

158 i‡(0 > 
	`ªmovóŒ
(
dúít
.
d_«me
))

160  
î∫o
;

165 i‡(0 > 
	`u∆ök
(
dúít
.
d_«me
))

167  
î∫o
;

172 i‡(0 > 
	`chdú
(".."))

174  
î∫o
;

177 i‡(0 > 
	`rmdú
(
dú
))

179  
î∫o
;

183 
	}
}

185 
	$vf°e°_°¨t
()

187 
îr
;

189 
roŸ_dú
[0] = '\0';

192 
	`¢¥ötf
(
roŸ_dú
, ‘oŸ_dú), "vf°e°-%d-%d", 
	`gëpid
(), 
	`ønd
());

193 
îr
 = 
	`mkdú
(
roŸ_dú
, 0777);

195 i‡(
î∫o
 =
EEXIST
)

200 i‡(
îr
 && 
î∫o
 !
EEXIST
)

202 
	`¥ötf
("FaûedÅÿmakêã°ÑoŸ dúe˘‹y: %s\n", 
	`°ªº‹
(
î∫o
));

203 
	`exô
(
î∫o
);

205 } 
îr
 != 0);

206 
	`¥ötf
("Cª©edÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

207 
	}
}

212 
	$vf°e°_ãrm
()

214 i‡(0 !
	`ªmovóŒ
(
roŸ_dú
))

216 
	`Ârötf
(
°dîr
, "ERROR: couldÇotÑemoveÅestingÑoot %s: %s\n",

217 
roŸ_dú
, 
	`°ªº‹
(
î∫o
));

218 
	`exô
(-1);

220 
	`¥ötf
("RemovedÅe°ÑoŸ dúe˘‹y: ./%s\n", 
roŸ_dú
);

221 
	}
}

223 
	#∑ths_equÆ
(
p1
, 
p2
) \

226 
__r
; \

227 
°©_t
 
__s1
, 
__s2
; \

228 i‡(
__r
 = 
	`makedús
(
p1
), !
	`ã°_as£π
(0 == __r, "makedirs(\"%s\"): %s", \

229 
p1
, 
	`ã°_îr°r
(
__r
))) \

231 i‡(
__r
 = 
	`°©
(
p1
, &
__s1
), !
	`ã°_as£π
(0 == __r, "stat(\"%s\"): %s", \

232 
p1
, 
	`ã°_îr°r
(
î∫o
))) \

234 i‡(
__r
 = 
	`°©
(
p2
, &
__s2
), !
	`ã°_as£π
(0 == __r, "stat(\"%s\"): %s", \

235 
p2
, 
	`ã°_îr°r
(
î∫o
))) \

237 
	`ã°_as£π
(
__s1
.
°_öo
 =
__s2
.st_ino, \

238 "∑ths_equÆs(\"%s\" (öÿ%d), \"%s\" (öÿ%d))", 
p1
, \

239 
__s1
.
°_öo
, 
p2
, 
__s2
.st_ino); \

240 } 0);

	)

242 
	#sysˇŒ_Áû
(
ex¥
, 
îr
) \

243 (
	`ã°_as£π
((
î∫o
 = 0, -1 =(
ex¥
)), \

244 "\nu√x≥˘ed suc˚ss, w™ãd %†(%d)", 
	`ã°_îr°r
(
îr
), \

245 
îr
) \

246 ? 
	`ã°_as£π
((
ex¥
, 
î∫o
 =
îr
), \

249 
	`ã°_îr°r
(
îr
),Éº,Åe°_îr°r(
î∫o
),Érrno) \

250 : 0)

	)

251 
	#sysˇŒ_suc˚ss
(
ex¥
) \

252 
	`ã°_as£π
(0 <(
ex¥
), "\nunexpectedÉrror: %s (%d)", \

253 
	`ã°_îr°r
(
î∫o
),Éºno)

	)

255 
	#¸óã_fûe
(
fûe
) \

258 
__fd
; \

259 i‡(
	`sysˇŒ_suc˚ss
(
__fd
 = 
	`›í
((
fûe
), 
O_RDONLY
 | 
O_CREAT
, 0777))) \

261 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
__fd
)); \

263 } 0);

	)

264 
	#ªad_fd
(
fd
, 
size
, 
gﬂl
) \

267 
__buf
[64]; \

268 
	`ã°_as£π
((
ssize_t
)
	`°æí
(
gﬂl
Ë=
	`ªad
(
fd
, 
__buf
, 
size
), \

270 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
gﬂl
, 
	`°æí
(goal)), \

272 } 0);

	)

273 
	#ã°_Âos
(
fd
, 
exp
) \

276 
__g
, 
__e
 = (
exp
); \

277 
	`sysˇŒ_suc˚ss
(
__g
 = 
	`l£ek
(
fd
, 0, 
SEEK_CUR
)); \

278 
	`ã°_as£π
((
__g
 =
__e
), "fd %d fpo†© %d,Éx≥˘ed %d", 
fd
, __g, \

279 
__e
); \

280 } 0);

	)

282 
	$vf°e°_nŸdú
()

284 
fd
;

285 
°©_t
 
s
;

286 
	`sysˇŒ_suc˚ss
(
	`mkdú
("realdir", 0));

287 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ªÆdú/fûe", 
O_RDWR
 | 
O_CREAT
, 0));

288 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

289 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ªÆdú/fûe2", 
O_RDWR
 | 
O_CREAT
, 0));

290 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

292 
	`sysˇŒ_Áû
(
	`›í
("ªÆdú/fûe/n›e", 
O_CREAT
 | 
O_RDWR
, 0), 
ENOTDIR
);

293 
	`sysˇŒ_Áû
(
	`lök
("ªÆdú/fûe2", "ªÆdú/fûe/n›e"), 
ENOTDIR
);

294 
	`sysˇŒ_Áû
(
	`lök
("ªÆdú/fûe/n›e", "ªÆdú/fûe3"), 
ENOTDIR
);

295 
	`sysˇŒ_Áû
(
	`u∆ök
("ªÆdú/fûe/n›e"), 
ENOTDIR
);

296 
	`sysˇŒ_Áû
(
	`rmdú
("ªÆdú/fûe/n›e"), 
ENOTDIR
);

297 
	`sysˇŒ_Áû
(
	`°©
("ªÆdú/fûe/n›e", &
s
), 
ENOTDIR
);

298 
	`sysˇŒ_Áû
(
	`ª«me
("ªÆdú/fûe2", "ªÆdú/fûe/n›e"), 
ENOTDIR
);

299 
	`sysˇŒ_Áû
(
	`ª«me
("ªÆdú/fûe/n›e", "ªÆdú/fûe3"), 
ENOTDIR
);

302 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("realdir/file"));

303 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("realdir/file2"));

304 
	`sysˇŒ_suc˚ss
(
	`rmdú
("realdir"));

305 
	}
}

307 
	$vf°e°_°©
()

309 
fd
;

310 
°©_t
 
s
;

312 
	`sysˇŒ_suc˚ss
(
	`mkdú
("stat", 0));

313 
	`sysˇŒ_suc˚ss
(
	`chdú
("stat"));

315 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s
));

316 
	`ã°_as£π
(
	`S_ISDIR
(
s
.
°_mode
), 
NULL
);

318 
	`¸óã_fûe
("file");

319 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

320 
	`ã°_as£π
(
	`S_ISREG
(
s
.
°_mode
), 
NULL
);

323 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe", 
O_RDWR
, 0));

324 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "foobar", 6));

325 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe", &
s
));

326 
	`ã°_as£π
(
s
.
°_size
 == 6, "unexpected file size");

327 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

330 #ifde‡
__VM__


331 
	`sysˇŒ_Áû
(
	`°©
(".", 
NULL
), 
EFAULT
);

333 
	`sysˇŒ_Áû
(
	`°©
("n€¡", &
s
), 
ENOENT
);

335 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

336 
	}
}

338 
	$vf°e°_mkdú
()

340 
	`sysˇŒ_suc˚ss
(
	`mkdú
("mkdir", 0777));

341 
	`sysˇŒ_suc˚ss
(
	`chdú
("mkdir"));

344 
	`¸óã_fûe
("file");

345 
	`sysˇŒ_Áû
(
	`mkdú
("fûe", 0777), 
EEXIST
);

346 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir", 0777));

347 
	`sysˇŒ_Áû
(
	`mkdú
("dú", 0777), 
EEXIST
);

350 
	`sysˇŒ_Áû
(
	`mkdú
(
LONGNAME
, 0777), 
ENAMETOOLONG
);

351 
	`sysˇŒ_Áû
(
	`mkdú
("fûe/dú", 0777), 
ENOTDIR
);

352 
	`sysˇŒ_Áû
(
	`mkdú
("n€¡/dú", 0777), 
ENOENT
);

353 
	`sysˇŒ_Áû
(
	`rmdú
("fûe/dú"), 
ENOTDIR
);

354 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/dú"), 
ENOENT
);

355 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡"), 
ENOENT
);

356 
	`sysˇŒ_Áû
(
	`rmdú
("."), 
EINVAL
);

357 
	`sysˇŒ_Áû
(
	`rmdú
(".."), 
ENOTEMPTY
);

358 
	`sysˇŒ_Áû
(
	`rmdú
("dú/."), 
EINVAL
);

359 
	`sysˇŒ_Áû
(
	`rmdú
("dú/.."), 
ENOTEMPTY
);

360 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/."), 
ENOENT
);

361 
	`sysˇŒ_Áû
(
	`rmdú
("n€¡/.."), 
ENOENT
);

364 
	`sysˇŒ_Áû
(
	`rmdú
("fûe"), 
ENOTDIR
);

365 
	`sysˇŒ_Áû
(
	`u∆ök
("dú"), 
EPERM
);

368 
	`¸óã_fûe
("dir/file");

369 
	`sysˇŒ_Áû
(
	`rmdú
("dú"), 
ENOTEMPTY
);

372 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("dir/file"));

373 
	`sysˇŒ_suc˚ss
(
	`rmdú
("dir"));

375 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

376 
	}
}

378 
	$vf°e°_chdú
()

380 
	#CHDIR_TEST_DIR
 "chdú"

	)

382 
°©_t
 
s§c
, 
sde°
, 
•¨ít
, 
sdú
;

383 
°©_t
 
r§c
, 
rdú
;

386 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
CHDIR_TEST_DIR
, 0777));

387 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
s§c
));

388 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
sdú
));

390 
	`ã°_as£π
(
s§c
.
°_öo
 !
sdú
.°_öo, 
NULL
);

392 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

393 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
sde°
));

394 
	`sysˇŒ_suc˚ss
(
	`°©
("..", &
•¨ít
));

396 
	`ã°_as£π
(
sde°
.
°_öo
 =
sdú
.°_öo, 
NULL
);

397 
	`ã°_as£π
(
s§c
.
°_öo
 =
•¨ít
.°_öo, 
NULL
);

398 
	`ã°_as£π
(
s§c
.
°_öo
 !
sde°
.°_öo, 
NULL
);

400 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

401 
	`sysˇŒ_suc˚ss
(
	`°©
(".", &
r§c
));

402 
	`sysˇŒ_suc˚ss
(
	`°©
(
CHDIR_TEST_DIR
, &
rdú
));

404 
	`ã°_as£π
(
r§c
.
°_öo
 =
s§c
.°_öo, 
NULL
);

405 
	`ã°_as£π
(
rdú
.
°_öo
 =
sdú
.°_öo, 
NULL
);

408 
	`sysˇŒ_suc˚ss
(
	`chdú
(
CHDIR_TEST_DIR
));

409 
	`¸óã_fûe
("file");

410 
	`sysˇŒ_Áû
(
	`chdú
("fûe"), 
ENOTDIR
);

411 
	`sysˇŒ_Áû
(
	`chdú
("n€¡"), 
ENOENT
);

412 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

413 
	}
}

415 
	$vf°e°_∑ths
()

417 
	#PATHS_TEST_DIR
 "∑ths"

	)

419 
°©_t
 
s
;

421 
	`sysˇŒ_suc˚ss
(
	`mkdú
(
PATHS_TEST_DIR
, 0777));

422 
	`sysˇŒ_suc˚ss
(
	`chdú
(
PATHS_TEST_DIR
));

424 
	`sysˇŒ_Áû
(
	`°©
("", &
s
), 
EINVAL
);

426 
	`∑ths_equÆ
(".", ".");

427 
	`∑ths_equÆ
("1/2/3", "1/2/3");

428 
	`∑ths_equÆ
("4/5/6", "4/5/6");

431 
	`∑ths_equÆ
("/", "/");

432 
	`∑ths_equÆ
("/", "/..");

433 
	`∑ths_equÆ
("/", "/../");

434 
	`∑ths_equÆ
("/", "/../.");

437 
	`∑ths_equÆ
(".", "./.");

438 
	`∑ths_equÆ
(".", "1/..");

439 
	`∑ths_equÆ
(".", "1/../");

440 
	`∑ths_equÆ
(".", "1/2/../..");

441 
	`∑ths_equÆ
(".", "1/2/../..");

442 
	`∑ths_equÆ
(".", "1/2/3/../../..");

443 
	`∑ths_equÆ
(".", "1/../1/..");

444 
	`∑ths_equÆ
(".", "1/../4/..");

445 
	`∑ths_equÆ
(".", "1/../1/..");

446 
	`∑ths_equÆ
(".", "1/2/3/../../../4/5/6/../../..");

447 
	`∑ths_equÆ
(".", "1/./2/./3/./.././.././.././4/./5/./6/./.././.././..");

450 
	`∑ths_equÆ
("1/2/3", "1/2/3/");

451 
	`∑ths_equÆ
("1/2/3", "1//2/3");

452 
	`∑ths_equÆ
("1/2/3", "1/2//3");

453 
	`∑ths_equÆ
("1/2/3", "1//2//3");

454 
	`∑ths_equÆ
("1/2/3", "1//2//3/");

455 
	`∑ths_equÆ
("1/2/3", "1///2///3///");

458 
	`∑ths_equÆ
("-", "-");

459 
	`∑ths_equÆ
(" ", " ");

460 
	`∑ths_equÆ
("\\", "\\");

461 
	`∑ths_equÆ
("0", "0");

463 
°©_t
 
°
;

466 
	`sysˇŒ_Áû
(
	`°©
("asdf", &
°
), 
ENOENT
);

467 
	`sysˇŒ_Áû
(
	`°©
("1/asdf", &
°
), 
ENOENT
);

468 
	`sysˇŒ_Áû
(
	`°©
("1/../asdf", &
°
), 
ENOENT
);

469 
	`sysˇŒ_Áû
(
	`°©
("1/2/asdf", &
°
), 
ENOENT
);

471 
	`¸óã_fûe
("1/file");

472 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
, 0777), 
ENOTDIR
);

473 
	`sysˇŒ_Áû
(
	`›í
("1/fûe/Ÿhî", 
O_RDONLY
 | 
O_CREAT
, 0777), 
ENOTDIR
);

475 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

476 
	}
}

478 
	$vf°e°_fd
()

480 
	#FD_BUFSIZE
 5

	)

481 
	#BAD_FD
 20

	)

482 
	#HUGE_FD
 9999

	)

484 
fd1
, 
fd2
;

485 
buf
[
FD_BUFSIZE
];

486 
dúít
 
d
;

488 
	`sysˇŒ_suc˚ss
(
	`mkdú
("fd", 0));

489 
	`sysˇŒ_suc˚ss
(
	`chdú
("fd"));

492 
	`sysˇŒ_Áû
(
	`ªad
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

493 
	`sysˇŒ_Áû
(
	`ªad
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

494 
	`sysˇŒ_Áû
(
	`ªad
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

496 
	`sysˇŒ_Áû
(
	`wrôe
(
BAD_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

497 
	`sysˇŒ_Áû
(
	`wrôe
(
HUGE_FD
, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

498 
	`sysˇŒ_Áû
(
	`wrôe
(-1, 
buf
, 
FD_BUFSIZE
), 
EBADF
);

500 
	`sysˇŒ_Áû
(
	`˛o£
(
BAD_FD
), 
EBADF
);

501 
	`sysˇŒ_Áû
(
	`˛o£
(
HUGE_FD
), 
EBADF
);

502 
	`sysˇŒ_Áû
(
	`˛o£
(-1), 
EBADF
);

504 
	`sysˇŒ_Áû
(
	`l£ek
(
BAD_FD
, 0, 
SEEK_SET
), 
EBADF
);

505 
	`sysˇŒ_Áû
(
	`l£ek
(
HUGE_FD
, 0, 
SEEK_SET
), 
EBADF
);

506 
	`sysˇŒ_Áû
(
	`l£ek
(-1, 0, 
SEEK_SET
), 
EBADF
);

508 
	`sysˇŒ_Áû
(
	`gëdíts
(
BAD_FD
, &
d
, (d)), 
EBADF
);

509 
	`sysˇŒ_Áû
(
	`gëdíts
(
HUGE_FD
, &
d
, (d)), 
EBADF
);

510 
	`sysˇŒ_Áû
(
	`gëdíts
(-1, &
d
, (d)), 
EBADF
);

512 
	`sysˇŒ_Áû
(
	`dup
(
BAD_FD
), 
EBADF
);

513 
	`sysˇŒ_Áû
(
	`dup
(
HUGE_FD
), 
EBADF
);

514 
	`sysˇŒ_Áû
(
	`dup
(-1), 
EBADF
);

516 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, 25), 
EBADF
);

517 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, 25), 
EBADF
);

518 
	`sysˇŒ_Áû
(
	`dup2
(-1, 25), 
EBADF
);

521 
	`sysˇŒ_Áû
(
	`dup2
(0, 
HUGE_FD
), 
EBADF
);

522 
	`sysˇŒ_Áû
(
	`dup2
(0, -1), 
EBADF
);

526 
	`sysˇŒ_Áû
(
	`dup2
(
BAD_FD
, BAD_FD), 
EBADF
);

527 
	`sysˇŒ_Áû
(
	`dup2
(
HUGE_FD
, HUGE_FD), 
EBADF
);

528 
	`sysˇŒ_Áû
(
	`dup2
(-1, -1), 
EBADF
);

531 
	`¸óã_fûe
("file01");

532 
	`sysˇŒ_suc˚ss
(
fd1
 = 
	`›í
("fûe01", 
O_RDWR
, 0));

533 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup
(
fd1
));

534 
	`ã°_as£π
(
fd1
 < 
fd2
, "dup(%d)Ñeturned %d", fd1, fd2);

535 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd2
, "hello", 5));

536 
	`ã°_Âos
(
fd1
, 5);

537 
	`ã°_Âos
(
fd2
, 5);

538 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

539 
	`ã°_Âos
(
fd1
, 0);

540 
	`ã°_Âos
(
fd2
, 0);

541 
	`ªad_fd
(
fd1
, 5, "hello");

542 
	`ã°_Âos
(
fd1
, 5);

543 
	`ã°_Âos
(
fd2
, 5);

544 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

547 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 25));

548 
	`ã°_as£π
(25 =
fd2
, "dup2(%d, 25Ëªtu∫ed %d", 
fd1
, fd2);

549 
	`ã°_Âos
(
fd1
, 5);

550 
	`ã°_Âos
(
fd2
, 5);

551 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 0, 
SEEK_SET
));

552 
	`ã°_Âos
(
fd1
, 0);

553 
	`ã°_Âos
(
fd2
, 0);

554 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

557 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, fd1));

558 
	`ã°_as£π
(
fd1
 =
fd2
, "dup2(%d, %d)Ñeturned %d", fd1, fd1, fd2);

561 
fd3
;

562 
	`¸óã_fûe
("file02");

563 
	`sysˇŒ_suc˚ss
(
fd3
 = 
	`›í
("fûe02", 
O_RDWR
, 0));

564 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`dup2
(
fd1
, 
fd3
));

565 
	`ã°_as£π
(
fd2
 =
fd3
, "dup2(%d, %dËªtu∫ed %d", 
fd1
, fd3, fd2);

566 
	`ã°_Âos
(
fd1
, 0);

567 
	`ã°_Âos
(
fd2
, 0);

568 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd2
, 5, 
SEEK_SET
));

569 
	`ã°_Âos
(
fd1
, 5);

570 
	`ã°_Âos
(
fd2
, 5);

571 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

572 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd1
));

574 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

575 
	}
}

577 
	$vf°e°_memdev
()

579 
ªs
, 
fd
;

580 
def
 = 'a';

581 
buf
[4096];

583 
ªs
 = 1;

585 
	`mem£t
(
buf
, 
def
, (buf));

587 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/nuŒ", 
O_RDWR
, 0));

588 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

589 
	`ã°_as£π
((
buf
Ë=
ªs
, "write of %d bytes /dev/nullÑeturned %d",

590 (
buf
), 
ªs
);

591 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

592 
	`ã°_as£π
(0 =
ªs
, "ªad o‡%d byã†/dev/nuŒÑëu∫ed %d", (
buf
),

593 
ªs
);

594 
	`ã°_as£π
(
buf
[(bufË/ 2] =
def
,

596 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

598 
	`mem£t
(
buf
, 
def
, (buf));

600 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/zîo", 
O_RDWR
, 0));

601 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

602 
	`ã°_as£π
((
buf
Ë=
ªs
, "write of %d bytes /dev/zeroÑeturned %d",

603 (
buf
), 
ªs
);

604 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

605 
	`ã°_as£π
((
buf
Ë=
ªs
, "read of %d bytes /dev/zeroÑeturned %d",

606 (
buf
), 
ªs
);

607 
	`ã°_as£π
(
buf
[(buf) / 2] == 0,

609 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

610 
	}
}

612 
	$vf°e°_wrôe
()

614 
	#CHUNK_SIZE
 25

	)

615 
	#NUM_CHUNKS
 4

	)

616 
fd
, 
i
, 
ªs
;

617 
°©_t
 
s
;

618 c⁄° *
°r
 = "hello world";

620 
chunk
[
CHUNK_SIZE
];

621 
	`mem˝y
(
chunk
, 
°r
, 
	`°æí
(str));

622 
	`mem£t
(
chunk
 + 
	`°æí
(
°r
), 0, 25 - strlen(str));

624 
	`sysˇŒ_suc˚ss
(
	`mkdú
("write", 0));

625 
	`sysˇŒ_suc˚ss
(
	`chdú
("write"));

627 
	`¸óã_fûe
("file");

628 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe", 
O_RDWR
, 0));

629 
i
 = 0; i < 
NUM_CHUNKS
 * 
CHUNK_SIZE
; i += CHUNK_SIZE)

631 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
i
, 
SEEK_SET
));

632 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
°r
, 
	`°æí
(str)));

633 
	`ã°_as£π
(()
	`°æí
(
°r
Ë=
ªs
, "write of %d bytesÑeturned %d",

634 
	`°æí
(
°r
), 
ªs
);

636 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

637 
i
 = 0; i < 
NUM_CHUNKS
 - 1; ++i)

639 
__buf
[64];

640 
	`ã°_as£π
(
CHUNK_SIZE
 =
	`ªad
(
fd
, 
__buf
, CHUNK_SIZE),

642 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
chunk
, 
CHUNK_SIZE
),

645 
__buf
[64];

646 
	`ã°_as£π
(()
	`°æí
(
°r
Ë=
	`ªad
(
fd
, 
__buf
, strlen(str)),

648 
	`ã°_as£π
(0 =
	`memcmp
(
__buf
, 
chunk
, 
	`°æí
(
°r
)),

651 c⁄° *
√w_°r
 = "testing";

652 c⁄° 
loc
 = 37;

656 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
loc
, 
SEEK_SET
));

657 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
√w_°r
, 
	`°æí
(new_str)));

658 
	`ã°_as£π
(()
	`°æí
(
√w_°r
Ë=
ªs
, "write of %d bytesÑeturned %d",

659 
	`°æí
(
√w_°r
), 
ªs
);

660 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 
loc
, 
SEEK_SET
));

661 
	`ªad_fd
(
fd
, 
	`°æí
(
√w_°r
),Çew_str);

662 
	`ã°_as£π
(
	`l£ek
(
fd
, 0, 
SEEK_END
) ==

663 (
NUM_CHUNKS
 - 1Ë* 
CHUNK_SIZE
 + ()
	`°æí
(
°r
),

666 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

667 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file"));

669 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

670 
	`sysˇŒ_suc˚ss
(
	`rmdú
("write"));

671 
	}
}

675 
	$vf°e°_öföôe
()

677 
ªs
, 
fd
;

678 
buf
[4096];

680 
ªs
 = 1;

681 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/nuŒ", 
O_WRONLY
, 0));

682 
i
 = 0; i < 1000000; i++)

684 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`wrôe
(
fd
, 
buf
, (buf)));

686 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

688 
ªs
 = 1;

689 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("/dev/zîo", 
O_RDONLY
, 0));

690 0 < 
ªs
)

692 
	`sysˇŒ_suc˚ss
(
ªs
 = 
	`ªad
(
fd
, 
buf
, (buf)));

694 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

695 
	}
}

710 
	$vf°e°_›í
()

712 
	#OPEN_BUFSIZE
 5

	)

714 
buf
[
OPEN_BUFSIZE
];

715 
fd
, 
fd2
;

716 
°©_t
 
s
;

718 
	`sysˇŒ_suc˚ss
(
	`mkdú
("open", 0777));

719 
	`sysˇŒ_suc˚ss
(
	`chdú
("open"));

724 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_WRONLY
 | 
O_RDWR
 | 
O_CREAT
, 0), 
EINVAL
);

725 
	`sysˇŒ_Áû
(
	`›í
("fûe01", 
O_RDONLY
 | 
O_RDWR
 | 
O_WRONLY
 | 
O_CREAT
, 0),

726 
EINVAL
);

729 
	`sysˇŒ_Áû
(
	`›í
("fûe02", 
O_WRONLY
, 0), 
ENOENT
);

730 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDONLY
 | 
O_CREAT
, 0));

731 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

732 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file02"));

733 
	`sysˇŒ_Áû
(
	`°©
("fûe02", &
s
), 
ENOENT
);

736 
	`¸óã_fûe
("tmpfile");

737 
	`sysˇŒ_Áû
(
	`›í
("tmpfûe/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOTDIR
);

738 
	`sysˇŒ_Áû
(
	`›í
("n€¡/ã°", 
O_RDONLY
 | 
O_CREAT
, 0), 
ENOENT
);

739 
	`sysˇŒ_Áû
(
	`›í
(
LONGNAME
, 
O_RDONLY
 | 
O_CREAT
, 0), 
ENAMETOOLONG
);

742 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDONLY
 | 
O_CREAT
, 0));

743 
	`sysˇŒ_Áû
(
	`wrôe
(
fd
, "hñlo", 5), 
EBADF
);

744 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

748 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_WRONLY
, 0));

749 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
OPEN_BUFSIZE
), 
EBADF
);

750 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

751 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file03"));

752 
	`sysˇŒ_Áû
(
	`°©
("fûe03", &
s
), 
ENOENT
);

755 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDONLY
 | 
O_CREAT
, 0));

756 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_RDONLY
, 0));

757 
	`ã°_as£π
(
fd2
 > 
fd
, "open() didÇotÑeturnÜowest fd");

758 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

759 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

760 
	`sysˇŒ_suc˚ss
(
fd2
 = 
	`›í
("fûe04", 
O_WRONLY
, 0));

761 
	`ã°_as£π
(
fd2
 =
fd
, "open() didÇotÑeturn correct fd");

762 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd2
));

763 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("file04"));

764 
	`sysˇŒ_Áû
(
	`°©
("fûe04", &
s
), 
ENOENT
);

767 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file05", 0));

768 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_WRONLY
, 0), 
EISDIR
);

769 
	`sysˇŒ_Áû
(
	`›í
("fûe05", 
O_RDWR
, 0), 
EISDIR
);

770 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file05"));

773 
	`sysˇŒ_suc˚ss
(
	`mkdú
("file06", 0));

774 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe06"), 
EPERM
);

775 
	`sysˇŒ_suc˚ss
(
	`rmdú
("file06"));

776 
	`sysˇŒ_Áû
(
	`u∆ök
("."), 
EPERM
);

777 
	`sysˇŒ_Áû
(
	`u∆ök
(".."), 
EPERM
);

780 
	`sysˇŒ_Áû
(
	`u∆ök
("fûe07"), 
ENOENT
);

783 
	`¸óã_fûe
("file08");

784 
	`sysˇŒ_Áû
(
	`›í
("fûe08/", 
O_RDONLY
, 0), 
ENOTDIR
);

785 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirA", 0777));

786 
	`sysˇŒ_suc˚ss
(
	`chdú
("dirA"));

787 
	`¸óã_fûe
("file09");

788 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

789 
	`sysˇŒ_Áû
(
	`›í
("dúA/fûe09/", 
O_RDONLY
, 0), 
ENOTDIR
);

792 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirB", 0777));

793 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dirB/dirC", 0777));

794 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dúB/", 
O_RDONLY
, 0));

795 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

796 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dúB/dúC/", 
O_RDONLY
, 0));

797 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

799 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

800 
	}
}

802 
	$vf°e°_ªad
()

804 
	#READ_BUFSIZE
 256

	)

806 
fd
, 
ªt
;

807 
buf
[
READ_BUFSIZE
];

808 
°©_t
 
s
;

810 
	`sysˇŒ_suc˚ss
(
	`mkdú
("read", 0777));

811 
	`sysˇŒ_suc˚ss
(
	`chdú
("read"));

814 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDWR
 | 
O_CREAT
, 0));

815 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, "hello", 5));

816 
	`ã°_as£π
(5 =
ªt
, "wrôe(%d, \"hñlo\", 5Ëªtu∫ed %d", 
fd
,Ñet);

817 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`l£ek
(
fd
, 0, 
SEEK_SET
));

818 
	`ã°_as£π
(0 =
ªt
, "l£ek(%d, 0, SEEK_SETËªtu∫ed %d", 
fd
,Ñet);

819 
	`ªad_fd
(
fd
, 
READ_BUFSIZE
, "hello");

820 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

823 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

824 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

825 
	`sysˇŒ_Áû
(
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
), 
EISDIR
);

826 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

829 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe02", 
O_RDWR
 | 
O_CREAT
, 0));

830 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

832 
	#ã°_l£ek
(
ex¥
, 
ªs
) \

835 
__r
 = (
ex¥
); \

836 
	`ã°_as£π
((
ªs
Ë=
__r
, #expr "Ñeturned %d,Éxpected %d", __r, \

837 
ªs
); \

838 } 0);

	)

840 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_CUR
), 5);

841 
	`ªad_fd
(
fd
, 10, "");

842 
	`ã°_l£ek
(
	`l£ek
(
fd
, -1, 
SEEK_CUR
), 4);

843 
	`ªad_fd
(
fd
, 10, "o");

844 
	`ã°_l£ek
(
	`l£ek
(
fd
, 2, 
SEEK_CUR
), 7);

845 
	`ªad_fd
(
fd
, 10, "");

846 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_CUR
), 
EINVAL
);

848 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

849 
	`ªad_fd
(
fd
, 10, "hello");

850 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_SET
), 3);

851 
	`ªad_fd
(
fd
, 10, "lo");

852 
	`ã°_l£ek
(
	`l£ek
(
fd
, 7, 
SEEK_SET
), 7);

853 
	`ªad_fd
(
fd
, 10, "");

854 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -1, 
SEEK_SET
), 
EINVAL
);

856 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_END
), 5);

857 
	`ªad_fd
(
fd
, 10, "");

858 
	`ã°_l£ek
(
	`l£ek
(
fd
, -2, 
SEEK_END
), 3);

859 
	`ªad_fd
(
fd
, 10, "lo");

860 
	`ã°_l£ek
(
	`l£ek
(
fd
, 3, 
SEEK_END
), 8);

861 
	`ªad_fd
(
fd
, 10, "");

862 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, -8, 
SEEK_END
), 
EINVAL
);

864 
	`sysˇŒ_Áû
(
	`l£ek
(
fd
, 0, 
SEEK_SET
 + 
SEEK_CUR
 + 
SEEK_END
), 
EINVAL
);

865 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

868 
	`¸óã_fûe
("file03");

869 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
, 0));

870 
	`ã°_Âos
(
fd
, 0);

871 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

872 
	`ã°_Âos
(
fd
, 5);

873 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

875 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe03", 
O_RDWR
 | 
O_APPEND
, 0));

876 
	`ã°_Âos
(
fd
, 0);

877 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

878 
	`ã°_Âos
(
fd
, 10);

880 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

881 
	`ã°_Âos
(
fd
, 0);

882 
	`ªad_fd
(
fd
, 10, "hellohello");

883 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 5, 
SEEK_SET
));

884 
	`ã°_Âos
(
fd
, 5);

885 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

886 
	`ã°_Âos
(
fd
, 15);

887 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

888 
	`ã°_Âos
(
fd
, 0);

889 
	`ªad_fd
(
fd
, 15, "hellohelloagain");

890 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

893 
	`¸óã_fûe
("file04");

894 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe04", 
O_RDWR
, 0));

895 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "hello", 5));

896 
	`ã°_Âos
(
fd
, 5);

897 
	`ã°_l£ek
(
	`l£ek
(
fd
, 10, 
SEEK_SET
), 10);

898 
	`sysˇŒ_suc˚ss
(
	`wrôe
(
fd
, "again", 5));

899 
	`sysˇŒ_suc˚ss
(
	`°©
("fûe04", &
s
));

900 
	`ã°_as£π
(
s
.
°_size
 == 15, "actual size: %d", s.st_size);

901 
	`ã°_l£ek
(
	`l£ek
(
fd
, 0, 
SEEK_SET
), 0);

902 
	`ã°_as£π
(15 =
	`ªad
(
fd
, 
buf
, 
READ_BUFSIZE
),

904 
	`ã°_as£π
(0 =
	`memcmp
(
buf
, "hello\0\0\0\0\0again", 15),

906 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

908 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

909 
	}
}

911 
	$vf°e°_gëdíts
()

913 
fd
, 
ªt
;

914 
dúít_t
 
dúíts
[4];

916 
	`sysˇŒ_suc˚ss
(
	`mkdú
("getdents", 0));

917 
	`sysˇŒ_suc˚ss
(
	`chdú
("getdents"));

920 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01", 0));

921 
	`sysˇŒ_suc˚ss
(
	`mkdú
("dir01/1", 0));

922 
	`¸óã_fûe
("dir01/2");

924 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("dú01", 
O_RDONLY
, 0));

925 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)));

926 
	`ã°_as£π
(4 * (
dúít_t
Ë=
ªt
, 
NULL
);

928 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

929 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

931 
	`sysˇŒ_suc˚ss
(
	`l£ek
(
fd
, 0, 
SEEK_SET
));

932 
	`ã°_Âos
(
fd
, 0);

933 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

934 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

935 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, 2 * (
dúít_t
)));

936 
	`ã°_as£π
(2 * (
dúít_t
Ë=
ªt
, 
NULL
);

937 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`gëdíts
(
fd
, 
dúíts
, (
dúít_t
)));

938 
	`ã°_as£π
(0 =
ªt
, 
NULL
);

939 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

942 
	`¸óã_fûe
("file01");

943 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("fûe01", 
O_RDONLY
, 0));

944 
	`sysˇŒ_Áû
(
	`gëdíts
(
fd
, 
dúíts
, 4 * (
dúít_t
)), 
ENOTDIR
);

945 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

947 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

948 
	}
}

950 #ifde‡
__VM__


957 
	$vf°e°_s5fs_vm
()

959 
fd
, 
√wfd
, 
ªt
;

960 
buf
[2048];

961 
°©_t
 
ﬁd°©buf
, 
√w°©buf
;

962 *
addr
;

963 
	`mem£t
(&
ﬁd°©buf
, '\0', (
°©_t
));

964 
	`mem£t
(&
√w°©buf
, '\0', (
°©_t
));

966 
	`sysˇŒ_suc˚ss
(
	`mkdú
("s5fs", 0));

967 
	`sysˇŒ_suc˚ss
(
	`chdú
("s5fs"));

970 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("ﬁdchld", 
O_RDWR
 | 
O_CREAT
, 0));

971 
	`sysˇŒ_suc˚ss
(
	`mkdú
("parent", 0));

974 
	`sysˇŒ_suc˚ss
(
	`lök
("oldchld", "newchld"));

977 
	`sysˇŒ_suc˚ss
(
	`°©
("ﬁdchld", &
ﬁd°©buf
));

978 
	`sysˇŒ_suc˚ss
(
	`°©
("√wchld", &
√w°©buf
));

979 
	`ã°_as£π
(0 =
	`memcmp
(&
ﬁd°©buf
, &
√w°©buf
, (
°©_t
)), 
NULL
);

982 
	`sysˇŒ_suc˚ss
(
√wfd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

983 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`wrôe
(
fd
, 
TESTSTR
, 
	`°æí
(TESTSTR)));

984 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

985 
	`sysˇŒ_suc˚ss
(
ªt
 = 
	`ªad
(
√wfd
, 
buf
, 
	`°æí
(
TESTSTR
)));

986 
	`ã°_as£π
(
ªt
 =()
	`°æí
(
TESTSTR
), 
NULL
);

987 
	`ã°_as£π
(0 =
	`°∫cmp
(
buf
, 
TESTSTR
, 
	`°æí
(TESTSTR)),

988 "°rög i†%.*s,Éx≥˘ed %s", 
	`°æí
(
TESTSTR
), 
buf
, TESTSTR);

990 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

991 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
√wfd
));

994 
	`sysˇŒ_suc˚ss
(
	`u∆ök
("oldchld"));

995 
	`sysˇŒ_Áû
(
	`mkdú
("√wchld", 0), 
EEXIST
);

996 
	`sysˇŒ_suc˚ss
(
	`lök
("newchld", "oldchld"));

999 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", "√wchld"), 
EEXIST
);

1000 
	`sysˇŒ_Áû
(
	`lök
("ﬁdchld", 
LONGNAME
), 
ENAMETOOLONG
);

1001 
	`sysˇŒ_Áû
(
	`lök
("∑ª¡", "√wchld"), 
EPERM
);

1007 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDWR
, 0));

1008 
	`ã°_as£π
(

1009 
MAP_FAILED
 !(
addr
 = 
	`mm≠
(0, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1010 
MAP_PRIVATE
, 
fd
, 0)),

1011 
NULL
);

1013 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

1016 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

1017 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1020 
	`ã°_as£π
(

1021 
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1022 
MAP_SHARED
 | 
MAP_FIXED
, 
fd
, 0),

1023 
NULL
);

1025 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR)), 
NULL
);

1028 
	`mem˝y
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR));

1030 
	`ã°_as£π
(

1031 
MAP_FAILED
 !
	`mm≠
(
addr
, 
	`°æí
(
TESTSTR
), 
PROT_READ
 | 
PROT_WRITE
,

1032 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1033 
NULL
);

1035 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1038 i‡(!
	`f‹k
())

1041 
	`mem˝y
(
addr
, 
TESTSTR
, 
	`°æí
(TESTSTR));

1042 
	`exô
(0);

1046 
	`sysˇŒ_suc˚ss
(
	`waô
(0));

1049 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
SHORTSTR
, 
	`°æí
(SHORTSTR)), 
NULL
);

1052 
	`sysˇŒ_suc˚ss
(
	`munm≠
(
addr
, 2048));

1055 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 12, 0),

1056 
NULL
);

1057 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, -1, 0),

1058 
NULL
);

1059 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 0, 
fd
, 0), 
NULL
);

1060 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
, 
fd
, 0), 
NULL
);

1061 
	`ã°_as£π
(

1062 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_FIXED
 | 
MAP_PRIVATE
, 
fd
, 0),

1063 
NULL
);

1064 
	`ã°_as£π
(

1065 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0x12345), 
NULL
);

1066 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
((*)0x12345, 1024, 
PROT_READ
,

1067 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1068 
NULL
);

1069 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, 0, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

1070 
	`ã°_as£π
(
MAP_FAILED
 =
	`mm≠
(0, -1, 
PROT_READ
, 
MAP_PRIVATE
, 
fd
, 0), 
NULL
);

1071 
	`ã°_as£π
(

1072 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
, 
MAP_PRIVATE
 | 
MAP_FIXED
, 
fd
, 0),

1073 
NULL
);

1074 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

1076 
	`sysˇŒ_suc˚ss
(
fd
 = 
	`›í
("√wchld", 
O_RDONLY
, 0));

1077 
	`ã°_as£π
(

1078 
MAP_FAILED
 =
	`mm≠
(0, 1024, 
PROT_READ
 | 
PROT_WRITE
, 
MAP_SHARED
, 
fd
, 0),

1079 
NULL
);

1080 
	`sysˇŒ_suc˚ss
(
	`˛o£
(
fd
));

1088 
	`sysˇŒ_Áû
(
	`munm≠
((*)0x12345, 15), 
EINVAL
);

1089 
	`sysˇŒ_Áû
(
	`munm≠
(0x0, 15), 
EINVAL
);

1090 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, 0), 
EINVAL
);

1091 
	`sysˇŒ_Áû
(
	`munm≠
(
addr
, -1), 
EINVAL
);

1095 
	`ã°_as£π
((*)-1 !(
addr
 = 
	`sbrk
(128)), 
NULL
);

1096 
	`mem˝y
(
addr
, 
TESTSTR
, 128);

1097 
	`ã°_as£π
(0 =
	`memcmp
(
addr
, 
TESTSTR
, 128), 
NULL
);

1100 
	`ã°_as£π
((*)(()
addr
 + 128Ë=
	`sbrk
(0), 
NULL
);

1102 
	`sysˇŒ_suc˚ss
(
	`brk
(
addr
));

1105 
	`sysˇŒ_Áû
(
	`brk
((*)(&"brk")), 
ENOMEM
);

1106 
	`sysˇŒ_Áû
(
	`brk
((*)1), 
ENOMEM
);

1107 
	`sysˇŒ_Áû
(
	`brk
((*)&
addr
), 
ENOMEM
);

1109 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

1110 
	}
}

1113 #ifde‡
__KERNEL__


1114 
uöt64_t
 
jiffõs
;

1117 
	$£ed_øndom√ss
()

1119 #ifde‡
__KERNEL__


1120 
	`§™d
(
jiffõs
);

1122 
	`§™d
(
	`time
(
NULL
));

1124 
	`ønd
();

1125 
	}
}

1130 #i‚de‡
__KERNEL__


1132 
	$maö
(
¨gc
, **
¨gv
)

1134 
	$vf°e°_maö
(
¨gc
, **
¨gv
)

1137 i‡(
¨gc
 != 1)

1139 
	`Ârötf
(
°dîr
, "USAGE: vfstest\n");

1143 
	`£ed_øndom√ss
();

1145 
	`ã°_öô
();

1146 
	`vf°e°_°¨t
();

1148 
	`sysˇŒ_suc˚ss
(
	`chdú
(
roŸ_dú
));

1150 
	`vf°e°_nŸdú
();

1151 
	`vf°e°_°©
();

1152 
	`vf°e°_chdú
();

1153 
	`vf°e°_mkdú
();

1154 
	`vf°e°_∑ths
();

1155 
	`vf°e°_fd
();

1156 
	`vf°e°_›í
();

1157 
	`vf°e°_ªad
();

1158 
	`vf°e°_gëdíts
();

1159 
	`vf°e°_memdev
();

1160 
	`vf°e°_wrôe
();

1162 #ifde‡
__VM__


1163 
	`vf°e°_s5fs_vm
();

1166 
	`sysˇŒ_suc˚ss
(
	`chdú
(".."));

1168 
	`vf°e°_ãrm
();

1169 
	`ã°_föi
();

1172 
	}
}

	@user/usr/bin/wc.c

1 
	~<˘y≥.h
>

2 
	~<f˙é.h
>

3 
	~<°dio.h
>

4 
	~<°rög.h
>

5 
	~<uni°d.h
>

7 
	#BUFFER_SIZE
 1024

	)

9 
	scou¡_ªsu…s


11 
	mn_ch¨s
;

12 
	mn_w‹ds
;

13 
	mn_löes
;

14 } 
	tcou¡_ªsu…s_t
;

16 
	gbuf
[
BUFFER_SIZE
];

18 
	$¥öt_cou¡s
(
cou¡_ªsu…s_t
 *
ªsu…s
, *
«me
)

20 i‡(
«me
)

22 
	`¥ötf
("%10Œu %10Œu %10Œu %10s\n", 
ªsu…s
->
n_löes
,

23 
ªsu…s
->
n_w‹ds
,Ñesu…s->
n_ch¨s
, 
«me
);

27 
	`¥ötf
("%10Œu %10Œu %10Œu\n", 
ªsu…s
->
n_löes
,Ñesu…s->
n_w‹ds
,

28 
ªsu…s
->
n_ch¨s
);

30 
	}
}

32 
	$cou¡
(
fd
, *
«me
, 
cou¡_ªsu…s_t
 *
ªsu…s
)

34 
size_t
 
byãs_ªad
;

35 
ö_w‹d
, 
i
;

37 
ö_w‹d
 = 0;

38 (
byãs_ªad
 = 
	`ªad
(
fd
, 
buf
, 
BUFFER_SIZE
)) > 0)

40 
i
 = 0; i < 
byãs_ªad
; ++i)

42 i‡(
	`is•a˚
(
buf
[
i
]))

44 i‡(
ö_w‹d
)

46 
ªsu…s
->
n_w‹ds
++;

47 
ö_w‹d
 = 0;

52 
ö_w‹d
 = 1;

55 i‡(
buf
[
i
] == '\n')

57 
ªsu…s
->
n_löes
++;

61 
ªsu…s
->
n_ch¨s
 +
byãs_ªad
;

64 
	`¥öt_cou¡s
(
ªsu…s
, 
«me
);

65 
	}
}

67 
	$maö
(
¨gc
, **
¨gv
)

69 
f
, 
fd
;

70 
cou¡_ªsu…s_t
 
tŸÆ_cou¡s
 = {.
n_ch¨s
 = 0, .
n_w‹ds
 = 0, .
n_löes
 = 0};

71 
cou¡_ªsu…s_t
 
loˇl_cou¡s
 = {.
n_ch¨s
 = 0, .
n_w‹ds
 = 0, .
n_löes
 = 0};

73 i‡(
¨gc
 == 1)

76 
	`cou¡
(0, 0, &
tŸÆ_cou¡s
);

81 
f
 = 1; f < 
¨gc
; ++f)

83 
fd
 = 
	`›í
(
¨gv
[
f
], 
O_RDONLY
, 0);

84 i‡(
fd
 < 0)

87 
	`Ârötf
(
°dîr
, "wc: %s: o≥n: %s\n", 
¨gv
[
f
], 
	`°ªº‹
(
î∫o
));

92 
	`cou¡
(
fd
, 
¨gv
[
f
], &
loˇl_cou¡s
);

94 
tŸÆ_cou¡s
.
n_ch¨s
 +
loˇl_cou¡s
.n_chars;

95 
tŸÆ_cou¡s
.
n_w‹ds
 +
loˇl_cou¡s
.n_words;

96 
tŸÆ_cou¡s
.
n_löes
 +
loˇl_cou¡s
.n_lines;

99 
loˇl_cou¡s
.
n_ch¨s
 =Üoˇl_cou¡s.
n_w‹ds
 =

100 
loˇl_cou¡s
.
n_löes
 = 0;

102 
	`˛o£
(
fd
);

106 i‡(
¨gc
 > 2)

109 
	`¥öt_cou¡s
(&
tŸÆ_cou¡s
, "total");

114 
	}
}

	@/usr/include/ctype.h

22 #i‚def 
_CTYPE_H


23 
	#_CTYPE_H
 1

	)

25 
	~<„©uªs.h
>

26 
	~<bôs/ty≥s.h
>

28 
	g__BEGIN_DECLS


30 #i‚de‡
_ISbô


39 
	~<bôs/ídün.h
>

40 #i‡
__BYTE_ORDER
 =
__BIG_ENDIAN


41 
	#_ISbô
(
bô
Ë(1 << (bô))

	)

43 
	#_ISbô
(
bô
Ë((bôË< 8 ? ((1 << (bô)Ë<< 8Ë: ((1 << (bô)Ë>> 8))

	)

48 
	m_ISuµî
 = 
_ISbô
 (0),

49 
	m_ISlowî
 = 
_ISbô
 (1),

50 
	m_ISÆpha
 = 
_ISbô
 (2),

51 
	m_ISdigô
 = 
_ISbô
 (3),

52 
	m_ISxdigô
 = 
_ISbô
 (4),

53 
	m_IS•a˚
 = 
_ISbô
 (5),

54 
	m_IS¥öt
 = 
_ISbô
 (6),

55 
	m_ISgøph
 = 
_ISbô
 (7),

56 
	m_ISbœnk
 = 
_ISbô
 (8),

57 
	m_IS˙ål
 = 
_ISbô
 (9),

58 
	m_ISpun˘
 = 
_ISbô
 (10),

59 
	m_ISÆnum
 = 
_ISbô
 (11)

79 c⁄° **
	$__˘y≥_b_loc
 ()

80 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

81 c⁄° 
__öt32_t
 **
	$__˘y≥_tﬁowî_loc
 ()

82 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

83 c⁄° 
__öt32_t
 **
	$__˘y≥_touµî_loc
 ()

84 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

87 #i‚de‡
__˝lu•lus


88 
	#__is˘y≥
(
c
, 
ty≥
) \

89 ((*
	`__˘y≥_b_loc
 ())[(Ë(
c
)] & (Ë
ty≥
)

	)

90 #ñi‡
deföed
 
__USE_EXTERN_INLINES


91 
	#__is˘y≥_f
(
ty≥
) \

92 
__exã∫_ölöe
 \

93 
is
##
	`ty≥
 (
__c
Ë
__THROW
 \

95  (*
	`__˘y≥_b_loc
 ())[(Ë(
__c
)] & (Ë
_IS
##
ty≥
; \

96 
	}

	)
}

99 
	#__ißscii
(
c
Ë(((cË& ~0x7fË=0Ë

	)

100 
	#__tﬂscii
(
c
Ë((cË& 0x7fË

	)

102 
	#__ex˘y≥
(
«me
Ë
	`«me
 (Ë
__THROW


	)

108 
__ex˘y≥
 (
iß um
);

109 
__ex˘y≥
 (
ißÕha
);

110 
__ex˘y≥
 (
is˙ål
);

111 
__ex˘y≥
 (
isdigô
);

112 
__ex˘y≥
 (
i¶owî
);

113 
__ex˘y≥
 (
isgøph
);

114 
__ex˘y≥
 (
i•röt
);

115 
__ex˘y≥
 (
i•un˘
);

116 
__ex˘y≥
 (
is•a˚
);

117 
__ex˘y≥
 (
isuµî
);

118 
__ex˘y≥
 (
isxdigô
);

122 
	$tﬁowî
 (
__c
Ë
__THROW
;

125 
	$touµî
 (
__c
Ë
__THROW
;

129 #ifdef 
__USE_ISOC99


130 
	`__ex˘y≥
 (
isbœnk
);

133 #ifde‡
__USE_GNU


135 
	$is˘y≥
 (
__c
, 
__mask
Ë
__THROW
;

138 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


142 
	$ißscii
 (
__c
Ë
__THROW
;

146 
	$tﬂscii
 (
__c
Ë
__THROW
;

150 
	`__ex˘y≥
 (
_touµî
);

151 
	`__ex˘y≥
 (
_tﬁowî
);

155 
	#__tobody
(
c
, 
f
, 
a
, 
¨gs
) \

156 (
__exãnsi⁄__
 \

157 ({ 
__ªs
; \

158 i‡( (
c
) > 1) \

160 i‡(
	`__buûtö_c⁄°™t_p
 (
c
)) \

162 
__c
 = (
c
); \

163 
__ªs
 = 
__c
 < -128 || __¯> 255 ? __¯: (
a
)[__c]; \

166 
__ªs
 = 
f
 
¨gs
; \

169 
__ªs
 = (
a
)[(Ë(
c
)]; \

170 
__ªs
; 
	}
}))

	)

172 #i‡!
deföed
 
__NO_CTYPE


173 #ifde‡
__is˘y≥_f


174 
	$__is˘y≥_f
 (
Ænum
)

175 
	$__is˘y≥_f
 (
Æpha
)

176 
	$__is˘y≥_f
 (
˙ål
)

177 
	$__is˘y≥_f
 (
digô
)

178 
	$__is˘y≥_f
 (
lowî
)

179 
	$__is˘y≥_f
 (
gøph
)

180 
	$__is˘y≥_f
 (
¥öt
)

181 
	$__is˘y≥_f
 (
pun˘
)

182 
	$__is˘y≥_f
 (
•a˚
)

183 
	$__is˘y≥_f
 (
uµî
)

184 
	$__is˘y≥_f
 (
xdigô
)

185 #ifde‡
__USE_ISOC99


186 
	$__is˘y≥_f
 (
bœnk
)

188 #ñi‡
deföed
 
__is˘y≥


189 
	#iß um
(
c
Ë
	`__is˘y≥
((c), 
_ISÆnum
)

	)

190 
	#ißÕha
(
c
Ë
	`__is˘y≥
((c), 
_ISÆpha
)

	)

191 
	#is˙ål
(
c
Ë
	`__is˘y≥
((c), 
_IS˙ål
)

	)

192 
	#isdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISdigô
)

	)

193 
	#i¶owî
(
c
Ë
	`__is˘y≥
((c), 
_ISlowî
)

	)

194 
	#isgøph
(
c
Ë
	`__is˘y≥
((c), 
_ISgøph
)

	)

195 
	#i•röt
(
c
Ë
	`__is˘y≥
((c), 
_IS¥öt
)

	)

196 
	#i•un˘
(
c
Ë
	`__is˘y≥
((c), 
_ISpun˘
)

	)

197 
	#is•a˚
(
c
Ë
	`__is˘y≥
((c), 
_IS•a˚
)

	)

198 
	#isuµî
(
c
Ë
	`__is˘y≥
((c), 
_ISuµî
)

	)

199 
	#isxdigô
(
c
Ë
	`__is˘y≥
((c), 
_ISxdigô
)

	)

200 #ifde‡
__USE_ISOC99


201 
	#isbœnk
(
c
Ë
	`__is˘y≥
((c), 
_ISbœnk
)

	)

205 #ifde‡
__USE_EXTERN_INLINES


206 
__exã∫_ölöe
 

207 
	`__NTH
 (
	$tﬁowî
 (
__c
))

209  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_tﬁowî_loc
 ())[__c] : __c;

210 
	}
}

212 
__exã∫_ölöe
 

213 
__NTH
 (
	$touµî
 (
__c
))

215  
__c
 >-128 && __¯< 256 ? (*
	`__˘y≥_touµî_loc
 ())[__c] : __c;

216 
	}
}

219 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


220 
	#tﬁowî
(
c
Ë
	`__tobody
 (c, 
tﬁowî
, *
	`__˘y≥_tﬁowî_loc
 (), (c))

	)

221 
	#touµî
(
c
Ë
	`__tobody
 (c, 
touµî
, *
	`__˘y≥_touµî_loc
 (), (c))

	)

224 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


225 
	#ißscii
(
c
Ë
	`__ißscii
 (c)

	)

226 
	#tﬂscii
(
c
Ë
	`__tﬂscii
 (c)

	)

228 
	#_tﬁowî
(
c
Ë((Ë(*
	`__˘y≥_tﬁowî_loc
 ())[(Ë(c)])

	)

229 
	#_touµî
(
c
Ë((Ë(*
	`__˘y≥_touµî_loc
 ())[(Ë(c)])

	)

235 #ifde‡
__USE_XOPEN2K8


237 
	~<bôs/ty≥s/loˇÀ_t.h
>

241 
	#__is˘y≥_l
(
c
, 
ty≥
, 
loˇÀ
) \

242 ((
loˇÀ
)->
__˘y≥_b
[(Ë(
c
)] & (Ë
ty≥
)

	)

244 
	#__ex˘y≥_l
(
«me
) \

245 
	`«me
 (, 
loˇÀ_t
Ë
__THROW


	)

251 
__ex˘y≥_l
 (
iß um_l
);

252 
__ex˘y≥_l
 (
ißÕha_l
);

253 
__ex˘y≥_l
 (
is˙ål_l
);

254 
__ex˘y≥_l
 (
isdigô_l
);

255 
__ex˘y≥_l
 (
i¶owî_l
);

256 
__ex˘y≥_l
 (
isgøph_l
);

257 
__ex˘y≥_l
 (
i•röt_l
);

258 
__ex˘y≥_l
 (
i•un˘_l
);

259 
__ex˘y≥_l
 (
is•a˚_l
);

260 
__ex˘y≥_l
 (
isuµî_l
);

261 
__ex˘y≥_l
 (
isxdigô_l
);

263 
__ex˘y≥_l
 (
isbœnk_l
);

267 
	$__tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

268 
	$tﬁowî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

271 
	$__touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

272 
	$touµî_l
 (
__c
, 
loˇÀ_t
 
__l
Ë
__THROW
;

274 #i‡
__GNUC__
 >2 && 
deföed
 
__OPTIMIZE__
 && !deföed 
__˝lu•lus


275 
	#__tﬁowî_l
(
c
, 
loˇÀ
) \

276 
	`__tobody
 (
c
, 
__tﬁowî_l
, (
loˇÀ
)->
__˘y≥_tﬁowî
, (c,ÜoˇÀ))

	)

277 
	#__touµî_l
(
c
, 
loˇÀ
) \

278 
	`__tobody
 (
c
, 
__touµî_l
, (
loˇÀ
)->
__˘y≥_touµî
, (c,ÜoˇÀ))

	)

279 
	#tﬁowî_l
(
c
, 
loˇÀ
Ë
	`__tﬁowî_l
 ((c), (loˇÀ))

	)

280 
	#touµî_l
(
c
, 
loˇÀ
Ë
	`__touµî_l
 ((c), (loˇÀ))

	)

284 #i‚de‡
__NO_CTYPE


285 
	#__iß um_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆnum
, (l))

	)

286 
	#__ißÕha_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISÆpha
, (l))

	)

287 
	#__is˙ål_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS˙ål
, (l))

	)

288 
	#__isdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISdigô
, (l))

	)

289 
	#__i¶owî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISlowî
, (l))

	)

290 
	#__isgøph_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISgøph
, (l))

	)

291 
	#__i•röt_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS¥öt
, (l))

	)

292 
	#__i•un˘_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISpun˘
, (l))

	)

293 
	#__is•a˚_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_IS•a˚
, (l))

	)

294 
	#__isuµî_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISuµî
, (l))

	)

295 
	#__isxdigô_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISxdigô
, (l))

	)

297 
	#__isbœnk_l
(
c
,
l
Ë
	`__is˘y≥_l
((c), 
_ISbœnk
, (l))

	)

299 #ifde‡
__USE_MISC


300 
	#__ißscii_l
(
c
,
l
Ë(÷), 
	`__ißscii
 (c))

	)

301 
	#__tﬂscii_l
(
c
,
l
Ë(÷), 
	`__tﬂscii
 (c))

	)

304 
	#iß um_l
(
c
,
l
Ë
	`__iß um_l
 ((c), (l))

	)

305 
	#ißÕha_l
(
c
,
l
Ë
	`__ißÕha_l
 ((c), (l))

	)

306 
	#is˙ål_l
(
c
,
l
Ë
	`__is˙ål_l
 ((c), (l))

	)

307 
	#isdigô_l
(
c
,
l
Ë
	`__isdigô_l
 ((c), (l))

	)

308 
	#i¶owî_l
(
c
,
l
Ë
	`__i¶owî_l
 ((c), (l))

	)

309 
	#isgøph_l
(
c
,
l
Ë
	`__isgøph_l
 ((c), (l))

	)

310 
	#i•röt_l
(
c
,
l
Ë
	`__i•röt_l
 ((c), (l))

	)

311 
	#i•un˘_l
(
c
,
l
Ë
	`__i•un˘_l
 ((c), (l))

	)

312 
	#is•a˚_l
(
c
,
l
Ë
	`__is•a˚_l
 ((c), (l))

	)

313 
	#isuµî_l
(
c
,
l
Ë
	`__isuµî_l
 ((c), (l))

	)

314 
	#isxdigô_l
(
c
,
l
Ë
	`__isxdigô_l
 ((c), (l))

	)

316 
	#isbœnk_l
(
c
,
l
Ë
	`__isbœnk_l
 ((c), (l))

	)

318 #ifde‡
__USE_MISC


319 
	#ißscii_l
(
c
,
l
Ë
	`__ißscii_l
 ((c), (l))

	)

320 
	#tﬂscii_l
(
c
,
l
Ë
	`__tﬂscii_l
 ((c), (l))

	)

327 
__END_DECLS


	@/usr/include/dirent.h

22 #i‚def 
_DIRENT_H


23 
	#_DIRENT_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


29 
	~<bôs/ty≥s.h
>

31 #ifde‡
__USE_XOPEN


32 #i‚de‡
__öo_t_deföed


33 #i‚de‡
__USE_FILE_OFFSET64


34 
__öo_t
 
	töo_t
;

36 
__öo64_t
 
	töo_t
;

38 
	#__öo_t_deföed


	)

40 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__öo64_t_deföed


41 
__öo64_t
 
	töo64_t
;

42 
	#__öo64_t_deföed


	)

61 
	~<bôs/dúít.h
>

63 #i‡
deföed
 
__USE_MISC
 && !deföed 
d_fûío


64 
	#d_öo
 
d_fûío


	)

81 #ifde‡
_DIRENT_HAVE_D_NAMLEN


82 
	#_D_EXACT_NAMLEN
(
d
Ë((d)->
d_«mÀn
)

	)

83 
	#_D_ALLOC_NAMLEN
(
d
Ë(
	`_D_EXACT_NAMLEN
 (dË+ 1)

	)

85 
	#_D_EXACT_NAMLEN
(
d
Ë(
	`°æí
 ((d)->
d_«me
))

	)

86 #ifde‡
_DIRENT_HAVE_D_RECLEN


87 
	#_D_ALLOC_NAMLEN
(
d
Ë(((*Ë(dË+ (d)->
d_ª˛í
Ë- &(d)->
d_«me
[0])

	)

89 
	#_D_ALLOC_NAMLEN
(
d
Ë( (d)->
d_«me
 > 1 ?  (d)->d_name \

90 : 
	`_D_EXACT_NAMLEN
 (
d
Ë+ 1)

	)

95 #ifde‡
__USE_MISC


99 
	mDT_UNKNOWN
 = 0,

100 
	#DT_UNKNOWN
 
DT_UNKNOWN


	)

101 
	mDT_FIFO
 = 1,

102 
	#DT_FIFO
 
DT_FIFO


	)

103 
	mDT_CHR
 = 2,

104 
	#DT_CHR
 
DT_CHR


	)

105 
	mDT_DIR
 = 4,

106 
	#DT_DIR
 
DT_DIR


	)

107 
	mDT_BLK
 = 6,

108 
	#DT_BLK
 
DT_BLK


	)

109 
	mDT_REG
 = 8,

110 
	#DT_REG
 
DT_REG


	)

111 
	mDT_LNK
 = 10,

112 
	#DT_LNK
 
DT_LNK


	)

113 
	mDT_SOCK
 = 12,

114 
	#DT_SOCK
 
DT_SOCK


	)

115 
	mDT_WHT
 = 14

116 
	#DT_WHT
 
DT_WHT


	)

120 
	#IFTODT
(
mode
Ë(((modeË& 0170000Ë>> 12)

	)

121 
	#DTTOIF
(
dúty≥
Ë((dúty≥Ë<< 12)

	)

127 
__dú°ªam
 
	tDIR
;

134 
DIR
 *
	$›ídú
 (c⁄° *
__«me
Ë
	`__n⁄nuŒ
 ((1));

136 #ifde‡
__USE_XOPEN2K8


141 
DIR
 *
	`fd›ídú
 (
__fd
);

149 
	$˛o£dú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

161 #i‚de‡
__USE_FILE_OFFSET64


162 
dúít
 *
	$ªaddú
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

164 #ifde‡
__REDIRECT


165 
dúít
 *
	`__REDIRECT
 (
ªaddú
, (
DIR
 *
__dúp
), 
ªaddú64
)

166 
	`__n⁄nuŒ
 ((1));

168 
	#ªaddú
 
ªaddú64


	)

172 #ifde‡
__USE_LARGEFILE64


173 
dúít64
 *
	$ªaddú64
 (
DIR
 *
__dúp
Ë
	`__n⁄nuŒ
 ((1));

176 #ifde‡
__USE_POSIX


182 #i‚de‡
__USE_FILE_OFFSET64


183 
	$ªaddú_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

184 
dúít
 *
__ª°ri˘
 
__íåy
,

185 
dúít
 **
__ª°ri˘
 
__ªsu…
)

186 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

188 #ifde‡
__REDIRECT


189 
	`__REDIRECT
 (
ªaddú_r
,

190 (
DIR
 *
__ª°ri˘
 
__dúp
,

191 
dúít
 *
__ª°ri˘
 
__íåy
,

192 
dúít
 **
__ª°ri˘
 
__ªsu…
),

193 
ªaddú64_r
)

194 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

196 
	#ªaddú_r
 
ªaddú64_r


	)

200 #ifde‡
__USE_LARGEFILE64


201 
	$ªaddú64_r
 (
DIR
 *
__ª°ri˘
 
__dúp
,

202 
dúít64
 *
__ª°ri˘
 
__íåy
,

203 
dúít64
 **
__ª°ri˘
 
__ªsu…
)

204 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__©åibuã_dïªˇãd__
;

209 
	$ªwöddú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

211 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


212 
	~<bôs/ty≥s.h
>

215 
	$£ekdú
 (
DIR
 *
__dúp
, 
__pos
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

218 
	$ãŒdú
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

221 #ifde‡
__USE_XOPEN2K8


224 
	$dúfd
 (
DIR
 *
__dúp
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

226 #i‡
deföed
 
__OPTIMIZE__
 && deföed 
_DIR_dúfd


227 
	#dúfd
(
dúp
Ë
	`_DIR_dúfd
 (dúp)

	)

230 #ifde‡
__USE_MISC


231 #i‚de‡
MAXNAMLEN


233 
	~<bôs/posix1_lim.h
>

236 #ifde‡
NAME_MAX


237 
	#MAXNAMLEN
 
NAME_MAX


	)

239 
	#MAXNAMLEN
 255

	)

244 
	#__√ed_size_t


	)

245 
	~<°ddef.h
>

254 #i‚de‡
__USE_FILE_OFFSET64


255 
	$sˇndú
 (c⁄° *
__ª°ri˘
 
__dú
,

256 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

257 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

258 (*
__cmp
Ë(c⁄° 
dúít
 **,

259 c⁄° 
dúít
 **))

260 
	`__n⁄nuŒ
 ((1, 2));

262 #ifde‡
__REDIRECT


263 
	`__REDIRECT
 (
sˇndú
,

264 (c⁄° *
__ª°ri˘
 
__dú
,

265 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

266 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

267 (*
__cmp
Ë(c⁄° 
dúít
 **,

268 c⁄° 
dúít
 **)),

269 
sˇndú64
Ë
	`__n⁄nuŒ
 ((1, 2));

271 
	#sˇndú
 
sˇndú64


	)

275 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


278 
	$sˇndú64
 (c⁄° *
__ª°ri˘
 
__dú
,

279 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

280 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

281 (*
__cmp
Ë(c⁄° 
dúít64
 **,

282 c⁄° 
dúít64
 **))

283 
	`__n⁄nuŒ
 ((1, 2));

286 #ifde‡
__USE_GNU


292 #i‚de‡
__USE_FILE_OFFSET64


293 
	$sˇndú©
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

294 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

295 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

296 (*
__cmp
Ë(c⁄° 
dúít
 **,

297 c⁄° 
dúít
 **))

298 
	`__n⁄nuŒ
 ((2, 3));

300 #ifde‡
__REDIRECT


301 
	`__REDIRECT
 (
sˇndú©
,

302 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

303 
dúít
 ***
__ª°ri˘
 
__«mñi°
,

304 (*
__£À˘‹
Ë(c⁄° 
dúít
 *),

305 (*
__cmp
Ë(c⁄° 
dúít
 **,

306 c⁄° 
dúít
 **)),

307 
sˇndú©64
Ë
	`__n⁄nuŒ
 ((2, 3));

309 
	#sˇndú©
 
sˇndú©64


	)

315 
	$sˇndú©64
 (
__dfd
, c⁄° *
__ª°ri˘
 
__dú
,

316 
dúít64
 ***
__ª°ri˘
 
__«mñi°
,

317 (*
__£À˘‹
Ë(c⁄° 
dúít64
 *),

318 (*
__cmp
Ë(c⁄° 
dúít64
 **,

319 c⁄° 
dúít64
 **))

320 
	`__n⁄nuŒ
 ((2, 3));

324 #i‚de‡
__USE_FILE_OFFSET64


325 
	$Æphas‹t
 (c⁄° 
dúít
 **
__e1
,

326 c⁄° 
dúít
 **
__e2
)

327 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

329 #ifde‡
__REDIRECT


330 
	`__REDIRECT_NTH
 (
Æphas‹t
,

331 (c⁄° 
dúít
 **
__e1
,

332 c⁄° 
dúít
 **
__e2
),

333 
Æphas‹t64
Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 
	#Æphas‹t
 
Æphas‹t64


	)

339 #i‡
deföed
 
__USE_GNU
 && deföed 
__USE_LARGEFILE64


340 
	$Æphas‹t64
 (c⁄° 
dúít64
 **
__e1
,

341 c⁄° 
dúít64
 **
__e2
)

342 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

347 #ifde‡
__USE_MISC


352 #i‚de‡
__USE_FILE_OFFSET64


353 
__ssize_t
 
	$gëdúíåõs
 (
__fd
, *
__ª°ri˘
 
__buf
,

354 
size_t
 
__nbyãs
,

355 
__off_t
 *
__ª°ri˘
 
__ba£p
)

356 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

358 #ifde‡
__REDIRECT


359 
__ssize_t
 
	`__REDIRECT_NTH
 (
gëdúíåõs
,

360 (
__fd
, *
__ª°ri˘
 
__buf
,

361 
size_t
 
__nbyãs
,

362 
__off64_t
 *
__ª°ri˘
 
__ba£p
),

363 
gëdúíåõs64
Ë
	`__n⁄nuŒ
 ((2, 4));

365 
	#gëdúíåõs
 
gëdúíåõs64


	)

369 #ifde‡
__USE_LARGEFILE64


370 
__ssize_t
 
	$gëdúíåõs64
 (
__fd
, *
__ª°ri˘
 
__buf
,

371 
size_t
 
__nbyãs
,

372 
__off64_t
 *
__ª°ri˘
 
__ba£p
)

373 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

377 #ifde‡
__USE_GNU


379 #i‚de‡
__USE_FILE_OFFSET64


380 
	$vîsi⁄s‹t
 (c⁄° 
dúít
 **
__e1
,

381 c⁄° 
dúít
 **
__e2
)

382 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

384 #ifde‡
__REDIRECT


385 
	`__REDIRECT_NTH
 (
vîsi⁄s‹t
,

386 (c⁄° 
dúít
 **
__e1
,

387 c⁄° 
dúít
 **
__e2
),

388 
vîsi⁄s‹t64
)

389 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

391 
	#vîsi⁄s‹t
 
vîsi⁄s‹t64


	)

395 #ifde‡
__USE_LARGEFILE64


396 
	$vîsi⁄s‹t64
 (c⁄° 
dúít64
 **
__e1
,

397 c⁄° 
dúít64
 **
__e2
)

398 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

402 
__END_DECLS


404 
	~<bôs/dúít_ext.h
>

	@/usr/include/elf.h

19 #i‚de‡
_ELF_H


20 
	#_ELF_H
 1

	)

24 
	~<°döt.h
>

27 
uöt16_t
 
	tElf32_HÆf
;

28 
uöt16_t
 
	tElf64_HÆf
;

31 
uöt32_t
 
	tElf32_W‹d
;

32 
öt32_t
 
	tElf32_Sw‹d
;

33 
uöt32_t
 
	tElf64_W‹d
;

34 
öt32_t
 
	tElf64_Sw‹d
;

37 
uöt64_t
 
	tElf32_Xw‹d
;

38 
öt64_t
 
	tElf32_Sxw‹d
;

39 
uöt64_t
 
	tElf64_Xw‹d
;

40 
öt64_t
 
	tElf64_Sxw‹d
;

43 
uöt32_t
 
	tElf32_Addr
;

44 
uöt64_t
 
	tElf64_Addr
;

47 
uöt32_t
 
	tElf32_Off
;

48 
uöt64_t
 
	tElf64_Off
;

51 
uöt16_t
 
	tElf32_Se˘i⁄
;

52 
uöt16_t
 
	tElf64_Se˘i⁄
;

55 
Elf32_HÆf
 
	tElf32_Vîsym
;

56 
Elf64_HÆf
 
	tElf64_Vîsym
;

61 
	#EI_NIDENT
 (16)

	)

65 
	me_idít
[
EI_NIDENT
];

66 
Elf32_HÆf
 
	me_ty≥
;

67 
Elf32_HÆf
 
	me_machöe
;

68 
Elf32_W‹d
 
	me_vîsi⁄
;

69 
Elf32_Addr
 
	me_íåy
;

70 
Elf32_Off
 
	me_phoff
;

71 
Elf32_Off
 
	me_shoff
;

72 
Elf32_W‹d
 
	me_Êags
;

73 
Elf32_HÆf
 
	me_ehsize
;

74 
Elf32_HÆf
 
	me_phítsize
;

75 
Elf32_HÆf
 
	me_phnum
;

76 
Elf32_HÆf
 
	me_shítsize
;

77 
Elf32_HÆf
 
	me_shnum
;

78 
Elf32_HÆf
 
	me_sh°∫dx
;

79 } 
	tElf32_Ehdr
;

83 
	me_idít
[
EI_NIDENT
];

84 
Elf64_HÆf
 
	me_ty≥
;

85 
Elf64_HÆf
 
	me_machöe
;

86 
Elf64_W‹d
 
	me_vîsi⁄
;

87 
Elf64_Addr
 
	me_íåy
;

88 
Elf64_Off
 
	me_phoff
;

89 
Elf64_Off
 
	me_shoff
;

90 
Elf64_W‹d
 
	me_Êags
;

91 
Elf64_HÆf
 
	me_ehsize
;

92 
Elf64_HÆf
 
	me_phítsize
;

93 
Elf64_HÆf
 
	me_phnum
;

94 
Elf64_HÆf
 
	me_shítsize
;

95 
Elf64_HÆf
 
	me_shnum
;

96 
Elf64_HÆf
 
	me_sh°∫dx
;

97 } 
	tElf64_Ehdr
;

103 
	#EI_MAG0
 0

	)

104 
	#ELFMAG0
 0x7‡

	)

106 
	#EI_MAG1
 1

	)

107 
	#ELFMAG1
 'E'

	)

109 
	#EI_MAG2
 2

	)

110 
	#ELFMAG2
 'L'

	)

112 
	#EI_MAG3
 3

	)

113 
	#ELFMAG3
 'F'

	)

116 
	#ELFMAG
 "\177ELF"

	)

117 
	#SELFMAG
 4

	)

119 
	#EI_CLASS
 4

	)

120 
	#ELFCLASSNONE
 0

	)

121 
	#ELFCLASS32
 1

	)

122 
	#ELFCLASS64
 2

	)

123 
	#ELFCLASSNUM
 3

	)

125 
	#EI_DATA
 5

	)

126 
	#ELFDATANONE
 0

	)

127 
	#ELFDATA2LSB
 1

	)

128 
	#ELFDATA2MSB
 2

	)

129 
	#ELFDATANUM
 3

	)

131 
	#EI_VERSION
 6

	)

134 
	#EI_OSABI
 7

	)

135 
	#ELFOSABI_NONE
 0

	)

136 
	#ELFOSABI_SYSV
 0

	)

137 
	#ELFOSABI_HPUX
 1

	)

138 
	#ELFOSABI_NETBSD
 2

	)

139 
	#ELFOSABI_GNU
 3

	)

140 
	#ELFOSABI_LINUX
 
ELFOSABI_GNU


	)

141 
	#ELFOSABI_SOLARIS
 6

	)

142 
	#ELFOSABI_AIX
 7

	)

143 
	#ELFOSABI_IRIX
 8

	)

144 
	#ELFOSABI_FREEBSD
 9

	)

145 
	#ELFOSABI_TRU64
 10

	)

146 
	#ELFOSABI_MODESTO
 11

	)

147 
	#ELFOSABI_OPENBSD
 12

	)

148 
	#ELFOSABI_ARM_AEABI
 64

	)

149 
	#ELFOSABI_ARM
 97

	)

150 
	#ELFOSABI_STANDALONE
 255

	)

152 
	#EI_ABIVERSION
 8

	)

154 
	#EI_PAD
 9

	)

158 
	#ET_NONE
 0

	)

159 
	#ET_REL
 1

	)

160 
	#ET_EXEC
 2

	)

161 
	#ET_DYN
 3

	)

162 
	#ET_CORE
 4

	)

163 
	#ET_NUM
 5

	)

164 
	#ET_LOOS
 0x„00

	)

165 
	#ET_HIOS
 0x„f‡

	)

166 
	#ET_LOPROC
 0xff00

	)

167 
	#ET_HIPROC
 0xfff‡

	)

171 
	#EM_NONE
 0

	)

172 
	#EM_M32
 1

	)

173 
	#EM_SPARC
 2

	)

174 
	#EM_386
 3

	)

175 
	#EM_68K
 4

	)

176 
	#EM_88K
 5

	)

177 
	#EM_IAMCU
 6

	)

178 
	#EM_860
 7

	)

179 
	#EM_MIPS
 8

	)

180 
	#EM_S370
 9

	)

181 
	#EM_MIPS_RS3_LE
 10

	)

183 
	#EM_PARISC
 15

	)

185 
	#EM_VPP500
 17

	)

186 
	#EM_SPARC32PLUS
 18

	)

187 
	#EM_960
 19

	)

188 
	#EM_PPC
 20

	)

189 
	#EM_PPC64
 21

	)

190 
	#EM_S390
 22

	)

191 
	#EM_SPU
 23

	)

193 
	#EM_V800
 36

	)

194 
	#EM_FR20
 37

	)

195 
	#EM_RH32
 38

	)

196 
	#EM_RCE
 39

	)

197 
	#EM_ARM
 40

	)

198 
	#EM_FAKE_ALPHA
 41

	)

199 
	#EM_SH
 42

	)

200 
	#EM_SPARCV9
 43

	)

201 
	#EM_TRICORE
 44

	)

202 
	#EM_ARC
 45

	)

203 
	#EM_H8_300
 46

	)

204 
	#EM_H8_300H
 47

	)

205 
	#EM_H8S
 48

	)

206 
	#EM_H8_500
 49

	)

207 
	#EM_IA_64
 50

	)

208 
	#EM_MIPS_X
 51

	)

209 
	#EM_COLDFIRE
 52

	)

210 
	#EM_68HC12
 53

	)

211 
	#EM_MMA
 54

	)

212 
	#EM_PCP
 55

	)

213 
	#EM_NCPU
 56

	)

214 
	#EM_NDR1
 57

	)

215 
	#EM_STARCORE
 58

	)

216 
	#EM_ME16
 59

	)

217 
	#EM_ST100
 60

	)

218 
	#EM_TINYJ
 61

	)

219 
	#EM_X86_64
 62

	)

220 
	#EM_PDSP
 63

	)

221 
	#EM_PDP10
 64

	)

222 
	#EM_PDP11
 65

	)

223 
	#EM_FX66
 66

	)

224 
	#EM_ST9PLUS
 67

	)

225 
	#EM_ST7
 68

	)

226 
	#EM_68HC16
 69

	)

227 
	#EM_68HC11
 70

	)

228 
	#EM_68HC08
 71

	)

229 
	#EM_68HC05
 72

	)

230 
	#EM_SVX
 73

	)

231 
	#EM_ST19
 74

	)

232 
	#EM_VAX
 75

	)

233 
	#EM_CRIS
 76

	)

234 
	#EM_JAVELIN
 77

	)

235 
	#EM_FIREPATH
 78

	)

236 
	#EM_ZSP
 79

	)

237 
	#EM_MMIX
 80

	)

238 
	#EM_HUANY
 81

	)

239 
	#EM_PRISM
 82

	)

240 
	#EM_AVR
 83

	)

241 
	#EM_FR30
 84

	)

242 
	#EM_D10V
 85

	)

243 
	#EM_D30V
 86

	)

244 
	#EM_V850
 87

	)

245 
	#EM_M32R
 88

	)

246 
	#EM_MN10300
 89

	)

247 
	#EM_MN10200
 90

	)

248 
	#EM_PJ
 91

	)

249 
	#EM_OPENRISC
 92

	)

250 
	#EM_ARC_COMPACT
 93

	)

251 
	#EM_XTENSA
 94

	)

252 
	#EM_VIDEOCORE
 95

	)

253 
	#EM_TMM_GPP
 96

	)

254 
	#EM_NS32K
 97

	)

255 
	#EM_TPC
 98

	)

256 
	#EM_SNP1K
 99

	)

257 
	#EM_ST200
 100

	)

258 
	#EM_IP2K
 101

	)

259 
	#EM_MAX
 102

	)

260 
	#EM_CR
 103

	)

261 
	#EM_F2MC16
 104

	)

262 
	#EM_MSP430
 105

	)

263 
	#EM_BLACKFIN
 106

	)

264 
	#EM_SE_C33
 107

	)

265 
	#EM_SEP
 108

	)

266 
	#EM_ARCA
 109

	)

267 
	#EM_UNICORE
 110

	)

268 
	#EM_EXCESS
 111

	)

269 
	#EM_DXP
 112

	)

270 
	#EM_ALTERA_NIOS2
 113

	)

271 
	#EM_CRX
 114

	)

272 
	#EM_XGATE
 115

	)

273 
	#EM_C166
 116

	)

274 
	#EM_M16C
 117

	)

275 
	#EM_DSPIC30F
 118

	)

276 
	#EM_CE
 119

	)

277 
	#EM_M32C
 120

	)

279 
	#EM_TSK3000
 131

	)

280 
	#EM_RS08
 132

	)

281 
	#EM_SHARC
 133

	)

282 
	#EM_ECOG2
 134

	)

283 
	#EM_SCORE7
 135

	)

284 
	#EM_DSP24
 136

	)

285 
	#EM_VIDEOCORE3
 137

	)

286 
	#EM_LATTICEMICO32
 138

	)

287 
	#EM_SE_C17
 139

	)

288 
	#EM_TI_C6000
 140

	)

289 
	#EM_TI_C2000
 141

	)

290 
	#EM_TI_C5500
 142

	)

291 
	#EM_TI_ARP32
 143

	)

292 
	#EM_TI_PRU
 144

	)

294 
	#EM_MMDSP_PLUS
 160

	)

295 
	#EM_CYPRESS_M8C
 161

	)

296 
	#EM_R32C
 162

	)

297 
	#EM_TRIMEDIA
 163

	)

298 
	#EM_QDSP6
 164

	)

299 
	#EM_8051
 165

	)

300 
	#EM_STXP7X
 166

	)

301 
	#EM_NDS32
 167

	)

302 
	#EM_ECOG1X
 168

	)

303 
	#EM_MAXQ30
 169

	)

304 
	#EM_XIMO16
 170

	)

305 
	#EM_MANIK
 171

	)

306 
	#EM_CRAYNV2
 172

	)

307 
	#EM_RX
 173

	)

308 
	#EM_METAG
 174

	)

309 
	#EM_MCST_ELBRUS
 175

	)

310 
	#EM_ECOG16
 176

	)

311 
	#EM_CR16
 177

	)

312 
	#EM_ETPU
 178

	)

313 
	#EM_SLE9X
 179

	)

314 
	#EM_L10M
 180

	)

315 
	#EM_K10M
 181

	)

317 
	#EM_AARCH64
 183

	)

319 
	#EM_AVR32
 185

	)

320 
	#EM_STM8
 186

	)

321 
	#EM_TILE64
 187

	)

322 
	#EM_TILEPRO
 188

	)

323 
	#EM_MICROBLAZE
 189

	)

324 
	#EM_CUDA
 190

	)

325 
	#EM_TILEGX
 191

	)

326 
	#EM_CLOUDSHIELD
 192

	)

327 
	#EM_COREA_1ST
 193

	)

328 
	#EM_COREA_2ND
 194

	)

329 
	#EM_ARCV2
 195

	)

330 
	#EM_OPEN8
 196

	)

331 
	#EM_RL78
 197

	)

332 
	#EM_VIDEOCORE5
 198

	)

333 
	#EM_78KOR
 199

	)

334 
	#EM_56800EX
 200

	)

335 
	#EM_BA1
 201

	)

336 
	#EM_BA2
 202

	)

337 
	#EM_XCORE
 203

	)

338 
	#EM_MCHP_PIC
 204

	)

339 
	#EM_INTELGT
 205

	)

341 
	#EM_KM32
 210

	)

342 
	#EM_KMX32
 211

	)

343 
	#EM_EMX16
 212

	)

344 
	#EM_EMX8
 213

	)

345 
	#EM_KVARC
 214

	)

346 
	#EM_CDP
 215

	)

347 
	#EM_COGE
 216

	)

348 
	#EM_COOL
 217

	)

349 
	#EM_NORC
 218

	)

350 
	#EM_CSR_KALIMBA
 219

	)

351 
	#EM_Z80
 220

	)

352 
	#EM_VISIUM
 221

	)

353 
	#EM_FT32
 222

	)

354 
	#EM_MOXIE
 223

	)

355 
	#EM_AMDGPU
 224

	)

357 
	#EM_RISCV
 243

	)

359 
	#EM_BPF
 247

	)

360 
	#EM_CSKY
 252

	)

362 
	#EM_NUM
 253

	)

366 
	#EM_ARC_A5
 
EM_ARC_COMPACT


	)

372 
	#EM_ALPHA
 0x9026

	)

376 
	#EV_NONE
 0

	)

377 
	#EV_CURRENT
 1

	)

378 
	#EV_NUM
 2

	)

384 
Elf32_W‹d
 
	msh_«me
;

385 
Elf32_W‹d
 
	msh_ty≥
;

386 
Elf32_W‹d
 
	msh_Êags
;

387 
Elf32_Addr
 
	msh_addr
;

388 
Elf32_Off
 
	msh_off£t
;

389 
Elf32_W‹d
 
	msh_size
;

390 
Elf32_W‹d
 
	msh_lök
;

391 
Elf32_W‹d
 
	msh_öfo
;

392 
Elf32_W‹d
 
	msh_addølign
;

393 
Elf32_W‹d
 
	msh_ítsize
;

394 } 
	tElf32_Shdr
;

398 
Elf64_W‹d
 
	msh_«me
;

399 
Elf64_W‹d
 
	msh_ty≥
;

400 
Elf64_Xw‹d
 
	msh_Êags
;

401 
Elf64_Addr
 
	msh_addr
;

402 
Elf64_Off
 
	msh_off£t
;

403 
Elf64_Xw‹d
 
	msh_size
;

404 
Elf64_W‹d
 
	msh_lök
;

405 
Elf64_W‹d
 
	msh_öfo
;

406 
Elf64_Xw‹d
 
	msh_addølign
;

407 
Elf64_Xw‹d
 
	msh_ítsize
;

408 } 
	tElf64_Shdr
;

412 
	#SHN_UNDEF
 0

	)

413 
	#SHN_LORESERVE
 0xff00

	)

414 
	#SHN_LOPROC
 0xff00

	)

415 
	#SHN_BEFORE
 0xff00

	)

417 
	#SHN_AFTER
 0xff01

	)

419 
	#SHN_HIPROC
 0xff1‡

	)

420 
	#SHN_LOOS
 0xff20

	)

421 
	#SHN_HIOS
 0xff3‡

	)

422 
	#SHN_ABS
 0xfff1

	)

423 
	#SHN_COMMON
 0xfff2

	)

424 
	#SHN_XINDEX
 0xfff‡

	)

425 
	#SHN_HIRESERVE
 0xfff‡

	)

429 
	#SHT_NULL
 0

	)

430 
	#SHT_PROGBITS
 1

	)

431 
	#SHT_SYMTAB
 2

	)

432 
	#SHT_STRTAB
 3

	)

433 
	#SHT_RELA
 4

	)

434 
	#SHT_HASH
 5

	)

435 
	#SHT_DYNAMIC
 6

	)

436 
	#SHT_NOTE
 7

	)

437 
	#SHT_NOBITS
 8

	)

438 
	#SHT_REL
 9

	)

439 
	#SHT_SHLIB
 10

	)

440 
	#SHT_DYNSYM
 11

	)

441 
	#SHT_INIT_ARRAY
 14

	)

442 
	#SHT_FINI_ARRAY
 15

	)

443 
	#SHT_PREINIT_ARRAY
 16

	)

444 
	#SHT_GROUP
 17

	)

445 
	#SHT_SYMTAB_SHNDX
 18

	)

446 
	#SHT_NUM
 19

	)

447 
	#SHT_LOOS
 0x60000000

	)

448 
	#SHT_GNU_ATTRIBUTES
 0x6ffffff5

	)

449 
	#SHT_GNU_HASH
 0x6ffffff6

	)

450 
	#SHT_GNU_LIBLIST
 0x6ffffff7

	)

451 
	#SHT_CHECKSUM
 0x6ffffff8

	)

452 
	#SHT_LOSUNW
 0x6fffffÁ

	)

453 
	#SHT_SUNW_move
 0x6fffffÁ

	)

454 
	#SHT_SUNW_COMDAT
 0x6ffffffb

	)

455 
	#SHT_SUNW_symöfo
 0x6ffffffc

	)

456 
	#SHT_GNU_vîdef
 0x6ffffffd

	)

457 
	#SHT_GNU_vî√ed
 0x6fffff„

	)

458 
	#SHT_GNU_vîsym
 0x6ffffff‡

	)

459 
	#SHT_HISUNW
 0x6ffffff‡

	)

460 
	#SHT_HIOS
 0x6ffffff‡

	)

461 
	#SHT_LOPROC
 0x70000000

	)

462 
	#SHT_HIPROC
 0x7ffffff‡

	)

463 
	#SHT_LOUSER
 0x80000000

	)

464 
	#SHT_HIUSER
 0x8ffffff‡

	)

468 
	#SHF_WRITE
 (1 << 0Ë

	)

469 
	#SHF_ALLOC
 (1 << 1Ë

	)

470 
	#SHF_EXECINSTR
 (1 << 2Ë

	)

471 
	#SHF_MERGE
 (1 << 4Ë

	)

472 
	#SHF_STRINGS
 (1 << 5Ë

	)

473 
	#SHF_INFO_LINK
 (1 << 6Ë

	)

474 
	#SHF_LINK_ORDER
 (1 << 7Ë

	)

475 
	#SHF_OS_NONCONFORMING
 (1 << 8Ë

	)

477 
	#SHF_GROUP
 (1 << 9Ë

	)

478 
	#SHF_TLS
 (1 << 10Ë

	)

479 
	#SHF_COMPRESSED
 (1 << 11Ë

	)

480 
	#SHF_MASKOS
 0x0ff00000

	)

481 
	#SHF_MASKPROC
 0xf0000000

	)

482 
	#SHF_GNU_RETAIN
 (1 << 21Ë

	)

483 
	#SHF_ORDERED
 (1 << 30Ë

	)

485 
	#SHF_EXCLUDE
 (1U << 31Ë

	)

492 
Elf32_W‹d
 
	mch_ty≥
;

493 
Elf32_W‹d
 
	mch_size
;

494 
Elf32_W‹d
 
	mch_addølign
;

495 } 
	tElf32_Chdr
;

499 
Elf64_W‹d
 
	mch_ty≥
;

500 
Elf64_W‹d
 
	mch_ª£rved
;

501 
Elf64_Xw‹d
 
	mch_size
;

502 
Elf64_Xw‹d
 
	mch_addølign
;

503 } 
	tElf64_Chdr
;

506 
	#ELFCOMPRESS_ZLIB
 1

	)

507 
	#ELFCOMPRESS_LOOS
 0x60000000

	)

508 
	#ELFCOMPRESS_HIOS
 0x6ffffff‡

	)

509 
	#ELFCOMPRESS_LOPROC
 0x70000000

	)

510 
	#ELFCOMPRESS_HIPROC
 0x7ffffff‡

	)

513 
	#GRP_COMDAT
 0x1

	)

519 
Elf32_W‹d
 
	m°_«me
;

520 
Elf32_Addr
 
	m°_vÆue
;

521 
Elf32_W‹d
 
	m°_size
;

522 
	m°_öfo
;

523 
	m°_Ÿhî
;

524 
Elf32_Se˘i⁄
 
	m°_shndx
;

525 } 
	tElf32_Sym
;

529 
Elf64_W‹d
 
	m°_«me
;

530 
	m°_öfo
;

531 
	m°_Ÿhî
;

532 
Elf64_Se˘i⁄
 
	m°_shndx
;

533 
Elf64_Addr
 
	m°_vÆue
;

534 
Elf64_Xw‹d
 
	m°_size
;

535 } 
	tElf64_Sym
;

542 
Elf32_HÆf
 
	msi_boundto
;

543 
Elf32_HÆf
 
	msi_Êags
;

544 } 
	tElf32_Symöfo
;

548 
Elf64_HÆf
 
	msi_boundto
;

549 
Elf64_HÆf
 
	msi_Êags
;

550 } 
	tElf64_Symöfo
;

553 
	#SYMINFO_BT_SELF
 0xfff‡

	)

554 
	#SYMINFO_BT_PARENT
 0xff„

	)

555 
	#SYMINFO_BT_LOWRESERVE
 0xff00

	)

558 
	#SYMINFO_FLG_DIRECT
 0x0001

	)

559 
	#SYMINFO_FLG_PASSTHRU
 0x0002

	)

560 
	#SYMINFO_FLG_COPY
 0x0004

	)

561 
	#SYMINFO_FLG_LAZYLOAD
 0x0008

	)

564 
	#SYMINFO_NONE
 0

	)

565 
	#SYMINFO_CURRENT
 1

	)

566 
	#SYMINFO_NUM
 2

	)

571 
	#ELF32_ST_BIND
(
vÆ
Ë(((Ë(vÆ)Ë>> 4)

	)

572 
	#ELF32_ST_TYPE
(
vÆ
Ë((vÆË& 0xf)

	)

573 
	#ELF32_ST_INFO
(
böd
, 
ty≥
Ë(((bödË<< 4Ë+ (—y≥Ë& 0xf))

	)

576 
	#ELF64_ST_BIND
(
vÆ
Ë
	`ELF32_ST_BIND
 (vÆ)

	)

577 
	#ELF64_ST_TYPE
(
vÆ
Ë
	`ELF32_ST_TYPE
 (vÆ)

	)

578 
	#ELF64_ST_INFO
(
böd
, 
ty≥
Ë
	`ELF32_ST_INFO
 ((böd), (ty≥))

	)

582 
	#STB_LOCAL
 0

	)

583 
	#STB_GLOBAL
 1

	)

584 
	#STB_WEAK
 2

	)

585 
	#STB_NUM
 3

	)

586 
	#STB_LOOS
 10

	)

587 
	#STB_GNU_UNIQUE
 10

	)

588 
	#STB_HIOS
 12

	)

589 
	#STB_LOPROC
 13

	)

590 
	#STB_HIPROC
 15

	)

594 
	#STT_NOTYPE
 0

	)

595 
	#STT_OBJECT
 1

	)

596 
	#STT_FUNC
 2

	)

597 
	#STT_SECTION
 3

	)

598 
	#STT_FILE
 4

	)

599 
	#STT_COMMON
 5

	)

600 
	#STT_TLS
 6

	)

601 
	#STT_NUM
 7

	)

602 
	#STT_LOOS
 10

	)

603 
	#STT_GNU_IFUNC
 10

	)

604 
	#STT_HIOS
 12

	)

605 
	#STT_LOPROC
 13

	)

606 
	#STT_HIPROC
 15

	)

613 
	#STN_UNDEF
 0

	)

618 
	#ELF32_ST_VISIBILITY
(
o
Ë((oË& 0x03)

	)

621 
	#ELF64_ST_VISIBILITY
(
o
Ë
	`ELF32_ST_VISIBILITY
 (o)

	)

624 
	#STV_DEFAULT
 0

	)

625 
	#STV_INTERNAL
 1

	)

626 
	#STV_HIDDEN
 2

	)

627 
	#STV_PROTECTED
 3

	)

634 
Elf32_Addr
 
	mr_off£t
;

635 
Elf32_W‹d
 
	mr_öfo
;

636 } 
	tElf32_Rñ
;

645 
Elf64_Addr
 
	mr_off£t
;

646 
Elf64_Xw‹d
 
	mr_öfo
;

647 } 
	tElf64_Rñ
;

653 
Elf32_Addr
 
	mr_off£t
;

654 
Elf32_W‹d
 
	mr_öfo
;

655 
Elf32_Sw‹d
 
	mr_addíd
;

656 } 
	tElf32_Rña
;

660 
Elf64_Addr
 
	mr_off£t
;

661 
Elf64_Xw‹d
 
	mr_öfo
;

662 
Elf64_Sxw‹d
 
	mr_addíd
;

663 } 
	tElf64_Rña
;

667 
	#ELF32_R_SYM
(
vÆ
Ë((vÆË>> 8)

	)

668 
	#ELF32_R_TYPE
(
vÆ
Ë((vÆË& 0xff)

	)

669 
	#ELF32_R_INFO
(
sym
, 
ty≥
Ë(((symË<< 8Ë+ (—y≥Ë& 0xff))

	)

671 
	#ELF64_R_SYM
(
i
Ë((iË>> 32)

	)

672 
	#ELF64_R_TYPE
(
i
Ë((iË& 0xffffffff)

	)

673 
	#ELF64_R_INFO
(
sym
,
ty≥
Ë((((
Elf64_Xw‹d
Ë(sym)Ë<< 32Ë+ (ty≥))

	)

679 
Elf32_W‹d
 
	mp_ty≥
;

680 
Elf32_Off
 
	mp_off£t
;

681 
Elf32_Addr
 
	mp_vaddr
;

682 
Elf32_Addr
 
	mp_∑ddr
;

683 
Elf32_W‹d
 
	mp_fûesz
;

684 
Elf32_W‹d
 
	mp_memsz
;

685 
Elf32_W‹d
 
	mp_Êags
;

686 
Elf32_W‹d
 
	mp_Æign
;

687 } 
	tElf32_Phdr
;

691 
Elf64_W‹d
 
	mp_ty≥
;

692 
Elf64_W‹d
 
	mp_Êags
;

693 
Elf64_Off
 
	mp_off£t
;

694 
Elf64_Addr
 
	mp_vaddr
;

695 
Elf64_Addr
 
	mp_∑ddr
;

696 
Elf64_Xw‹d
 
	mp_fûesz
;

697 
Elf64_Xw‹d
 
	mp_memsz
;

698 
Elf64_Xw‹d
 
	mp_Æign
;

699 } 
	tElf64_Phdr
;

705 
	#PN_XNUM
 0xffff

	)

709 
	#PT_NULL
 0

	)

710 
	#PT_LOAD
 1

	)

711 
	#PT_DYNAMIC
 2

	)

712 
	#PT_INTERP
 3

	)

713 
	#PT_NOTE
 4

	)

714 
	#PT_SHLIB
 5

	)

715 
	#PT_PHDR
 6

	)

716 
	#PT_TLS
 7

	)

717 
	#PT_NUM
 8

	)

718 
	#PT_LOOS
 0x60000000

	)

719 
	#PT_GNU_EH_FRAME
 0x6474e550

	)

720 
	#PT_GNU_STACK
 0x6474e551

	)

721 
	#PT_GNU_RELRO
 0x6474e552

	)

722 
	#PT_GNU_PROPERTY
 0x6474e553

	)

723 
	#PT_LOSUNW
 0x6fffffÁ

	)

724 
	#PT_SUNWBSS
 0x6fffffÁ

	)

725 
	#PT_SUNWSTACK
 0x6ffffffb

	)

726 
	#PT_HISUNW
 0x6fffffff

	)

727 
	#PT_HIOS
 0x6ffffff‡

	)

728 
	#PT_LOPROC
 0x70000000

	)

729 
	#PT_HIPROC
 0x7ffffff‡

	)

733 
	#PF_X
 (1 << 0Ë

	)

734 
	#PF_W
 (1 << 1Ë

	)

735 
	#PF_R
 (1 << 2Ë

	)

736 
	#PF_MASKOS
 0x0ff00000

	)

737 
	#PF_MASKPROC
 0xf0000000

	)

741 
	#NT_PRSTATUS
 1

	)

742 
	#NT_PRFPREG
 2

	)

744 
	#NT_FPREGSET
 2

	)

745 
	#NT_PRPSINFO
 3

	)

746 
	#NT_PRXREG
 4

	)

747 
	#NT_TASKSTRUCT
 4

	)

748 
	#NT_PLATFORM
 5

	)

749 
	#NT_AUXV
 6

	)

750 
	#NT_GWINDOWS
 7

	)

751 
	#NT_ASRS
 8

	)

752 
	#NT_PSTATUS
 10

	)

753 
	#NT_PSINFO
 13

	)

754 
	#NT_PRCRED
 14

	)

755 
	#NT_UTSNAME
 15

	)

756 
	#NT_LWPSTATUS
 16

	)

757 
	#NT_LWPSINFO
 17

	)

758 
	#NT_PRFPXREG
 20

	)

759 
	#NT_SIGINFO
 0x53494749

	)

761 
	#NT_FILE
 0x46494c45

	)

763 
	#NT_PRXFPREG
 0x46e62b7‡

	)

764 
	#NT_PPC_VMX
 0x100

	)

765 
	#NT_PPC_SPE
 0x101

	)

766 
	#NT_PPC_VSX
 0x102

	)

767 
	#NT_PPC_TAR
 0x103

	)

768 
	#NT_PPC_PPR
 0x104

	)

769 
	#NT_PPC_DSCR
 0x105

	)

770 
	#NT_PPC_EBB
 0x106

	)

771 
	#NT_PPC_PMU
 0x107

	)

772 
	#NT_PPC_TM_CGPR
 0x108

	)

773 
	#NT_PPC_TM_CFPR
 0x109

	)

774 
	#NT_PPC_TM_CVMX
 0x10®

	)

775 
	#NT_PPC_TM_CVSX
 0x10b

	)

776 
	#NT_PPC_TM_SPR
 0x10¯

	)

777 
	#NT_PPC_TM_CTAR
 0x10d

	)

779 
	#NT_PPC_TM_CPPR
 0x10ê

	)

781 
	#NT_PPC_TM_CDSCR
 0x10‡

	)

783 
	#NT_PPC_PKEY
 0x110

	)

785 
	#NT_386_TLS
 0x200

	)

786 
	#NT_386_IOPERM
 0x201

	)

787 
	#NT_X86_XSTATE
 0x202

	)

788 
	#NT_S390_HIGH_GPRS
 0x300

	)

789 
	#NT_S390_TIMER
 0x301

	)

790 
	#NT_S390_TODCMP
 0x302

	)

791 
	#NT_S390_TODPREG
 0x303

	)

792 
	#NT_S390_CTRS
 0x304

	)

793 
	#NT_S390_PREFIX
 0x305

	)

794 
	#NT_S390_LAST_BREAK
 0x306

	)

795 
	#NT_S390_SYSTEM_CALL
 0x307

	)

796 
	#NT_S390_TDB
 0x308

	)

797 
	#NT_S390_VXRS_LOW
 0x309

	)

799 
	#NT_S390_VXRS_HIGH
 0x30®

	)

800 
	#NT_S390_GS_CB
 0x30b

	)

801 
	#NT_S390_GS_BC
 0x30¯

	)

803 
	#NT_S390_RI_CB
 0x30d

	)

804 
	#NT_ARM_VFP
 0x400

	)

805 
	#NT_ARM_TLS
 0x401

	)

806 
	#NT_ARM_HW_BREAK
 0x402

	)

807 
	#NT_ARM_HW_WATCH
 0x403

	)

808 
	#NT_ARM_SYSTEM_CALL
 0x404

	)

809 
	#NT_ARM_SVE
 0x405

	)

811 
	#NT_ARM_PAC_MASK
 0x406

	)

813 
	#NT_ARM_PACA_KEYS
 0x407

	)

815 
	#NT_ARM_PACG_KEYS
 0x408

	)

817 
	#NT_ARM_TAGGED_ADDR_CTRL
 0x409

	)

819 
	#NT_ARM_PAC_ENABLED_KEYS
 0x40®

	)

821 
	#NT_VMCOREDD
 0x700

	)

822 
	#NT_MIPS_DSP
 0x800

	)

823 
	#NT_MIPS_FP_MODE
 0x801

	)

824 
	#NT_MIPS_MSA
 0x802

	)

828 
	#NT_VERSION
 1

	)

835 
Elf32_Sw‹d
 
	md_èg
;

838 
Elf32_W‹d
 
	md_vÆ
;

839 
Elf32_Addr
 
	md_±r
;

840 } 
	md_un
;

841 } 
	tElf32_Dyn
;

845 
Elf64_Sxw‹d
 
	md_èg
;

848 
Elf64_Xw‹d
 
	md_vÆ
;

849 
Elf64_Addr
 
	md_±r
;

850 } 
	md_un
;

851 } 
	tElf64_Dyn
;

855 
	#DT_NULL
 0

	)

856 
	#DT_NEEDED
 1

	)

857 
	#DT_PLTRELSZ
 2

	)

858 
	#DT_PLTGOT
 3

	)

859 
	#DT_HASH
 4

	)

860 
	#DT_STRTAB
 5

	)

861 
	#DT_SYMTAB
 6

	)

862 
	#DT_RELA
 7

	)

863 
	#DT_RELASZ
 8

	)

864 
	#DT_RELAENT
 9

	)

865 
	#DT_STRSZ
 10

	)

866 
	#DT_SYMENT
 11

	)

867 
	#DT_INIT
 12

	)

868 
	#DT_FINI
 13

	)

869 
	#DT_SONAME
 14

	)

870 
	#DT_RPATH
 15

	)

871 
	#DT_SYMBOLIC
 16

	)

872 
	#DT_REL
 17

	)

873 
	#DT_RELSZ
 18

	)

874 
	#DT_RELENT
 19

	)

875 
	#DT_PLTREL
 20

	)

876 
	#DT_DEBUG
 21

	)

877 
	#DT_TEXTREL
 22

	)

878 
	#DT_JMPREL
 23

	)

879 
	#DT_BIND_NOW
 24

	)

880 
	#DT_INIT_ARRAY
 25

	)

881 
	#DT_FINI_ARRAY
 26

	)

882 
	#DT_INIT_ARRAYSZ
 27

	)

883 
	#DT_FINI_ARRAYSZ
 28

	)

884 
	#DT_RUNPATH
 29

	)

885 
	#DT_FLAGS
 30

	)

886 
	#DT_ENCODING
 32

	)

887 
	#DT_PREINIT_ARRAY
 32

	)

888 
	#DT_PREINIT_ARRAYSZ
 33

	)

889 
	#DT_SYMTAB_SHNDX
 34

	)

890 
	#DT_NUM
 35

	)

891 
	#DT_LOOS
 0x6000000d

	)

892 
	#DT_HIOS
 0x6ffff000

	)

893 
	#DT_LOPROC
 0x70000000

	)

894 
	#DT_HIPROC
 0x7ffffff‡

	)

895 
	#DT_PROCNUM
 
DT_MIPS_NUM


	)

900 
	#DT_VALRNGLO
 0x6ffffd00

	)

901 
	#DT_GNU_PRELINKED
 0x6ffffdf5

	)

902 
	#DT_GNU_CONFLICTSZ
 0x6ffffdf6

	)

903 
	#DT_GNU_LIBLISTSZ
 0x6ffffdf7

	)

904 
	#DT_CHECKSUM
 0x6ffffdf8

	)

905 
	#DT_PLTPADSZ
 0x6ffffdf9

	)

906 
	#DT_MOVEENT
 0x6ffffdÁ

	)

907 
	#DT_MOVESZ
 0x6ffffdfb

	)

908 
	#DT_FEATURE_1
 0x6ffffdf¯

	)

909 
	#DT_POSFLAG_1
 0x6ffffdfd

	)

911 
	#DT_SYMINSZ
 0x6ffffd„

	)

912 
	#DT_SYMINENT
 0x6ffffdf‡

	)

913 
	#DT_VALRNGHI
 0x6ffffdff

	)

914 
	#DT_VALTAGIDX
(
èg
Ë(
DT_VALRNGHI
 - (èg)Ë

	)

915 
	#DT_VALNUM
 12

	)

922 
	#DT_ADDRRNGLO
 0x6fff„00

	)

923 
	#DT_GNU_HASH
 0x6fff„f5

	)

924 
	#DT_TLSDESC_PLT
 0x6fff„f6

	)

925 
	#DT_TLSDESC_GOT
 0x6fff„f7

	)

926 
	#DT_GNU_CONFLICT
 0x6fff„f8

	)

927 
	#DT_GNU_LIBLIST
 0x6fff„f9

	)

928 
	#DT_CONFIG
 0x6fff„Á

	)

929 
	#DT_DEPAUDIT
 0x6fff„fb

	)

930 
	#DT_AUDIT
 0x6fff„f¯

	)

931 
	#DT_PLTPAD
 0x6fff„fd

	)

932 
	#DT_MOVETAB
 0x6fff„„

	)

933 
	#DT_SYMINFO
 0x6fff„f‡

	)

934 
	#DT_ADDRRNGHI
 0x6fff„ff

	)

935 
	#DT_ADDRTAGIDX
(
èg
Ë(
DT_ADDRRNGHI
 - (èg)Ë

	)

936 
	#DT_ADDRNUM
 11

	)

940 
	#DT_VERSYM
 0x6ffffff0

	)

942 
	#DT_RELACOUNT
 0x6ffffff9

	)

943 
	#DT_RELCOUNT
 0x6fffffÁ

	)

946 
	#DT_FLAGS_1
 0x6ffffffb

	)

947 
	#DT_VERDEF
 0x6ffffff¯

	)

949 
	#DT_VERDEFNUM
 0x6ffffffd

	)

950 
	#DT_VERNEED
 0x6fffff„

	)

952 
	#DT_VERNEEDNUM
 0x6ffffff‡

	)

953 
	#DT_VERSIONTAGIDX
(
èg
Ë(
DT_VERNEEDNUM
 - (èg)Ë

	)

954 
	#DT_VERSIONTAGNUM
 16

	)

958 
	#DT_AUXILIARY
 0x7ffffffd

	)

959 
	#DT_FILTER
 0x7ffffff‡

	)

960 
	#DT_EXTRATAGIDX
(
èg
Ë((
Elf32_W‹d
)-((
Elf32_Sw‹d
Ë—agË<<1>>1)-1)

	)

961 
	#DT_EXTRANUM
 3

	)

964 
	#DF_ORIGIN
 0x00000001

	)

965 
	#DF_SYMBOLIC
 0x00000002

	)

966 
	#DF_TEXTREL
 0x00000004

	)

967 
	#DF_BIND_NOW
 0x00000008

	)

968 
	#DF_STATIC_TLS
 0x00000010

	)

972 
	#DF_1_NOW
 0x00000001

	)

973 
	#DF_1_GLOBAL
 0x00000002

	)

974 
	#DF_1_GROUP
 0x00000004

	)

975 
	#DF_1_NODELETE
 0x00000008

	)

976 
	#DF_1_LOADFLTR
 0x00000010

	)

977 
	#DF_1_INITFIRST
 0x00000020

	)

978 
	#DF_1_NOOPEN
 0x00000040

	)

979 
	#DF_1_ORIGIN
 0x00000080

	)

980 
	#DF_1_DIRECT
 0x00000100

	)

981 
	#DF_1_TRANS
 0x00000200

	)

982 
	#DF_1_INTERPOSE
 0x00000400

	)

983 
	#DF_1_NODEFLIB
 0x00000800

	)

984 
	#DF_1_NODUMP
 0x00001000

	)

985 
	#DF_1_CONFALT
 0x00002000

	)

986 
	#DF_1_ENDFILTEE
 0x00004000

	)

987 
	#DF_1_DISPRELDNE
 0x00008000

	)

988 
	#DF_1_DISPRELPND
 0x00010000

	)

989 
	#DF_1_NODIRECT
 0x00020000

	)

990 
	#DF_1_IGNMULDEF
 0x00040000

	)

991 
	#DF_1_NOKSYMS
 0x00080000

	)

992 
	#DF_1_NOHDR
 0x00100000

	)

993 
	#DF_1_EDITED
 0x00200000

	)

994 
	#DF_1_NORELOC
 0x00400000

	)

995 
	#DF_1_SYMINTPOSE
 0x00800000

	)

996 
	#DF_1_GLOBAUDIT
 0x01000000

	)

997 
	#DF_1_SINGLETON
 0x02000000

	)

998 
	#DF_1_STUB
 0x04000000

	)

999 
	#DF_1_PIE
 0x08000000

	)

1000 
	#DF_1_KMOD
 0x10000000

	)

1001 
	#DF_1_WEAKFILTER
 0x20000000

	)

1002 
	#DF_1_NOCOMMON
 0x40000000

	)

1005 
	#DTF_1_PARINIT
 0x00000001

	)

1006 
	#DTF_1_CONFEXP
 0x00000002

	)

1009 
	#DF_P1_LAZYLOAD
 0x00000001

	)

1010 
	#DF_P1_GROUPPERM
 0x00000002

	)

1017 
Elf32_HÆf
 
	mvd_vîsi⁄
;

1018 
Elf32_HÆf
 
	mvd_Êags
;

1019 
Elf32_HÆf
 
	mvd_ndx
;

1020 
Elf32_HÆf
 
	mvd_˙t
;

1021 
Elf32_W‹d
 
	mvd_hash
;

1022 
Elf32_W‹d
 
	mvd_aux
;

1023 
Elf32_W‹d
 
	mvd_√xt
;

1025 } 
	tElf32_Vîdef
;

1029 
Elf64_HÆf
 
	mvd_vîsi⁄
;

1030 
Elf64_HÆf
 
	mvd_Êags
;

1031 
Elf64_HÆf
 
	mvd_ndx
;

1032 
Elf64_HÆf
 
	mvd_˙t
;

1033 
Elf64_W‹d
 
	mvd_hash
;

1034 
Elf64_W‹d
 
	mvd_aux
;

1035 
Elf64_W‹d
 
	mvd_√xt
;

1037 } 
	tElf64_Vîdef
;

1041 
	#VER_DEF_NONE
 0

	)

1042 
	#VER_DEF_CURRENT
 1

	)

1043 
	#VER_DEF_NUM
 2

	)

1046 
	#VER_FLG_BASE
 0x1

	)

1047 
	#VER_FLG_WEAK
 0x2

	)

1050 
	#VER_NDX_LOCAL
 0

	)

1051 
	#VER_NDX_GLOBAL
 1

	)

1052 
	#VER_NDX_LORESERVE
 0xff00

	)

1053 
	#VER_NDX_ELIMINATE
 0xff01

	)

1059 
Elf32_W‹d
 
	mvda_«me
;

1060 
Elf32_W‹d
 
	mvda_√xt
;

1062 } 
	tElf32_Vîdaux
;

1066 
Elf64_W‹d
 
	mvda_«me
;

1067 
Elf64_W‹d
 
	mvda_√xt
;

1069 } 
	tElf64_Vîdaux
;

1076 
Elf32_HÆf
 
	mvn_vîsi⁄
;

1077 
Elf32_HÆf
 
	mvn_˙t
;

1078 
Elf32_W‹d
 
	mvn_fûe
;

1080 
Elf32_W‹d
 
	mvn_aux
;

1081 
Elf32_W‹d
 
	mvn_√xt
;

1083 } 
	tElf32_Vî√ed
;

1087 
Elf64_HÆf
 
	mvn_vîsi⁄
;

1088 
Elf64_HÆf
 
	mvn_˙t
;

1089 
Elf64_W‹d
 
	mvn_fûe
;

1091 
Elf64_W‹d
 
	mvn_aux
;

1092 
Elf64_W‹d
 
	mvn_√xt
;

1094 } 
	tElf64_Vî√ed
;

1098 
	#VER_NEED_NONE
 0

	)

1099 
	#VER_NEED_CURRENT
 1

	)

1100 
	#VER_NEED_NUM
 2

	)

1106 
Elf32_W‹d
 
	mv«_hash
;

1107 
Elf32_HÆf
 
	mv«_Êags
;

1108 
Elf32_HÆf
 
	mv«_Ÿhî
;

1109 
Elf32_W‹d
 
	mv«_«me
;

1110 
Elf32_W‹d
 
	mv«_√xt
;

1112 } 
	tElf32_Vî«ux
;

1116 
Elf64_W‹d
 
	mv«_hash
;

1117 
Elf64_HÆf
 
	mv«_Êags
;

1118 
Elf64_HÆf
 
	mv«_Ÿhî
;

1119 
Elf64_W‹d
 
	mv«_«me
;

1120 
Elf64_W‹d
 
	mv«_√xt
;

1122 } 
	tElf64_Vî«ux
;

1126 
	#VER_FLG_WEAK
 0x2

	)

1140 
uöt32_t
 
	ma_ty≥
;

1143 
uöt32_t
 
	ma_vÆ
;

1147 } 
	ma_un
;

1148 } 
	tElf32_auxv_t
;

1152 
uöt64_t
 
	ma_ty≥
;

1155 
uöt64_t
 
	ma_vÆ
;

1159 } 
	ma_un
;

1160 } 
	tElf64_auxv_t
;

1164 
	#AT_NULL
 0

	)

1165 
	#AT_IGNORE
 1

	)

1166 
	#AT_EXECFD
 2

	)

1167 
	#AT_PHDR
 3

	)

1168 
	#AT_PHENT
 4

	)

1169 
	#AT_PHNUM
 5

	)

1170 
	#AT_PAGESZ
 6

	)

1171 
	#AT_BASE
 7

	)

1172 
	#AT_FLAGS
 8

	)

1173 
	#AT_ENTRY
 9

	)

1174 
	#AT_NOTELF
 10

	)

1175 
	#AT_UID
 11

	)

1176 
	#AT_EUID
 12

	)

1177 
	#AT_GID
 13

	)

1178 
	#AT_EGID
 14

	)

1179 
	#AT_CLKTCK
 17

	)

1182 
	#AT_PLATFORM
 15

	)

1183 
	#AT_HWCAP
 16

	)

1188 
	#AT_FPUCW
 18

	)

1191 
	#AT_DCACHEBSIZE
 19

	)

1192 
	#AT_ICACHEBSIZE
 20

	)

1193 
	#AT_UCACHEBSIZE
 21

	)

1197 
	#AT_IGNOREPPC
 22

	)

1199 
	#AT_SECURE
 23

	)

1201 
	#AT_BASE_PLATFORM
 24

	)

1203 
	#AT_RANDOM
 25

	)

1205 
	#AT_HWCAP2
 26

	)

1208 
	#AT_EXECFN
 31

	)

1212 
	#AT_SYSINFO
 32

	)

1213 
	#AT_SYSINFO_EHDR
 33

	)

1217 
	#AT_L1I_CACHESHAPE
 34

	)

1218 
	#AT_L1D_CACHESHAPE
 35

	)

1219 
	#AT_L2_CACHESHAPE
 36

	)

1220 
	#AT_L3_CACHESHAPE
 37

	)

1225 
	#AT_L1I_CACHESIZE
 40

	)

1226 
	#AT_L1I_CACHEGEOMETRY
 41

	)

1227 
	#AT_L1D_CACHESIZE
 42

	)

1228 
	#AT_L1D_CACHEGEOMETRY
 43

	)

1229 
	#AT_L2_CACHESIZE
 44

	)

1230 
	#AT_L2_CACHEGEOMETRY
 45

	)

1231 
	#AT_L3_CACHESIZE
 46

	)

1232 
	#AT_L3_CACHEGEOMETRY
 47

	)

1234 
	#AT_MINSIGSTKSZ
 51

	)

1241 
Elf32_W‹d
 
	mn_«mesz
;

1242 
Elf32_W‹d
 
	mn_descsz
;

1243 
Elf32_W‹d
 
	mn_ty≥
;

1244 } 
	tElf32_Nhdr
;

1248 
Elf64_W‹d
 
	mn_«mesz
;

1249 
Elf64_W‹d
 
	mn_descsz
;

1250 
Elf64_W‹d
 
	mn_ty≥
;

1251 } 
	tElf64_Nhdr
;

1256 
	#ELF_NOTE_SOLARIS
 "SUNW Sﬁ¨is"

	)

1259 
	#ELF_NOTE_GNU
 "GNU"

	)

1262 
	#ELF_NOTE_FDO
 "FDO"

	)

1267 
	#ELF_NOTE_PAGESIZE_HINT
 1

	)

1278 
	#NT_GNU_ABI_TAG
 1

	)

1279 
	#ELF_NOTE_ABI
 
NT_GNU_ABI_TAG


	)

1283 
	#ELF_NOTE_OS_LINUX
 0

	)

1284 
	#ELF_NOTE_OS_GNU
 1

	)

1285 
	#ELF_NOTE_OS_SOLARIS2
 2

	)

1286 
	#ELF_NOTE_OS_FREEBSD
 3

	)

1294 
	#NT_GNU_HWCAP
 2

	)

1298 
	#NT_GNU_BUILD_ID
 3

	)

1301 
	#NT_GNU_GOLD_VERSION
 4

	)

1304 
	#NT_GNU_PROPERTY_TYPE_0
 5

	)

1308 
	#NT_FDO_PACKAGING_METADATA
 0xˇ„1a7e

	)

1311 
	#NOTE_GNU_PROPERTY_SECTION_NAME
 ".nŸe.gnu.¥›îty"

	)

1316 
	#GNU_PROPERTY_STACK_SIZE
 1

	)

1318 
	#GNU_PROPERTY_NO_COPY_ON_PROTECTED
 2

	)

1322 
	#GNU_PROPERTY_UINT32_AND_LO
 0xb0000000

	)

1323 
	#GNU_PROPERTY_UINT32_AND_HI
 0xb0007fff

	)

1327 
	#GNU_PROPERTY_UINT32_OR_LO
 0xb0008000

	)

1328 
	#GNU_PROPERTY_UINT32_OR_HI
 0xb000ffff

	)

1331 
	#GNU_PROPERTY_1_NEEDED
 
GNU_PROPERTY_UINT32_OR_LO


	)

1335 
	#GNU_PROPERTY_1_NEEDED_INDIRECT_EXTERN_ACCESS
 (1U << 0)

	)

1338 
	#GNU_PROPERTY_LOPROC
 0xc0000000

	)

1340 
	#GNU_PROPERTY_HIPROC
 0xdfffffff

	)

1342 
	#GNU_PROPERTY_LOUSER
 0xe0000000

	)

1344 
	#GNU_PROPERTY_HIUSER
 0xffffffff

	)

1347 
	#GNU_PROPERTY_AARCH64_FEATURE_1_AND
 0xc0000000

	)

1349 
	#GNU_PROPERTY_AARCH64_FEATURE_1_BTI
 (1U << 0)

	)

1350 
	#GNU_PROPERTY_AARCH64_FEATURE_1_PAC
 (1U << 1)

	)

1354 
	#GNU_PROPERTY_X86_ISA_1_USED
 0xc0010002

	)

1357 
	#GNU_PROPERTY_X86_ISA_1_NEEDED
 0xc0008002

	)

1359 
	#GNU_PROPERTY_X86_FEATURE_1_AND
 0xc0000002

	)

1363 
	#GNU_PROPERTY_X86_ISA_1_BASELINE
 (1U << 0)

	)

1367 
	#GNU_PROPERTY_X86_ISA_1_V2
 (1U << 1)

	)

1370 
	#GNU_PROPERTY_X86_ISA_1_V3
 (1U << 2)

	)

1373 
	#GNU_PROPERTY_X86_ISA_1_V4
 (1U << 3)

	)

1377 
	#GNU_PROPERTY_X86_FEATURE_1_IBT
 (1U << 0)

	)

1380 
	#GNU_PROPERTY_X86_FEATURE_1_SHSTK
 (1U << 1)

	)

1385 
Elf32_Xw‹d
 
	mm_vÆue
;

1386 
Elf32_W‹d
 
	mm_öfo
;

1387 
Elf32_W‹d
 
	mm_poff£t
;

1388 
Elf32_HÆf
 
	mm_ª≥©
;

1389 
Elf32_HÆf
 
	mm_°ride
;

1390 } 
	tElf32_Move
;

1394 
Elf64_Xw‹d
 
	mm_vÆue
;

1395 
Elf64_Xw‹d
 
	mm_öfo
;

1396 
Elf64_Xw‹d
 
	mm_poff£t
;

1397 
Elf64_HÆf
 
	mm_ª≥©
;

1398 
Elf64_HÆf
 
	mm_°ride
;

1399 } 
	tElf64_Move
;

1402 
	#ELF32_M_SYM
(
öfo
Ë((öfoË>> 8)

	)

1403 
	#ELF32_M_SIZE
(
öfo
Ë((Ë(öfo))

	)

1404 
	#ELF32_M_INFO
(
sym
, 
size
Ë(((symË<< 8Ë+ (Ë(size))

	)

1406 
	#ELF64_M_SYM
(
öfo
Ë
	`ELF32_M_SYM
 (öfo)

	)

1407 
	#ELF64_M_SIZE
(
öfo
Ë
	`ELF32_M_SIZE
 (öfo)

	)

1408 
	#ELF64_M_INFO
(
sym
, 
size
Ë
	`ELF32_M_INFO
 (sym, size)

	)

1414 
	#EF_CPU32
 0x00810000

	)

1418 
	#R_68K_NONE
 0

	)

1419 
	#R_68K_32
 1

	)

1420 
	#R_68K_16
 2

	)

1421 
	#R_68K_8
 3

	)

1422 
	#R_68K_PC32
 4

	)

1423 
	#R_68K_PC16
 5

	)

1424 
	#R_68K_PC8
 6

	)

1425 
	#R_68K_GOT32
 7

	)

1426 
	#R_68K_GOT16
 8

	)

1427 
	#R_68K_GOT8
 9

	)

1428 
	#R_68K_GOT32O
 10

	)

1429 
	#R_68K_GOT16O
 11

	)

1430 
	#R_68K_GOT8O
 12

	)

1431 
	#R_68K_PLT32
 13

	)

1432 
	#R_68K_PLT16
 14

	)

1433 
	#R_68K_PLT8
 15

	)

1434 
	#R_68K_PLT32O
 16

	)

1435 
	#R_68K_PLT16O
 17

	)

1436 
	#R_68K_PLT8O
 18

	)

1437 
	#R_68K_COPY
 19

	)

1438 
	#R_68K_GLOB_DAT
 20

	)

1439 
	#R_68K_JMP_SLOT
 21

	)

1440 
	#R_68K_RELATIVE
 22

	)

1441 
	#R_68K_TLS_GD32
 25

	)

1442 
	#R_68K_TLS_GD16
 26

	)

1443 
	#R_68K_TLS_GD8
 27

	)

1444 
	#R_68K_TLS_LDM32
 28

	)

1445 
	#R_68K_TLS_LDM16
 29

	)

1446 
	#R_68K_TLS_LDM8
 30

	)

1447 
	#R_68K_TLS_LDO32
 31

	)

1448 
	#R_68K_TLS_LDO16
 32

	)

1449 
	#R_68K_TLS_LDO8
 33

	)

1450 
	#R_68K_TLS_IE32
 34

	)

1451 
	#R_68K_TLS_IE16
 35

	)

1452 
	#R_68K_TLS_IE8
 36

	)

1453 
	#R_68K_TLS_LE32
 37

	)

1455 
	#R_68K_TLS_LE16
 38

	)

1457 
	#R_68K_TLS_LE8
 39

	)

1459 
	#R_68K_TLS_DTPMOD32
 40

	)

1460 
	#R_68K_TLS_DTPREL32
 41

	)

1461 
	#R_68K_TLS_TPREL32
 42

	)

1463 
	#R_68K_NUM
 43

	)

1469 
	#R_386_NONE
 0

	)

1470 
	#R_386_32
 1

	)

1471 
	#R_386_PC32
 2

	)

1472 
	#R_386_GOT32
 3

	)

1473 
	#R_386_PLT32
 4

	)

1474 
	#R_386_COPY
 5

	)

1475 
	#R_386_GLOB_DAT
 6

	)

1476 
	#R_386_JMP_SLOT
 7

	)

1477 
	#R_386_RELATIVE
 8

	)

1478 
	#R_386_GOTOFF
 9

	)

1479 
	#R_386_GOTPC
 10

	)

1480 
	#R_386_32PLT
 11

	)

1481 
	#R_386_TLS_TPOFF
 14

	)

1482 
	#R_386_TLS_IE
 15

	)

1484 
	#R_386_TLS_GOTIE
 16

	)

1486 
	#R_386_TLS_LE
 17

	)

1488 
	#R_386_TLS_GD
 18

	)

1490 
	#R_386_TLS_LDM
 19

	)

1493 
	#R_386_16
 20

	)

1494 
	#R_386_PC16
 21

	)

1495 
	#R_386_8
 22

	)

1496 
	#R_386_PC8
 23

	)

1497 
	#R_386_TLS_GD_32
 24

	)

1499 
	#R_386_TLS_GD_PUSH
 25

	)

1500 
	#R_386_TLS_GD_CALL
 26

	)

1502 
	#R_386_TLS_GD_POP
 27

	)

1503 
	#R_386_TLS_LDM_32
 28

	)

1505 
	#R_386_TLS_LDM_PUSH
 29

	)

1506 
	#R_386_TLS_LDM_CALL
 30

	)

1508 
	#R_386_TLS_LDM_POP
 31

	)

1509 
	#R_386_TLS_LDO_32
 32

	)

1510 
	#R_386_TLS_IE_32
 33

	)

1512 
	#R_386_TLS_LE_32
 34

	)

1514 
	#R_386_TLS_DTPMOD32
 35

	)

1515 
	#R_386_TLS_DTPOFF32
 36

	)

1516 
	#R_386_TLS_TPOFF32
 37

	)

1517 
	#R_386_SIZE32
 38

	)

1518 
	#R_386_TLS_GOTDESC
 39

	)

1519 
	#R_386_TLS_DESC_CALL
 40

	)

1522 
	#R_386_TLS_DESC
 41

	)

1526 
	#R_386_IRELATIVE
 42

	)

1527 
	#R_386_GOT32X
 43

	)

1530 
	#R_386_NUM
 44

	)

1536 
	#STT_SPARC_REGISTER
 13

	)

1540 
	#EF_SPARCV9_MM
 3

	)

1541 
	#EF_SPARCV9_TSO
 0

	)

1542 
	#EF_SPARCV9_PSO
 1

	)

1543 
	#EF_SPARCV9_RMO
 2

	)

1544 
	#EF_SPARC_LEDATA
 0x800000

	)

1545 
	#EF_SPARC_EXT_MASK
 0xFFFF00

	)

1546 
	#EF_SPARC_32PLUS
 0x000100

	)

1547 
	#EF_SPARC_SUN_US1
 0x000200

	)

1548 
	#EF_SPARC_HAL_R1
 0x000400

	)

1549 
	#EF_SPARC_SUN_US3
 0x000800

	)

1553 
	#R_SPARC_NONE
 0

	)

1554 
	#R_SPARC_8
 1

	)

1555 
	#R_SPARC_16
 2

	)

1556 
	#R_SPARC_32
 3

	)

1557 
	#R_SPARC_DISP8
 4

	)

1558 
	#R_SPARC_DISP16
 5

	)

1559 
	#R_SPARC_DISP32
 6

	)

1560 
	#R_SPARC_WDISP30
 7

	)

1561 
	#R_SPARC_WDISP22
 8

	)

1562 
	#R_SPARC_HI22
 9

	)

1563 
	#R_SPARC_22
 10

	)

1564 
	#R_SPARC_13
 11

	)

1565 
	#R_SPARC_LO10
 12

	)

1566 
	#R_SPARC_GOT10
 13

	)

1567 
	#R_SPARC_GOT13
 14

	)

1568 
	#R_SPARC_GOT22
 15

	)

1569 
	#R_SPARC_PC10
 16

	)

1570 
	#R_SPARC_PC22
 17

	)

1571 
	#R_SPARC_WPLT30
 18

	)

1572 
	#R_SPARC_COPY
 19

	)

1573 
	#R_SPARC_GLOB_DAT
 20

	)

1574 
	#R_SPARC_JMP_SLOT
 21

	)

1575 
	#R_SPARC_RELATIVE
 22

	)

1576 
	#R_SPARC_UA32
 23

	)

1580 
	#R_SPARC_PLT32
 24

	)

1581 
	#R_SPARC_HIPLT22
 25

	)

1582 
	#R_SPARC_LOPLT10
 26

	)

1583 
	#R_SPARC_PCPLT32
 27

	)

1584 
	#R_SPARC_PCPLT22
 28

	)

1585 
	#R_SPARC_PCPLT10
 29

	)

1586 
	#R_SPARC_10
 30

	)

1587 
	#R_SPARC_11
 31

	)

1588 
	#R_SPARC_64
 32

	)

1589 
	#R_SPARC_OLO10
 33

	)

1590 
	#R_SPARC_HH22
 34

	)

1591 
	#R_SPARC_HM10
 35

	)

1592 
	#R_SPARC_LM22
 36

	)

1593 
	#R_SPARC_PC_HH22
 37

	)

1594 
	#R_SPARC_PC_HM10
 38

	)

1595 
	#R_SPARC_PC_LM22
 39

	)

1596 
	#R_SPARC_WDISP16
 40

	)

1597 
	#R_SPARC_WDISP19
 41

	)

1598 
	#R_SPARC_GLOB_JMP
 42

	)

1599 
	#R_SPARC_7
 43

	)

1600 
	#R_SPARC_5
 44

	)

1601 
	#R_SPARC_6
 45

	)

1602 
	#R_SPARC_DISP64
 46

	)

1603 
	#R_SPARC_PLT64
 47

	)

1604 
	#R_SPARC_HIX22
 48

	)

1605 
	#R_SPARC_LOX10
 49

	)

1606 
	#R_SPARC_H44
 50

	)

1607 
	#R_SPARC_M44
 51

	)

1608 
	#R_SPARC_L44
 52

	)

1609 
	#R_SPARC_REGISTER
 53

	)

1610 
	#R_SPARC_UA64
 54

	)

1611 
	#R_SPARC_UA16
 55

	)

1612 
	#R_SPARC_TLS_GD_HI22
 56

	)

1613 
	#R_SPARC_TLS_GD_LO10
 57

	)

1614 
	#R_SPARC_TLS_GD_ADD
 58

	)

1615 
	#R_SPARC_TLS_GD_CALL
 59

	)

1616 
	#R_SPARC_TLS_LDM_HI22
 60

	)

1617 
	#R_SPARC_TLS_LDM_LO10
 61

	)

1618 
	#R_SPARC_TLS_LDM_ADD
 62

	)

1619 
	#R_SPARC_TLS_LDM_CALL
 63

	)

1620 
	#R_SPARC_TLS_LDO_HIX22
 64

	)

1621 
	#R_SPARC_TLS_LDO_LOX10
 65

	)

1622 
	#R_SPARC_TLS_LDO_ADD
 66

	)

1623 
	#R_SPARC_TLS_IE_HI22
 67

	)

1624 
	#R_SPARC_TLS_IE_LO10
 68

	)

1625 
	#R_SPARC_TLS_IE_LD
 69

	)

1626 
	#R_SPARC_TLS_IE_LDX
 70

	)

1627 
	#R_SPARC_TLS_IE_ADD
 71

	)

1628 
	#R_SPARC_TLS_LE_HIX22
 72

	)

1629 
	#R_SPARC_TLS_LE_LOX10
 73

	)

1630 
	#R_SPARC_TLS_DTPMOD32
 74

	)

1631 
	#R_SPARC_TLS_DTPMOD64
 75

	)

1632 
	#R_SPARC_TLS_DTPOFF32
 76

	)

1633 
	#R_SPARC_TLS_DTPOFF64
 77

	)

1634 
	#R_SPARC_TLS_TPOFF32
 78

	)

1635 
	#R_SPARC_TLS_TPOFF64
 79

	)

1636 
	#R_SPARC_GOTDATA_HIX22
 80

	)

1637 
	#R_SPARC_GOTDATA_LOX10
 81

	)

1638 
	#R_SPARC_GOTDATA_OP_HIX22
 82

	)

1639 
	#R_SPARC_GOTDATA_OP_LOX10
 83

	)

1640 
	#R_SPARC_GOTDATA_OP
 84

	)

1641 
	#R_SPARC_H34
 85

	)

1642 
	#R_SPARC_SIZE32
 86

	)

1643 
	#R_SPARC_SIZE64
 87

	)

1644 
	#R_SPARC_WDISP10
 88

	)

1645 
	#R_SPARC_JMP_IREL
 248

	)

1646 
	#R_SPARC_IRELATIVE
 249

	)

1647 
	#R_SPARC_GNU_VTINHERIT
 250

	)

1648 
	#R_SPARC_GNU_VTENTRY
 251

	)

1649 
	#R_SPARC_REV32
 252

	)

1651 
	#R_SPARC_NUM
 253

	)

1655 
	#DT_SPARC_REGISTER
 0x70000001

	)

1656 
	#DT_SPARC_NUM
 2

	)

1662 
	#EF_MIPS_NOREORDER
 1

	)

1663 
	#EF_MIPS_PIC
 2

	)

1664 
	#EF_MIPS_CPIC
 4

	)

1665 
	#EF_MIPS_XGOT
 8

	)

1666 
	#EF_MIPS_64BIT_WHIRL
 16

	)

1667 
	#EF_MIPS_ABI2
 32

	)

1668 
	#EF_MIPS_ABI_ON32
 64

	)

1669 
	#EF_MIPS_FP64
 512

	)

1670 
	#EF_MIPS_NAN2008
 1024

	)

1671 
	#EF_MIPS_ARCH
 0xf0000000

	)

1675 
	#EF_MIPS_ARCH_1
 0x00000000

	)

1676 
	#EF_MIPS_ARCH_2
 0x10000000

	)

1677 
	#EF_MIPS_ARCH_3
 0x20000000

	)

1678 
	#EF_MIPS_ARCH_4
 0x30000000

	)

1679 
	#EF_MIPS_ARCH_5
 0x40000000

	)

1680 
	#EF_MIPS_ARCH_32
 0x50000000

	)

1681 
	#EF_MIPS_ARCH_64
 0x60000000

	)

1682 
	#EF_MIPS_ARCH_32R2
 0x70000000

	)

1683 
	#EF_MIPS_ARCH_64R2
 0x80000000

	)

1687 
	#E_MIPS_ARCH_1
 
EF_MIPS_ARCH_1


	)

1688 
	#E_MIPS_ARCH_2
 
EF_MIPS_ARCH_2


	)

1689 
	#E_MIPS_ARCH_3
 
EF_MIPS_ARCH_3


	)

1690 
	#E_MIPS_ARCH_4
 
EF_MIPS_ARCH_4


	)

1691 
	#E_MIPS_ARCH_5
 
EF_MIPS_ARCH_5


	)

1692 
	#E_MIPS_ARCH_32
 
EF_MIPS_ARCH_32


	)

1693 
	#E_MIPS_ARCH_64
 
EF_MIPS_ARCH_64


	)

1697 
	#SHN_MIPS_ACOMMON
 0xff00

	)

1698 
	#SHN_MIPS_TEXT
 0xff01

	)

1699 
	#SHN_MIPS_DATA
 0xff02

	)

1700 
	#SHN_MIPS_SCOMMON
 0xff03

	)

1701 
	#SHN_MIPS_SUNDEFINED
 0xff04

	)

1705 
	#SHT_MIPS_LIBLIST
 0x70000000

	)

1706 
	#SHT_MIPS_MSYM
 0x70000001

	)

1707 
	#SHT_MIPS_CONFLICT
 0x70000002

	)

1708 
	#SHT_MIPS_GPTAB
 0x70000003

	)

1709 
	#SHT_MIPS_UCODE
 0x70000004

	)

1710 
	#SHT_MIPS_DEBUG
 0x70000005

	)

1711 
	#SHT_MIPS_REGINFO
 0x70000006

	)

1712 
	#SHT_MIPS_PACKAGE
 0x70000007

	)

1713 
	#SHT_MIPS_PACKSYM
 0x70000008

	)

1714 
	#SHT_MIPS_RELD
 0x70000009

	)

1715 
	#SHT_MIPS_IFACE
 0x7000000b

	)

1716 
	#SHT_MIPS_CONTENT
 0x7000000c

	)

1717 
	#SHT_MIPS_OPTIONS
 0x7000000d

	)

1718 
	#SHT_MIPS_SHDR
 0x70000010

	)

1719 
	#SHT_MIPS_FDESC
 0x70000011

	)

1720 
	#SHT_MIPS_EXTSYM
 0x70000012

	)

1721 
	#SHT_MIPS_DENSE
 0x70000013

	)

1722 
	#SHT_MIPS_PDESC
 0x70000014

	)

1723 
	#SHT_MIPS_LOCSYM
 0x70000015

	)

1724 
	#SHT_MIPS_AUXSYM
 0x70000016

	)

1725 
	#SHT_MIPS_OPTSYM
 0x70000017

	)

1726 
	#SHT_MIPS_LOCSTR
 0x70000018

	)

1727 
	#SHT_MIPS_LINE
 0x70000019

	)

1728 
	#SHT_MIPS_RFDESC
 0x7000001a

	)

1729 
	#SHT_MIPS_DELTASYM
 0x7000001b

	)

1730 
	#SHT_MIPS_DELTAINST
 0x7000001c

	)

1731 
	#SHT_MIPS_DELTACLASS
 0x7000001d

	)

1732 
	#SHT_MIPS_DWARF
 0x7000001ê

	)

1733 
	#SHT_MIPS_DELTADECL
 0x7000001f

	)

1734 
	#SHT_MIPS_SYMBOL_LIB
 0x70000020

	)

1735 
	#SHT_MIPS_EVENTS
 0x70000021

	)

1736 
	#SHT_MIPS_TRANSLATE
 0x70000022

	)

1737 
	#SHT_MIPS_PIXIE
 0x70000023

	)

1738 
	#SHT_MIPS_XLATE
 0x70000024

	)

1739 
	#SHT_MIPS_XLATE_DEBUG
 0x70000025

	)

1740 
	#SHT_MIPS_WHIRL
 0x70000026

	)

1741 
	#SHT_MIPS_EH_REGION
 0x70000027

	)

1742 
	#SHT_MIPS_XLATE_OLD
 0x70000028

	)

1743 
	#SHT_MIPS_PDR_EXCEPTION
 0x70000029

	)

1744 
	#SHT_MIPS_XHASH
 0x7000002b

	)

1748 
	#SHF_MIPS_GPREL
 0x10000000

	)

1749 
	#SHF_MIPS_MERGE
 0x20000000

	)

1750 
	#SHF_MIPS_ADDR
 0x40000000

	)

1751 
	#SHF_MIPS_STRINGS
 0x80000000

	)

1752 
	#SHF_MIPS_NOSTRIP
 0x08000000

	)

1753 
	#SHF_MIPS_LOCAL
 0x04000000

	)

1754 
	#SHF_MIPS_NAMES
 0x02000000

	)

1755 
	#SHF_MIPS_NODUPE
 0x01000000

	)

1761 
	#STO_MIPS_DEFAULT
 0x0

	)

1762 
	#STO_MIPS_INTERNAL
 0x1

	)

1763 
	#STO_MIPS_HIDDEN
 0x2

	)

1764 
	#STO_MIPS_PROTECTED
 0x3

	)

1765 
	#STO_MIPS_PLT
 0x8

	)

1766 
	#STO_MIPS_SC_ALIGN_UNUSED
 0xff

	)

1769 
	#STB_MIPS_SPLIT_COMMON
 13

	)

1777 
Elf32_W‹d
 
	mgt_cuºít_g_vÆue
;

1778 
Elf32_W‹d
 
	mgt_unu£d
;

1779 } 
	mgt_hódî
;

1782 
Elf32_W‹d
 
	mgt_g_vÆue
;

1783 
Elf32_W‹d
 
	mgt_byãs
;

1784 } 
	mgt_íåy
;

1785 } 
	tElf32_g±ab
;

1791 
Elf32_W‹d
 
	mri_g¥mask
;

1792 
Elf32_W‹d
 
	mri_˝rmask
[4];

1793 
Elf32_Sw‹d
 
	mri_gp_vÆue
;

1794 } 
	tElf32_RegInfo
;

1800 
	mköd
;

1802 
	msize
;

1803 
Elf32_Se˘i⁄
 
	m£˘i⁄
;

1805 
Elf32_W‹d
 
	möfo
;

1806 } 
	tElf_O±i⁄s
;

1810 
	#ODK_NULL
 0

	)

1811 
	#ODK_REGINFO
 1

	)

1812 
	#ODK_EXCEPTIONS
 2

	)

1813 
	#ODK_PAD
 3

	)

1814 
	#ODK_HWPATCH
 4

	)

1815 
	#ODK_FILL
 5

	)

1816 
	#ODK_TAGS
 6

	)

1817 
	#ODK_HWAND
 7

	)

1818 
	#ODK_HWOR
 8

	)

1822 
	#OEX_FPU_MIN
 0x1‡

	)

1823 
	#OEX_FPU_MAX
 0x1f00

	)

1824 
	#OEX_PAGE0
 0x10000

	)

1825 
	#OEX_SMM
 0x20000

	)

1826 
	#OEX_FPDBUG
 0x40000

	)

1827 
	#OEX_PRECISEFP
 
OEX_FPDBUG


	)

1828 
	#OEX_DISMISS
 0x80000

	)

1830 
	#OEX_FPU_INVAL
 0x10

	)

1831 
	#OEX_FPU_DIV0
 0x08

	)

1832 
	#OEX_FPU_OFLO
 0x04

	)

1833 
	#OEX_FPU_UFLO
 0x02

	)

1834 
	#OEX_FPU_INEX
 0x01

	)

1838 
	#OHW_R4KEOP
 0x1

	)

1839 
	#OHW_R8KPFETCH
 0x2

	)

1840 
	#OHW_R5KEOP
 0x4

	)

1841 
	#OHW_R5KCVTL
 0x8

	)

1843 
	#OPAD_PREFIX
 0x1

	)

1844 
	#OPAD_POSTFIX
 0x2

	)

1845 
	#OPAD_SYMBOL
 0x4

	)

1851 
Elf32_W‹d
 
	mhwp_Êags1
;

1852 
Elf32_W‹d
 
	mhwp_Êags2
;

1853 } 
	tElf_O±i⁄s_Hw
;

1857 
	#OHWA0_R4KEOP_CHECKED
 0x00000001

	)

1858 
	#OHWA1_R4KEOP_CLEAN
 0x00000002

	)

1862 
	#R_MIPS_NONE
 0

	)

1863 
	#R_MIPS_16
 1

	)

1864 
	#R_MIPS_32
 2

	)

1865 
	#R_MIPS_REL32
 3

	)

1866 
	#R_MIPS_26
 4

	)

1867 
	#R_MIPS_HI16
 5

	)

1868 
	#R_MIPS_LO16
 6

	)

1869 
	#R_MIPS_GPREL16
 7

	)

1870 
	#R_MIPS_LITERAL
 8

	)

1871 
	#R_MIPS_GOT16
 9

	)

1872 
	#R_MIPS_PC16
 10

	)

1873 
	#R_MIPS_CALL16
 11

	)

1874 
	#R_MIPS_GPREL32
 12

	)

1876 
	#R_MIPS_SHIFT5
 16

	)

1877 
	#R_MIPS_SHIFT6
 17

	)

1878 
	#R_MIPS_64
 18

	)

1879 
	#R_MIPS_GOT_DISP
 19

	)

1880 
	#R_MIPS_GOT_PAGE
 20

	)

1881 
	#R_MIPS_GOT_OFST
 21

	)

1882 
	#R_MIPS_GOT_HI16
 22

	)

1883 
	#R_MIPS_GOT_LO16
 23

	)

1884 
	#R_MIPS_SUB
 24

	)

1885 
	#R_MIPS_INSERT_A
 25

	)

1886 
	#R_MIPS_INSERT_B
 26

	)

1887 
	#R_MIPS_DELETE
 27

	)

1888 
	#R_MIPS_HIGHER
 28

	)

1889 
	#R_MIPS_HIGHEST
 29

	)

1890 
	#R_MIPS_CALL_HI16
 30

	)

1891 
	#R_MIPS_CALL_LO16
 31

	)

1892 
	#R_MIPS_SCN_DISP
 32

	)

1893 
	#R_MIPS_REL16
 33

	)

1894 
	#R_MIPS_ADD_IMMEDIATE
 34

	)

1895 
	#R_MIPS_PJUMP
 35

	)

1896 
	#R_MIPS_RELGOT
 36

	)

1897 
	#R_MIPS_JALR
 37

	)

1898 
	#R_MIPS_TLS_DTPMOD32
 38

	)

1899 
	#R_MIPS_TLS_DTPREL32
 39

	)

1900 
	#R_MIPS_TLS_DTPMOD64
 40

	)

1901 
	#R_MIPS_TLS_DTPREL64
 41

	)

1902 
	#R_MIPS_TLS_GD
 42

	)

1903 
	#R_MIPS_TLS_LDM
 43

	)

1904 
	#R_MIPS_TLS_DTPREL_HI16
 44

	)

1905 
	#R_MIPS_TLS_DTPREL_LO16
 45

	)

1906 
	#R_MIPS_TLS_GOTTPREL
 46

	)

1907 
	#R_MIPS_TLS_TPREL32
 47

	)

1908 
	#R_MIPS_TLS_TPREL64
 48

	)

1909 
	#R_MIPS_TLS_TPREL_HI16
 49

	)

1910 
	#R_MIPS_TLS_TPREL_LO16
 50

	)

1911 
	#R_MIPS_GLOB_DAT
 51

	)

1912 
	#R_MIPS_COPY
 126

	)

1913 
	#R_MIPS_JUMP_SLOT
 127

	)

1915 
	#R_MIPS_NUM
 128

	)

1919 
	#PT_MIPS_REGINFO
 0x70000000

	)

1920 
	#PT_MIPS_RTPROC
 0x70000001

	)

1921 
	#PT_MIPS_OPTIONS
 0x70000002

	)

1922 
	#PT_MIPS_ABIFLAGS
 0x70000003

	)

1926 
	#PF_MIPS_LOCAL
 0x10000000

	)

1930 
	#DT_MIPS_RLD_VERSION
 0x70000001

	)

1931 
	#DT_MIPS_TIME_STAMP
 0x70000002

	)

1932 
	#DT_MIPS_ICHECKSUM
 0x70000003

	)

1933 
	#DT_MIPS_IVERSION
 0x70000004

	)

1934 
	#DT_MIPS_FLAGS
 0x70000005

	)

1935 
	#DT_MIPS_BASE_ADDRESS
 0x70000006

	)

1936 
	#DT_MIPS_MSYM
 0x70000007

	)

1937 
	#DT_MIPS_CONFLICT
 0x70000008

	)

1938 
	#DT_MIPS_LIBLIST
 0x70000009

	)

1939 
	#DT_MIPS_LOCAL_GOTNO
 0x7000000®

	)

1940 
	#DT_MIPS_CONFLICTNO
 0x7000000b

	)

1941 
	#DT_MIPS_LIBLISTNO
 0x70000010

	)

1942 
	#DT_MIPS_SYMTABNO
 0x70000011

	)

1943 
	#DT_MIPS_UNREFEXTNO
 0x70000012

	)

1944 
	#DT_MIPS_GOTSYM
 0x70000013

	)

1945 
	#DT_MIPS_HIPAGENO
 0x70000014

	)

1946 
	#DT_MIPS_RLD_MAP
 0x70000016

	)

1947 
	#DT_MIPS_DELTA_CLASS
 0x70000017

	)

1948 
	#DT_MIPS_DELTA_CLASS_NO
 0x70000018

	)

1950 
	#DT_MIPS_DELTA_INSTANCE
 0x70000019

	)

1951 
	#DT_MIPS_DELTA_INSTANCE_NO
 0x7000001®

	)

1953 
	#DT_MIPS_DELTA_RELOC
 0x7000001b

	)

1954 
	#DT_MIPS_DELTA_RELOC_NO
 0x7000001¯

	)

1956 
	#DT_MIPS_DELTA_SYM
 0x7000001d

	)

1958 
	#DT_MIPS_DELTA_SYM_NO
 0x7000001ê

	)

1960 
	#DT_MIPS_DELTA_CLASSSYM
 0x70000020

	)

1962 
	#DT_MIPS_DELTA_CLASSSYM_NO
 0x70000021

	)

1964 
	#DT_MIPS_CXX_FLAGS
 0x70000022

	)

1965 
	#DT_MIPS_PIXIE_INIT
 0x70000023

	)

1966 
	#DT_MIPS_SYMBOL_LIB
 0x70000024

	)

1967 
	#DT_MIPS_LOCALPAGE_GOTIDX
 0x70000025

	)

1968 
	#DT_MIPS_LOCAL_GOTIDX
 0x70000026

	)

1969 
	#DT_MIPS_HIDDEN_GOTIDX
 0x70000027

	)

1970 
	#DT_MIPS_PROTECTED_GOTIDX
 0x70000028

	)

1971 
	#DT_MIPS_OPTIONS
 0x70000029

	)

1972 
	#DT_MIPS_INTERFACE
 0x7000002®

	)

1973 
	#DT_MIPS_DYNSTR_ALIGN
 0x7000002b

	)

1974 
	#DT_MIPS_INTERFACE_SIZE
 0x7000002¯

	)

1975 
	#DT_MIPS_RLD_TEXT_RESOLVE_ADDR
 0x7000002d

	)

1977 
	#DT_MIPS_PERF_SUFFIX
 0x7000002ê

	)

1979 
	#DT_MIPS_COMPACT_SIZE
 0x7000002‡

	)

1980 
	#DT_MIPS_GP_VALUE
 0x70000030

	)

1981 
	#DT_MIPS_AUX_DYNAMIC
 0x70000031

	)

1983 
	#DT_MIPS_PLTGOT
 0x70000032

	)

1987 
	#DT_MIPS_RWPLT
 0x70000034

	)

1991 
	#DT_MIPS_RLD_MAP_REL
 0x70000035

	)

1993 
	#DT_MIPS_XHASH
 0x70000036

	)

1994 
	#DT_MIPS_NUM
 0x37

	)

1998 
	#RHF_NONE
 0

	)

1999 
	#RHF_QUICKSTART
 (1 << 0Ë

	)

2000 
	#RHF_NOTPOT
 (1 << 1Ë

	)

2001 
	#RHF_NO_LIBRARY_REPLACEMENT
 (1 << 2Ë

	)

2002 
	#RHF_NO_MOVE
 (1 << 3)

	)

2003 
	#RHF_SGI_ONLY
 (1 << 4)

	)

2004 
	#RHF_GUARANTEE_INIT
 (1 << 5)

	)

2005 
	#RHF_DELTA_C_PLUS_PLUS
 (1 << 6)

	)

2006 
	#RHF_GUARANTEE_START_INIT
 (1 << 7)

	)

2007 
	#RHF_PIXIE
 (1 << 8)

	)

2008 
	#RHF_DEFAULT_DELAY_LOAD
 (1 << 9)

	)

2009 
	#RHF_REQUICKSTART
 (1 << 10)

	)

2010 
	#RHF_REQUICKSTARTED
 (1 << 11)

	)

2011 
	#RHF_CORD
 (1 << 12)

	)

2012 
	#RHF_NO_UNRES_UNDEF
 (1 << 13)

	)

2013 
	#RHF_RLD_ORDER_SAFE
 (1 << 14)

	)

2019 
Elf32_W‹d
 
	ml_«me
;

2020 
Elf32_W‹d
 
	ml_time_°amp
;

2021 
Elf32_W‹d
 
	ml_checksum
;

2022 
Elf32_W‹d
 
	ml_vîsi⁄
;

2023 
Elf32_W‹d
 
	ml_Êags
;

2024 } 
	tElf32_Lib
;

2028 
Elf64_W‹d
 
	ml_«me
;

2029 
Elf64_W‹d
 
	ml_time_°amp
;

2030 
Elf64_W‹d
 
	ml_checksum
;

2031 
Elf64_W‹d
 
	ml_vîsi⁄
;

2032 
Elf64_W‹d
 
	ml_Êags
;

2033 } 
	tElf64_Lib
;

2038 
	#LL_NONE
 0

	)

2039 
	#LL_EXACT_MATCH
 (1 << 0Ë

	)

2040 
	#LL_IGNORE_INT_VER
 (1 << 1Ë

	)

2041 
	#LL_REQUIRE_MINOR
 (1 << 2)

	)

2042 
	#LL_EXPORTS
 (1 << 3)

	)

2043 
	#LL_DELAY_LOAD
 (1 << 4)

	)

2044 
	#LL_DELTA
 (1 << 5)

	)

2048 
Elf32_Addr
 
	tElf32_C⁄Êi˘
;

2053 
Elf32_HÆf
 
	mvîsi⁄
;

2055 
	miß_Àvñ
;

2057 
	miß_ªv
;

2059 
	mg¥_size
;

2061 
	m˝r1_size
;

2063 
	m˝r2_size
;

2065 
	mÂ_abi
;

2067 
Elf32_W‹d
 
	miß_ext
;

2069 
Elf32_W‹d
 
	ma£s
;

2071 
Elf32_W‹d
 
	mÊags1
;

2072 
Elf32_W‹d
 
	mÊags2
;

2073 } 
	tElf_MIPS_ABIFœgs_v0
;

2077 
	#MIPS_AFL_REG_NONE
 0x00

	)

2078 
	#MIPS_AFL_REG_32
 0x01

	)

2079 
	#MIPS_AFL_REG_64
 0x02

	)

2080 
	#MIPS_AFL_REG_128
 0x03

	)

2084 
	#MIPS_AFL_ASE_DSP
 0x00000001

	)

2085 
	#MIPS_AFL_ASE_DSPR2
 0x00000002

	)

2086 
	#MIPS_AFL_ASE_EVA
 0x00000004

	)

2087 
	#MIPS_AFL_ASE_MCU
 0x00000008

	)

2088 
	#MIPS_AFL_ASE_MDMX
 0x00000010

	)

2089 
	#MIPS_AFL_ASE_MIPS3D
 0x00000020

	)

2090 
	#MIPS_AFL_ASE_MT
 0x00000040

	)

2091 
	#MIPS_AFL_ASE_SMARTMIPS
 0x00000080

	)

2092 
	#MIPS_AFL_ASE_VIRT
 0x00000100

	)

2093 
	#MIPS_AFL_ASE_MSA
 0x00000200

	)

2094 
	#MIPS_AFL_ASE_MIPS16
 0x00000400

	)

2095 
	#MIPS_AFL_ASE_MICROMIPS
 0x00000800

	)

2096 
	#MIPS_AFL_ASE_XPA
 0x00001000

	)

2097 
	#MIPS_AFL_ASE_MASK
 0x00001ff‡

	)

2101 
	#MIPS_AFL_EXT_XLR
 1

	)

2102 
	#MIPS_AFL_EXT_OCTEON2
 2

	)

2103 
	#MIPS_AFL_EXT_OCTEONP
 3

	)

2104 
	#MIPS_AFL_EXT_LOONGSON_3A
 4

	)

2105 
	#MIPS_AFL_EXT_OCTEON
 5

	)

2106 
	#MIPS_AFL_EXT_5900
 6

	)

2107 
	#MIPS_AFL_EXT_4650
 7

	)

2108 
	#MIPS_AFL_EXT_4010
 8

	)

2109 
	#MIPS_AFL_EXT_4100
 9

	)

2110 
	#MIPS_AFL_EXT_3900
 10

	)

2111 
	#MIPS_AFL_EXT_10000
 11

	)

2112 
	#MIPS_AFL_EXT_SB1
 12

	)

2113 
	#MIPS_AFL_EXT_4111
 13

	)

2114 
	#MIPS_AFL_EXT_4120
 14

	)

2115 
	#MIPS_AFL_EXT_5400
 15

	)

2116 
	#MIPS_AFL_EXT_5500
 16

	)

2117 
	#MIPS_AFL_EXT_LOONGSON_2E
 17

	)

2118 
	#MIPS_AFL_EXT_LOONGSON_2F
 18

	)

2121 
	#MIPS_AFL_FLAGS1_ODDSPREG
 1

	)

2127 
	mVÆ_GNU_MIPS_ABI_FP_ANY
 = 0,

2129 
	mVÆ_GNU_MIPS_ABI_FP_DOUBLE
 = 1,

2131 
	mVÆ_GNU_MIPS_ABI_FP_SINGLE
 = 2,

2133 
	mVÆ_GNU_MIPS_ABI_FP_SOFT
 = 3,

2135 
	mVÆ_GNU_MIPS_ABI_FP_OLD_64
 = 4,

2137 
	mVÆ_GNU_MIPS_ABI_FP_XX
 = 5,

2139 
	mVÆ_GNU_MIPS_ABI_FP_64
 = 6,

2141 
	mVÆ_GNU_MIPS_ABI_FP_64A
 = 7,

2143 
	mVÆ_GNU_MIPS_ABI_FP_MAX
 = 7

2150 
	#EF_PARISC_TRAPNIL
 0x00010000

	)

2151 
	#EF_PARISC_EXT
 0x00020000

	)

2152 
	#EF_PARISC_LSB
 0x00040000

	)

2153 
	#EF_PARISC_WIDE
 0x00080000

	)

2154 
	#EF_PARISC_NO_KABP
 0x00100000

	)

2156 
	#EF_PARISC_LAZYSWAP
 0x00400000

	)

2157 
	#EF_PARISC_ARCH
 0x0000fff‡

	)

2161 
	#EFA_PARISC_1_0
 0x020b

	)

2162 
	#EFA_PARISC_1_1
 0x0210

	)

2163 
	#EFA_PARISC_2_0
 0x0214

	)

2167 
	#SHN_PARISC_ANSI_COMMON
 0xff00

	)

2169 
	#SHN_PARISC_HUGE_COMMON
 0xff01

	)

2173 
	#SHT_PARISC_EXT
 0x70000000

	)

2174 
	#SHT_PARISC_UNWIND
 0x70000001

	)

2175 
	#SHT_PARISC_DOC
 0x70000002

	)

2179 
	#SHF_PARISC_SHORT
 0x20000000

	)

2180 
	#SHF_PARISC_HUGE
 0x40000000

	)

2181 
	#SHF_PARISC_SBP
 0x80000000

	)

2185 
	#STT_PARISC_MILLICODE
 13

	)

2187 
	#STT_HP_OPAQUE
 (
STT_LOOS
 + 0x1)

	)

2188 
	#STT_HP_STUB
 (
STT_LOOS
 + 0x2)

	)

2192 
	#R_PARISC_NONE
 0

	)

2193 
	#R_PARISC_DIR32
 1

	)

2194 
	#R_PARISC_DIR21L
 2

	)

2195 
	#R_PARISC_DIR17R
 3

	)

2196 
	#R_PARISC_DIR17F
 4

	)

2197 
	#R_PARISC_DIR14R
 6

	)

2198 
	#R_PARISC_PCREL32
 9

	)

2199 
	#R_PARISC_PCREL21L
 10

	)

2200 
	#R_PARISC_PCREL17R
 11

	)

2201 
	#R_PARISC_PCREL17F
 12

	)

2202 
	#R_PARISC_PCREL14R
 14

	)

2203 
	#R_PARISC_DPREL21L
 18

	)

2204 
	#R_PARISC_DPREL14R
 22

	)

2205 
	#R_PARISC_GPREL21L
 26

	)

2206 
	#R_PARISC_GPREL14R
 30

	)

2207 
	#R_PARISC_LTOFF21L
 34

	)

2208 
	#R_PARISC_LTOFF14R
 38

	)

2209 
	#R_PARISC_SECREL32
 41

	)

2210 
	#R_PARISC_SEGBASE
 48

	)

2211 
	#R_PARISC_SEGREL32
 49

	)

2212 
	#R_PARISC_PLTOFF21L
 50

	)

2213 
	#R_PARISC_PLTOFF14R
 54

	)

2214 
	#R_PARISC_LTOFF_FPTR32
 57

	)

2215 
	#R_PARISC_LTOFF_FPTR21L
 58

	)

2216 
	#R_PARISC_LTOFF_FPTR14R
 62

	)

2217 
	#R_PARISC_FPTR64
 64

	)

2218 
	#R_PARISC_PLABEL32
 65

	)

2219 
	#R_PARISC_PLABEL21L
 66

	)

2220 
	#R_PARISC_PLABEL14R
 70

	)

2221 
	#R_PARISC_PCREL64
 72

	)

2222 
	#R_PARISC_PCREL22F
 74

	)

2223 
	#R_PARISC_PCREL14WR
 75

	)

2224 
	#R_PARISC_PCREL14DR
 76

	)

2225 
	#R_PARISC_PCREL16F
 77

	)

2226 
	#R_PARISC_PCREL16WF
 78

	)

2227 
	#R_PARISC_PCREL16DF
 79

	)

2228 
	#R_PARISC_DIR64
 80

	)

2229 
	#R_PARISC_DIR14WR
 83

	)

2230 
	#R_PARISC_DIR14DR
 84

	)

2231 
	#R_PARISC_DIR16F
 85

	)

2232 
	#R_PARISC_DIR16WF
 86

	)

2233 
	#R_PARISC_DIR16DF
 87

	)

2234 
	#R_PARISC_GPREL64
 88

	)

2235 
	#R_PARISC_GPREL14WR
 91

	)

2236 
	#R_PARISC_GPREL14DR
 92

	)

2237 
	#R_PARISC_GPREL16F
 93

	)

2238 
	#R_PARISC_GPREL16WF
 94

	)

2239 
	#R_PARISC_GPREL16DF
 95

	)

2240 
	#R_PARISC_LTOFF64
 96

	)

2241 
	#R_PARISC_LTOFF14WR
 99

	)

2242 
	#R_PARISC_LTOFF14DR
 100

	)

2243 
	#R_PARISC_LTOFF16F
 101

	)

2244 
	#R_PARISC_LTOFF16WF
 102

	)

2245 
	#R_PARISC_LTOFF16DF
 103

	)

2246 
	#R_PARISC_SECREL64
 104

	)

2247 
	#R_PARISC_SEGREL64
 112

	)

2248 
	#R_PARISC_PLTOFF14WR
 115

	)

2249 
	#R_PARISC_PLTOFF14DR
 116

	)

2250 
	#R_PARISC_PLTOFF16F
 117

	)

2251 
	#R_PARISC_PLTOFF16WF
 118

	)

2252 
	#R_PARISC_PLTOFF16DF
 119

	)

2253 
	#R_PARISC_LTOFF_FPTR64
 120

	)

2254 
	#R_PARISC_LTOFF_FPTR14WR
 123

	)

2255 
	#R_PARISC_LTOFF_FPTR14DR
 124

	)

2256 
	#R_PARISC_LTOFF_FPTR16F
 125

	)

2257 
	#R_PARISC_LTOFF_FPTR16WF
 126

	)

2258 
	#R_PARISC_LTOFF_FPTR16DF
 127

	)

2259 
	#R_PARISC_LORESERVE
 128

	)

2260 
	#R_PARISC_COPY
 128

	)

2261 
	#R_PARISC_IPLT
 129

	)

2262 
	#R_PARISC_EPLT
 130

	)

2263 
	#R_PARISC_TPREL32
 153

	)

2264 
	#R_PARISC_TPREL21L
 154

	)

2265 
	#R_PARISC_TPREL14R
 158

	)

2266 
	#R_PARISC_LTOFF_TP21L
 162

	)

2267 
	#R_PARISC_LTOFF_TP14R
 166

	)

2268 
	#R_PARISC_LTOFF_TP14F
 167

	)

2269 
	#R_PARISC_TPREL64
 216

	)

2270 
	#R_PARISC_TPREL14WR
 219

	)

2271 
	#R_PARISC_TPREL14DR
 220

	)

2272 
	#R_PARISC_TPREL16F
 221

	)

2273 
	#R_PARISC_TPREL16WF
 222

	)

2274 
	#R_PARISC_TPREL16DF
 223

	)

2275 
	#R_PARISC_LTOFF_TP64
 224

	)

2276 
	#R_PARISC_LTOFF_TP14WR
 227

	)

2277 
	#R_PARISC_LTOFF_TP14DR
 228

	)

2278 
	#R_PARISC_LTOFF_TP16F
 229

	)

2279 
	#R_PARISC_LTOFF_TP16WF
 230

	)

2280 
	#R_PARISC_LTOFF_TP16DF
 231

	)

2281 
	#R_PARISC_GNU_VTENTRY
 232

	)

2282 
	#R_PARISC_GNU_VTINHERIT
 233

	)

2283 
	#R_PARISC_TLS_GD21L
 234

	)

2284 
	#R_PARISC_TLS_GD14R
 235

	)

2285 
	#R_PARISC_TLS_GDCALL
 236

	)

2286 
	#R_PARISC_TLS_LDM21L
 237

	)

2287 
	#R_PARISC_TLS_LDM14R
 238

	)

2288 
	#R_PARISC_TLS_LDMCALL
 239

	)

2289 
	#R_PARISC_TLS_LDO21L
 240

	)

2290 
	#R_PARISC_TLS_LDO14R
 241

	)

2291 
	#R_PARISC_TLS_DTPMOD32
 242

	)

2292 
	#R_PARISC_TLS_DTPMOD64
 243

	)

2293 
	#R_PARISC_TLS_DTPOFF32
 244

	)

2294 
	#R_PARISC_TLS_DTPOFF64
 245

	)

2295 
	#R_PARISC_TLS_LE21L
 
R_PARISC_TPREL21L


	)

2296 
	#R_PARISC_TLS_LE14R
 
R_PARISC_TPREL14R


	)

2297 
	#R_PARISC_TLS_IE21L
 
R_PARISC_LTOFF_TP21L


	)

2298 
	#R_PARISC_TLS_IE14R
 
R_PARISC_LTOFF_TP14R


	)

2299 
	#R_PARISC_TLS_TPREL32
 
R_PARISC_TPREL32


	)

2300 
	#R_PARISC_TLS_TPREL64
 
R_PARISC_TPREL64


	)

2301 
	#R_PARISC_HIRESERVE
 255

	)

2305 
	#PT_HP_TLS
 (
PT_LOOS
 + 0x0)

	)

2306 
	#PT_HP_CORE_NONE
 (
PT_LOOS
 + 0x1)

	)

2307 
	#PT_HP_CORE_VERSION
 (
PT_LOOS
 + 0x2)

	)

2308 
	#PT_HP_CORE_KERNEL
 (
PT_LOOS
 + 0x3)

	)

2309 
	#PT_HP_CORE_COMM
 (
PT_LOOS
 + 0x4)

	)

2310 
	#PT_HP_CORE_PROC
 (
PT_LOOS
 + 0x5)

	)

2311 
	#PT_HP_CORE_LOADABLE
 (
PT_LOOS
 + 0x6)

	)

2312 
	#PT_HP_CORE_STACK
 (
PT_LOOS
 + 0x7)

	)

2313 
	#PT_HP_CORE_SHM
 (
PT_LOOS
 + 0x8)

	)

2314 
	#PT_HP_CORE_MMF
 (
PT_LOOS
 + 0x9)

	)

2315 
	#PT_HP_PARALLEL
 (
PT_LOOS
 + 0x10)

	)

2316 
	#PT_HP_FASTBIND
 (
PT_LOOS
 + 0x11)

	)

2317 
	#PT_HP_OPT_ANNOT
 (
PT_LOOS
 + 0x12)

	)

2318 
	#PT_HP_HSL_ANNOT
 (
PT_LOOS
 + 0x13)

	)

2319 
	#PT_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

2321 
	#PT_PARISC_ARCHEXT
 0x70000000

	)

2322 
	#PT_PARISC_UNWIND
 0x70000001

	)

2326 
	#PF_PARISC_SBP
 0x08000000

	)

2328 
	#PF_HP_PAGE_SIZE
 0x00100000

	)

2329 
	#PF_HP_FAR_SHARED
 0x00200000

	)

2330 
	#PF_HP_NEAR_SHARED
 0x00400000

	)

2331 
	#PF_HP_CODE
 0x01000000

	)

2332 
	#PF_HP_MODIFY
 0x02000000

	)

2333 
	#PF_HP_LAZYSWAP
 0x04000000

	)

2334 
	#PF_HP_SBP
 0x08000000

	)

2341 
	#EF_ALPHA_32BIT
 1

	)

2342 
	#EF_ALPHA_CANRELAX
 2

	)

2347 
	#SHT_ALPHA_DEBUG
 0x70000001

	)

2348 
	#SHT_ALPHA_REGINFO
 0x70000002

	)

2352 
	#SHF_ALPHA_GPREL
 0x10000000

	)

2355 
	#STO_ALPHA_NOPV
 0x80

	)

2356 
	#STO_ALPHA_STD_GPLOAD
 0x88

	)

2360 
	#R_ALPHA_NONE
 0

	)

2361 
	#R_ALPHA_REFLONG
 1

	)

2362 
	#R_ALPHA_REFQUAD
 2

	)

2363 
	#R_ALPHA_GPREL32
 3

	)

2364 
	#R_ALPHA_LITERAL
 4

	)

2365 
	#R_ALPHA_LITUSE
 5

	)

2366 
	#R_ALPHA_GPDISP
 6

	)

2367 
	#R_ALPHA_BRADDR
 7

	)

2368 
	#R_ALPHA_HINT
 8

	)

2369 
	#R_ALPHA_SREL16
 9

	)

2370 
	#R_ALPHA_SREL32
 10

	)

2371 
	#R_ALPHA_SREL64
 11

	)

2372 
	#R_ALPHA_GPRELHIGH
 17

	)

2373 
	#R_ALPHA_GPRELLOW
 18

	)

2374 
	#R_ALPHA_GPREL16
 19

	)

2375 
	#R_ALPHA_COPY
 24

	)

2376 
	#R_ALPHA_GLOB_DAT
 25

	)

2377 
	#R_ALPHA_JMP_SLOT
 26

	)

2378 
	#R_ALPHA_RELATIVE
 27

	)

2379 
	#R_ALPHA_TLS_GD_HI
 28

	)

2380 
	#R_ALPHA_TLSGD
 29

	)

2381 
	#R_ALPHA_TLS_LDM
 30

	)

2382 
	#R_ALPHA_DTPMOD64
 31

	)

2383 
	#R_ALPHA_GOTDTPREL
 32

	)

2384 
	#R_ALPHA_DTPREL64
 33

	)

2385 
	#R_ALPHA_DTPRELHI
 34

	)

2386 
	#R_ALPHA_DTPRELLO
 35

	)

2387 
	#R_ALPHA_DTPREL16
 36

	)

2388 
	#R_ALPHA_GOTTPREL
 37

	)

2389 
	#R_ALPHA_TPREL64
 38

	)

2390 
	#R_ALPHA_TPRELHI
 39

	)

2391 
	#R_ALPHA_TPRELLO
 40

	)

2392 
	#R_ALPHA_TPREL16
 41

	)

2394 
	#R_ALPHA_NUM
 46

	)

2397 
	#LITUSE_ALPHA_ADDR
 0

	)

2398 
	#LITUSE_ALPHA_BASE
 1

	)

2399 
	#LITUSE_ALPHA_BYTOFF
 2

	)

2400 
	#LITUSE_ALPHA_JSR
 3

	)

2401 
	#LITUSE_ALPHA_TLS_GD
 4

	)

2402 
	#LITUSE_ALPHA_TLS_LDM
 5

	)

2405 
	#DT_ALPHA_PLTRO
 (
DT_LOPROC
 + 0)

	)

2406 
	#DT_ALPHA_NUM
 1

	)

2411 
	#EF_PPC_EMB
 0x80000000

	)

2414 
	#EF_PPC_RELOCATABLE
 0x00010000

	)

2415 
	#EF_PPC_RELOCATABLE_LIB
 0x00008000

	)

2419 
	#R_PPC_NONE
 0

	)

2420 
	#R_PPC_ADDR32
 1

	)

2421 
	#R_PPC_ADDR24
 2

	)

2422 
	#R_PPC_ADDR16
 3

	)

2423 
	#R_PPC_ADDR16_LO
 4

	)

2424 
	#R_PPC_ADDR16_HI
 5

	)

2425 
	#R_PPC_ADDR16_HA
 6

	)

2426 
	#R_PPC_ADDR14
 7

	)

2427 
	#R_PPC_ADDR14_BRTAKEN
 8

	)

2428 
	#R_PPC_ADDR14_BRNTAKEN
 9

	)

2429 
	#R_PPC_REL24
 10

	)

2430 
	#R_PPC_REL14
 11

	)

2431 
	#R_PPC_REL14_BRTAKEN
 12

	)

2432 
	#R_PPC_REL14_BRNTAKEN
 13

	)

2433 
	#R_PPC_GOT16
 14

	)

2434 
	#R_PPC_GOT16_LO
 15

	)

2435 
	#R_PPC_GOT16_HI
 16

	)

2436 
	#R_PPC_GOT16_HA
 17

	)

2437 
	#R_PPC_PLTREL24
 18

	)

2438 
	#R_PPC_COPY
 19

	)

2439 
	#R_PPC_GLOB_DAT
 20

	)

2440 
	#R_PPC_JMP_SLOT
 21

	)

2441 
	#R_PPC_RELATIVE
 22

	)

2442 
	#R_PPC_LOCAL24PC
 23

	)

2443 
	#R_PPC_UADDR32
 24

	)

2444 
	#R_PPC_UADDR16
 25

	)

2445 
	#R_PPC_REL32
 26

	)

2446 
	#R_PPC_PLT32
 27

	)

2447 
	#R_PPC_PLTREL32
 28

	)

2448 
	#R_PPC_PLT16_LO
 29

	)

2449 
	#R_PPC_PLT16_HI
 30

	)

2450 
	#R_PPC_PLT16_HA
 31

	)

2451 
	#R_PPC_SDAREL16
 32

	)

2452 
	#R_PPC_SECTOFF
 33

	)

2453 
	#R_PPC_SECTOFF_LO
 34

	)

2454 
	#R_PPC_SECTOFF_HI
 35

	)

2455 
	#R_PPC_SECTOFF_HA
 36

	)

2458 
	#R_PPC_TLS
 67

	)

2459 
	#R_PPC_DTPMOD32
 68

	)

2460 
	#R_PPC_TPREL16
 69

	)

2461 
	#R_PPC_TPREL16_LO
 70

	)

2462 
	#R_PPC_TPREL16_HI
 71

	)

2463 
	#R_PPC_TPREL16_HA
 72

	)

2464 
	#R_PPC_TPREL32
 73

	)

2465 
	#R_PPC_DTPREL16
 74

	)

2466 
	#R_PPC_DTPREL16_LO
 75

	)

2467 
	#R_PPC_DTPREL16_HI
 76

	)

2468 
	#R_PPC_DTPREL16_HA
 77

	)

2469 
	#R_PPC_DTPREL32
 78

	)

2470 
	#R_PPC_GOT_TLSGD16
 79

	)

2471 
	#R_PPC_GOT_TLSGD16_LO
 80

	)

2472 
	#R_PPC_GOT_TLSGD16_HI
 81

	)

2473 
	#R_PPC_GOT_TLSGD16_HA
 82

	)

2474 
	#R_PPC_GOT_TLSLD16
 83

	)

2475 
	#R_PPC_GOT_TLSLD16_LO
 84

	)

2476 
	#R_PPC_GOT_TLSLD16_HI
 85

	)

2477 
	#R_PPC_GOT_TLSLD16_HA
 86

	)

2478 
	#R_PPC_GOT_TPREL16
 87

	)

2479 
	#R_PPC_GOT_TPREL16_LO
 88

	)

2480 
	#R_PPC_GOT_TPREL16_HI
 89

	)

2481 
	#R_PPC_GOT_TPREL16_HA
 90

	)

2482 
	#R_PPC_GOT_DTPREL16
 91

	)

2483 
	#R_PPC_GOT_DTPREL16_LO
 92

	)

2484 
	#R_PPC_GOT_DTPREL16_HI
 93

	)

2485 
	#R_PPC_GOT_DTPREL16_HA
 94

	)

2486 
	#R_PPC_TLSGD
 95

	)

2487 
	#R_PPC_TLSLD
 96

	)

2491 
	#R_PPC_EMB_NADDR32
 101

	)

2492 
	#R_PPC_EMB_NADDR16
 102

	)

2493 
	#R_PPC_EMB_NADDR16_LO
 103

	)

2494 
	#R_PPC_EMB_NADDR16_HI
 104

	)

2495 
	#R_PPC_EMB_NADDR16_HA
 105

	)

2496 
	#R_PPC_EMB_SDAI16
 106

	)

2497 
	#R_PPC_EMB_SDA2I16
 107

	)

2498 
	#R_PPC_EMB_SDA2REL
 108

	)

2499 
	#R_PPC_EMB_SDA21
 109

	)

2500 
	#R_PPC_EMB_MRKREF
 110

	)

2501 
	#R_PPC_EMB_RELSEC16
 111

	)

2502 
	#R_PPC_EMB_RELST_LO
 112

	)

2503 
	#R_PPC_EMB_RELST_HI
 113

	)

2504 
	#R_PPC_EMB_RELST_HA
 114

	)

2505 
	#R_PPC_EMB_BIT_FLD
 115

	)

2506 
	#R_PPC_EMB_RELSDA
 116

	)

2509 
	#R_PPC_DIAB_SDA21_LO
 180

	)

2510 
	#R_PPC_DIAB_SDA21_HI
 181

	)

2511 
	#R_PPC_DIAB_SDA21_HA
 182

	)

2512 
	#R_PPC_DIAB_RELSDA_LO
 183

	)

2513 
	#R_PPC_DIAB_RELSDA_HI
 184

	)

2514 
	#R_PPC_DIAB_RELSDA_HA
 185

	)

2517 
	#R_PPC_IRELATIVE
 248

	)

2520 
	#R_PPC_REL16
 249

	)

2521 
	#R_PPC_REL16_LO
 250

	)

2522 
	#R_PPC_REL16_HI
 251

	)

2523 
	#R_PPC_REL16_HA
 252

	)

2527 
	#R_PPC_TOC16
 255

	)

2530 
	#DT_PPC_GOT
 (
DT_LOPROC
 + 0)

	)

2531 
	#DT_PPC_OPT
 (
DT_LOPROC
 + 1)

	)

2532 
	#DT_PPC_NUM
 2

	)

2535 
	#PPC_OPT_TLS
 1

	)

2538 
	#R_PPC64_NONE
 
R_PPC_NONE


	)

2539 
	#R_PPC64_ADDR32
 
R_PPC_ADDR32


	)

2540 
	#R_PPC64_ADDR24
 
R_PPC_ADDR24


	)

2541 
	#R_PPC64_ADDR16
 
R_PPC_ADDR16


	)

2542 
	#R_PPC64_ADDR16_LO
 
R_PPC_ADDR16_LO


	)

2543 
	#R_PPC64_ADDR16_HI
 
R_PPC_ADDR16_HI


	)

2544 
	#R_PPC64_ADDR16_HA
 
R_PPC_ADDR16_HA


	)

2545 
	#R_PPC64_ADDR14
 
R_PPC_ADDR14


	)

2546 
	#R_PPC64_ADDR14_BRTAKEN
 
R_PPC_ADDR14_BRTAKEN


	)

2547 
	#R_PPC64_ADDR14_BRNTAKEN
 
R_PPC_ADDR14_BRNTAKEN


	)

2548 
	#R_PPC64_REL24
 
R_PPC_REL24


	)

2549 
	#R_PPC64_REL14
 
R_PPC_REL14


	)

2550 
	#R_PPC64_REL14_BRTAKEN
 
R_PPC_REL14_BRTAKEN


	)

2551 
	#R_PPC64_REL14_BRNTAKEN
 
R_PPC_REL14_BRNTAKEN


	)

2552 
	#R_PPC64_GOT16
 
R_PPC_GOT16


	)

2553 
	#R_PPC64_GOT16_LO
 
R_PPC_GOT16_LO


	)

2554 
	#R_PPC64_GOT16_HI
 
R_PPC_GOT16_HI


	)

2555 
	#R_PPC64_GOT16_HA
 
R_PPC_GOT16_HA


	)

2557 
	#R_PPC64_COPY
 
R_PPC_COPY


	)

2558 
	#R_PPC64_GLOB_DAT
 
R_PPC_GLOB_DAT


	)

2559 
	#R_PPC64_JMP_SLOT
 
R_PPC_JMP_SLOT


	)

2560 
	#R_PPC64_RELATIVE
 
R_PPC_RELATIVE


	)

2562 
	#R_PPC64_UADDR32
 
R_PPC_UADDR32


	)

2563 
	#R_PPC64_UADDR16
 
R_PPC_UADDR16


	)

2564 
	#R_PPC64_REL32
 
R_PPC_REL32


	)

2565 
	#R_PPC64_PLT32
 
R_PPC_PLT32


	)

2566 
	#R_PPC64_PLTREL32
 
R_PPC_PLTREL32


	)

2567 
	#R_PPC64_PLT16_LO
 
R_PPC_PLT16_LO


	)

2568 
	#R_PPC64_PLT16_HI
 
R_PPC_PLT16_HI


	)

2569 
	#R_PPC64_PLT16_HA
 
R_PPC_PLT16_HA


	)

2571 
	#R_PPC64_SECTOFF
 
R_PPC_SECTOFF


	)

2572 
	#R_PPC64_SECTOFF_LO
 
R_PPC_SECTOFF_LO


	)

2573 
	#R_PPC64_SECTOFF_HI
 
R_PPC_SECTOFF_HI


	)

2574 
	#R_PPC64_SECTOFF_HA
 
R_PPC_SECTOFF_HA


	)

2575 
	#R_PPC64_ADDR30
 37

	)

2576 
	#R_PPC64_ADDR64
 38

	)

2577 
	#R_PPC64_ADDR16_HIGHER
 39

	)

2578 
	#R_PPC64_ADDR16_HIGHERA
 40

	)

2579 
	#R_PPC64_ADDR16_HIGHEST
 41

	)

2580 
	#R_PPC64_ADDR16_HIGHESTA
 42

	)

2581 
	#R_PPC64_UADDR64
 43

	)

2582 
	#R_PPC64_REL64
 44

	)

2583 
	#R_PPC64_PLT64
 45

	)

2584 
	#R_PPC64_PLTREL64
 46

	)

2585 
	#R_PPC64_TOC16
 47

	)

2586 
	#R_PPC64_TOC16_LO
 48

	)

2587 
	#R_PPC64_TOC16_HI
 49

	)

2588 
	#R_PPC64_TOC16_HA
 50

	)

2589 
	#R_PPC64_TOC
 51

	)

2590 
	#R_PPC64_PLTGOT16
 52

	)

2591 
	#R_PPC64_PLTGOT16_LO
 53

	)

2592 
	#R_PPC64_PLTGOT16_HI
 54

	)

2593 
	#R_PPC64_PLTGOT16_HA
 55

	)

2595 
	#R_PPC64_ADDR16_DS
 56

	)

2596 
	#R_PPC64_ADDR16_LO_DS
 57

	)

2597 
	#R_PPC64_GOT16_DS
 58

	)

2598 
	#R_PPC64_GOT16_LO_DS
 59

	)

2599 
	#R_PPC64_PLT16_LO_DS
 60

	)

2600 
	#R_PPC64_SECTOFF_DS
 61

	)

2601 
	#R_PPC64_SECTOFF_LO_DS
 62

	)

2602 
	#R_PPC64_TOC16_DS
 63

	)

2603 
	#R_PPC64_TOC16_LO_DS
 64

	)

2604 
	#R_PPC64_PLTGOT16_DS
 65

	)

2605 
	#R_PPC64_PLTGOT16_LO_DS
 66

	)

2608 
	#R_PPC64_TLS
 67

	)

2609 
	#R_PPC64_DTPMOD64
 68

	)

2610 
	#R_PPC64_TPREL16
 69

	)

2611 
	#R_PPC64_TPREL16_LO
 70

	)

2612 
	#R_PPC64_TPREL16_HI
 71

	)

2613 
	#R_PPC64_TPREL16_HA
 72

	)

2614 
	#R_PPC64_TPREL64
 73

	)

2615 
	#R_PPC64_DTPREL16
 74

	)

2616 
	#R_PPC64_DTPREL16_LO
 75

	)

2617 
	#R_PPC64_DTPREL16_HI
 76

	)

2618 
	#R_PPC64_DTPREL16_HA
 77

	)

2619 
	#R_PPC64_DTPREL64
 78

	)

2620 
	#R_PPC64_GOT_TLSGD16
 79

	)

2621 
	#R_PPC64_GOT_TLSGD16_LO
 80

	)

2622 
	#R_PPC64_GOT_TLSGD16_HI
 81

	)

2623 
	#R_PPC64_GOT_TLSGD16_HA
 82

	)

2624 
	#R_PPC64_GOT_TLSLD16
 83

	)

2625 
	#R_PPC64_GOT_TLSLD16_LO
 84

	)

2626 
	#R_PPC64_GOT_TLSLD16_HI
 85

	)

2627 
	#R_PPC64_GOT_TLSLD16_HA
 86

	)

2628 
	#R_PPC64_GOT_TPREL16_DS
 87

	)

2629 
	#R_PPC64_GOT_TPREL16_LO_DS
 88

	)

2630 
	#R_PPC64_GOT_TPREL16_HI
 89

	)

2631 
	#R_PPC64_GOT_TPREL16_HA
 90

	)

2632 
	#R_PPC64_GOT_DTPREL16_DS
 91

	)

2633 
	#R_PPC64_GOT_DTPREL16_LO_DS
 92

	)

2634 
	#R_PPC64_GOT_DTPREL16_HI
 93

	)

2635 
	#R_PPC64_GOT_DTPREL16_HA
 94

	)

2636 
	#R_PPC64_TPREL16_DS
 95

	)

2637 
	#R_PPC64_TPREL16_LO_DS
 96

	)

2638 
	#R_PPC64_TPREL16_HIGHER
 97

	)

2639 
	#R_PPC64_TPREL16_HIGHERA
 98

	)

2640 
	#R_PPC64_TPREL16_HIGHEST
 99

	)

2641 
	#R_PPC64_TPREL16_HIGHESTA
 100

	)

2642 
	#R_PPC64_DTPREL16_DS
 101

	)

2643 
	#R_PPC64_DTPREL16_LO_DS
 102

	)

2644 
	#R_PPC64_DTPREL16_HIGHER
 103

	)

2645 
	#R_PPC64_DTPREL16_HIGHERA
 104

	)

2646 
	#R_PPC64_DTPREL16_HIGHEST
 105

	)

2647 
	#R_PPC64_DTPREL16_HIGHESTA
 106

	)

2648 
	#R_PPC64_TLSGD
 107

	)

2649 
	#R_PPC64_TLSLD
 108

	)

2650 
	#R_PPC64_TOCSAVE
 109

	)

2653 
	#R_PPC64_ADDR16_HIGH
 110

	)

2654 
	#R_PPC64_ADDR16_HIGHA
 111

	)

2655 
	#R_PPC64_TPREL16_HIGH
 112

	)

2656 
	#R_PPC64_TPREL16_HIGHA
 113

	)

2657 
	#R_PPC64_DTPREL16_HIGH
 114

	)

2658 
	#R_PPC64_DTPREL16_HIGHA
 115

	)

2661 
	#R_PPC64_JMP_IREL
 247

	)

2662 
	#R_PPC64_IRELATIVE
 248

	)

2663 
	#R_PPC64_REL16
 249

	)

2664 
	#R_PPC64_REL16_LO
 250

	)

2665 
	#R_PPC64_REL16_HI
 251

	)

2666 
	#R_PPC64_REL16_HA
 252

	)

2672 
	#EF_PPC64_ABI
 3

	)

2675 
	#DT_PPC64_GLINK
 (
DT_LOPROC
 + 0)

	)

2676 
	#DT_PPC64_OPD
 (
DT_LOPROC
 + 1)

	)

2677 
	#DT_PPC64_OPDSZ
 (
DT_LOPROC
 + 2)

	)

2678 
	#DT_PPC64_OPT
 (
DT_LOPROC
 + 3)

	)

2679 
	#DT_PPC64_NUM
 4

	)

2682 
	#PPC64_OPT_TLS
 1

	)

2683 
	#PPC64_OPT_MULTI_TOC
 2

	)

2684 
	#PPC64_OPT_LOCALENTRY
 4

	)

2687 
	#STO_PPC64_LOCAL_BIT
 5

	)

2688 
	#STO_PPC64_LOCAL_MASK
 (7 << 
STO_PPC64_LOCAL_BIT
)

	)

2689 
	#PPC64_LOCAL_ENTRY_OFFSET
(
Ÿhî
) \

2690 (((1 << (((
Ÿhî
Ë& 
STO_PPC64_LOCAL_MASK
Ë>> 
STO_PPC64_LOCAL_BIT
)Ë>> 2Ë<< 2)

	)

2696 
	#EF_ARM_RELEXEC
 0x01

	)

2697 
	#EF_ARM_HASENTRY
 0x02

	)

2698 
	#EF_ARM_INTERWORK
 0x04

	)

2699 
	#EF_ARM_APCS_26
 0x08

	)

2700 
	#EF_ARM_APCS_FLOAT
 0x10

	)

2701 
	#EF_ARM_PIC
 0x20

	)

2702 
	#EF_ARM_ALIGN8
 0x40

	)

2703 
	#EF_ARM_NEW_ABI
 0x80

	)

2704 
	#EF_ARM_OLD_ABI
 0x100

	)

2705 
	#EF_ARM_SOFT_FLOAT
 0x200

	)

2706 
	#EF_ARM_VFP_FLOAT
 0x400

	)

2707 
	#EF_ARM_MAVERICK_FLOAT
 0x800

	)

2709 
	#EF_ARM_ABI_FLOAT_SOFT
 0x200

	)

2710 
	#EF_ARM_ABI_FLOAT_HARD
 0x400

	)

2715 
	#EF_ARM_SYMSARESORTED
 0x04

	)

2716 
	#EF_ARM_DYNSYMSUSESEGIDX
 0x08

	)

2717 
	#EF_ARM_MAPSYMSFIRST
 0x10

	)

2718 
	#EF_ARM_EABIMASK
 0XFF000000

	)

2721 
	#EF_ARM_BE8
 0x00800000

	)

2722 
	#EF_ARM_LE8
 0x00400000

	)

2724 
	#EF_ARM_EABI_VERSION
(
Êags
Ë((ÊagsË& 
EF_ARM_EABIMASK
)

	)

2725 
	#EF_ARM_EABI_UNKNOWN
 0x00000000

	)

2726 
	#EF_ARM_EABI_VER1
 0x01000000

	)

2727 
	#EF_ARM_EABI_VER2
 0x02000000

	)

2728 
	#EF_ARM_EABI_VER3
 0x03000000

	)

2729 
	#EF_ARM_EABI_VER4
 0x04000000

	)

2730 
	#EF_ARM_EABI_VER5
 0x05000000

	)

2733 
	#STT_ARM_TFUNC
 
STT_LOPROC


	)

2734 
	#STT_ARM_16BIT
 
STT_HIPROC


	)

2737 
	#SHF_ARM_ENTRYSECT
 0x10000000

	)

2738 
	#SHF_ARM_COMDEF
 0x80000000

	)

2742 
	#PF_ARM_SB
 0x10000000

	)

2744 
	#PF_ARM_PI
 0x20000000

	)

2745 
	#PF_ARM_ABS
 0x40000000

	)

2748 
	#PT_ARM_EXIDX
 (
PT_LOPROC
 + 1Ë

	)

2751 
	#SHT_ARM_EXIDX
 (
SHT_LOPROC
 + 1Ë

	)

2752 
	#SHT_ARM_PREEMPTMAP
 (
SHT_LOPROC
 + 2Ë

	)

2753 
	#SHT_ARM_ATTRIBUTES
 (
SHT_LOPROC
 + 3Ë

	)

2758 
	#R_AARCH64_NONE
 0

	)

2761 
	#R_AARCH64_P32_ABS32
 1

	)

2762 
	#R_AARCH64_P32_COPY
 180

	)

2763 
	#R_AARCH64_P32_GLOB_DAT
 181

	)

2764 
	#R_AARCH64_P32_JUMP_SLOT
 182

	)

2765 
	#R_AARCH64_P32_RELATIVE
 183

	)

2766 
	#R_AARCH64_P32_TLS_DTPMOD
 184

	)

2767 
	#R_AARCH64_P32_TLS_DTPREL
 185

	)

2768 
	#R_AARCH64_P32_TLS_TPREL
 186

	)

2769 
	#R_AARCH64_P32_TLSDESC
 187

	)

2770 
	#R_AARCH64_P32_IRELATIVE
 188

	)

2773 
	#R_AARCH64_ABS64
 257

	)

2774 
	#R_AARCH64_ABS32
 258

	)

2775 
	#R_AARCH64_ABS16
 259

	)

2776 
	#R_AARCH64_PREL64
 260

	)

2777 
	#R_AARCH64_PREL32
 261

	)

2778 
	#R_AARCH64_PREL16
 262

	)

2779 
	#R_AARCH64_MOVW_UABS_G0
 263

	)

2780 
	#R_AARCH64_MOVW_UABS_G0_NC
 264

	)

2781 
	#R_AARCH64_MOVW_UABS_G1
 265

	)

2782 
	#R_AARCH64_MOVW_UABS_G1_NC
 266

	)

2783 
	#R_AARCH64_MOVW_UABS_G2
 267

	)

2784 
	#R_AARCH64_MOVW_UABS_G2_NC
 268

	)

2785 
	#R_AARCH64_MOVW_UABS_G3
 269

	)

2786 
	#R_AARCH64_MOVW_SABS_G0
 270

	)

2787 
	#R_AARCH64_MOVW_SABS_G1
 271

	)

2788 
	#R_AARCH64_MOVW_SABS_G2
 272

	)

2789 
	#R_AARCH64_LD_PREL_LO19
 273

	)

2790 
	#R_AARCH64_ADR_PREL_LO21
 274

	)

2791 
	#R_AARCH64_ADR_PREL_PG_HI21
 275

	)

2792 
	#R_AARCH64_ADR_PREL_PG_HI21_NC
 276

	)

2793 
	#R_AARCH64_ADD_ABS_LO12_NC
 277

	)

2794 
	#R_AARCH64_LDST8_ABS_LO12_NC
 278

	)

2795 
	#R_AARCH64_TSTBR14
 279

	)

2796 
	#R_AARCH64_CONDBR19
 280

	)

2797 
	#R_AARCH64_JUMP26
 282

	)

2798 
	#R_AARCH64_CALL26
 283

	)

2799 
	#R_AARCH64_LDST16_ABS_LO12_NC
 284

	)

2800 
	#R_AARCH64_LDST32_ABS_LO12_NC
 285

	)

2801 
	#R_AARCH64_LDST64_ABS_LO12_NC
 286

	)

2802 
	#R_AARCH64_MOVW_PREL_G0
 287

	)

2803 
	#R_AARCH64_MOVW_PREL_G0_NC
 288

	)

2804 
	#R_AARCH64_MOVW_PREL_G1
 289

	)

2805 
	#R_AARCH64_MOVW_PREL_G1_NC
 290

	)

2806 
	#R_AARCH64_MOVW_PREL_G2
 291

	)

2807 
	#R_AARCH64_MOVW_PREL_G2_NC
 292

	)

2808 
	#R_AARCH64_MOVW_PREL_G3
 293

	)

2809 
	#R_AARCH64_LDST128_ABS_LO12_NC
 299

	)

2810 
	#R_AARCH64_MOVW_GOTOFF_G0
 300

	)

2811 
	#R_AARCH64_MOVW_GOTOFF_G0_NC
 301

	)

2812 
	#R_AARCH64_MOVW_GOTOFF_G1
 302

	)

2813 
	#R_AARCH64_MOVW_GOTOFF_G1_NC
 303

	)

2814 
	#R_AARCH64_MOVW_GOTOFF_G2
 304

	)

2815 
	#R_AARCH64_MOVW_GOTOFF_G2_NC
 305

	)

2816 
	#R_AARCH64_MOVW_GOTOFF_G3
 306

	)

2817 
	#R_AARCH64_GOTREL64
 307

	)

2818 
	#R_AARCH64_GOTREL32
 308

	)

2819 
	#R_AARCH64_GOT_LD_PREL19
 309

	)

2820 
	#R_AARCH64_LD64_GOTOFF_LO15
 310

	)

2821 
	#R_AARCH64_ADR_GOT_PAGE
 311

	)

2822 
	#R_AARCH64_LD64_GOT_LO12_NC
 312

	)

2823 
	#R_AARCH64_LD64_GOTPAGE_LO15
 313

	)

2824 
	#R_AARCH64_TLSGD_ADR_PREL21
 512

	)

2825 
	#R_AARCH64_TLSGD_ADR_PAGE21
 513

	)

2826 
	#R_AARCH64_TLSGD_ADD_LO12_NC
 514

	)

2827 
	#R_AARCH64_TLSGD_MOVW_G1
 515

	)

2828 
	#R_AARCH64_TLSGD_MOVW_G0_NC
 516

	)

2829 
	#R_AARCH64_TLSLD_ADR_PREL21
 517

	)

2830 
	#R_AARCH64_TLSLD_ADR_PAGE21
 518

	)

2831 
	#R_AARCH64_TLSLD_ADD_LO12_NC
 519

	)

2832 
	#R_AARCH64_TLSLD_MOVW_G1
 520

	)

2833 
	#R_AARCH64_TLSLD_MOVW_G0_NC
 521

	)

2834 
	#R_AARCH64_TLSLD_LD_PREL19
 522

	)

2835 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G2
 523

	)

2836 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1
 524

	)

2837 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G1_NC
 525

	)

2838 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0
 526

	)

2839 
	#R_AARCH64_TLSLD_MOVW_DTPREL_G0_NC
 527

	)

2840 
	#R_AARCH64_TLSLD_ADD_DTPREL_HI12
 528

	)

2841 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12
 529

	)

2842 
	#R_AARCH64_TLSLD_ADD_DTPREL_LO12_NC
 530

	)

2843 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12
 531

	)

2844 
	#R_AARCH64_TLSLD_LDST8_DTPREL_LO12_NC
 532

	)

2845 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12
 533

	)

2846 
	#R_AARCH64_TLSLD_LDST16_DTPREL_LO12_NC
 534

	)

2847 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12
 535

	)

2848 
	#R_AARCH64_TLSLD_LDST32_DTPREL_LO12_NC
 536

	)

2849 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12
 537

	)

2850 
	#R_AARCH64_TLSLD_LDST64_DTPREL_LO12_NC
 538

	)

2851 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G1
 539

	)

2852 
	#R_AARCH64_TLSIE_MOVW_GOTTPREL_G0_NC
 540

	)

2853 
	#R_AARCH64_TLSIE_ADR_GOTTPREL_PAGE21
 541

	)

2854 
	#R_AARCH64_TLSIE_LD64_GOTTPREL_LO12_NC
 542

	)

2855 
	#R_AARCH64_TLSIE_LD_GOTTPREL_PREL19
 543

	)

2856 
	#R_AARCH64_TLSLE_MOVW_TPREL_G2
 544

	)

2857 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1
 545

	)

2858 
	#R_AARCH64_TLSLE_MOVW_TPREL_G1_NC
 546

	)

2859 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0
 547

	)

2860 
	#R_AARCH64_TLSLE_MOVW_TPREL_G0_NC
 548

	)

2861 
	#R_AARCH64_TLSLE_ADD_TPREL_HI12
 549

	)

2862 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12
 550

	)

2863 
	#R_AARCH64_TLSLE_ADD_TPREL_LO12_NC
 551

	)

2864 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12
 552

	)

2865 
	#R_AARCH64_TLSLE_LDST8_TPREL_LO12_NC
 553

	)

2866 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12
 554

	)

2867 
	#R_AARCH64_TLSLE_LDST16_TPREL_LO12_NC
 555

	)

2868 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12
 556

	)

2869 
	#R_AARCH64_TLSLE_LDST32_TPREL_LO12_NC
 557

	)

2870 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12
 558

	)

2871 
	#R_AARCH64_TLSLE_LDST64_TPREL_LO12_NC
 559

	)

2872 
	#R_AARCH64_TLSDESC_LD_PREL19
 560

	)

2873 
	#R_AARCH64_TLSDESC_ADR_PREL21
 561

	)

2874 
	#R_AARCH64_TLSDESC_ADR_PAGE21
 562

	)

2875 
	#R_AARCH64_TLSDESC_LD64_LO12
 563

	)

2876 
	#R_AARCH64_TLSDESC_ADD_LO12
 564

	)

2877 
	#R_AARCH64_TLSDESC_OFF_G1
 565

	)

2878 
	#R_AARCH64_TLSDESC_OFF_G0_NC
 566

	)

2879 
	#R_AARCH64_TLSDESC_LDR
 567

	)

2880 
	#R_AARCH64_TLSDESC_ADD
 568

	)

2881 
	#R_AARCH64_TLSDESC_CALL
 569

	)

2882 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12
 570

	)

2883 
	#R_AARCH64_TLSLE_LDST128_TPREL_LO12_NC
 571

	)

2884 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12
 572

	)

2885 
	#R_AARCH64_TLSLD_LDST128_DTPREL_LO12_NC
 573

	)

2886 
	#R_AARCH64_COPY
 1024

	)

2887 
	#R_AARCH64_GLOB_DAT
 1025

	)

2888 
	#R_AARCH64_JUMP_SLOT
 1026

	)

2889 
	#R_AARCH64_RELATIVE
 1027

	)

2890 
	#R_AARCH64_TLS_DTPMOD
 1028

	)

2891 
	#R_AARCH64_TLS_DTPREL
 1029

	)

2892 
	#R_AARCH64_TLS_TPREL
 1030

	)

2893 
	#R_AARCH64_TLSDESC
 1031

	)

2894 
	#R_AARCH64_IRELATIVE
 1032

	)

2897 
	#DT_AARCH64_BTI_PLT
 (
DT_LOPROC
 + 1)

	)

2898 
	#DT_AARCH64_PAC_PLT
 (
DT_LOPROC
 + 3)

	)

2899 
	#DT_AARCH64_VARIANT_PCS
 (
DT_LOPROC
 + 5)

	)

2900 
	#DT_AARCH64_NUM
 6

	)

2903 
	#STO_AARCH64_VARIANT_PCS
 0x80

	)

2907 
	#R_ARM_NONE
 0

	)

2908 
	#R_ARM_PC24
 1

	)

2910 
	#R_ARM_ABS32
 2

	)

2911 
	#R_ARM_REL32
 3

	)

2912 
	#R_ARM_PC13
 4

	)

2913 
	#R_ARM_ABS16
 5

	)

2914 
	#R_ARM_ABS12
 6

	)

2915 
	#R_ARM_THM_ABS5
 7

	)

2916 
	#R_ARM_ABS8
 8

	)

2917 
	#R_ARM_SBREL32
 9

	)

2918 
	#R_ARM_THM_PC22
 10

	)

2919 
	#R_ARM_THM_PC8
 11

	)

2921 
	#R_ARM_AMP_VCALL9
 12

	)

2922 
	#R_ARM_SWI24
 13

	)

2923 
	#R_ARM_TLS_DESC
 13

	)

2924 
	#R_ARM_THM_SWI8
 14

	)

2925 
	#R_ARM_XPC25
 15

	)

2926 
	#R_ARM_THM_XPC22
 16

	)

2927 
	#R_ARM_TLS_DTPMOD32
 17

	)

2928 
	#R_ARM_TLS_DTPOFF32
 18

	)

2929 
	#R_ARM_TLS_TPOFF32
 19

	)

2930 
	#R_ARM_COPY
 20

	)

2931 
	#R_ARM_GLOB_DAT
 21

	)

2932 
	#R_ARM_JUMP_SLOT
 22

	)

2933 
	#R_ARM_RELATIVE
 23

	)

2934 
	#R_ARM_GOTOFF
 24

	)

2935 
	#R_ARM_GOTPC
 25

	)

2936 
	#R_ARM_GOT32
 26

	)

2937 
	#R_ARM_PLT32
 27

	)

2938 
	#R_ARM_CALL
 28

	)

2939 
	#R_ARM_JUMP24
 29

	)

2941 
	#R_ARM_THM_JUMP24
 30

	)

2942 
	#R_ARM_BASE_ABS
 31

	)

2943 
	#R_ARM_ALU_PCREL_7_0
 32

	)

2944 
	#R_ARM_ALU_PCREL_15_8
 33

	)

2945 
	#R_ARM_ALU_PCREL_23_15
 34

	)

2946 
	#R_ARM_LDR_SBREL_11_0
 35

	)

2947 
	#R_ARM_ALU_SBREL_19_12
 36

	)

2948 
	#R_ARM_ALU_SBREL_27_20
 37

	)

2949 
	#R_ARM_TARGET1
 38

	)

2950 
	#R_ARM_SBREL31
 39

	)

2951 
	#R_ARM_V4BX
 40

	)

2952 
	#R_ARM_TARGET2
 41

	)

2953 
	#R_ARM_PREL31
 42

	)

2954 
	#R_ARM_MOVW_ABS_NC
 43

	)

2955 
	#R_ARM_MOVT_ABS
 44

	)

2956 
	#R_ARM_MOVW_PREL_NC
 45

	)

2957 
	#R_ARM_MOVT_PREL
 46

	)

2958 
	#R_ARM_THM_MOVW_ABS_NC
 47

	)

2959 
	#R_ARM_THM_MOVT_ABS
 48

	)

2961 
	#R_ARM_THM_MOVW_PREL_NC
 49

	)

2963 
	#R_ARM_THM_MOVT_PREL
 50

	)

2965 
	#R_ARM_THM_JUMP19
 51

	)

2967 
	#R_ARM_THM_JUMP6
 52

	)

2969 
	#R_ARM_THM_ALU_PREL_11_0
 53

	)

2971 
	#R_ARM_THM_PC12
 54

	)

2973 
	#R_ARM_ABS32_NOI
 55

	)

2974 
	#R_ARM_REL32_NOI
 56

	)

2975 
	#R_ARM_ALU_PC_G0_NC
 57

	)

2976 
	#R_ARM_ALU_PC_G0
 58

	)

2977 
	#R_ARM_ALU_PC_G1_NC
 59

	)

2978 
	#R_ARM_ALU_PC_G1
 60

	)

2979 
	#R_ARM_ALU_PC_G2
 61

	)

2980 
	#R_ARM_LDR_PC_G1
 62

	)

2981 
	#R_ARM_LDR_PC_G2
 63

	)

2982 
	#R_ARM_LDRS_PC_G0
 64

	)

2984 
	#R_ARM_LDRS_PC_G1
 65

	)

2986 
	#R_ARM_LDRS_PC_G2
 66

	)

2988 
	#R_ARM_LDC_PC_G0
 67

	)

2989 
	#R_ARM_LDC_PC_G1
 68

	)

2990 
	#R_ARM_LDC_PC_G2
 69

	)

2991 
	#R_ARM_ALU_SB_G0_NC
 70

	)

2992 
	#R_ARM_ALU_SB_G0
 71

	)

2993 
	#R_ARM_ALU_SB_G1_NC
 72

	)

2994 
	#R_ARM_ALU_SB_G1
 73

	)

2995 
	#R_ARM_ALU_SB_G2
 74

	)

2996 
	#R_ARM_LDR_SB_G0
 75

	)

2998 
	#R_ARM_LDR_SB_G1
 76

	)

3000 
	#R_ARM_LDR_SB_G2
 77

	)

3002 
	#R_ARM_LDRS_SB_G0
 78

	)

3004 
	#R_ARM_LDRS_SB_G1
 79

	)

3006 
	#R_ARM_LDRS_SB_G2
 80

	)

3008 
	#R_ARM_LDC_SB_G0
 81

	)

3009 
	#R_ARM_LDC_SB_G1
 82

	)

3010 
	#R_ARM_LDC_SB_G2
 83

	)

3011 
	#R_ARM_MOVW_BREL_NC
 84

	)

3013 
	#R_ARM_MOVT_BREL
 85

	)

3015 
	#R_ARM_MOVW_BREL
 86

	)

3017 
	#R_ARM_THM_MOVW_BREL_NC
 87

	)

3019 
	#R_ARM_THM_MOVT_BREL
 88

	)

3021 
	#R_ARM_THM_MOVW_BREL
 89

	)

3023 
	#R_ARM_TLS_GOTDESC
 90

	)

3024 
	#R_ARM_TLS_CALL
 91

	)

3025 
	#R_ARM_TLS_DESCSEQ
 92

	)

3026 
	#R_ARM_THM_TLS_CALL
 93

	)

3027 
	#R_ARM_PLT32_ABS
 94

	)

3028 
	#R_ARM_GOT_ABS
 95

	)

3029 
	#R_ARM_GOT_PREL
 96

	)

3030 
	#R_ARM_GOT_BREL12
 97

	)

3032 
	#R_ARM_GOTOFF12
 98

	)

3034 
	#R_ARM_GOTRELAX
 99

	)

3035 
	#R_ARM_GNU_VTENTRY
 100

	)

3036 
	#R_ARM_GNU_VTINHERIT
 101

	)

3037 
	#R_ARM_THM_PC11
 102

	)

3038 
	#R_ARM_THM_PC9
 103

	)

3040 
	#R_ARM_TLS_GD32
 104

	)

3042 
	#R_ARM_TLS_LDM32
 105

	)

3044 
	#R_ARM_TLS_LDO32
 106

	)

3046 
	#R_ARM_TLS_IE32
 107

	)

3048 
	#R_ARM_TLS_LE32
 108

	)

3050 
	#R_ARM_TLS_LDO12
 109

	)

3052 
	#R_ARM_TLS_LE12
 110

	)

3054 
	#R_ARM_TLS_IE12GP
 111

	)

3056 
	#R_ARM_ME_TOO
 128

	)

3057 
	#R_ARM_THM_TLS_DESCSEQ
 129

	)

3058 
	#R_ARM_THM_TLS_DESCSEQ16
 129

	)

3059 
	#R_ARM_THM_TLS_DESCSEQ32
 130

	)

3060 
	#R_ARM_THM_GOT_BREL12
 131

	)

3062 
	#R_ARM_IRELATIVE
 160

	)

3063 
	#R_ARM_RXPC25
 249

	)

3064 
	#R_ARM_RSBREL32
 250

	)

3065 
	#R_ARM_THM_RPC22
 251

	)

3066 
	#R_ARM_RREL32
 252

	)

3067 
	#R_ARM_RABS22
 253

	)

3068 
	#R_ARM_RPC24
 254

	)

3069 
	#R_ARM_RBASE
 255

	)

3071 
	#R_ARM_NUM
 256

	)

3074 
	#R_CKCORE_NONE
 0

	)

3075 
	#R_CKCORE_ADDR32
 1

	)

3076 
	#R_CKCORE_PCRELIMM8BY4
 2

	)

3077 
	#R_CKCORE_PCRELIMM11BY2
 3

	)

3078 
	#R_CKCORE_PCREL32
 5

	)

3079 
	#R_CKCORE_PCRELJSR_IMM11BY2
 6

	)

3080 
	#R_CKCORE_RELATIVE
 9

	)

3081 
	#R_CKCORE_COPY
 10

	)

3082 
	#R_CKCORE_GLOB_DAT
 11

	)

3083 
	#R_CKCORE_JUMP_SLOT
 12

	)

3084 
	#R_CKCORE_GOTOFF
 13

	)

3085 
	#R_CKCORE_GOTPC
 14

	)

3086 
	#R_CKCORE_GOT32
 15

	)

3087 
	#R_CKCORE_PLT32
 16

	)

3088 
	#R_CKCORE_ADDRGOT
 17

	)

3089 
	#R_CKCORE_ADDRPLT
 18

	)

3090 
	#R_CKCORE_PCREL_IMM26BY2
 19

	)

3091 
	#R_CKCORE_PCREL_IMM16BY2
 20

	)

3092 
	#R_CKCORE_PCREL_IMM16BY4
 21

	)

3093 
	#R_CKCORE_PCREL_IMM10BY2
 22

	)

3094 
	#R_CKCORE_PCREL_IMM10BY4
 23

	)

3095 
	#R_CKCORE_ADDR_HI16
 24

	)

3097 
	#R_CKCORE_ADDR_LO16
 25

	)

3098 
	#R_CKCORE_GOTPC_HI16
 26

	)

3100 
	#R_CKCORE_GOTPC_LO16
 27

	)

3101 
	#R_CKCORE_GOTOFF_HI16
 28

	)

3103 
	#R_CKCORE_GOTOFF_LO16
 29

	)

3104 
	#R_CKCORE_GOT12
 30

	)

3105 
	#R_CKCORE_GOT_HI16
 31

	)

3107 
	#R_CKCORE_GOT_LO16
 32

	)

3108 
	#R_CKCORE_PLT12
 33

	)

3109 
	#R_CKCORE_PLT_HI16
 34

	)

3111 
	#R_CKCORE_PLT_LO16
 35

	)

3112 
	#R_CKCORE_ADDRGOT_HI16
 36

	)

3114 
	#R_CKCORE_ADDRGOT_LO16
 37

	)

3115 
	#R_CKCORE_ADDRPLT_HI16
 38

	)

3117 
	#R_CKCORE_ADDRPLT_LO16
 39

	)

3118 
	#R_CKCORE_PCREL_JSR_IMM26BY2
 40

	)

3119 
	#R_CKCORE_TOFFSET_LO16
 41

	)

3120 
	#R_CKCORE_DOFFSET_LO16
 42

	)

3121 
	#R_CKCORE_PCREL_IMM18BY2
 43

	)

3122 
	#R_CKCORE_DOFFSET_IMM18
 44

	)

3123 
	#R_CKCORE_DOFFSET_IMM18BY2
 45

	)

3124 
	#R_CKCORE_DOFFSET_IMM18BY4
 46

	)

3125 
	#R_CKCORE_GOT_IMM18BY4
 48

	)

3126 
	#R_CKCORE_PLT_IMM18BY4
 49

	)

3127 
	#R_CKCORE_PCREL_IMM7BY4
 50

	)

3128 
	#R_CKCORE_TLS_LE32
 51

	)

3129 
	#R_CKCORE_TLS_IE32
 52

	)

3130 
	#R_CKCORE_TLS_GD32
 53

	)

3131 
	#R_CKCORE_TLS_LDM32
 54

	)

3132 
	#R_CKCORE_TLS_LDO32
 55

	)

3133 
	#R_CKCORE_TLS_DTPMOD32
 56

	)

3134 
	#R_CKCORE_TLS_DTPOFF32
 57

	)

3135 
	#R_CKCORE_TLS_TPOFF32
 58

	)

3138 
	#EF_CSKY_ABIMASK
 0XF0000000

	)

3139 
	#EF_CSKY_OTHER
 0X0FFF0000

	)

3140 
	#EF_CSKY_PROCESSOR
 0X0000FFFF

	)

3142 
	#EF_CSKY_ABIV1
 0X10000000

	)

3143 
	#EF_CSKY_ABIV2
 0X20000000

	)

3146 
	#SHT_CSKY_ATTRIBUTES
 (
SHT_LOPROC
 + 1)

	)

3151 
	#EF_IA_64_MASKOS
 0x0000000‡

	)

3152 
	#EF_IA_64_ABI64
 0x00000010

	)

3153 
	#EF_IA_64_ARCH
 0xff000000

	)

3156 
	#PT_IA_64_ARCHEXT
 (
PT_LOPROC
 + 0Ë

	)

3157 
	#PT_IA_64_UNWIND
 (
PT_LOPROC
 + 1Ë

	)

3158 
	#PT_IA_64_HP_OPT_ANOT
 (
PT_LOOS
 + 0x12)

	)

3159 
	#PT_IA_64_HP_HSL_ANOT
 (
PT_LOOS
 + 0x13)

	)

3160 
	#PT_IA_64_HP_STACK
 (
PT_LOOS
 + 0x14)

	)

3163 
	#PF_IA_64_NORECOV
 0x80000000

	)

3166 
	#SHT_IA_64_EXT
 (
SHT_LOPROC
 + 0Ë

	)

3167 
	#SHT_IA_64_UNWIND
 (
SHT_LOPROC
 + 1Ë

	)

3170 
	#SHF_IA_64_SHORT
 0x10000000

	)

3171 
	#SHF_IA_64_NORECOV
 0x20000000

	)

3174 
	#DT_IA_64_PLT_RESERVE
 (
DT_LOPROC
 + 0)

	)

3175 
	#DT_IA_64_NUM
 1

	)

3178 
	#R_IA64_NONE
 0x00

	)

3179 
	#R_IA64_IMM14
 0x21

	)

3180 
	#R_IA64_IMM22
 0x22

	)

3181 
	#R_IA64_IMM64
 0x23

	)

3182 
	#R_IA64_DIR32MSB
 0x24

	)

3183 
	#R_IA64_DIR32LSB
 0x25

	)

3184 
	#R_IA64_DIR64MSB
 0x26

	)

3185 
	#R_IA64_DIR64LSB
 0x27

	)

3186 
	#R_IA64_GPREL22
 0x2®

	)

3187 
	#R_IA64_GPREL64I
 0x2b

	)

3188 
	#R_IA64_GPREL32MSB
 0x2¯

	)

3189 
	#R_IA64_GPREL32LSB
 0x2d

	)

3190 
	#R_IA64_GPREL64MSB
 0x2ê

	)

3191 
	#R_IA64_GPREL64LSB
 0x2‡

	)

3192 
	#R_IA64_LTOFF22
 0x32

	)

3193 
	#R_IA64_LTOFF64I
 0x33

	)

3194 
	#R_IA64_PLTOFF22
 0x3®

	)

3195 
	#R_IA64_PLTOFF64I
 0x3b

	)

3196 
	#R_IA64_PLTOFF64MSB
 0x3ê

	)

3197 
	#R_IA64_PLTOFF64LSB
 0x3‡

	)

3198 
	#R_IA64_FPTR64I
 0x43

	)

3199 
	#R_IA64_FPTR32MSB
 0x44

	)

3200 
	#R_IA64_FPTR32LSB
 0x45

	)

3201 
	#R_IA64_FPTR64MSB
 0x46

	)

3202 
	#R_IA64_FPTR64LSB
 0x47

	)

3203 
	#R_IA64_PCREL60B
 0x48

	)

3204 
	#R_IA64_PCREL21B
 0x49

	)

3205 
	#R_IA64_PCREL21M
 0x4®

	)

3206 
	#R_IA64_PCREL21F
 0x4b

	)

3207 
	#R_IA64_PCREL32MSB
 0x4¯

	)

3208 
	#R_IA64_PCREL32LSB
 0x4d

	)

3209 
	#R_IA64_PCREL64MSB
 0x4ê

	)

3210 
	#R_IA64_PCREL64LSB
 0x4‡

	)

3211 
	#R_IA64_LTOFF_FPTR22
 0x52

	)

3212 
	#R_IA64_LTOFF_FPTR64I
 0x53

	)

3213 
	#R_IA64_LTOFF_FPTR32MSB
 0x54

	)

3214 
	#R_IA64_LTOFF_FPTR32LSB
 0x55

	)

3215 
	#R_IA64_LTOFF_FPTR64MSB
 0x56

	)

3216 
	#R_IA64_LTOFF_FPTR64LSB
 0x57

	)

3217 
	#R_IA64_SEGREL32MSB
 0x5¯

	)

3218 
	#R_IA64_SEGREL32LSB
 0x5d

	)

3219 
	#R_IA64_SEGREL64MSB
 0x5ê

	)

3220 
	#R_IA64_SEGREL64LSB
 0x5‡

	)

3221 
	#R_IA64_SECREL32MSB
 0x64

	)

3222 
	#R_IA64_SECREL32LSB
 0x65

	)

3223 
	#R_IA64_SECREL64MSB
 0x66

	)

3224 
	#R_IA64_SECREL64LSB
 0x67

	)

3225 
	#R_IA64_REL32MSB
 0x6¯

	)

3226 
	#R_IA64_REL32LSB
 0x6d

	)

3227 
	#R_IA64_REL64MSB
 0x6ê

	)

3228 
	#R_IA64_REL64LSB
 0x6‡

	)

3229 
	#R_IA64_LTV32MSB
 0x74

	)

3230 
	#R_IA64_LTV32LSB
 0x75

	)

3231 
	#R_IA64_LTV64MSB
 0x76

	)

3232 
	#R_IA64_LTV64LSB
 0x77

	)

3233 
	#R_IA64_PCREL21BI
 0x79

	)

3234 
	#R_IA64_PCREL22
 0x7®

	)

3235 
	#R_IA64_PCREL64I
 0x7b

	)

3236 
	#R_IA64_IPLTMSB
 0x80

	)

3237 
	#R_IA64_IPLTLSB
 0x81

	)

3238 
	#R_IA64_COPY
 0x84

	)

3239 
	#R_IA64_SUB
 0x85

	)

3240 
	#R_IA64_LTOFF22X
 0x86

	)

3241 
	#R_IA64_LDXMOV
 0x87

	)

3242 
	#R_IA64_TPREL14
 0x91

	)

3243 
	#R_IA64_TPREL22
 0x92

	)

3244 
	#R_IA64_TPREL64I
 0x93

	)

3245 
	#R_IA64_TPREL64MSB
 0x96

	)

3246 
	#R_IA64_TPREL64LSB
 0x97

	)

3247 
	#R_IA64_LTOFF_TPREL22
 0x9®

	)

3248 
	#R_IA64_DTPMOD64MSB
 0xa6

	)

3249 
	#R_IA64_DTPMOD64LSB
 0xa7

	)

3250 
	#R_IA64_LTOFF_DTPMOD22
 0xØ

	)

3251 
	#R_IA64_DTPREL14
 0xb1

	)

3252 
	#R_IA64_DTPREL22
 0xb2

	)

3253 
	#R_IA64_DTPREL64I
 0xb3

	)

3254 
	#R_IA64_DTPREL32MSB
 0xb4

	)

3255 
	#R_IA64_DTPREL32LSB
 0xb5

	)

3256 
	#R_IA64_DTPREL64MSB
 0xb6

	)

3257 
	#R_IA64_DTPREL64LSB
 0xb7

	)

3258 
	#R_IA64_LTOFF_DTPREL22
 0xb®

	)

3263 
	#EF_SH_MACH_MASK
 0x1f

	)

3264 
	#EF_SH_UNKNOWN
 0x0

	)

3265 
	#EF_SH1
 0x1

	)

3266 
	#EF_SH2
 0x2

	)

3267 
	#EF_SH3
 0x3

	)

3268 
	#EF_SH_DSP
 0x4

	)

3269 
	#EF_SH3_DSP
 0x5

	)

3270 
	#EF_SH4AL_DSP
 0x6

	)

3271 
	#EF_SH3E
 0x8

	)

3272 
	#EF_SH4
 0x9

	)

3273 
	#EF_SH2E
 0xb

	)

3274 
	#EF_SH4A
 0xc

	)

3275 
	#EF_SH2A
 0xd

	)

3276 
	#EF_SH4_NOFPU
 0x10

	)

3277 
	#EF_SH4A_NOFPU
 0x11

	)

3278 
	#EF_SH4_NOMMU_NOFPU
 0x12

	)

3279 
	#EF_SH2A_NOFPU
 0x13

	)

3280 
	#EF_SH3_NOMMU
 0x14

	)

3281 
	#EF_SH2A_SH4_NOFPU
 0x15

	)

3282 
	#EF_SH2A_SH3_NOFPU
 0x16

	)

3283 
	#EF_SH2A_SH4
 0x17

	)

3284 
	#EF_SH2A_SH3E
 0x18

	)

3287 
	#R_SH_NONE
 0

	)

3288 
	#R_SH_DIR32
 1

	)

3289 
	#R_SH_REL32
 2

	)

3290 
	#R_SH_DIR8WPN
 3

	)

3291 
	#R_SH_IND12W
 4

	)

3292 
	#R_SH_DIR8WPL
 5

	)

3293 
	#R_SH_DIR8WPZ
 6

	)

3294 
	#R_SH_DIR8BP
 7

	)

3295 
	#R_SH_DIR8W
 8

	)

3296 
	#R_SH_DIR8L
 9

	)

3297 
	#R_SH_SWITCH16
 25

	)

3298 
	#R_SH_SWITCH32
 26

	)

3299 
	#R_SH_USES
 27

	)

3300 
	#R_SH_COUNT
 28

	)

3301 
	#R_SH_ALIGN
 29

	)

3302 
	#R_SH_CODE
 30

	)

3303 
	#R_SH_DATA
 31

	)

3304 
	#R_SH_LABEL
 32

	)

3305 
	#R_SH_SWITCH8
 33

	)

3306 
	#R_SH_GNU_VTINHERIT
 34

	)

3307 
	#R_SH_GNU_VTENTRY
 35

	)

3308 
	#R_SH_TLS_GD_32
 144

	)

3309 
	#R_SH_TLS_LD_32
 145

	)

3310 
	#R_SH_TLS_LDO_32
 146

	)

3311 
	#R_SH_TLS_IE_32
 147

	)

3312 
	#R_SH_TLS_LE_32
 148

	)

3313 
	#R_SH_TLS_DTPMOD32
 149

	)

3314 
	#R_SH_TLS_DTPOFF32
 150

	)

3315 
	#R_SH_TLS_TPOFF32
 151

	)

3316 
	#R_SH_GOT32
 160

	)

3317 
	#R_SH_PLT32
 161

	)

3318 
	#R_SH_COPY
 162

	)

3319 
	#R_SH_GLOB_DAT
 163

	)

3320 
	#R_SH_JMP_SLOT
 164

	)

3321 
	#R_SH_RELATIVE
 165

	)

3322 
	#R_SH_GOTOFF
 166

	)

3323 
	#R_SH_GOTPC
 167

	)

3325 
	#R_SH_NUM
 256

	)

3331 
	#EF_S390_HIGH_GPRS
 0x00000001

	)

3335 
	#R_390_NONE
 0

	)

3336 
	#R_390_8
 1

	)

3337 
	#R_390_12
 2

	)

3338 
	#R_390_16
 3

	)

3339 
	#R_390_32
 4

	)

3340 
	#R_390_PC32
 5

	)

3341 
	#R_390_GOT12
 6

	)

3342 
	#R_390_GOT32
 7

	)

3343 
	#R_390_PLT32
 8

	)

3344 
	#R_390_COPY
 9

	)

3345 
	#R_390_GLOB_DAT
 10

	)

3346 
	#R_390_JMP_SLOT
 11

	)

3347 
	#R_390_RELATIVE
 12

	)

3348 
	#R_390_GOTOFF32
 13

	)

3349 
	#R_390_GOTPC
 14

	)

3350 
	#R_390_GOT16
 15

	)

3351 
	#R_390_PC16
 16

	)

3352 
	#R_390_PC16DBL
 17

	)

3353 
	#R_390_PLT16DBL
 18

	)

3354 
	#R_390_PC32DBL
 19

	)

3355 
	#R_390_PLT32DBL
 20

	)

3356 
	#R_390_GOTPCDBL
 21

	)

3357 
	#R_390_64
 22

	)

3358 
	#R_390_PC64
 23

	)

3359 
	#R_390_GOT64
 24

	)

3360 
	#R_390_PLT64
 25

	)

3361 
	#R_390_GOTENT
 26

	)

3362 
	#R_390_GOTOFF16
 27

	)

3363 
	#R_390_GOTOFF64
 28

	)

3364 
	#R_390_GOTPLT12
 29

	)

3365 
	#R_390_GOTPLT16
 30

	)

3366 
	#R_390_GOTPLT32
 31

	)

3367 
	#R_390_GOTPLT64
 32

	)

3368 
	#R_390_GOTPLTENT
 33

	)

3369 
	#R_390_PLTOFF16
 34

	)

3370 
	#R_390_PLTOFF32
 35

	)

3371 
	#R_390_PLTOFF64
 36

	)

3372 
	#R_390_TLS_LOAD
 37

	)

3373 
	#R_390_TLS_GDCALL
 38

	)

3375 
	#R_390_TLS_LDCALL
 39

	)

3377 
	#R_390_TLS_GD32
 40

	)

3379 
	#R_390_TLS_GD64
 41

	)

3381 
	#R_390_TLS_GOTIE12
 42

	)

3383 
	#R_390_TLS_GOTIE32
 43

	)

3385 
	#R_390_TLS_GOTIE64
 44

	)

3387 
	#R_390_TLS_LDM32
 45

	)

3389 
	#R_390_TLS_LDM64
 46

	)

3391 
	#R_390_TLS_IE32
 47

	)

3393 
	#R_390_TLS_IE64
 48

	)

3395 
	#R_390_TLS_IEENT
 49

	)

3397 
	#R_390_TLS_LE32
 50

	)

3399 
	#R_390_TLS_LE64
 51

	)

3401 
	#R_390_TLS_LDO32
 52

	)

3403 
	#R_390_TLS_LDO64
 53

	)

3405 
	#R_390_TLS_DTPMOD
 54

	)

3406 
	#R_390_TLS_DTPOFF
 55

	)

3407 
	#R_390_TLS_TPOFF
 56

	)

3409 
	#R_390_20
 57

	)

3410 
	#R_390_GOT20
 58

	)

3411 
	#R_390_GOTPLT20
 59

	)

3412 
	#R_390_TLS_GOTIE20
 60

	)

3414 
	#R_390_IRELATIVE
 61

	)

3416 
	#R_390_NUM
 62

	)

3420 
	#R_CRIS_NONE
 0

	)

3421 
	#R_CRIS_8
 1

	)

3422 
	#R_CRIS_16
 2

	)

3423 
	#R_CRIS_32
 3

	)

3424 
	#R_CRIS_8_PCREL
 4

	)

3425 
	#R_CRIS_16_PCREL
 5

	)

3426 
	#R_CRIS_32_PCREL
 6

	)

3427 
	#R_CRIS_GNU_VTINHERIT
 7

	)

3428 
	#R_CRIS_GNU_VTENTRY
 8

	)

3429 
	#R_CRIS_COPY
 9

	)

3430 
	#R_CRIS_GLOB_DAT
 10

	)

3431 
	#R_CRIS_JUMP_SLOT
 11

	)

3432 
	#R_CRIS_RELATIVE
 12

	)

3433 
	#R_CRIS_16_GOT
 13

	)

3434 
	#R_CRIS_32_GOT
 14

	)

3435 
	#R_CRIS_16_GOTPLT
 15

	)

3436 
	#R_CRIS_32_GOTPLT
 16

	)

3437 
	#R_CRIS_32_GOTREL
 17

	)

3438 
	#R_CRIS_32_PLT_GOTREL
 18

	)

3439 
	#R_CRIS_32_PLT_PCREL
 19

	)

3441 
	#R_CRIS_NUM
 20

	)

3445 
	#R_X86_64_NONE
 0

	)

3446 
	#R_X86_64_64
 1

	)

3447 
	#R_X86_64_PC32
 2

	)

3448 
	#R_X86_64_GOT32
 3

	)

3449 
	#R_X86_64_PLT32
 4

	)

3450 
	#R_X86_64_COPY
 5

	)

3451 
	#R_X86_64_GLOB_DAT
 6

	)

3452 
	#R_X86_64_JUMP_SLOT
 7

	)

3453 
	#R_X86_64_RELATIVE
 8

	)

3454 
	#R_X86_64_GOTPCREL
 9

	)

3456 
	#R_X86_64_32
 10

	)

3457 
	#R_X86_64_32S
 11

	)

3458 
	#R_X86_64_16
 12

	)

3459 
	#R_X86_64_PC16
 13

	)

3460 
	#R_X86_64_8
 14

	)

3461 
	#R_X86_64_PC8
 15

	)

3462 
	#R_X86_64_DTPMOD64
 16

	)

3463 
	#R_X86_64_DTPOFF64
 17

	)

3464 
	#R_X86_64_TPOFF64
 18

	)

3465 
	#R_X86_64_TLSGD
 19

	)

3467 
	#R_X86_64_TLSLD
 20

	)

3469 
	#R_X86_64_DTPOFF32
 21

	)

3470 
	#R_X86_64_GOTTPOFF
 22

	)

3472 
	#R_X86_64_TPOFF32
 23

	)

3473 
	#R_X86_64_PC64
 24

	)

3474 
	#R_X86_64_GOTOFF64
 25

	)

3475 
	#R_X86_64_GOTPC32
 26

	)

3477 
	#R_X86_64_GOT64
 27

	)

3478 
	#R_X86_64_GOTPCREL64
 28

	)

3480 
	#R_X86_64_GOTPC64
 29

	)

3481 
	#R_X86_64_GOTPLT64
 30

	)

3482 
	#R_X86_64_PLTOFF64
 31

	)

3484 
	#R_X86_64_SIZE32
 32

	)

3485 
	#R_X86_64_SIZE64
 33

	)

3486 
	#R_X86_64_GOTPC32_TLSDESC
 34

	)

3487 
	#R_X86_64_TLSDESC_CALL
 35

	)

3489 
	#R_X86_64_TLSDESC
 36

	)

3490 
	#R_X86_64_IRELATIVE
 37

	)

3491 
	#R_X86_64_RELATIVE64
 38

	)

3494 
	#R_X86_64_GOTPCRELX
 41

	)

3497 
	#R_X86_64_REX_GOTPCRELX
 42

	)

3500 
	#R_X86_64_NUM
 43

	)

3503 
	#SHT_X86_64_UNWIND
 0x70000001

	)

3507 
	#R_MN10300_NONE
 0

	)

3508 
	#R_MN10300_32
 1

	)

3509 
	#R_MN10300_16
 2

	)

3510 
	#R_MN10300_8
 3

	)

3511 
	#R_MN10300_PCREL32
 4

	)

3512 
	#R_MN10300_PCREL16
 5

	)

3513 
	#R_MN10300_PCREL8
 6

	)

3514 
	#R_MN10300_GNU_VTINHERIT
 7

	)

3515 
	#R_MN10300_GNU_VTENTRY
 8

	)

3516 
	#R_MN10300_24
 9

	)

3517 
	#R_MN10300_GOTPC32
 10

	)

3518 
	#R_MN10300_GOTPC16
 11

	)

3519 
	#R_MN10300_GOTOFF32
 12

	)

3520 
	#R_MN10300_GOTOFF24
 13

	)

3521 
	#R_MN10300_GOTOFF16
 14

	)

3522 
	#R_MN10300_PLT32
 15

	)

3523 
	#R_MN10300_PLT16
 16

	)

3524 
	#R_MN10300_GOT32
 17

	)

3525 
	#R_MN10300_GOT24
 18

	)

3526 
	#R_MN10300_GOT16
 19

	)

3527 
	#R_MN10300_COPY
 20

	)

3528 
	#R_MN10300_GLOB_DAT
 21

	)

3529 
	#R_MN10300_JMP_SLOT
 22

	)

3530 
	#R_MN10300_RELATIVE
 23

	)

3531 
	#R_MN10300_TLS_GD
 24

	)

3532 
	#R_MN10300_TLS_LD
 25

	)

3533 
	#R_MN10300_TLS_LDO
 26

	)

3534 
	#R_MN10300_TLS_GOTIE
 27

	)

3536 
	#R_MN10300_TLS_IE
 28

	)

3538 
	#R_MN10300_TLS_LE
 29

	)

3540 
	#R_MN10300_TLS_DTPMOD
 30

	)

3541 
	#R_MN10300_TLS_DTPOFF
 31

	)

3542 
	#R_MN10300_TLS_TPOFF
 32

	)

3543 
	#R_MN10300_SYM_DIFF
 33

	)

3545 
	#R_MN10300_ALIGN
 34

	)

3547 
	#R_MN10300_NUM
 35

	)

3551 
	#R_M32R_NONE
 0

	)

3552 
	#R_M32R_16
 1

	)

3553 
	#R_M32R_32
 2

	)

3554 
	#R_M32R_24
 3

	)

3555 
	#R_M32R_10_PCREL
 4

	)

3556 
	#R_M32R_18_PCREL
 5

	)

3557 
	#R_M32R_26_PCREL
 6

	)

3558 
	#R_M32R_HI16_ULO
 7

	)

3559 
	#R_M32R_HI16_SLO
 8

	)

3560 
	#R_M32R_LO16
 9

	)

3561 
	#R_M32R_SDA16
 10

	)

3562 
	#R_M32R_GNU_VTINHERIT
 11

	)

3563 
	#R_M32R_GNU_VTENTRY
 12

	)

3565 
	#R_M32R_16_RELA
 33

	)

3566 
	#R_M32R_32_RELA
 34

	)

3567 
	#R_M32R_24_RELA
 35

	)

3568 
	#R_M32R_10_PCREL_RELA
 36

	)

3569 
	#R_M32R_18_PCREL_RELA
 37

	)

3570 
	#R_M32R_26_PCREL_RELA
 38

	)

3571 
	#R_M32R_HI16_ULO_RELA
 39

	)

3572 
	#R_M32R_HI16_SLO_RELA
 40

	)

3573 
	#R_M32R_LO16_RELA
 41

	)

3574 
	#R_M32R_SDA16_RELA
 42

	)

3575 
	#R_M32R_RELA_GNU_VTINHERIT
 43

	)

3576 
	#R_M32R_RELA_GNU_VTENTRY
 44

	)

3577 
	#R_M32R_REL32
 45

	)

3579 
	#R_M32R_GOT24
 48

	)

3580 
	#R_M32R_26_PLTREL
 49

	)

3581 
	#R_M32R_COPY
 50

	)

3582 
	#R_M32R_GLOB_DAT
 51

	)

3583 
	#R_M32R_JMP_SLOT
 52

	)

3584 
	#R_M32R_RELATIVE
 53

	)

3585 
	#R_M32R_GOTOFF
 54

	)

3586 
	#R_M32R_GOTPC24
 55

	)

3587 
	#R_M32R_GOT16_HI_ULO
 56

	)

3589 
	#R_M32R_GOT16_HI_SLO
 57

	)

3591 
	#R_M32R_GOT16_LO
 58

	)

3592 
	#R_M32R_GOTPC_HI_ULO
 59

	)

3594 
	#R_M32R_GOTPC_HI_SLO
 60

	)

3596 
	#R_M32R_GOTPC_LO
 61

	)

3598 
	#R_M32R_GOTOFF_HI_ULO
 62

	)

3600 
	#R_M32R_GOTOFF_HI_SLO
 63

	)

3602 
	#R_M32R_GOTOFF_LO
 64

	)

3603 
	#R_M32R_NUM
 256

	)

3606 
	#R_MICROBLAZE_NONE
 0

	)

3607 
	#R_MICROBLAZE_32
 1

	)

3608 
	#R_MICROBLAZE_32_PCREL
 2

	)

3609 
	#R_MICROBLAZE_64_PCREL
 3

	)

3610 
	#R_MICROBLAZE_32_PCREL_LO
 4

	)

3611 
	#R_MICROBLAZE_64
 5

	)

3612 
	#R_MICROBLAZE_32_LO
 6

	)

3613 
	#R_MICROBLAZE_SRO32
 7

	)

3614 
	#R_MICROBLAZE_SRW32
 8

	)

3615 
	#R_MICROBLAZE_64_NONE
 9

	)

3616 
	#R_MICROBLAZE_32_SYM_OP_SYM
 10

	)

3617 
	#R_MICROBLAZE_GNU_VTINHERIT
 11

	)

3618 
	#R_MICROBLAZE_GNU_VTENTRY
 12

	)

3619 
	#R_MICROBLAZE_GOTPC_64
 13

	)

3620 
	#R_MICROBLAZE_GOT_64
 14

	)

3621 
	#R_MICROBLAZE_PLT_64
 15

	)

3622 
	#R_MICROBLAZE_REL
 16

	)

3623 
	#R_MICROBLAZE_JUMP_SLOT
 17

	)

3624 
	#R_MICROBLAZE_GLOB_DAT
 18

	)

3625 
	#R_MICROBLAZE_GOTOFF_64
 19

	)

3626 
	#R_MICROBLAZE_GOTOFF_32
 20

	)

3627 
	#R_MICROBLAZE_COPY
 21

	)

3628 
	#R_MICROBLAZE_TLS
 22

	)

3629 
	#R_MICROBLAZE_TLSGD
 23

	)

3630 
	#R_MICROBLAZE_TLSLD
 24

	)

3631 
	#R_MICROBLAZE_TLSDTPMOD32
 25

	)

3632 
	#R_MICROBLAZE_TLSDTPREL32
 26

	)

3633 
	#R_MICROBLAZE_TLSDTPREL64
 27

	)

3634 
	#R_MICROBLAZE_TLSGOTTPREL32
 28

	)

3635 
	#R_MICROBLAZE_TLSTPREL32
 29

	)

3638 
	#DT_NIOS2_GP
 0x70000002

	)

3641 
	#R_NIOS2_NONE
 0

	)

3642 
	#R_NIOS2_S16
 1

	)

3643 
	#R_NIOS2_U16
 2

	)

3644 
	#R_NIOS2_PCREL16
 3

	)

3645 
	#R_NIOS2_CALL26
 4

	)

3646 
	#R_NIOS2_IMM5
 5

	)

3647 
	#R_NIOS2_CACHE_OPX
 6

	)

3648 
	#R_NIOS2_IMM6
 7

	)

3649 
	#R_NIOS2_IMM8
 8

	)

3650 
	#R_NIOS2_HI16
 9

	)

3651 
	#R_NIOS2_LO16
 10

	)

3652 
	#R_NIOS2_HIADJ16
 11

	)

3653 
	#R_NIOS2_BFD_RELOC_32
 12

	)

3654 
	#R_NIOS2_BFD_RELOC_16
 13

	)

3655 
	#R_NIOS2_BFD_RELOC_8
 14

	)

3656 
	#R_NIOS2_GPREL
 15

	)

3657 
	#R_NIOS2_GNU_VTINHERIT
 16

	)

3658 
	#R_NIOS2_GNU_VTENTRY
 17

	)

3659 
	#R_NIOS2_UJMP
 18

	)

3660 
	#R_NIOS2_CJMP
 19

	)

3661 
	#R_NIOS2_CALLR
 20

	)

3662 
	#R_NIOS2_ALIGN
 21

	)

3664 
	#R_NIOS2_GOT16
 22

	)

3665 
	#R_NIOS2_CALL16
 23

	)

3666 
	#R_NIOS2_GOTOFF_LO
 24

	)

3667 
	#R_NIOS2_GOTOFF_HA
 25

	)

3668 
	#R_NIOS2_PCREL_LO
 26

	)

3669 
	#R_NIOS2_PCREL_HA
 27

	)

3670 
	#R_NIOS2_TLS_GD16
 28

	)

3671 
	#R_NIOS2_TLS_LDM16
 29

	)

3672 
	#R_NIOS2_TLS_LDO16
 30

	)

3673 
	#R_NIOS2_TLS_IE16
 31

	)

3674 
	#R_NIOS2_TLS_LE16
 32

	)

3675 
	#R_NIOS2_TLS_DTPMOD
 33

	)

3676 
	#R_NIOS2_TLS_DTPREL
 34

	)

3677 
	#R_NIOS2_TLS_TPREL
 35

	)

3678 
	#R_NIOS2_COPY
 36

	)

3679 
	#R_NIOS2_GLOB_DAT
 37

	)

3680 
	#R_NIOS2_JUMP_SLOT
 38

	)

3681 
	#R_NIOS2_RELATIVE
 39

	)

3682 
	#R_NIOS2_GOTOFF
 40

	)

3683 
	#R_NIOS2_CALL26_NOAT
 41

	)

3684 
	#R_NIOS2_GOT_LO
 42

	)

3685 
	#R_NIOS2_GOT_HA
 43

	)

3686 
	#R_NIOS2_CALL_LO
 44

	)

3687 
	#R_NIOS2_CALL_HA
 45

	)

3690 
	#R_TILEPRO_NONE
 0

	)

3691 
	#R_TILEPRO_32
 1

	)

3692 
	#R_TILEPRO_16
 2

	)

3693 
	#R_TILEPRO_8
 3

	)

3694 
	#R_TILEPRO_32_PCREL
 4

	)

3695 
	#R_TILEPRO_16_PCREL
 5

	)

3696 
	#R_TILEPRO_8_PCREL
 6

	)

3697 
	#R_TILEPRO_LO16
 7

	)

3698 
	#R_TILEPRO_HI16
 8

	)

3699 
	#R_TILEPRO_HA16
 9

	)

3700 
	#R_TILEPRO_COPY
 10

	)

3701 
	#R_TILEPRO_GLOB_DAT
 11

	)

3702 
	#R_TILEPRO_JMP_SLOT
 12

	)

3703 
	#R_TILEPRO_RELATIVE
 13

	)

3704 
	#R_TILEPRO_BROFF_X1
 14

	)

3705 
	#R_TILEPRO_JOFFLONG_X1
 15

	)

3706 
	#R_TILEPRO_JOFFLONG_X1_PLT
 16

	)

3707 
	#R_TILEPRO_IMM8_X0
 17

	)

3708 
	#R_TILEPRO_IMM8_Y0
 18

	)

3709 
	#R_TILEPRO_IMM8_X1
 19

	)

3710 
	#R_TILEPRO_IMM8_Y1
 20

	)

3711 
	#R_TILEPRO_MT_IMM15_X1
 21

	)

3712 
	#R_TILEPRO_MF_IMM15_X1
 22

	)

3713 
	#R_TILEPRO_IMM16_X0
 23

	)

3714 
	#R_TILEPRO_IMM16_X1
 24

	)

3715 
	#R_TILEPRO_IMM16_X0_LO
 25

	)

3716 
	#R_TILEPRO_IMM16_X1_LO
 26

	)

3717 
	#R_TILEPRO_IMM16_X0_HI
 27

	)

3718 
	#R_TILEPRO_IMM16_X1_HI
 28

	)

3719 
	#R_TILEPRO_IMM16_X0_HA
 29

	)

3720 
	#R_TILEPRO_IMM16_X1_HA
 30

	)

3721 
	#R_TILEPRO_IMM16_X0_PCREL
 31

	)

3722 
	#R_TILEPRO_IMM16_X1_PCREL
 32

	)

3723 
	#R_TILEPRO_IMM16_X0_LO_PCREL
 33

	)

3724 
	#R_TILEPRO_IMM16_X1_LO_PCREL
 34

	)

3725 
	#R_TILEPRO_IMM16_X0_HI_PCREL
 35

	)

3726 
	#R_TILEPRO_IMM16_X1_HI_PCREL
 36

	)

3727 
	#R_TILEPRO_IMM16_X0_HA_PCREL
 37

	)

3728 
	#R_TILEPRO_IMM16_X1_HA_PCREL
 38

	)

3729 
	#R_TILEPRO_IMM16_X0_GOT
 39

	)

3730 
	#R_TILEPRO_IMM16_X1_GOT
 40

	)

3731 
	#R_TILEPRO_IMM16_X0_GOT_LO
 41

	)

3732 
	#R_TILEPRO_IMM16_X1_GOT_LO
 42

	)

3733 
	#R_TILEPRO_IMM16_X0_GOT_HI
 43

	)

3734 
	#R_TILEPRO_IMM16_X1_GOT_HI
 44

	)

3735 
	#R_TILEPRO_IMM16_X0_GOT_HA
 45

	)

3736 
	#R_TILEPRO_IMM16_X1_GOT_HA
 46

	)

3737 
	#R_TILEPRO_MMSTART_X0
 47

	)

3738 
	#R_TILEPRO_MMEND_X0
 48

	)

3739 
	#R_TILEPRO_MMSTART_X1
 49

	)

3740 
	#R_TILEPRO_MMEND_X1
 50

	)

3741 
	#R_TILEPRO_SHAMT_X0
 51

	)

3742 
	#R_TILEPRO_SHAMT_X1
 52

	)

3743 
	#R_TILEPRO_SHAMT_Y0
 53

	)

3744 
	#R_TILEPRO_SHAMT_Y1
 54

	)

3745 
	#R_TILEPRO_DEST_IMM8_X1
 55

	)

3747 
	#R_TILEPRO_TLS_GD_CALL
 60

	)

3748 
	#R_TILEPRO_IMM8_X0_TLS_GD_ADD
 61

	)

3749 
	#R_TILEPRO_IMM8_X1_TLS_GD_ADD
 62

	)

3750 
	#R_TILEPRO_IMM8_Y0_TLS_GD_ADD
 63

	)

3751 
	#R_TILEPRO_IMM8_Y1_TLS_GD_ADD
 64

	)

3752 
	#R_TILEPRO_TLS_IE_LOAD
 65

	)

3753 
	#R_TILEPRO_IMM16_X0_TLS_GD
 66

	)

3754 
	#R_TILEPRO_IMM16_X1_TLS_GD
 67

	)

3755 
	#R_TILEPRO_IMM16_X0_TLS_GD_LO
 68

	)

3756 
	#R_TILEPRO_IMM16_X1_TLS_GD_LO
 69

	)

3757 
	#R_TILEPRO_IMM16_X0_TLS_GD_HI
 70

	)

3758 
	#R_TILEPRO_IMM16_X1_TLS_GD_HI
 71

	)

3759 
	#R_TILEPRO_IMM16_X0_TLS_GD_HA
 72

	)

3760 
	#R_TILEPRO_IMM16_X1_TLS_GD_HA
 73

	)

3761 
	#R_TILEPRO_IMM16_X0_TLS_IE
 74

	)

3762 
	#R_TILEPRO_IMM16_X1_TLS_IE
 75

	)

3763 
	#R_TILEPRO_IMM16_X0_TLS_IE_LO
 76

	)

3764 
	#R_TILEPRO_IMM16_X1_TLS_IE_LO
 77

	)

3765 
	#R_TILEPRO_IMM16_X0_TLS_IE_HI
 78

	)

3766 
	#R_TILEPRO_IMM16_X1_TLS_IE_HI
 79

	)

3767 
	#R_TILEPRO_IMM16_X0_TLS_IE_HA
 80

	)

3768 
	#R_TILEPRO_IMM16_X1_TLS_IE_HA
 81

	)

3769 
	#R_TILEPRO_TLS_DTPMOD32
 82

	)

3770 
	#R_TILEPRO_TLS_DTPOFF32
 83

	)

3771 
	#R_TILEPRO_TLS_TPOFF32
 84

	)

3772 
	#R_TILEPRO_IMM16_X0_TLS_LE
 85

	)

3773 
	#R_TILEPRO_IMM16_X1_TLS_LE
 86

	)

3774 
	#R_TILEPRO_IMM16_X0_TLS_LE_LO
 87

	)

3775 
	#R_TILEPRO_IMM16_X1_TLS_LE_LO
 88

	)

3776 
	#R_TILEPRO_IMM16_X0_TLS_LE_HI
 89

	)

3777 
	#R_TILEPRO_IMM16_X1_TLS_LE_HI
 90

	)

3778 
	#R_TILEPRO_IMM16_X0_TLS_LE_HA
 91

	)

3779 
	#R_TILEPRO_IMM16_X1_TLS_LE_HA
 92

	)

3781 
	#R_TILEPRO_GNU_VTINHERIT
 128

	)

3782 
	#R_TILEPRO_GNU_VTENTRY
 129

	)

3784 
	#R_TILEPRO_NUM
 130

	)

3788 
	#R_TILEGX_NONE
 0

	)

3789 
	#R_TILEGX_64
 1

	)

3790 
	#R_TILEGX_32
 2

	)

3791 
	#R_TILEGX_16
 3

	)

3792 
	#R_TILEGX_8
 4

	)

3793 
	#R_TILEGX_64_PCREL
 5

	)

3794 
	#R_TILEGX_32_PCREL
 6

	)

3795 
	#R_TILEGX_16_PCREL
 7

	)

3796 
	#R_TILEGX_8_PCREL
 8

	)

3797 
	#R_TILEGX_HW0
 9

	)

3798 
	#R_TILEGX_HW1
 10

	)

3799 
	#R_TILEGX_HW2
 11

	)

3800 
	#R_TILEGX_HW3
 12

	)

3801 
	#R_TILEGX_HW0_LAST
 13

	)

3802 
	#R_TILEGX_HW1_LAST
 14

	)

3803 
	#R_TILEGX_HW2_LAST
 15

	)

3804 
	#R_TILEGX_COPY
 16

	)

3805 
	#R_TILEGX_GLOB_DAT
 17

	)

3806 
	#R_TILEGX_JMP_SLOT
 18

	)

3807 
	#R_TILEGX_RELATIVE
 19

	)

3808 
	#R_TILEGX_BROFF_X1
 20

	)

3809 
	#R_TILEGX_JUMPOFF_X1
 21

	)

3810 
	#R_TILEGX_JUMPOFF_X1_PLT
 22

	)

3811 
	#R_TILEGX_IMM8_X0
 23

	)

3812 
	#R_TILEGX_IMM8_Y0
 24

	)

3813 
	#R_TILEGX_IMM8_X1
 25

	)

3814 
	#R_TILEGX_IMM8_Y1
 26

	)

3815 
	#R_TILEGX_DEST_IMM8_X1
 27

	)

3816 
	#R_TILEGX_MT_IMM14_X1
 28

	)

3817 
	#R_TILEGX_MF_IMM14_X1
 29

	)

3818 
	#R_TILEGX_MMSTART_X0
 30

	)

3819 
	#R_TILEGX_MMEND_X0
 31

	)

3820 
	#R_TILEGX_SHAMT_X0
 32

	)

3821 
	#R_TILEGX_SHAMT_X1
 33

	)

3822 
	#R_TILEGX_SHAMT_Y0
 34

	)

3823 
	#R_TILEGX_SHAMT_Y1
 35

	)

3824 
	#R_TILEGX_IMM16_X0_HW0
 36

	)

3825 
	#R_TILEGX_IMM16_X1_HW0
 37

	)

3826 
	#R_TILEGX_IMM16_X0_HW1
 38

	)

3827 
	#R_TILEGX_IMM16_X1_HW1
 39

	)

3828 
	#R_TILEGX_IMM16_X0_HW2
 40

	)

3829 
	#R_TILEGX_IMM16_X1_HW2
 41

	)

3830 
	#R_TILEGX_IMM16_X0_HW3
 42

	)

3831 
	#R_TILEGX_IMM16_X1_HW3
 43

	)

3832 
	#R_TILEGX_IMM16_X0_HW0_LAST
 44

	)

3833 
	#R_TILEGX_IMM16_X1_HW0_LAST
 45

	)

3834 
	#R_TILEGX_IMM16_X0_HW1_LAST
 46

	)

3835 
	#R_TILEGX_IMM16_X1_HW1_LAST
 47

	)

3836 
	#R_TILEGX_IMM16_X0_HW2_LAST
 48

	)

3837 
	#R_TILEGX_IMM16_X1_HW2_LAST
 49

	)

3838 
	#R_TILEGX_IMM16_X0_HW0_PCREL
 50

	)

3839 
	#R_TILEGX_IMM16_X1_HW0_PCREL
 51

	)

3840 
	#R_TILEGX_IMM16_X0_HW1_PCREL
 52

	)

3841 
	#R_TILEGX_IMM16_X1_HW1_PCREL
 53

	)

3842 
	#R_TILEGX_IMM16_X0_HW2_PCREL
 54

	)

3843 
	#R_TILEGX_IMM16_X1_HW2_PCREL
 55

	)

3844 
	#R_TILEGX_IMM16_X0_HW3_PCREL
 56

	)

3845 
	#R_TILEGX_IMM16_X1_HW3_PCREL
 57

	)

3846 
	#R_TILEGX_IMM16_X0_HW0_LAST_PCREL
 58

	)

3847 
	#R_TILEGX_IMM16_X1_HW0_LAST_PCREL
 59

	)

3848 
	#R_TILEGX_IMM16_X0_HW1_LAST_PCREL
 60

	)

3849 
	#R_TILEGX_IMM16_X1_HW1_LAST_PCREL
 61

	)

3850 
	#R_TILEGX_IMM16_X0_HW2_LAST_PCREL
 62

	)

3851 
	#R_TILEGX_IMM16_X1_HW2_LAST_PCREL
 63

	)

3852 
	#R_TILEGX_IMM16_X0_HW0_GOT
 64

	)

3853 
	#R_TILEGX_IMM16_X1_HW0_GOT
 65

	)

3854 
	#R_TILEGX_IMM16_X0_HW0_PLT_PCREL
 66

	)

3855 
	#R_TILEGX_IMM16_X1_HW0_PLT_PCREL
 67

	)

3856 
	#R_TILEGX_IMM16_X0_HW1_PLT_PCREL
 68

	)

3857 
	#R_TILEGX_IMM16_X1_HW1_PLT_PCREL
 69

	)

3858 
	#R_TILEGX_IMM16_X0_HW2_PLT_PCREL
 70

	)

3859 
	#R_TILEGX_IMM16_X1_HW2_PLT_PCREL
 71

	)

3860 
	#R_TILEGX_IMM16_X0_HW0_LAST_GOT
 72

	)

3861 
	#R_TILEGX_IMM16_X1_HW0_LAST_GOT
 73

	)

3862 
	#R_TILEGX_IMM16_X0_HW1_LAST_GOT
 74

	)

3863 
	#R_TILEGX_IMM16_X1_HW1_LAST_GOT
 75

	)

3864 
	#R_TILEGX_IMM16_X0_HW3_PLT_PCREL
 76

	)

3865 
	#R_TILEGX_IMM16_X1_HW3_PLT_PCREL
 77

	)

3866 
	#R_TILEGX_IMM16_X0_HW0_TLS_GD
 78

	)

3867 
	#R_TILEGX_IMM16_X1_HW0_TLS_GD
 79

	)

3868 
	#R_TILEGX_IMM16_X0_HW0_TLS_LE
 80

	)

3869 
	#R_TILEGX_IMM16_X1_HW0_TLS_LE
 81

	)

3870 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_LE
 82

	)

3871 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_LE
 83

	)

3872 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_LE
 84

	)

3873 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_LE
 85

	)

3874 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_GD
 86

	)

3875 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_GD
 87

	)

3876 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_GD
 88

	)

3877 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_GD
 89

	)

3879 
	#R_TILEGX_IMM16_X0_HW0_TLS_IE
 92

	)

3880 
	#R_TILEGX_IMM16_X1_HW0_TLS_IE
 93

	)

3881 
	#R_TILEGX_IMM16_X0_HW0_LAST_PLT_PCREL
 94

	)

3882 
	#R_TILEGX_IMM16_X1_HW0_LAST_PLT_PCREL
 95

	)

3883 
	#R_TILEGX_IMM16_X0_HW1_LAST_PLT_PCREL
 96

	)

3884 
	#R_TILEGX_IMM16_X1_HW1_LAST_PLT_PCREL
 97

	)

3885 
	#R_TILEGX_IMM16_X0_HW2_LAST_PLT_PCREL
 98

	)

3886 
	#R_TILEGX_IMM16_X1_HW2_LAST_PLT_PCREL
 99

	)

3887 
	#R_TILEGX_IMM16_X0_HW0_LAST_TLS_IE
 100

	)

3888 
	#R_TILEGX_IMM16_X1_HW0_LAST_TLS_IE
 101

	)

3889 
	#R_TILEGX_IMM16_X0_HW1_LAST_TLS_IE
 102

	)

3890 
	#R_TILEGX_IMM16_X1_HW1_LAST_TLS_IE
 103

	)

3892 
	#R_TILEGX_TLS_DTPMOD64
 106

	)

3893 
	#R_TILEGX_TLS_DTPOFF64
 107

	)

3894 
	#R_TILEGX_TLS_TPOFF64
 108

	)

3895 
	#R_TILEGX_TLS_DTPMOD32
 109

	)

3896 
	#R_TILEGX_TLS_DTPOFF32
 110

	)

3897 
	#R_TILEGX_TLS_TPOFF32
 111

	)

3898 
	#R_TILEGX_TLS_GD_CALL
 112

	)

3899 
	#R_TILEGX_IMM8_X0_TLS_GD_ADD
 113

	)

3900 
	#R_TILEGX_IMM8_X1_TLS_GD_ADD
 114

	)

3901 
	#R_TILEGX_IMM8_Y0_TLS_GD_ADD
 115

	)

3902 
	#R_TILEGX_IMM8_Y1_TLS_GD_ADD
 116

	)

3903 
	#R_TILEGX_TLS_IE_LOAD
 117

	)

3904 
	#R_TILEGX_IMM8_X0_TLS_ADD
 118

	)

3905 
	#R_TILEGX_IMM8_X1_TLS_ADD
 119

	)

3906 
	#R_TILEGX_IMM8_Y0_TLS_ADD
 120

	)

3907 
	#R_TILEGX_IMM8_Y1_TLS_ADD
 121

	)

3909 
	#R_TILEGX_GNU_VTINHERIT
 128

	)

3910 
	#R_TILEGX_GNU_VTENTRY
 129

	)

3912 
	#R_TILEGX_NUM
 130

	)

3915 
	#EF_RISCV_RVC
 0x0001

	)

3916 
	#EF_RISCV_FLOAT_ABI
 0x0006

	)

3917 
	#EF_RISCV_FLOAT_ABI_SOFT
 0x0000

	)

3918 
	#EF_RISCV_FLOAT_ABI_SINGLE
 0x0002

	)

3919 
	#EF_RISCV_FLOAT_ABI_DOUBLE
 0x0004

	)

3920 
	#EF_RISCV_FLOAT_ABI_QUAD
 0x0006

	)

3923 
	#R_RISCV_NONE
 0

	)

3924 
	#R_RISCV_32
 1

	)

3925 
	#R_RISCV_64
 2

	)

3926 
	#R_RISCV_RELATIVE
 3

	)

3927 
	#R_RISCV_COPY
 4

	)

3928 
	#R_RISCV_JUMP_SLOT
 5

	)

3929 
	#R_RISCV_TLS_DTPMOD32
 6

	)

3930 
	#R_RISCV_TLS_DTPMOD64
 7

	)

3931 
	#R_RISCV_TLS_DTPREL32
 8

	)

3932 
	#R_RISCV_TLS_DTPREL64
 9

	)

3933 
	#R_RISCV_TLS_TPREL32
 10

	)

3934 
	#R_RISCV_TLS_TPREL64
 11

	)

3935 
	#R_RISCV_BRANCH
 16

	)

3936 
	#R_RISCV_JAL
 17

	)

3937 
	#R_RISCV_CALL
 18

	)

3938 
	#R_RISCV_CALL_PLT
 19

	)

3939 
	#R_RISCV_GOT_HI20
 20

	)

3940 
	#R_RISCV_TLS_GOT_HI20
 21

	)

3941 
	#R_RISCV_TLS_GD_HI20
 22

	)

3942 
	#R_RISCV_PCREL_HI20
 23

	)

3943 
	#R_RISCV_PCREL_LO12_I
 24

	)

3944 
	#R_RISCV_PCREL_LO12_S
 25

	)

3945 
	#R_RISCV_HI20
 26

	)

3946 
	#R_RISCV_LO12_I
 27

	)

3947 
	#R_RISCV_LO12_S
 28

	)

3948 
	#R_RISCV_TPREL_HI20
 29

	)

3949 
	#R_RISCV_TPREL_LO12_I
 30

	)

3950 
	#R_RISCV_TPREL_LO12_S
 31

	)

3951 
	#R_RISCV_TPREL_ADD
 32

	)

3952 
	#R_RISCV_ADD8
 33

	)

3953 
	#R_RISCV_ADD16
 34

	)

3954 
	#R_RISCV_ADD32
 35

	)

3955 
	#R_RISCV_ADD64
 36

	)

3956 
	#R_RISCV_SUB8
 37

	)

3957 
	#R_RISCV_SUB16
 38

	)

3958 
	#R_RISCV_SUB32
 39

	)

3959 
	#R_RISCV_SUB64
 40

	)

3960 
	#R_RISCV_GNU_VTINHERIT
 41

	)

3961 
	#R_RISCV_GNU_VTENTRY
 42

	)

3962 
	#R_RISCV_ALIGN
 43

	)

3963 
	#R_RISCV_RVC_BRANCH
 44

	)

3964 
	#R_RISCV_RVC_JUMP
 45

	)

3965 
	#R_RISCV_RVC_LUI
 46

	)

3966 
	#R_RISCV_GPREL_I
 47

	)

3967 
	#R_RISCV_GPREL_S
 48

	)

3968 
	#R_RISCV_TPREL_I
 49

	)

3969 
	#R_RISCV_TPREL_S
 50

	)

3970 
	#R_RISCV_RELAX
 51

	)

3971 
	#R_RISCV_SUB6
 52

	)

3972 
	#R_RISCV_SET6
 53

	)

3973 
	#R_RISCV_SET8
 54

	)

3974 
	#R_RISCV_SET16
 55

	)

3975 
	#R_RISCV_SET32
 56

	)

3976 
	#R_RISCV_32_PCREL
 57

	)

3977 
	#R_RISCV_IRELATIVE
 58

	)

3979 
	#R_RISCV_NUM
 59

	)

3983 
	#R_BPF_NONE
 0

	)

3984 
	#R_BPF_64_64
 1

	)

3985 
	#R_BPF_64_32
 10

	)

3989 
	#R_METAG_HIADDR16
 0

	)

3990 
	#R_METAG_LOADDR16
 1

	)

3991 
	#R_METAG_ADDR32
 2

	)

3992 
	#R_METAG_NONE
 3

	)

3993 
	#R_METAG_RELBRANCH
 4

	)

3994 
	#R_METAG_GETSETOFF
 5

	)

3997 
	#R_METAG_REG32OP1
 6

	)

3998 
	#R_METAG_REG32OP2
 7

	)

3999 
	#R_METAG_REG32OP3
 8

	)

4000 
	#R_METAG_REG16OP1
 9

	)

4001 
	#R_METAG_REG16OP2
 10

	)

4002 
	#R_METAG_REG16OP3
 11

	)

4003 
	#R_METAG_REG32OP4
 12

	)

4005 
	#R_METAG_HIOG
 13

	)

4006 
	#R_METAG_LOOG
 14

	)

4008 
	#R_METAG_REL8
 15

	)

4009 
	#R_METAG_REL16
 16

	)

4012 
	#R_METAG_GNU_VTINHERIT
 30

	)

4013 
	#R_METAG_GNU_VTENTRY
 31

	)

4016 
	#R_METAG_HI16_GOTOFF
 32

	)

4017 
	#R_METAG_LO16_GOTOFF
 33

	)

4018 
	#R_METAG_GETSET_GOTOFF
 34

	)

4019 
	#R_METAG_GETSET_GOT
 35

	)

4020 
	#R_METAG_HI16_GOTPC
 36

	)

4021 
	#R_METAG_LO16_GOTPC
 37

	)

4022 
	#R_METAG_HI16_PLT
 38

	)

4023 
	#R_METAG_LO16_PLT
 39

	)

4024 
	#R_METAG_RELBRANCH_PLT
 40

	)

4025 
	#R_METAG_GOTOFF
 41

	)

4026 
	#R_METAG_PLT
 42

	)

4027 
	#R_METAG_COPY
 43

	)

4028 
	#R_METAG_JMP_SLOT
 44

	)

4029 
	#R_METAG_RELATIVE
 45

	)

4030 
	#R_METAG_GLOB_DAT
 46

	)

4033 
	#R_METAG_TLS_GD
 47

	)

4034 
	#R_METAG_TLS_LDM
 48

	)

4035 
	#R_METAG_TLS_LDO_HI16
 49

	)

4036 
	#R_METAG_TLS_LDO_LO16
 50

	)

4037 
	#R_METAG_TLS_LDO
 51

	)

4038 
	#R_METAG_TLS_IE
 52

	)

4039 
	#R_METAG_TLS_IENONPIC
 53

	)

4040 
	#R_METAG_TLS_IENONPIC_HI16
 54

	)

4041 
	#R_METAG_TLS_IENONPIC_LO16
 55

	)

4042 
	#R_METAG_TLS_TPOFF
 56

	)

4043 
	#R_METAG_TLS_DTPMOD
 57

	)

4044 
	#R_METAG_TLS_DTPOFF
 58

	)

4045 
	#R_METAG_TLS_LE
 59

	)

4046 
	#R_METAG_TLS_LE_HI16
 60

	)

4047 
	#R_METAG_TLS_LE_LO16
 61

	)

4050 
	#R_NDS32_NONE
 0

	)

4051 
	#R_NDS32_32_RELA
 20

	)

4052 
	#R_NDS32_COPY
 39

	)

4053 
	#R_NDS32_GLOB_DAT
 40

	)

4054 
	#R_NDS32_JMP_SLOT
 41

	)

4055 
	#R_NDS32_RELATIVE
 42

	)

4056 
	#R_NDS32_TLS_TPOFF
 102

	)

4057 
	#R_NDS32_TLS_DESC
 119

	)

4060 
	#R_ARC_NONE
 0x0

	)

4061 
	#R_ARC_8
 0x1

	)

4062 
	#R_ARC_16
 0x2

	)

4063 
	#R_ARC_24
 0x3

	)

4064 
	#R_ARC_32
 0x4

	)

4065 
	#R_ARC_B26
 0x5

	)

4066 
	#R_ARC_B22_PCREL
 0x6

	)

4067 
	#R_ARC_H30
 0x7

	)

4068 
	#R_ARC_N8
 0x8

	)

4069 
	#R_ARC_N16
 0x9

	)

4070 
	#R_ARC_N24
 0xA

	)

4071 
	#R_ARC_N32
 0xB

	)

4072 
	#R_ARC_SDA
 0xC

	)

4073 
	#R_ARC_SECTOFF
 0xD

	)

4074 
	#R_ARC_S21H_PCREL
 0xE

	)

4075 
	#R_ARC_S21W_PCREL
 0xF

	)

4076 
	#R_ARC_S25H_PCREL
 0x10

	)

4077 
	#R_ARC_S25W_PCREL
 0x11

	)

4078 
	#R_ARC_SDA32
 0x12

	)

4079 
	#R_ARC_SDA_LDST
 0x13

	)

4080 
	#R_ARC_SDA_LDST1
 0x14

	)

4081 
	#R_ARC_SDA_LDST2
 0x15

	)

4082 
	#R_ARC_SDA16_LD
 0x16

	)

4083 
	#R_ARC_SDA16_LD1
 0x17

	)

4084 
	#R_ARC_SDA16_LD2
 0x18

	)

4085 
	#R_ARC_S13_PCREL
 0x19

	)

4086 
	#R_ARC_W
 0x1A

	)

4087 
	#R_ARC_32_ME
 0x1B

	)

4088 
	#R_ARC_N32_ME
 0x1C

	)

4089 
	#R_ARC_SECTOFF_ME
 0x1D

	)

4090 
	#R_ARC_SDA32_ME
 0x1E

	)

4091 
	#R_ARC_W_ME
 0x1F

	)

4092 
	#R_ARC_H30_ME
 0x20

	)

4093 
	#R_ARC_SECTOFF_U8
 0x21

	)

4094 
	#R_ARC_SECTOFF_S9
 0x22

	)

4095 
	#R_AC_SECTOFF_U8
 0x23

	)

4096 
	#R_AC_SECTOFF_U8_1
 0x24

	)

4097 
	#R_AC_SECTOFF_U8_2
 0x25

	)

4098 
	#R_AC_SECTOFF_S9
 0x26

	)

4099 
	#R_AC_SECTOFF_S9_1
 0x27

	)

4100 
	#R_AC_SECTOFF_S9_2
 0x28

	)

4101 
	#R_ARC_SECTOFF_ME_1
 0x29

	)

4102 
	#R_ARC_SECTOFF_ME_2
 0x2A

	)

4103 
	#R_ARC_SECTOFF_1
 0x2B

	)

4104 
	#R_ARC_SECTOFF_2
 0x2C

	)

4105 
	#R_ARC_PC32
 0x32

	)

4106 
	#R_ARC_GOTPC32
 0x33

	)

4107 
	#R_ARC_PLT32
 0x34

	)

4108 
	#R_ARC_COPY
 0x35

	)

4109 
	#R_ARC_GLOB_DAT
 0x36

	)

4110 
	#R_ARC_JUMP_SLOT
 0x37

	)

4111 
	#R_ARC_RELATIVE
 0x38

	)

4112 
	#R_ARC_GOTOFF
 0x39

	)

4113 
	#R_ARC_GOTPC
 0x3A

	)

4114 
	#R_ARC_GOT32
 0x3B

	)

4116 
	#R_ARC_TLS_DTPMOD
 0x42

	)

4117 
	#R_ARC_TLS_DTPOFF
 0x43

	)

4118 
	#R_ARC_TLS_TPOFF
 0x44

	)

4119 
	#R_ARC_TLS_GD_GOT
 0x45

	)

4120 
	#R_ARC_TLS_GD_LD
 0x46

	)

4121 
	#R_ARC_TLS_GD_CALL
 0x47

	)

4122 
	#R_ARC_TLS_IE_GOT
 0x48

	)

4123 
	#R_ARC_TLS_DTPOFF_S9
 0x4a

	)

4124 
	#R_ARC_TLS_LE_S9
 0x4a

	)

4125 
	#R_ARC_TLS_LE_32
 0x4b

	)

4128 
	#R_OR1K_NONE
 0

	)

4129 
	#R_OR1K_32
 1

	)

4130 
	#R_OR1K_16
 2

	)

4131 
	#R_OR1K_8
 3

	)

4132 
	#R_OR1K_LO_16_IN_INSN
 4

	)

4133 
	#R_OR1K_HI_16_IN_INSN
 5

	)

4134 
	#R_OR1K_INSN_REL_26
 6

	)

4135 
	#R_OR1K_GNU_VTENTRY
 7

	)

4136 
	#R_OR1K_GNU_VTINHERIT
 8

	)

4137 
	#R_OR1K_32_PCREL
 9

	)

4138 
	#R_OR1K_16_PCREL
 10

	)

4139 
	#R_OR1K_8_PCREL
 11

	)

4140 
	#R_OR1K_GOTPC_HI16
 12

	)

4141 
	#R_OR1K_GOTPC_LO16
 13

	)

4142 
	#R_OR1K_GOT16
 14

	)

4143 
	#R_OR1K_PLT26
 15

	)

4144 
	#R_OR1K_GOTOFF_HI16
 16

	)

4145 
	#R_OR1K_GOTOFF_LO16
 17

	)

4146 
	#R_OR1K_COPY
 18

	)

4147 
	#R_OR1K_GLOB_DAT
 19

	)

4148 
	#R_OR1K_JMP_SLOT
 20

	)

4149 
	#R_OR1K_RELATIVE
 21

	)

4150 
	#R_OR1K_TLS_GD_HI16
 22

	)

4151 
	#R_OR1K_TLS_GD_LO16
 23

	)

4152 
	#R_OR1K_TLS_LDM_HI16
 24

	)

4153 
	#R_OR1K_TLS_LDM_LO16
 25

	)

4154 
	#R_OR1K_TLS_LDO_HI16
 26

	)

4155 
	#R_OR1K_TLS_LDO_LO16
 27

	)

4156 
	#R_OR1K_TLS_IE_HI16
 28

	)

4157 
	#R_OR1K_TLS_IE_LO16
 29

	)

4158 
	#R_OR1K_TLS_LE_HI16
 30

	)

4159 
	#R_OR1K_TLS_LE_LO16
 31

	)

4160 
	#R_OR1K_TLS_TPOFF
 32

	)

4161 
	#R_OR1K_TLS_DTPOFF
 33

	)

4162 
	#R_OR1K_TLS_DTPMOD
 34

	)

	@/usr/include/errno.h

22 #i‚def 
_ERRNO_H


23 
	#_ERRNO_H
 1

	)

25 
	~<„©uªs.h
>

28 
	~<bôs/î∫o.h
>

32 #i‚de‡
__ASSEMBLER__


34 
__BEGIN_DECLS


37 *
	$__î∫o_loˇti⁄
 (Ë
__THROW
 
__©åibuã_c⁄°__
;

38 
	#î∫o
 (*
	`__î∫o_loˇti⁄
 ())

	)

40 #ifde‡
__USE_GNU


45 *
¥ogøm_övoˇti⁄_«me
;

46 *
¥ogøm_övoˇti⁄_sh‹t_«me
;

48 
	~<bôs/ty≥s/îr‹_t.h
>

52 
__END_DECLS


	@/usr/include/fcntl.h

22 #i‚def 
_FCNTL_H


23 
	#_FCNTL_H
 1

	)

25 
	~<„©uªs.h
>

28 
	g__BEGIN_DECLS


31 
	~<bôs/ty≥s.h
>

35 
	~<bôs/f˙é.h
>

39 #ifde‡
__O_TMPFILE


40 
	#__OPEN_NEEDS_MODE
(
oÊag
) \

41 (((
oÊag
Ë& 
O_CREAT
Ë!0 || ((oÊagË& 
__O_TMPFILE
Ë=__O_TMPFILE)

	)

43 
	#__OPEN_NEEDS_MODE
(
oÊag
Ë(((oÊagË& 
O_CREAT
Ë!0)

	)

49 #i‚de‡
__mode_t_deföed


50 
__mode_t
 
	tmode_t
;

51 
	#__mode_t_deföed


	)

54 #i‚de‡
__off_t_deföed


55 #i‚de‡
__USE_FILE_OFFSET64


56 
__off_t
 
	toff_t
;

58 
__off64_t
 
	toff_t
;

60 
	#__off_t_deföed


	)

63 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


64 
__off64_t
 
	toff64_t
;

65 
	#__off64_t_deföed


	)

68 #i‚de‡
__pid_t_deföed


69 
__pid_t
 
	tpid_t
;

70 
	#__pid_t_deföed


	)

74 #ifde‡
__USE_XOPEN2K8


75 
	~<bôs/ty≥s/°ru˘_time•ec.h
>

77 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


78 
	~<bôs/°©.h
>

80 
	#S_IFMT
 
__S_IFMT


	)

81 
	#S_IFDIR
 
__S_IFDIR


	)

82 
	#S_IFCHR
 
__S_IFCHR


	)

83 
	#S_IFBLK
 
__S_IFBLK


	)

84 
	#S_IFREG
 
__S_IFREG


	)

85 #ifde‡
__S_IFIFO


86 
	#S_IFIFO
 
__S_IFIFO


	)

88 #ifde‡
__S_IFLNK


89 
	#S_IFLNK
 
__S_IFLNK


	)

91 #i‡(
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8
Ë&& deföed 
__S_IFSOCK


92 
	#S_IFSOCK
 
__S_IFSOCK


	)

97 
	#S_ISUID
 
__S_ISUID


	)

98 
	#S_ISGID
 
__S_ISGID


	)

100 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


102 
	#S_ISVTX
 
__S_ISVTX


	)

105 
	#S_IRUSR
 
__S_IREAD


	)

106 
	#S_IWUSR
 
__S_IWRITE


	)

107 
	#S_IXUSR
 
__S_IEXEC


	)

109 
	#S_IRWXU
 (
__S_IREAD
|
__S_IWRITE
|
__S_IEXEC
)

	)

111 
	#S_IRGRP
 (
S_IRUSR
 >> 3Ë

	)

112 
	#S_IWGRP
 (
S_IWUSR
 >> 3Ë

	)

113 
	#S_IXGRP
 (
S_IXUSR
 >> 3Ë

	)

115 
	#S_IRWXG
 (
S_IRWXU
 >> 3)

	)

117 
	#S_IROTH
 (
S_IRGRP
 >> 3Ë

	)

118 
	#S_IWOTH
 (
S_IWGRP
 >> 3Ë

	)

119 
	#S_IXOTH
 (
S_IXGRP
 >> 3Ë

	)

121 
	#S_IRWXO
 (
S_IRWXG
 >> 3)

	)

124 #ifdef 
__USE_MISC


125 #i‚de‡
R_OK


128 
	#R_OK
 4

	)

129 
	#W_OK
 2

	)

130 
	#X_OK
 1

	)

131 
	#F_OK
 0

	)

136 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


137 
	#SEEK_SET
 0

	)

138 
	#SEEK_CUR
 1

	)

139 
	#SEEK_END
 2

	)

147 #i‚de‡
__USE_TIME_BITS64


148 #i‚de‡
__USE_FILE_OFFSET64


149 
f˙é
 (
__fd
, 
__cmd
, ...);

151 #ifde‡
__REDIRECT


152 
__REDIRECT
 (
f˙é
, (
__fd
, 
__cmd
, ...), 
f˙é64
);

154 
	#f˙é
 
f˙é64


	)

157 #ifde‡
__USE_LARGEFILE64


158 
f˙é64
 (
__fd
, 
__cmd
, ...);

161 #ifde‡
__REDIRECT


162 
__REDIRECT_NTH
 (
f˙é
, (
__fd
, 
__ªque°
, ...),

163 
__f˙é_time64
);

164 
__REDIRECT_NTH
 (
f˙é64
, (
__fd
, 
__ªque°
, ...),

165 
__f˙é_time64
);

167 
	$__f˙é_time64
 (
__fd
, 
__ªque°
, ...Ë
__THROW
;

168 
	#f˙é64
 
__f˙é_time64


	)

169 
	#f˙é
 
__f˙é_time64


	)

180 #i‚de‡
__USE_FILE_OFFSET64


181 
	$›í
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

183 #ifde‡
__REDIRECT


184 
	`__REDIRECT
 (
›í
, (c⁄° *
__fûe
, 
__oÊag
, ...), 
›í64
)

185 
	`__n⁄nuŒ
 ((1));

187 
	#›í
 
›í64


	)

190 #ifde‡
__USE_LARGEFILE64


191 
	$›í64
 (c⁄° *
__fûe
, 
__oÊag
, ...Ë
	`__n⁄nuŒ
 ((1));

194 #ifde‡
__USE_ATFILE


204 #i‚de‡
__USE_FILE_OFFSET64


205 
	$›í©
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

206 
	`__n⁄nuŒ
 ((2));

208 #ifde‡
__REDIRECT


209 
	`__REDIRECT
 (
›í©
, (
__fd
, c⁄° *
__fûe
, 
__oÊag
,

210 ...), 
›í©64
Ë
	`__n⁄nuŒ
 ((2));

212 
	#›í©
 
›í©64


	)

215 #ifde‡
__USE_LARGEFILE64


216 
	$›í©64
 (
__fd
, c⁄° *
__fûe
, 
__oÊag
, ...)

217 
	`__n⁄nuŒ
 ((2));

226 #i‚de‡
__USE_FILE_OFFSET64


227 
	$¸ót
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

229 #ifde‡
__REDIRECT


230 
	`__REDIRECT
 (
¸ót
, (c⁄° *
__fûe
, 
mode_t
 
__mode
),

231 
¸ót64
Ë
	`__n⁄nuŒ
 ((1));

233 
	#¸ót
 
¸ót64


	)

236 #ifde‡
__USE_LARGEFILE64


237 
	$¸ót64
 (c⁄° *
__fûe
, 
mode_t
 
__mode
Ë
	`__n⁄nuŒ
 ((1));

240 #i‡!
deföed
 
F_LOCK
 && (deföed 
__USE_MISC
 || (deföed 
__USE_XOPEN_EXTENDED
 \

241 && !
deföed
 
__USE_POSIX
))

250 
	#F_ULOCK
 0

	)

251 
	#F_LOCK
 1

	)

252 
	#F_TLOCK
 2

	)

253 
	#F_TEST
 3

	)

255 #i‚de‡
__USE_FILE_OFFSET64


256 
	`lockf
 (
__fd
, 
__cmd
, 
off_t
 
__Àn
);

258 #ifde‡
__REDIRECT


259 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
), 
lockf64
);

261 
	#lockf
 
lockf64


	)

264 #ifde‡
__USE_LARGEFILE64


265 
	`lockf64
 (
__fd
, 
__cmd
, 
off64_t
 
__Àn
);

269 #ifde‡
__USE_XOPEN2K


272 #i‚de‡
__USE_FILE_OFFSET64


273 
	$posix_Ádvi£
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
,

274 
__advi£
Ë
__THROW
;

276 #ifde‡
__REDIRECT_NTH


277 
	`__REDIRECT_NTH
 (
posix_Ádvi£
, (
__fd
, 
__off64_t
 
__off£t
,

278 
__off64_t
 
__Àn
, 
__advi£
),

279 
posix_Ádvi£64
);

281 
	#posix_Ádvi£
 
posix_Ádvi£64


	)

284 #ifde‡
__USE_LARGEFILE64


285 
	$posix_Ádvi£64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
,

286 
__advi£
Ë
__THROW
;

294 #i‚de‡
__USE_FILE_OFFSET64


295 
	`posix_ÁŒoˇã
 (
__fd
, 
off_t
 
__off£t
, off_à
__Àn
);

297 #ifde‡
__REDIRECT


298 
	`__REDIRECT
 (
posix_ÁŒoˇã
, (
__fd
, 
__off64_t
 
__off£t
,

299 
__off64_t
 
__Àn
),

300 
posix_ÁŒoˇã64
);

302 
	#posix_ÁŒoˇã
 
posix_ÁŒoˇã64


	)

305 #ifde‡
__USE_LARGEFILE64


306 
	`posix_ÁŒoˇã64
 (
__fd
, 
off64_t
 
__off£t
, off64_à
__Àn
);

312 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄
 \

313 && 
deföed
 
__va_¨g_∑ck_Àn


314 
	~<bôs/f˙é2.h
>

317 
__END_DECLS


	@/usr/include/limits.h

22 #i‚de‡
_LIBC_LIMITS_H_


23 
	#_LIBC_LIMITS_H_
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

32 
	#MB_LEN_MAX
 16

	)

37 #i‡!
deföed
 
__GNUC__
 || __GNUC__ < 2

42 #i‚de‡
_LIMITS_H


43 
	#_LIMITS_H
 1

	)

45 
	~<bôs/w‹dsize.h
>

54 
	#CHAR_BIT
 8

	)

57 
	#SCHAR_MIN
 (-128)

	)

58 
	#SCHAR_MAX
 127

	)

61 
	#UCHAR_MAX
 255

	)

64 #ifde‡
__CHAR_UNSIGNED__


65 
	#CHAR_MIN
 0

	)

66 
	#CHAR_MAX
 
UCHAR_MAX


	)

68 
	#CHAR_MIN
 
SCHAR_MIN


	)

69 
	#CHAR_MAX
 
SCHAR_MAX


	)

73 
	#SHRT_MIN
 (-32768)

	)

74 
	#SHRT_MAX
 32767

	)

77 
	#USHRT_MAX
 65535

	)

80 
	#INT_MIN
 (-
INT_MAX
 - 1)

	)

81 
	#INT_MAX
 2147483647

	)

84 
	#UINT_MAX
 4294967295U

	)

87 #i‡
__WORDSIZE
 == 64

88 
	#LONG_MAX
 9223372036854775807L

	)

90 
	#LONG_MAX
 2147483647L

	)

92 
	#LONG_MIN
 (-
LONG_MAX
 - 1L)

	)

95 #i‡
__WORDSIZE
 == 64

96 
	#ULONG_MAX
 18446744073709551615UL

	)

98 
	#ULONG_MAX
 4294967295UL

	)

101 #ifde‡
__USE_ISOC99


104 
	#LLONG_MAX
 9223372036854775807LL

	)

105 
	#LLONG_MIN
 (-
LLONG_MAX
 - 1LL)

	)

108 
	#ULLONG_MAX
 18446744073709551615ULL

	)

122 #i‡
deföed
 
__GNUC__
 && !deföed 
_GCC_LIMITS_H_


124 #ö˛ude_√xà<
limôs
.
h
>

130 #i‡
deföed
 
__USE_ISOC99
 && deföed 
__GNUC__


131 #i‚de‡
LLONG_MIN


132 
	#LLONG_MIN
 (-
LLONG_MAX
-1)

	)

134 #i‚de‡
LLONG_MAX


135 
	#LLONG_MAX
 
__LONG_LONG_MAX__


	)

137 #i‚de‡
ULLONG_MAX


138 
	#ULLONG_MAX
 (
LLONG_MAX
 * 2ULL + 1)

	)

145 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

146 #i‚de‡
CHAR_WIDTH


147 
	#CHAR_WIDTH
 8

	)

149 #i‚de‡
SCHAR_WIDTH


150 
	#SCHAR_WIDTH
 8

	)

152 #i‚de‡
UCHAR_WIDTH


153 
	#UCHAR_WIDTH
 8

	)

155 #i‚de‡
SHRT_WIDTH


156 
	#SHRT_WIDTH
 16

	)

158 #i‚de‡
USHRT_WIDTH


159 
	#USHRT_WIDTH
 16

	)

161 #i‚de‡
INT_WIDTH


162 
	#INT_WIDTH
 32

	)

164 #i‚de‡
UINT_WIDTH


165 
	#UINT_WIDTH
 32

	)

167 #i‚de‡
LONG_WIDTH


168 
	#LONG_WIDTH
 
__WORDSIZE


	)

170 #i‚de‡
ULONG_WIDTH


171 
	#ULONG_WIDTH
 
__WORDSIZE


	)

173 #i‚de‡
LLONG_WIDTH


174 
	#LLONG_WIDTH
 64

	)

176 #i‚de‡
ULLONG_WIDTH


177 
	#ULLONG_WIDTH
 64

	)

184 #i‡
__GLIBC_USE
 (
ISOC2X
)

185 #i‚de‡
BOOL_MAX


186 
	#BOOL_MAX
 1

	)

188 #i‚de‡
BOOL_WIDTH


189 
	#BOOL_WIDTH
 1

	)

193 #ifdef 
__USE_POSIX


195 
	~<bôs/posix1_lim.h
>

198 #ifdef 
__USE_POSIX2


199 
	~<bôs/posix2_lim.h
>

202 #ifdef 
__USE_XOPEN


203 
	~<bôs/x›í_lim.h
>

	@/usr/include/stdint.h

22 #i‚de‡
_STDINT_H


23 
	#_STDINT_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

27 
	~<bôs/ty≥s.h
>

28 
	~<bôs/wch¨.h
>

29 
	~<bôs/w‹dsize.h
>

34 
	~<bôs/°döt-öä.h
>

37 
	~<bôs/°döt-uöä.h
>

43 
__öt_Àa°8_t
 
	töt_Àa°8_t
;

44 
__öt_Àa°16_t
 
	töt_Àa°16_t
;

45 
__öt_Àa°32_t
 
	töt_Àa°32_t
;

46 
__öt_Àa°64_t
 
	töt_Àa°64_t
;

49 
__uöt_Àa°8_t
 
	tuöt_Àa°8_t
;

50 
__uöt_Àa°16_t
 
	tuöt_Àa°16_t
;

51 
__uöt_Àa°32_t
 
	tuöt_Àa°32_t
;

52 
__uöt_Àa°64_t
 
	tuöt_Àa°64_t
;

58 sig√d 
	töt_Á°8_t
;

59 #i‡
__WORDSIZE
 == 64

60 
	töt_Á°16_t
;

61 
	töt_Á°32_t
;

62 
	töt_Á°64_t
;

64 
	töt_Á°16_t
;

65 
	töt_Á°32_t
;

66 
__exãnsi⁄__


67 
	töt_Á°64_t
;

71 
	tuöt_Á°8_t
;

72 #i‡
__WORDSIZE
 == 64

73 
	tuöt_Á°16_t
;

74 
	tuöt_Á°32_t
;

75 
	tuöt_Á°64_t
;

77 
	tuöt_Á°16_t
;

78 
	tuöt_Á°32_t
;

79 
__exãnsi⁄__


80 
	tuöt_Á°64_t
;

85 #i‡
__WORDSIZE
 == 64

86 #i‚de‡
__öçå_t_deföed


87 
	töçå_t
;

88 
	#__öçå_t_deföed


	)

90 
	tuöçå_t
;

92 #i‚de‡
__öçå_t_deföed


93 
	töçå_t
;

94 
	#__öçå_t_deföed


	)

96 
	tuöçå_t
;

101 
__ötmax_t
 
	tötmax_t
;

102 
__uötmax_t
 
	tuötmax_t
;

105 #i‡
__WORDSIZE
 == 64

106 
	#__INT64_C
(
c
Ë¯## 
L


	)

107 
	#__UINT64_C
(
c
Ë¯## 
UL


	)

109 
	#__INT64_C
(
c
Ë¯## 
LL


	)

110 
	#__UINT64_C
(
c
Ë¯## 
ULL


	)

116 
	#INT8_MIN
 (-128)

	)

117 
	#INT16_MIN
 (-32767-1)

	)

118 
	#INT32_MIN
 (-2147483647-1)

	)

119 
	#INT64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

121 
	#INT8_MAX
 (127)

	)

122 
	#INT16_MAX
 (32767)

	)

123 
	#INT32_MAX
 (2147483647)

	)

124 
	#INT64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

127 
	#UINT8_MAX
 (255)

	)

128 
	#UINT16_MAX
 (65535)

	)

129 
	#UINT32_MAX
 (4294967295U)

	)

130 
	#UINT64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

134 
	#INT_LEAST8_MIN
 (-128)

	)

135 
	#INT_LEAST16_MIN
 (-32767-1)

	)

136 
	#INT_LEAST32_MIN
 (-2147483647-1)

	)

137 
	#INT_LEAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

139 
	#INT_LEAST8_MAX
 (127)

	)

140 
	#INT_LEAST16_MAX
 (32767)

	)

141 
	#INT_LEAST32_MAX
 (2147483647)

	)

142 
	#INT_LEAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

145 
	#UINT_LEAST8_MAX
 (255)

	)

146 
	#UINT_LEAST16_MAX
 (65535)

	)

147 
	#UINT_LEAST32_MAX
 (4294967295U)

	)

148 
	#UINT_LEAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

152 
	#INT_FAST8_MIN
 (-128)

	)

153 #i‡
__WORDSIZE
 == 64

154 
	#INT_FAST16_MIN
 (-9223372036854775807L-1)

	)

155 
	#INT_FAST32_MIN
 (-9223372036854775807L-1)

	)

157 
	#INT_FAST16_MIN
 (-2147483647-1)

	)

158 
	#INT_FAST32_MIN
 (-2147483647-1)

	)

160 
	#INT_FAST64_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

162 
	#INT_FAST8_MAX
 (127)

	)

163 #i‡
__WORDSIZE
 == 64

164 
	#INT_FAST16_MAX
 (9223372036854775807L)

	)

165 
	#INT_FAST32_MAX
 (9223372036854775807L)

	)

167 
	#INT_FAST16_MAX
 (2147483647)

	)

168 
	#INT_FAST32_MAX
 (2147483647)

	)

170 
	#INT_FAST64_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

173 
	#UINT_FAST8_MAX
 (255)

	)

174 #i‡
__WORDSIZE
 == 64

175 
	#UINT_FAST16_MAX
 (18446744073709551615UL)

	)

176 
	#UINT_FAST32_MAX
 (18446744073709551615UL)

	)

178 
	#UINT_FAST16_MAX
 (4294967295U)

	)

179 
	#UINT_FAST32_MAX
 (4294967295U)

	)

181 
	#UINT_FAST64_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

185 #i‡
__WORDSIZE
 == 64

186 
	#INTPTR_MIN
 (-9223372036854775807L-1)

	)

187 
	#INTPTR_MAX
 (9223372036854775807L)

	)

188 
	#UINTPTR_MAX
 (18446744073709551615UL)

	)

190 
	#INTPTR_MIN
 (-2147483647-1)

	)

191 
	#INTPTR_MAX
 (2147483647)

	)

192 
	#UINTPTR_MAX
 (4294967295U)

	)

197 
	#INTMAX_MIN
 (-
	`__INT64_C
(9223372036854775807)-1)

	)

199 
	#INTMAX_MAX
 (
	`__INT64_C
(9223372036854775807))

	)

202 
	#UINTMAX_MAX
 (
	`__UINT64_C
(18446744073709551615))

	)

208 #i‡
__WORDSIZE
 == 64

209 
	#PTRDIFF_MIN
 (-9223372036854775807L-1)

	)

210 
	#PTRDIFF_MAX
 (9223372036854775807L)

	)

212 #i‡
__WORDSIZE32_PTRDIFF_LONG


213 
	#PTRDIFF_MIN
 (-2147483647L-1)

	)

214 
	#PTRDIFF_MAX
 (2147483647L)

	)

216 
	#PTRDIFF_MIN
 (-2147483647-1)

	)

217 
	#PTRDIFF_MAX
 (2147483647)

	)

222 
	#SIG_ATOMIC_MIN
 (-2147483647-1)

	)

223 
	#SIG_ATOMIC_MAX
 (2147483647)

	)

226 #i‡
__WORDSIZE
 == 64

227 
	#SIZE_MAX
 (18446744073709551615UL)

	)

229 #i‡
__WORDSIZE32_SIZE_ULONG


230 
	#SIZE_MAX
 (4294967295UL)

	)

232 
	#SIZE_MAX
 (4294967295U)

	)

237 #i‚de‡
WCHAR_MIN


239 
	#WCHAR_MIN
 
__WCHAR_MIN


	)

240 
	#WCHAR_MAX
 
__WCHAR_MAX


	)

244 
	#WINT_MIN
 (0u)

	)

245 
	#WINT_MAX
 (4294967295u)

	)

248 
	#INT8_C
(
c
Ë
	)
c

249 
	#INT16_C
(
c
Ë
	)
c

250 
	#INT32_C
(
c
Ë
	)
c

251 #i‡
__WORDSIZE
 == 64

252 
	#INT64_C
(
c
Ë¯## 
L


	)

254 
	#INT64_C
(
c
Ë¯## 
LL


	)

258 
	#UINT8_C
(
c
Ë
	)
c

259 
	#UINT16_C
(
c
Ë
	)
c

260 
	#UINT32_C
(
c
Ë¯## 
U


	)

261 #i‡
__WORDSIZE
 == 64

262 
	#UINT64_C
(
c
Ë¯## 
UL


	)

264 
	#UINT64_C
(
c
Ë¯## 
ULL


	)

268 #i‡
__WORDSIZE
 == 64

269 
	#INTMAX_C
(
c
Ë¯## 
L


	)

270 
	#UINTMAX_C
(
c
Ë¯## 
UL


	)

272 
	#INTMAX_C
(
c
Ë¯## 
LL


	)

273 
	#UINTMAX_C
(
c
Ë¯## 
ULL


	)

276 #i‡
__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

278 
	#INT8_WIDTH
 8

	)

279 
	#UINT8_WIDTH
 8

	)

280 
	#INT16_WIDTH
 16

	)

281 
	#UINT16_WIDTH
 16

	)

282 
	#INT32_WIDTH
 32

	)

283 
	#UINT32_WIDTH
 32

	)

284 
	#INT64_WIDTH
 64

	)

285 
	#UINT64_WIDTH
 64

	)

287 
	#INT_LEAST8_WIDTH
 8

	)

288 
	#UINT_LEAST8_WIDTH
 8

	)

289 
	#INT_LEAST16_WIDTH
 16

	)

290 
	#UINT_LEAST16_WIDTH
 16

	)

291 
	#INT_LEAST32_WIDTH
 32

	)

292 
	#UINT_LEAST32_WIDTH
 32

	)

293 
	#INT_LEAST64_WIDTH
 64

	)

294 
	#UINT_LEAST64_WIDTH
 64

	)

296 
	#INT_FAST8_WIDTH
 8

	)

297 
	#UINT_FAST8_WIDTH
 8

	)

298 
	#INT_FAST16_WIDTH
 
__WORDSIZE


	)

299 
	#UINT_FAST16_WIDTH
 
__WORDSIZE


	)

300 
	#INT_FAST32_WIDTH
 
__WORDSIZE


	)

301 
	#UINT_FAST32_WIDTH
 
__WORDSIZE


	)

302 
	#INT_FAST64_WIDTH
 64

	)

303 
	#UINT_FAST64_WIDTH
 64

	)

305 
	#INTPTR_WIDTH
 
__WORDSIZE


	)

306 
	#UINTPTR_WIDTH
 
__WORDSIZE


	)

308 
	#INTMAX_WIDTH
 64

	)

309 
	#UINTMAX_WIDTH
 64

	)

311 
	#PTRDIFF_WIDTH
 
__WORDSIZE


	)

312 
	#SIG_ATOMIC_WIDTH
 32

	)

313 
	#SIZE_WIDTH
 
__WORDSIZE


	)

314 
	#WCHAR_WIDTH
 32

	)

315 
	#WINT_WIDTH
 32

	)

	@/usr/include/stdio.h

23 #i‚de‡
_STDIO_H


24 
	#_STDIO_H
 1

	)

26 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

27 
	~<bôs/libc-hódî-°¨t.h
>

29 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

35 
	#__√ed___va_li°


	)

36 
	~<°d¨g.h
>

38 
	~<bôs/ty≥s.h
>

39 
	~<bôs/ty≥s/__Âos_t.h
>

40 
	~<bôs/ty≥s/__Âos64_t.h
>

41 
	~<bôs/ty≥s/__FILE.h
>

42 
	~<bôs/ty≥s/FILE.h
>

43 
	~<bôs/ty≥s/°ru˘_FILE.h
>

45 #ifde‡
__USE_GNU


46 
	~<bôs/ty≥s/cookõ_io_fun˘i⁄s_t.h
>

49 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8


50 #ifde‡
__GNUC__


51 #i‚de‡
_VA_LIST_DEFINED


52 
__gnuc_va_li°
 
	tva_li°
;

53 
	#_VA_LIST_DEFINED


	)

56 
	~<°d¨g.h
>

60 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


61 #i‚de‡
__off_t_deföed


62 #i‚de‡
__USE_FILE_OFFSET64


63 
__off_t
 
	toff_t
;

65 
__off64_t
 
	toff_t
;

67 
	#__off_t_deföed


	)

69 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


70 
__off64_t
 
	toff64_t
;

71 
	#__off64_t_deföed


	)

75 #ifde‡
__USE_XOPEN2K8


76 #i‚de‡
__ssize_t_deföed


77 
__ssize_t
 
	tssize_t
;

78 
	#__ssize_t_deföed


	)

83 #i‚de‡
__USE_FILE_OFFSET64


84 
__Âos_t
 
	tÂos_t
;

86 
__Âos64_t
 
	tÂos_t
;

88 #ifde‡
__USE_LARGEFILE64


89 
__Âos64_t
 
	tÂos64_t
;

93 
	#_IOFBF
 0

	)

94 
	#_IOLBF
 1

	)

95 
	#_IONBF
 2

	)

99 
	#BUFSIZ
 8192

	)

104 
	#EOF
 (-1)

	)

109 
	#SEEK_SET
 0

	)

110 
	#SEEK_CUR
 1

	)

111 
	#SEEK_END
 2

	)

112 #ifde‡
__USE_GNU


113 
	#SEEK_DATA
 3

	)

114 
	#SEEK_HOLE
 4

	)

118 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


120 
	#P_tmpdú
 "/tmp"

	)

133 
	~<bôs/°dio_lim.h
>

136 #i‡
__GLIBC_USE
 (
ISOC2X
)

138 
	#_PRINTF_NAN_LEN_MAX
 4

	)

143 
FILE
 *
°dö
;

144 
FILE
 *
°dout
;

145 
FILE
 *
°dîr
;

147 
	#°dö
 
°dö


	)

148 
	#°dout
 
°dout


	)

149 
	#°dîr
 
°dîr


	)

152 
	$ªmove
 (c⁄° *
__fûíame
Ë
__THROW
;

154 
	$ª«me
 (c⁄° *
__ﬁd
, c⁄° *
__√w
Ë
__THROW
;

156 #ifde‡
__USE_ATFILE


158 
	$ª«mót
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

159 c⁄° *
__√w
Ë
__THROW
;

162 #ifde‡
__USE_GNU


164 
	#RENAME_NOREPLACE
 (1 << 0)

	)

165 
	#RENAME_EXCHANGE
 (1 << 1)

	)

166 
	#RENAME_WHITEOUT
 (1 << 2)

	)

170 
	$ª«mót2
 (
__ﬁdfd
, c⁄° *
__ﬁd
, 
__√wfd
,

171 c⁄° *
__√w
, 
__Êags
Ë
__THROW
;

178 
	`f˛o£
 (
FILE
 *
__°ªam
);

180 #unde‡
__©å_dóŒoc_f˛o£


181 
	#__©å_dóŒoc_f˛o£
 
	`__©å_dóŒoc
 (
f˛o£
, 1)

	)

187 #i‚de‡
__USE_FILE_OFFSET64


188 
FILE
 *
	$tmpfûe
 ()

189 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

191 #ifde‡
__REDIRECT


192 
FILE
 *
	`__REDIRECT
 (
tmpfûe
, (), 
tmpfûe64
)

193 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

195 
	#tmpfûe
 
tmpfûe64


	)

199 #ifde‡
__USE_LARGEFILE64


200 
FILE
 *
	$tmpfûe64
 ()

201 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

205 *
	$tm≤am
 ([
L_tm≤am
]Ë
__THROW
 
__wur
;

207 #ifde‡
__USE_MISC


210 *
	$tm≤am_r
 (
__s
[
L_tm≤am
]Ë
__THROW
 
__wur
;

214 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


222 *
	$ãm≤am
 (c⁄° *
__dú
, c⁄° *
__pfx
)

223 
__THROW
 
__©åibuã_mÆloc__
 
__wur
 
__©å_dóŒoc_‰ì
;

230 
	`fÊush
 (
FILE
 *
__°ªam
);

232 #ifde‡
__USE_MISC


239 
	`fÊush_u∆ocked
 (
FILE
 *
__°ªam
);

242 #ifde‡
__USE_GNU


249 
	`f˛o£Æl
 ();

253 #i‚de‡
__USE_FILE_OFFSET64


258 
FILE
 *
	$f›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

259 c⁄° *
__ª°ri˘
 
__modes
)

260 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

265 
FILE
 *
	$‰e›í
 (c⁄° *
__ª°ri˘
 
__fûíame
,

266 c⁄° *
__ª°ri˘
 
__modes
,

267 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

269 #ifde‡
__REDIRECT


270 
FILE
 *
	`__REDIRECT
 (
f›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

271 c⁄° *
__ª°ri˘
 
__modes
), 
f›í64
)

272 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

273 
FILE
 *
	`__REDIRECT
 (
‰e›í
, (c⁄° *
__ª°ri˘
 
__fûíame
,

274 c⁄° *
__ª°ri˘
 
__modes
,

275 
FILE
 *
__ª°ri˘
 
__°ªam
), 
‰e›í64
)

276 
__wur
;

278 
	#f›í
 
f›í64


	)

279 
	#‰e›í
 
‰e›í64


	)

282 #ifde‡
__USE_LARGEFILE64


283 
FILE
 *
	$f›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

284 c⁄° *
__ª°ri˘
 
__modes
)

285 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

286 
FILE
 *
	$‰e›í64
 (c⁄° *
__ª°ri˘
 
__fûíame
,

287 c⁄° *
__ª°ri˘
 
__modes
,

288 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

291 #ifdef 
__USE_POSIX


293 
FILE
 *
	$fd›í
 (
__fd
, c⁄° *
__modes
Ë
__THROW


294 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

297 #ifdef 
__USE_GNU


300 
FILE
 *
	$f›ícookõ
 (*
__ª°ri˘
 
__magic_cookõ
,

301 c⁄° *
__ª°ri˘
 
__modes
,

302 
cookõ_io_fun˘i⁄s_t
 
__io_funcs
Ë
__THROW


303 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

306 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

308 
FILE
 *
	$fmem›í
 (*
__s
, 
size_t
 
__Àn
, c⁄° *
__modes
)

309 
__THROW
 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

314 
FILE
 *
	$›í_mem°ªam
 (**
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


315 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
 
__wur
;

317 #ifde‡
_WCHAR_H


321 
__FILE
 *
	$›í_wmem°ªam
 (
wch¨_t
 **
__buÊoc
, 
size_t
 *
__sizñoc
Ë
__THROW


322 
__©åibuã_mÆloc__
 
__©å_dóŒoc_f˛o£
;

328 
	$£tbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
Ë
__THROW
;

332 
	$£tvbuf
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

333 
__modes
, 
size_t
 
__n
Ë
__THROW
;

335 #ifdef 
__USE_MISC


338 
	$£tbuf„r
 (
FILE
 *
__ª°ri˘
 
__°ªam
, *__ª°ri˘ 
__buf
,

339 
size_t
 
__size
Ë
__THROW
;

342 
	$£éöebuf
 (
FILE
 *
__°ªam
Ë
__THROW
;

350 
	`Ârötf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

351 c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

356 
	`¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...);

358 
	$•rötf
 (*
__ª°ri˘
 
__s
,

359 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROWNL
;

365 
	`vÂrötf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

366 
__gnuc_va_li°
 
__¨g
);

371 
	`v¥ötf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
);

373 
	$v•rötf
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

374 
__gnuc_va_li°
 
__¨g
Ë
__THROWNL
;

376 #i‡
deföed
 
__USE_ISOC99
 || deföed 
__USE_UNIX98


378 
	$¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

379 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

380 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 4)));

382 
	$v¢¥ötf
 (*
__ª°ri˘
 
__s
, 
size_t
 
__maxÀn
,

383 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

384 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 3, 0)));

387 #i‡
	`__GLIBC_USE
 (
LIB_EXT2
)

390 
	$va•rötf
 (**
__ª°ri˘
 
__±r
, c⁄° *__ª°ri˘ 
__f
,

391 
__gnuc_va_li°
 
__¨g
)

392 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 0))Ë
__wur
;

393 
	$__a•rötf
 (**
__ª°ri˘
 
__±r
,

394 c⁄° *
__ª°ri˘
 
__fmt
, ...)

395 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

396 
	$a•rötf
 (**
__ª°ri˘
 
__±r
,

397 c⁄° *
__ª°ri˘
 
__fmt
, ...)

398 
__THROWNL
 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__¥ötf__
, 2, 3))Ë
__wur
;

401 #ifde‡
__USE_XOPEN2K8


403 
	$vd¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
,

404 
__gnuc_va_li°
 
__¨g
)

405 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

406 
	$d¥ötf
 (
__fd
, c⁄° *
__ª°ri˘
 
__fmt
, ...)

407 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

415 
	$fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

416 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

421 
	$sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

423 
	$ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

424 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

430 
	~<bôs/Êﬂä.h
>

431 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
Ë&& !
deföed
 
__LDBL_COMPAT
 \

432 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

433 #ifde‡
__REDIRECT


434 
	`__REDIRECT
 (
fsˇnf
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

435 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

436 
__isoc99_fsˇnf
Ë
__wur
;

437 
	`__REDIRECT
 (
sˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

438 
__isoc99_sˇnf
Ë
__wur
;

439 
	`__REDIRECT_NTH
 (
ssˇnf
, (c⁄° *
__ª°ri˘
 
__s
,

440 c⁄° *
__ª°ri˘
 
__f‹m©
, ...),

441 
__isoc99_ssˇnf
);

443 
	$__isoc99_fsˇnf
 (
FILE
 *
__ª°ri˘
 
__°ªam
,

444 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

445 
	$__isoc99_sˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__wur
;

446 
	$__isoc99_ssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

447 c⁄° *
__ª°ri˘
 
__f‹m©
, ...Ë
__THROW
;

448 
	#fsˇnf
 
__isoc99_fsˇnf


	)

449 
	#sˇnf
 
__isoc99_sˇnf


	)

450 
	#ssˇnf
 
__isoc99_ssˇnf


	)

454 #ifdef 
__USE_ISOC99


459 
	$vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__f‹m©
,

460 
__gnuc_va_li°
 
__¨g
)

461 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

467 
	$vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

468 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

471 
	$vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

472 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
)

473 
__THROW
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

476 #i‡!
	`__GLIBC_USE
 (
DEPRECATED_SCANF
)

477 #i‡
deföed
 
__REDIRECT
 && !deföed 
__LDBL_COMPAT
 \

478 && 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 0

479 
	`__REDIRECT
 (
vfsˇnf
,

480 (
FILE
 *
__ª°ri˘
 
__s
,

481 c⁄° *
__ª°ri˘
 
__f‹m©
, 
__gnuc_va_li°
 
__¨g
),

482 
__isoc99_vfsˇnf
)

483 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 2, 0))Ë
__wur
;

484 
	`__REDIRECT
 (
vsˇnf
, (c⁄° *
__ª°ri˘
 
__f‹m©
,

485 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vsˇnf
)

486 
	`__©åibuã__
 ((
	$__f‹m©__
 (
__sˇnf__
, 1, 0))Ë
__wur
;

487 
	`__REDIRECT_NTH
 (
vssˇnf
,

488 (c⁄° *
__ª°ri˘
 
__s
,

489 c⁄° *
__ª°ri˘
 
__f‹m©
,

490 
__gnuc_va_li°
 
__¨g
), 
__isoc99_vssˇnf
)

491 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__sˇnf__
, 2, 0)));

492 #ñi‡!
deföed
 
__REDIRECT


493 
	$__isoc99_vfsˇnf
 (
FILE
 *
__ª°ri˘
 
__s
,

494 c⁄° *
__ª°ri˘
 
__f‹m©
,

495 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

496 
	$__isoc99_vsˇnf
 (c⁄° *
__ª°ri˘
 
__f‹m©
,

497 
__gnuc_va_li°
 
__¨g
Ë
__wur
;

498 
	$__isoc99_vssˇnf
 (c⁄° *
__ª°ri˘
 
__s
,

499 c⁄° *
__ª°ri˘
 
__f‹m©
,

500 
__gnuc_va_li°
 
__¨g
Ë
__THROW
;

501 
	#vfsˇnf
 
__isoc99_vfsˇnf


	)

502 
	#vsˇnf
 
__isoc99_vsˇnf


	)

503 
	#vssˇnf
 
__isoc99_vssˇnf


	)

513 
	`fgëc
 (
FILE
 *
__°ªam
);

514 
	`gëc
 (
FILE
 *
__°ªam
);

520 
	`gëch¨
 ();

522 #ifde‡
__USE_POSIX199506


527 
	`gëc_u∆ocked
 (
FILE
 *
__°ªam
);

528 
	`gëch¨_u∆ocked
 ();

531 #ifde‡
__USE_MISC


538 
	`fgëc_u∆ocked
 (
FILE
 *
__°ªam
);

549 
	`Âutc
 (
__c
, 
FILE
 *
__°ªam
);

550 
	`putc
 (
__c
, 
FILE
 *
__°ªam
);

556 
	`putch¨
 (
__c
);

558 #ifde‡
__USE_MISC


565 
	`Âutc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

568 #ifde‡
__USE_POSIX199506


573 
	`putc_u∆ocked
 (
__c
, 
FILE
 *
__°ªam
);

574 
	`putch¨_u∆ocked
 (
__c
);

578 #i‡
deföed
 
__USE_MISC
 \

579 || (
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

581 
	`gëw
 (
FILE
 *
__°ªam
);

584 
	`putw
 (
__w
, 
FILE
 *
__°ªam
);

592 *
	$fgës
 (*
__ª°ri˘
 
__s
, 
__n
, 
FILE
 *__ª°ri˘ 
__°ªam
)

593 
__wur
 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

595 #i‡
	`__GLIBC_USE
 (
DEPRECATED_GETS
)

605 *
	$gës
 (*
__s
Ë
__wur
 
__©åibuã_dïªˇãd__
;

608 #ifde‡
__USE_GNU


615 *
	$fgës_u∆ocked
 (*
__ª°ri˘
 
__s
, 
__n
,

616 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur


617 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

621 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
)

632 
__ssize_t
 
	$__gëdñim
 (**
__ª°ri˘
 
__löïå
,

633 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

634 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

635 
__ssize_t
 
	$gëdñim
 (**
__ª°ri˘
 
__löïå
,

636 
size_t
 *
__ª°ri˘
 
__n
, 
__dñimôî
,

637 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

645 
__ssize_t
 
	$gëlöe
 (**
__ª°ri˘
 
__löïå
,

646 
size_t
 *
__ª°ri˘
 
__n
,

647 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

655 
	`Âuts
 (c⁄° *
__ª°ri˘
 
__s
, 
FILE
 *__ª°ri˘ 
__°ªam
);

661 
	`puts
 (c⁄° *
__s
);

668 
	`ungëc
 (
__c
, 
FILE
 *
__°ªam
);

675 
size_t
 
	$‰ód
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

676 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

681 
size_t
 
	`fwrôe
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

682 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__s
);

684 #ifde‡
__USE_GNU


691 
	`Âuts_u∆ocked
 (c⁄° *
__ª°ri˘
 
__s
,

692 
FILE
 *
__ª°ri˘
 
__°ªam
);

695 #ifde‡
__USE_MISC


702 
size_t
 
	$‰ód_u∆ocked
 (*
__ª°ri˘
 
__±r
, 
size_t
 
__size
,

703 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
Ë
__wur
;

704 
size_t
 
	`fwrôe_u∆ocked
 (c⁄° *
__ª°ri˘
 
__±r
, size_à
__size
,

705 
size_t
 
__n
, 
FILE
 *
__ª°ri˘
 
__°ªam
);

713 
	`f£ek
 (
FILE
 *
__°ªam
, 
__off
, 
__whí˚
);

718 
	$·ñl
 (
FILE
 *
__°ªam
Ë
__wur
;

723 
	`ªwöd
 (
FILE
 *
__°ªam
);

730 #i‡
deföed
 
__USE_LARGEFILE
 || deföed 
__USE_XOPEN2K


731 #i‚de‡
__USE_FILE_OFFSET64


736 
	`f£eko
 (
FILE
 *
__°ªam
, 
__off_t
 
__off
, 
__whí˚
);

741 
__off_t
 
	$·ñlo
 (
FILE
 *
__°ªam
Ë
__wur
;

743 #ifde‡
__REDIRECT


744 
	`__REDIRECT
 (
f£eko
,

745 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
),

746 
f£eko64
);

747 
__off64_t
 
	`__REDIRECT
 (
·ñlo
, (
FILE
 *
__°ªam
), 
·ñlo64
);

749 
	#f£eko
 
f£eko64


	)

750 
	#·ñlo
 
·ñlo64


	)

755 #i‚de‡
__USE_FILE_OFFSET64


760 
	`fgëpos
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos_t
 *__ª°ri˘ 
__pos
);

765 
	`f£ços
 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
);

767 #ifde‡
__REDIRECT


768 
	`__REDIRECT
 (
fgëpos
, (
FILE
 *
__ª°ri˘
 
__°ªam
,

769 
Âos_t
 *
__ª°ri˘
 
__pos
), 
fgëpos64
);

770 
	`__REDIRECT
 (
f£ços
,

771 (
FILE
 *
__°ªam
, c⁄° 
Âos_t
 *
__pos
), 
f£ços64
);

773 
	#fgëpos
 
fgëpos64


	)

774 
	#f£ços
 
f£ços64


	)

778 #ifde‡
__USE_LARGEFILE64


779 
	`f£eko64
 (
FILE
 *
__°ªam
, 
__off64_t
 
__off
, 
__whí˚
);

780 
__off64_t
 
	$·ñlo64
 (
FILE
 *
__°ªam
Ë
__wur
;

781 
	`fgëpos64
 (
FILE
 *
__ª°ri˘
 
__°ªam
, 
Âos64_t
 *__ª°ri˘ 
__pos
);

782 
	`f£ços64
 (
FILE
 *
__°ªam
, c⁄° 
Âos64_t
 *
__pos
);

786 
	$˛óªº
 (
FILE
 *
__°ªam
Ë
__THROW
;

788 
	$„of
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

790 
	$„º‹
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

792 #ifde‡
__USE_MISC


794 
	$˛óªº_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
;

795 
	$„of_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

796 
	$„º‹_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

804 
	`≥º‹
 (c⁄° *
__s
);

807 #ifdef 
__USE_POSIX


809 
	$fûío
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

812 #ifde‡
__USE_MISC


814 
	$fûío_u∆ocked
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

818 #ifde‡
__USE_POSIX2


823 
	`p˛o£
 (
FILE
 *
__°ªam
);

829 
FILE
 *
	$p›í
 (c⁄° *
__comm™d
, c⁄° *
__modes
)

830 
__©åibuã_mÆloc__
 
	$__©å_dóŒoc
 (
p˛o£
, 1Ë
__wur
;

835 #ifdef 
__USE_POSIX


837 *
	$˘îmid
 (*
__s
Ë
__THROW


838 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

842 #i‡(
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
Ë|| deföed 
__USE_GNU


844 *
	$cu£rid
 (*
__s
)

845 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

849 #ifdef 
__USE_GNU


850 
ob°ack
;

853 
	$ob°ack_¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

854 c⁄° *
__ª°ri˘
 
__f‹m©
, ...)

855 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 3)));

856 
	$ob°ack_v¥ötf
 (
ob°ack
 *
__ª°ri˘
 
__ob°ack
,

857 c⁄° *
__ª°ri˘
 
__f‹m©
,

858 
__gnuc_va_li°
 
__¨gs
)

859 
__THROWNL
 
	`__©åibuã__
 ((
	`__f‹m©__
 (
__¥ötf__
, 2, 0)));

863 #ifde‡
__USE_POSIX199506


867 
	$Êockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

871 
	$·rylockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
 
__wur
;

874 
	$fu∆ockfûe
 (
FILE
 *
__°ªam
Ë
__THROW
;

877 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


880 
	~<bôs/gë›t_posix.h
>

885 
	`__uÊow
 (
FILE
 *);

886 
	`__ovîÊow
 (
FILE
 *, );

890 #ifde‡
__USE_EXTERN_INLINES


891 
	~<bôs/°dio.h
>

893 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


894 
	~<bôs/°dio2.h
>

897 
	~<bôs/Êﬂä.h
>

898 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

899 
	~<bôs/°dio-ldbl.h
>

902 
__END_DECLS


	@/usr/include/stdlib.h

23 #i‚def 
_STDLIB_H


25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

29 
	#__√ed_size_t


	)

30 
	#__√ed_wch¨_t


	)

31 
	#__√ed_NULL


	)

32 
	~<°ddef.h
>

34 
	g__BEGIN_DECLS


36 
	#_STDLIB_H
 1

	)

38 #i‡(
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K8
Ë&& !deföed 
_SYS_WAIT_H


40 
	~<bôs/waôÊags.h
>

41 
	~<bôs/waô°©us.h
>

44 
	#WEXITSTATUS
(
°©us
Ë
	`__WEXITSTATUS
 (°©us)

	)

45 
	#WTERMSIG
(
°©us
Ë
	`__WTERMSIG
 (°©us)

	)

46 
	#WSTOPSIG
(
°©us
Ë
	`__WSTOPSIG
 (°©us)

	)

47 
	#WIFEXITED
(
°©us
Ë
	`__WIFEXITED
 (°©us)

	)

48 
	#WIFSIGNALED
(
°©us
Ë
	`__WIFSIGNALED
 (°©us)

	)

49 
	#WIFSTOPPED
(
°©us
Ë
	`__WIFSTOPPED
 (°©us)

	)

50 #ifde‡
__WIFCONTINUED


51 
	#WIFCONTINUED
(
°©us
Ë
	`__WIFCONTINUED
 (°©us)

	)

56 
	~<bôs/Êﬂä.h
>

61 
	mquŸ
;

62 
	mªm
;

63 } 
	tdiv_t
;

66 #i‚de‡
__ldiv_t_deföed


69 
	mquŸ
;

70 
	mªm
;

71 } 
	tldiv_t
;

72 
	#__ldiv_t_deföed
 1

	)

75 #i‡
deföed
 
__USE_ISOC99
 && !deföed 
__Œdiv_t_deföed


77 
__exãnsi⁄__
 struct

79 
	mquŸ
;

80 
	mªm
;

81 } 
	tŒdiv_t
;

82 
	#__Œdiv_t_deföed
 1

	)

87 
	#RAND_MAX
 2147483647

	)

92 
	#EXIT_FAILURE
 1

	)

93 
	#EXIT_SUCCESS
 0

	)

97 
	#MB_CUR_MAX
 (
	`__˘y≥_gë_mb_cur_max
 ())

	)

98 
size_t
 
	$__˘y≥_gë_mb_cur_max
 (Ë
__THROW
 
__wur
;

102 
	$©of
 (c⁄° *
__≈å
)

103 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

105 
	$©oi
 (c⁄° *
__≈å
)

106 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

108 
	$©ﬁ
 (c⁄° *
__≈å
)

109 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

111 #ifde‡
__USE_ISOC99


113 
__exãnsi⁄__
 
	$©ﬁl
 (c⁄° *
__≈å
)

114 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

118 
	$°πod
 (c⁄° *
__ª°ri˘
 
__≈å
,

119 **
__ª°ri˘
 
__íd±r
)

120 
__THROW
 
	`__n⁄nuŒ
 ((1));

122 #ifdef 
__USE_ISOC99


124 
	$°πof
 (c⁄° *
__ª°ri˘
 
__≈å
,

125 **
__ª°ri˘
 
__íd±r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

127 
	$°πﬁd
 (c⁄° *
__ª°ri˘
 
__≈å
,

128 **
__ª°ri˘
 
__íd±r
)

129 
__THROW
 
	`__n⁄nuŒ
 ((1));

134 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

135 
_Flﬂt16
 
	$°πof16
 (c⁄° *
__ª°ri˘
 
__≈å
,

136 **
__ª°ri˘
 
__íd±r
)

137 
__THROW
 
	`__n⁄nuŒ
 ((1));

140 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

141 
_Flﬂt32
 
	$°πof32
 (c⁄° *
__ª°ri˘
 
__≈å
,

142 **
__ª°ri˘
 
__íd±r
)

143 
__THROW
 
	`__n⁄nuŒ
 ((1));

146 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

147 
_Flﬂt64
 
	$°πof64
 (c⁄° *
__ª°ri˘
 
__≈å
,

148 **
__ª°ri˘
 
__íd±r
)

149 
__THROW
 
	`__n⁄nuŒ
 ((1));

152 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

153 
_Flﬂt128
 
	$°πof128
 (c⁄° *
__ª°ri˘
 
__≈å
,

154 **
__ª°ri˘
 
__íd±r
)

155 
__THROW
 
	`__n⁄nuŒ
 ((1));

158 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

159 
_Flﬂt32x
 
	$°πof32x
 (c⁄° *
__ª°ri˘
 
__≈å
,

160 **
__ª°ri˘
 
__íd±r
)

161 
__THROW
 
	`__n⁄nuŒ
 ((1));

164 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

165 
_Flﬂt64x
 
	$°πof64x
 (c⁄° *
__ª°ri˘
 
__≈å
,

166 **
__ª°ri˘
 
__íd±r
)

167 
__THROW
 
	`__n⁄nuŒ
 ((1));

170 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

171 
_Flﬂt128x
 
	$°πof128x
 (c⁄° *
__ª°ri˘
 
__≈å
,

172 **
__ª°ri˘
 
__íd±r
)

173 
__THROW
 
	`__n⁄nuŒ
 ((1));

177 
	$°πﬁ
 (c⁄° *
__ª°ri˘
 
__≈å
,

178 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

179 
__THROW
 
	`__n⁄nuŒ
 ((1));

181 
	$°πoul
 (c⁄° *
__ª°ri˘
 
__≈å
,

182 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

183 
__THROW
 
	`__n⁄nuŒ
 ((1));

185 #ifde‡
__USE_MISC


187 
__exãnsi⁄__


188 
	$°πoq
 (c⁄° *
__ª°ri˘
 
__≈å
,

189 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

190 
__THROW
 
	`__n⁄nuŒ
 ((1));

192 
__exãnsi⁄__


193 
	$°πouq
 (c⁄° *
__ª°ri˘
 
__≈å
,

194 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

195 
__THROW
 
	`__n⁄nuŒ
 ((1));

198 #ifde‡
__USE_ISOC99


200 
__exãnsi⁄__


201 
	$°πﬁl
 (c⁄° *
__ª°ri˘
 
__≈å
,

202 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

203 
__THROW
 
	`__n⁄nuŒ
 ((1));

205 
__exãnsi⁄__


206 
	$°πouŒ
 (c⁄° *
__ª°ri˘
 
__≈å
,

207 **
__ª°ri˘
 
__íd±r
, 
__ba£
)

208 
__THROW
 
	`__n⁄nuŒ
 ((1));

212 #i‡
	`__GLIBC_USE
 (
IEC_60559_BFP_EXT_C2X
)

213 
	$°r‰omd
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

214 
__f
)

215 
__THROW
 
	`__n⁄nuŒ
 ((3));

217 
	$°r‰omf
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

218 
__f
)

219 
__THROW
 
	`__n⁄nuŒ
 ((3));

221 
	$°r‰oml
 (*
__de°
, 
size_t
 
__size
, c⁄° *
__f‹m©
,

222 
__f
)

223 
__THROW
 
	`__n⁄nuŒ
 ((3));

226 #i‡
__HAVE_FLOAT16
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

227 
	$°r‰omf16
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

228 
_Flﬂt16
 
__f
)

229 
__THROW
 
	`__n⁄nuŒ
 ((3));

232 #i‡
__HAVE_FLOAT32
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

233 
	$°r‰omf32
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

234 
_Flﬂt32
 
__f
)

235 
__THROW
 
	`__n⁄nuŒ
 ((3));

238 #i‡
__HAVE_FLOAT64
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

239 
	$°r‰omf64
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

240 
_Flﬂt64
 
__f
)

241 
__THROW
 
	`__n⁄nuŒ
 ((3));

244 #i‡
__HAVE_FLOAT128
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

245 
	$°r‰omf128
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

246 
_Flﬂt128
 
__f
)

247 
__THROW
 
	`__n⁄nuŒ
 ((3));

250 #i‡
__HAVE_FLOAT32X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

251 
	$°r‰omf32x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

252 
_Flﬂt32x
 
__f
)

253 
__THROW
 
	`__n⁄nuŒ
 ((3));

256 #i‡
__HAVE_FLOAT64X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

257 
	$°r‰omf64x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

258 
_Flﬂt64x
 
__f
)

259 
__THROW
 
	`__n⁄nuŒ
 ((3));

262 #i‡
__HAVE_FLOAT128X
 && 
	`__GLIBC_USE
 (
IEC_60559_TYPES_EXT
)

263 
	$°r‰omf128x
 (*
__de°
, 
size_t
 
__size
, c⁄° * 
__f‹m©
,

264 
_Flﬂt128x
 
__f
)

265 
__THROW
 
	`__n⁄nuŒ
 ((3));

269 #ifde‡
__USE_GNU


273 
	~<bôs/ty≥s/loˇÀ_t.h
>

275 
	$°πﬁ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

276 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

277 
loˇÀ_t
 
__loc
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

279 
	$°πoul_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

280 **
__ª°ri˘
 
__íd±r
,

281 
__ba£
, 
loˇÀ_t
 
__loc
)

282 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

284 
__exãnsi⁄__


285 
	$°πﬁl_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

286 **
__ª°ri˘
 
__íd±r
, 
__ba£
,

287 
loˇÀ_t
 
__loc
)

288 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

290 
__exãnsi⁄__


291 
	$°πouŒ_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

292 **
__ª°ri˘
 
__íd±r
,

293 
__ba£
, 
loˇÀ_t
 
__loc
)

294 
__THROW
 
	`__n⁄nuŒ
 ((1, 4));

296 
	$°πod_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

297 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

298 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

300 
	$°πof_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

301 **
__ª°ri˘
 
__íd±r
, 
loˇÀ_t
 
__loc
)

302 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

304 
	$°πﬁd_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

305 **
__ª°ri˘
 
__íd±r
,

306 
loˇÀ_t
 
__loc
)

307 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

309 #i‡
__HAVE_FLOAT16


310 
_Flﬂt16
 
	$°πof16_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

311 **
__ª°ri˘
 
__íd±r
,

312 
loˇÀ_t
 
__loc
)

313 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

316 #i‡
__HAVE_FLOAT32


317 
_Flﬂt32
 
	$°πof32_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

318 **
__ª°ri˘
 
__íd±r
,

319 
loˇÀ_t
 
__loc
)

320 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

323 #i‡
__HAVE_FLOAT64


324 
_Flﬂt64
 
	$°πof64_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

325 **
__ª°ri˘
 
__íd±r
,

326 
loˇÀ_t
 
__loc
)

327 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

330 #i‡
__HAVE_FLOAT128


331 
_Flﬂt128
 
	$°πof128_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

332 **
__ª°ri˘
 
__íd±r
,

333 
loˇÀ_t
 
__loc
)

334 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

337 #i‡
__HAVE_FLOAT32X


338 
_Flﬂt32x
 
	$°πof32x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

339 **
__ª°ri˘
 
__íd±r
,

340 
loˇÀ_t
 
__loc
)

341 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

344 #i‡
__HAVE_FLOAT64X


345 
_Flﬂt64x
 
	$°πof64x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

346 **
__ª°ri˘
 
__íd±r
,

347 
loˇÀ_t
 
__loc
)

348 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

351 #i‡
__HAVE_FLOAT128X


352 
_Flﬂt128x
 
	$°πof128x_l
 (c⁄° *
__ª°ri˘
 
__≈å
,

353 **
__ª°ri˘
 
__íd±r
,

354 
loˇÀ_t
 
__loc
)

355 
__THROW
 
	`__n⁄nuŒ
 ((1, 3));

360 #ifde‡
__USE_EXTERN_INLINES


361 
__exã∫_ölöe
 

362 
	`__NTH
 (
	$©oi
 (c⁄° *
__≈å
))

364  (Ë
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

365 
	}
}

366 
__exã∫_ölöe
 

367 
__NTH
 (
	$©ﬁ
 (c⁄° *
__≈å
))

369  
	`°πﬁ
 (
__≈å
, (**Ë
NULL
, 10);

370 
	}
}

372 #ifde‡
__USE_ISOC99


373 
__exãnsi⁄__
 
__exã∫_ölöe
 

374 
__NTH
 (
	$©ﬁl
 (c⁄° *
__≈å
))

376  
	`°πﬁl
 (
__≈å
, (**Ë
NULL
, 10);

377 
	}
}

382 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


386 *
	$l64a
 (
__n
Ë
__THROW
 
__wur
;

389 
	$a64l
 (c⁄° *
__s
)

390 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

394 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


395 
	~<sys/ty≥s.h
>

402 
	$øndom
 (Ë
__THROW
;

405 
	$§™dom
 (
__£ed
Ë
__THROW
;

411 *
	$öô°©e
 (
__£ed
, *
__°©ebuf
,

412 
size_t
 
__°©ñí
Ë
__THROW
 
	`__n⁄nuŒ
 ((2));

416 *
	$£t°©e
 (*
__°©ebuf
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

419 #ifde‡
__USE_MISC


424 
	søndom_d©a


426 
öt32_t
 *
Âå
;

427 
öt32_t
 *
Ωå
;

428 
öt32_t
 *
°©e
;

429 
ønd_ty≥
;

430 
ønd_deg
;

431 
ønd_£p
;

432 
öt32_t
 *
íd_±r
;

435 
	$øndom_r
 (
øndom_d©a
 *
__ª°ri˘
 
__buf
,

436 
öt32_t
 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

438 
	$§™dom_r
 (
__£ed
, 
øndom_d©a
 *
__buf
)

439 
__THROW
 
	`__n⁄nuŒ
 ((2));

441 
	$öô°©e_r
 (
__£ed
, *
__ª°ri˘
 
__°©ebuf
,

442 
size_t
 
__°©ñí
,

443 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

444 
__THROW
 
	`__n⁄nuŒ
 ((2, 4));

446 
	$£t°©e_r
 (*
__ª°ri˘
 
__°©ebuf
,

447 
øndom_d©a
 *
__ª°ri˘
 
__buf
)

448 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

454 
	$ønd
 (Ë
__THROW
;

456 
	$§™d
 (
__£ed
Ë
__THROW
;

458 #ifde‡
__USE_POSIX199506


460 
	$ønd_r
 (*
__£ed
Ë
__THROW
;

464 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


468 
	$dønd48
 (Ë
__THROW
;

469 
	$î™d48
 (
__xsubi
[3]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

472 
	$Ã™d48
 (Ë
__THROW
;

473 
	$ƒ™d48
 (
__xsubi
[3])

474 
__THROW
 
	`__n⁄nuŒ
 ((1));

477 
	$mønd48
 (Ë
__THROW
;

478 
	$jønd48
 (
__xsubi
[3])

479 
__THROW
 
	`__n⁄nuŒ
 ((1));

482 
	$§™d48
 (
__£edvÆ
Ë
__THROW
;

483 *
	$£ed48
 (
__£ed16v
[3])

484 
__THROW
 
	`__n⁄nuŒ
 ((1));

485 
	$lc⁄g48
 (
__∑øm
[7]Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

487 #ifde‡
__USE_MISC


491 
	sdønd48_d©a


493 
__x
[3];

494 
__ﬁd_x
[3];

495 
__c
;

496 
__öô
;

497 
__exãnsi⁄__
 
__a
;

502 
	$dønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

503 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 
	$î™d48_r
 (
__xsubi
[3],

505 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

506 *
__ª°ri˘
 
__ªsu…
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

509 
	$Ã™d48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

510 *
__ª°ri˘
 
__ªsu…
)

511 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

512 
	$ƒ™d48_r
 (
__xsubi
[3],

513 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

514 *
__ª°ri˘
 
__ªsu…
)

515 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

518 
	$mønd48_r
 (
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

519 *
__ª°ri˘
 
__ªsu…
)

520 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

521 
	$jønd48_r
 (
__xsubi
[3],

522 
dønd48_d©a
 *
__ª°ri˘
 
__buf„r
,

523 *
__ª°ri˘
 
__ªsu…
)

524 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

527 
	$§™d48_r
 (
__£edvÆ
, 
dønd48_d©a
 *
__buf„r
)

528 
__THROW
 
	`__n⁄nuŒ
 ((2));

530 
	$£ed48_r
 (
__£ed16v
[3],

531 
dønd48_d©a
 *
__buf„r
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

533 
	$lc⁄g48_r
 (
__∑øm
[7],

534 
dønd48_d©a
 *
__buf„r
)

535 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

540 *
	$mÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


541 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

543 *
	$ˇŒoc
 (
size_t
 
__nmemb
, size_à
__size
)

544 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_size__
 ((1, 2)Ë
__wur
;

551 *
	$ªÆloc
 (*
__±r
, 
size_t
 
__size
)

552 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__
 
	`__©åibuã_Æloc_size__
 ((2));

555 
	$‰ì
 (*
__±r
Ë
__THROW
;

557 #ifde‡
__USE_MISC


563 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

564 
__THROW
 
__©åibuã_w¨n_unu£d_ªsu…__


565 
	`__©åibuã_Æloc_size__
 ((2, 3))

566 
__©å_dóŒoc_‰ì
;

569 *
	$ªÆloˇºay
 (*
__±r
, 
size_t
 
__nmemb
, size_à
__size
)

570 
__THROW
 
	`__©å_dóŒoc
 (
ªÆloˇºay
, 1);

573 #ifde‡
__USE_MISC


574 
	~<Æloˇ.h
>

577 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

578 || 
deföed
 
__USE_MISC


580 *
	$vÆloc
 (
size_t
 
__size
Ë
__THROW
 
__©åibuã_mÆloc__


581 
	`__©åibuã_Æloc_size__
 ((1)Ë
__wur
;

584 #ifde‡
__USE_XOPEN2K


586 
	$posix_memÆign
 (**
__mem±r
, 
size_t
 
__Æignmít
, size_à
__size
)

587 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

590 #ifde‡
__USE_ISOC11


592 *
	$Æig√d_Æloc
 (
size_t
 
__Æignmít
, size_à
__size
)

593 
__THROW
 
__©åibuã_mÆloc__
 
	`__©åibuã_Æloc_Æign__
 ((1))

594 
	`__©åibuã_Æloc_size__
 ((2)Ë
__wur
;

598 
	$ab‹t
 (Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

602 
	$©exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

604 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


606 #ifde‡
__˝lu•lus


607 "C++" 
	$©_quick_exô
 ((*
__func
) ())

608 
__THROW
 
	`__asm
 ("©_quick_exô"Ë
	`__n⁄nuŒ
 ((1));

610 
	$©_quick_exô
 ((*
__func
Ë()Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

614 #ifdef 
__USE_MISC


617 
	$⁄_exô
 ((*
__func
Ë(
__°©us
, *
__¨g
), *__arg)

618 
__THROW
 
	`__n⁄nuŒ
 ((1));

624 
	$exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

626 #i‡
deföed
 
__USE_ISOC11
 || deföed 
__USE_ISOCXX11


630 
	$quick_exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

633 #ifde‡
__USE_ISOC99


636 
	$_Exô
 (
__°©us
Ë
__THROW
 
	`__©åibuã__
 ((
__n‹ëu∫__
));

641 *
	$gëív
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

643 #ifde‡
__USE_GNU


646 *
	$£cuª_gëív
 (c⁄° *
__«me
)

647 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

650 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


654 
	$puãnv
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

657 #ifde‡
__USE_XOPEN2K


660 
	$£ãnv
 (c⁄° *
__«me
, c⁄° *
__vÆue
, 
__ª∂a˚
)

661 
__THROW
 
	`__n⁄nuŒ
 ((2));

664 
	$un£ãnv
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

667 #ifdef 
__USE_MISC


671 
	$˛óªnv
 (Ë
__THROW
;

675 #i‡
deföed
 
__USE_MISC
 \

676 || (
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
)

682 *
	$mkãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

685 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


694 #i‚de‡
__USE_FILE_OFFSET64


695 
	$mk°emp
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

697 #ifde‡
__REDIRECT


698 
	`__REDIRECT
 (
mk°emp
, (*
__ãm∂©e
), 
mk°emp64
)

699 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

701 
	#mk°emp
 
mk°emp64


	)

704 #ifde‡
__USE_LARGEFILE64


705 
	$mk°emp64
 (*
__ãm∂©e
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

709 #ifde‡
__USE_MISC


716 #i‚de‡
__USE_FILE_OFFSET64


717 
	$mk°emps
 (*
__ãm∂©e
, 
__suffixÀn
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

719 #ifde‡
__REDIRECT


720 
	`__REDIRECT
 (
mk°emps
, (*
__ãm∂©e
, 
__suffixÀn
),

721 
mk°emps64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

723 
	#mk°emps
 
mk°emps64


	)

726 #ifde‡
__USE_LARGEFILE64


727 
	$mk°emps64
 (*
__ãm∂©e
, 
__suffixÀn
)

728 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

732 #ifde‡
__USE_XOPEN2K8


738 *
	$mkdãmp
 (*
__ãm∂©e
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

741 #ifde‡
__USE_GNU


748 #i‚de‡
__USE_FILE_OFFSET64


749 
	$mko°emp
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

751 #ifde‡
__REDIRECT


752 
	`__REDIRECT
 (
mko°emp
, (*
__ãm∂©e
, 
__Êags
), 
mko°emp64
)

753 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

755 
	#mko°emp
 
mko°emp64


	)

758 #ifde‡
__USE_LARGEFILE64


759 
	$mko°emp64
 (*
__ãm∂©e
, 
__Êags
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

768 #i‚de‡
__USE_FILE_OFFSET64


769 
	$mko°emps
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

770 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

772 #ifde‡
__REDIRECT


773 
	`__REDIRECT
 (
mko°emps
, (*
__ãm∂©e
, 
__suffixÀn
,

774 
__Êags
), 
mko°emps64
)

775 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

777 
	#mko°emps
 
mko°emps64


	)

780 #ifde‡
__USE_LARGEFILE64


781 
	$mko°emps64
 (*
__ãm∂©e
, 
__suffixÀn
, 
__Êags
)

782 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

791 
	$sy°em
 (c⁄° *
__comm™d
Ë
__wur
;

794 #ifdef 
__USE_GNU


797 *
	$ˇn⁄iˇlize_fûe_«me
 (c⁄° *
__«me
)

798 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_mÆloc__


799 
__©å_dóŒoc_‰ì
 
__wur
;

802 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


808 *
	$ªÆ∑th
 (c⁄° *
__ª°ri˘
 
__«me
,

809 *
__ª°ri˘
 
__ªsﬁved
Ë
__THROW
 
__wur
;

814 #i‚de‡
__COMPAR_FN_T


815 
	#__COMPAR_FN_T


	)

816 (*
	t__com∑r_‚_t
) (const *, const *);

818 #ifdef 
__USE_GNU


819 
__com∑r_‚_t
 
	tcom∑ris⁄_‚_t
;

822 #ifde‡
__USE_GNU


823 (*
	t__com∑r_d_‚_t
) (const *, const *, *);

828 *
	$b£¨ch
 (c⁄° *
__key
, c⁄° *
__ba£
,

829 
size_t
 
__nmemb
, size_à
__size
, 
__com∑r_‚_t
 
__com∑r
)

830 
	`__n⁄nuŒ
 ((1, 2, 5)Ë
__wur
;

832 #ifde‡
__USE_EXTERN_INLINES


833 
	~<bôs/°dlib-b£¨ch.h
>

838 
	$qs‹t
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

839 
__com∑r_‚_t
 
__com∑r
Ë
	`__n⁄nuŒ
 ((1, 4));

840 #ifde‡
__USE_GNU


841 
	$qs‹t_r
 (*
__ba£
, 
size_t
 
__nmemb
, size_à
__size
,

842 
__com∑r_d_‚_t
 
__com∑r
, *
__¨g
)

843 
	`__n⁄nuŒ
 ((1, 4));

848 
	$abs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

849 
	$œbs
 (
__x
Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

851 #ifde‡
__USE_ISOC99


852 
__exãnsi⁄__
 
	$Œabs
 (
__x
)

853 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

860 
div_t
 
	$div
 (
__numî
, 
__díom
)

861 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

862 
ldiv_t
 
	$ldiv
 (
__numî
, 
__díom
)

863 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

865 #ifde‡
__USE_ISOC99


866 
__exãnsi⁄__
 
Œdiv_t
 
	$Œdiv
 (
__numî
,

867 
__díom
)

868 
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
)Ë
__wur
;

872 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

873 || 
deföed
 
__USE_MISC


880 *
	$ecvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

881 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

886 *
	$fcvt
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

887 *
__ª°ri˘
 
__sign
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

892 *
	$gcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

893 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

896 #ifde‡
__USE_MISC


898 *
	$qecvt
 (
__vÆue
, 
__ndigô
,

899 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

900 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

901 *
	$qfcvt
 (
__vÆue
, 
__ndigô
,

902 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
)

903 
__THROW
 
	`__n⁄nuŒ
 ((3, 4)Ë
__wur
;

904 *
	$qgcvt
 (
__vÆue
, 
__ndigô
, *
__buf
)

905 
__THROW
 
	`__n⁄nuŒ
 ((3)Ë
__wur
;

910 
	$ecvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

911 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

912 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

913 
	$fcvt_r
 (
__vÆue
, 
__ndigô
, *
__ª°ri˘
 
__de˝t
,

914 *
__ª°ri˘
 
__sign
, *__ª°ri˘ 
__buf
,

915 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

917 
	$qecvt_r
 (
__vÆue
, 
__ndigô
,

918 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

919 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

921 
	$qfcvt_r
 (
__vÆue
, 
__ndigô
,

922 *
__ª°ri˘
 
__de˝t
, *__ª°ri˘ 
__sign
,

923 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

924 
__THROW
 
	`__n⁄nuŒ
 ((3, 4, 5));

930 
	$mbÀn
 (c⁄° *
__s
, 
size_t
 
__n
Ë
__THROW
;

933 
	$mbtowc
 (
wch¨_t
 *
__ª°ri˘
 
__pwc
,

934 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW
;

937 
	$w˘omb
 (*
__s
, 
wch¨_t
 
__wch¨
Ë
__THROW
;

941 
size_t
 
	$mb°owcs
 (
wch¨_t
 *
__ª°ri˘
 
__pwcs
,

942 c⁄° *
__ª°ri˘
 
__s
, 
size_t
 
__n
Ë
__THROW


943 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

945 
size_t
 
	$wc°ombs
 (*
__ª°ri˘
 
__s
,

946 c⁄° 
wch¨_t
 *
__ª°ri˘
 
__pwcs
, 
size_t
 
__n
)

947 
__THROW


948 
	$__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 3)

949 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2));

951 #ifde‡
__USE_MISC


956 
	$Ωm©ch
 (c⁄° *
__ª•⁄£
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

960 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


967 
	$gësub›t
 (**
__ª°ri˘
 
__›ti⁄p
,

968 *c⁄° *
__ª°ri˘
 
__tokís
,

969 **
__ª°ri˘
 
__vÆuï
)

970 
__THROW
 
	`__n⁄nuŒ
 ((1, 2, 3)Ë
__wur
;

976 #ifde‡
__USE_XOPEN2KXSI


978 
	$posix_›í±
 (
__oÊag
Ë
__wur
;

981 #ifde‡
__USE_XOPEN_EXTENDED


986 
	$gø¡±
 (
__fd
Ë
__THROW
;

990 
	$u∆ock±
 (
__fd
Ë
__THROW
;

995 *
	$±¢ame
 (
__fd
Ë
__THROW
 
__wur
;

998 #ifde‡
__USE_GNU


1002 
	$±¢ame_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

1003 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

1006 
	`gë±
 ();

1009 #ifde‡
__USE_MISC


1013 
	$gëlﬂdavg
 (
__lﬂdavg
[], 
__√Àm
)

1014 
__THROW
 
	`__n⁄nuŒ
 ((1));

1017 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K


1020 
	$ây¶Ÿ
 (Ë
__THROW
;

1023 
	~<bôs/°dlib-Êﬂt.h
>

1026 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1027 
	~<bôs/°dlib.h
>

1030 
	~<bôs/Êﬂä.h
>

1031 #i‡
deföed
 
__LDBL_COMPAT
 || 
__LDOUBLE_REDIRECTS_TO_FLOAT128_ABI
 == 1

1032 
	~<bôs/°dlib-ldbl.h
>

1035 
__END_DECLS


	@/usr/include/string.h

22 #i‚def 
_STRING_H


23 
	#_STRING_H
 1

	)

25 
	#__GLIBC_INTERNAL_STARTING_HEADER_IMPLEMENTATION


	)

26 
	~<bôs/libc-hódî-°¨t.h
>

28 
	g__BEGIN_DECLS


31 
	#__√ed_size_t


	)

32 
	#__√ed_NULL


	)

33 
	~<°ddef.h
>

36 #i‡
deföed
 
__˝lu•lus
 && (
__GNUC_PREREQ
 (4, 4) \

37 || 
	$__glibc_˛™g_¥îeq
 (3, 5))

38 
	#__CORRECT_ISO_CPP_STRING_H_PROTO


	)

43 *
	$mem˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

44 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

47 *
	$memmove
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
)

48 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

53 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN
 || 
	`__GLIBC_USE
 (
ISOC2X
)

54 *
	$memc˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

55 
__c
, 
size_t
 
__n
)

56 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 4));

61 *
	$mem£t
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

64 
	$memcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

65 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

80 
	$__memcm≥q
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

81 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

84 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


87 *
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

88 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

89 c⁄° *
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

90 
__THROW
 
	`__asm
 ("memchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

92 #ifde‡
__OPTIMIZE__


93 
__exã∫_Æways_ölöe
 *

94 
	`memchr
 (*
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


96  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

99 
__exã∫_Æways_ölöe
 const *

100 
	`memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
Ë
__THROW


102  
	`__buûtö_memchr
 (
__s
, 
__c
, 
__n
);

105 
	}
}

107 *
	$memchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

108 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

111 #ifde‡
__USE_GNU


114 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


115 "C++" *
	$øwmemchr
 (*
__s
, 
__c
)

116 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

117 "C++" c⁄° *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

118 
__THROW
 
	`__asm
 ("øwmemchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

120 *
	$øwmemchr
 (c⁄° *
__s
, 
__c
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

125 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


126 "C++" *
	$memrchr
 (*
__s
, 
__c
, 
size_t
 
__n
)

127 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

128 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

129 "C++" c⁄° *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

130 
__THROW
 
	`__asm
 ("memrchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

131 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

133 *
	$memrchr
 (c⁄° *
__s
, 
__c
, 
size_t
 
__n
)

134 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1))

135 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3));

141 *
	$°r˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

142 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

144 *
	$°∫˝y
 (*
__ª°ri˘
 
__de°
,

145 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

146 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

149 *
	$°rˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

150 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

152 *
	$°∫ˇt
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
,

153 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

156 
	$°rcmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

157 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

159 
	$°∫cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

160 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

163 
	$°rcﬁl
 (c⁄° *
__s1
, c⁄° *
__s2
)

164 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

166 
size_t
 
	$°rx‰m
 (*
__ª°ri˘
 
__de°
,

167 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

168 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

170 #ifde‡
__USE_XOPEN2K8


172 
	~<bôs/ty≥s/loˇÀ_t.h
>

175 
	$°rcﬁl_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__l
)

176 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

179 
size_t
 
	$°rx‰m_l
 (*
__de°
, c⁄° *
__§c
, 
size_t
 
__n
,

180 
loˇÀ_t
 
__l
Ë
__THROW
 
	`__n⁄nuŒ
 ((2, 4))

181 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 3));

184 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8
 \

185 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| 
	$__GLIBC_USE
 (
ISOC2X
))

187 *
	$°rdup
 (c⁄° *
__s
)

188 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

194 #i‡
deföed
 
__USE_XOPEN2K8
 || 
	`__GLIBC_USE
 (
LIB_EXT2
Ë|| __GLIBC_USE (
ISOC2X
)

195 *
	$°∫dup
 (c⁄° *
__°rög
, 
size_t
 
__n
)

196 
__THROW
 
__©åibuã_mÆloc__
 
	`__n⁄nuŒ
 ((1));

199 #i‡
deföed
 
__USE_GNU
 && deföed 
__GNUC__


201 
	#°rdu∑
(
s
) \

202 (
__exãnsi⁄__
 \

204 c⁄° *
__ﬁd
 = (
s
); \

205 
size_t
 
__Àn
 = 
	`°æí
 (
__ﬁd
) + 1; \

206 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
); \

207 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

208 
	}
}))

	)

211 
	#°∫du∑
(
s
, 
n
) \

212 (
__exãnsi⁄__
 \

214 c⁄° *
__ﬁd
 = (
s
); \

215 
size_t
 
__Àn
 = 
	`°∫Àn
 (
__ﬁd
, (
n
)); \

216 *
__√w
 = (*Ë
	`__buûtö_Æloˇ
 (
__Àn
 + 1); \

217 
__√w
[
__Àn
] = '\0'; \

218 (*Ë
	`mem˝y
 (
__√w
, 
__ﬁd
, 
__Àn
); \

219 }))

	)

223 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


226 *
°rchr
 (*
__s
, 
__c
)

227 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

228 c⁄° *
°rchr
 (c⁄° *
__s
, 
__c
)

229 
__THROW
 
__asm
 ("°rchr"Ë
__©åibuã_puª__
 
__n⁄nuŒ
 ((1));

231 #ifde‡
__OPTIMIZE__


232 
__exã∫_Æways_ölöe
 *

233 
°rchr
 (*
__s
, 
__c
Ë
	g__THROW


235  
__buûtö_°rchr
 (
__s
, 
__c
);

238 
__exã∫_Æways_ölöe
 const *

239 
°rchr
 (c⁄° *
__s
, 
__c
Ë
	g__THROW


241  
__buûtö_°rchr
 (
__s
, 
__c
);

246 *
	$°rchr
 (c⁄° *
__s
, 
__c
)

247 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

250 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


253 *
	`°ºchr
 (*
__s
, 
__c
)

254 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

255 c⁄° *
	`°ºchr
 (c⁄° *
__s
, 
__c
)

256 
__THROW
 
	`__asm
 ("°ºchr"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

258 #ifde‡
__OPTIMIZE__


259 
__exã∫_Æways_ölöe
 *

260 
	`°ºchr
 (*
__s
, 
__c
Ë
__THROW


262  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

265 
__exã∫_Æways_ölöe
 const *

266 
	`°ºchr
 (c⁄° *
__s
, 
__c
Ë
__THROW


268  
	`__buûtö_°ºchr
 (
__s
, 
__c
);

271 
	}
}

273 *
	$°ºchr
 (c⁄° *
__s
, 
__c
)

274 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

277 #ifde‡
__USE_GNU


280 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


281 "C++" *
	$°rch∫ul
 (*
__s
, 
__c
)

282 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

283 "C++" c⁄° *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

284 
__THROW
 
	`__asm
 ("°rch∫ul"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

286 *
	$°rch∫ul
 (c⁄° *
__s
, 
__c
)

287 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

293 
size_t
 
	$°rc•n
 (c⁄° *
__s
, c⁄° *
__ªje˘
)

294 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

297 
size_t
 
	$°r•n
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

298 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

300 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


303 *
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
)

304 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

305 c⁄° *
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

306 
__THROW
 
	`__asm
 ("°Ωbrk"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

308 #ifde‡
__OPTIMIZE__


309 
__exã∫_Æways_ölöe
 *

310 
	`°Ωbrk
 (*
__s
, c⁄° *
__ac˚±
Ë
__THROW


312  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

315 
__exã∫_Æways_ölöe
 const *

316 
	`°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
Ë
__THROW


318  
	`__buûtö_°Ωbrk
 (
__s
, 
__ac˚±
);

321 
	}
}

323 *
	$°Ωbrk
 (c⁄° *
__s
, c⁄° *
__ac˚±
)

324 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

327 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


330 *
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

331 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

332 c⁄° *
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

333 
__THROW
 
	`__asm
 ("°r°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

335 #ifde‡
__OPTIMIZE__


336 
__exã∫_Æways_ölöe
 *

337 
	`°r°r
 (*
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


339  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

342 
__exã∫_Æways_ölöe
 const *

343 
	`°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
Ë
__THROW


345  
	`__buûtö_°r°r
 (
__hay°ack
, 
__√edÀ
);

348 
	}
}

350 *
	$°r°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

351 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

356 *
	$°πok
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
)

357 
__THROW
 
	`__n⁄nuŒ
 ((2));

361 *
	$__°πok_r
 (*
__ª°ri˘
 
__s
,

362 c⁄° *
__ª°ri˘
 
__dñim
,

363 **
__ª°ri˘
 
__ßve_±r
)

364 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

365 #ifde‡
__USE_POSIX


366 *
	$°πok_r
 (*
__ª°ri˘
 
__s
, c⁄° *__ª°ri˘ 
__dñim
,

367 **
__ª°ri˘
 
__ßve_±r
)

368 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

371 #ifde‡
__USE_GNU


373 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


374 "C++" *
	$°rˇ£°r
 (*
__hay°ack
, c⁄° *
__√edÀ
)

375 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

376 "C++" c⁄° *
	$°rˇ£°r
 (c⁄° *
__hay°ack
,

377 c⁄° *
__√edÀ
)

378 
__THROW
 
	`__asm
 ("°rˇ£°r"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

380 *
	$°rˇ£°r
 (c⁄° *
__hay°ack
, c⁄° *
__√edÀ
)

381 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

385 #ifde‡
__USE_GNU


389 *
	$memmem
 (c⁄° *
__hay°ack
, 
size_t
 
__hay°ackÀn
,

390 c⁄° *
__√edÀ
, 
size_t
 
__√edÀÀn
)

391 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 3))

392 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2))

393 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 3, 4));

397 *
	$__memp˝y
 (*
__ª°ri˘
 
__de°
,

398 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

399 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

400 *
	$memp˝y
 (*
__ª°ri˘
 
__de°
,

401 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

402 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

407 
size_t
 
	$°æí
 (c⁄° *
__s
)

408 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

410 #ifdef 
__USE_XOPEN2K8


413 
size_t
 
	$°∫Àn
 (c⁄° *
__°rög
, 
size_t
 
__maxÀn
)

414 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

419 *
	$°ªº‹
 (
__î∫um
Ë
__THROW
;

420 #ifde‡
__USE_XOPEN2K


428 #i‡
deföed
 
__USE_XOPEN2K
 && !deföed 
__USE_GNU


431 #ifde‡
__REDIRECT_NTH


432 
	`__REDIRECT_NTH
 (
°ªº‹_r
,

433 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
),

434 
__xpg_°ªº‹_r
Ë
	`__n⁄nuŒ
 ((2))

435 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

437 
	$__xpg_°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

438 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

439 
	#°ªº‹_r
 
__xpg_°ªº‹_r


	)

444 *
	$°ªº‹_r
 (
__î∫um
, *
__buf
, 
size_t
 
__buÊí
)

445 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

448 #ifde‡
__USE_GNU


450 c⁄° *
	$°ªº‹desc_≈
 (
__îr
Ë
__THROW
;

452 c⁄° *
	$°ªº‹«me_≈
 (
__îr
Ë
__THROW
;

456 #ifde‡
__USE_XOPEN2K8


458 *
	$°ªº‹_l
 (
__î∫um
, 
loˇÀ_t
 
__l
Ë
__THROW
;

461 #ifde‡
__USE_MISC


462 
	~<°rögs.h
>

466 
	$ex∂icô_bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

467 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

471 *
	$°r£p
 (**
__ª°ri˘
 
__°rögp
,

472 c⁄° *
__ª°ri˘
 
__dñim
)

473 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

476 #ifdef 
__USE_XOPEN2K8


478 *
	$°rsig«l
 (
__sig
Ë
__THROW
;

480 #ifde‡
__USE_GNU


482 c⁄° *
	$sigabbªv_≈
 (
__sig
Ë
__THROW
;

485 c⁄° *
	$sigdes¸_≈
 (
__sig
Ë
__THROW
;

489 *
	$__°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

490 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

491 *
	$°p˝y
 (*
__ª°ri˘
 
__de°
, c⁄° *__ª°ri˘ 
__§c
)

492 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

496 *
	$__°≤˝y
 (*
__ª°ri˘
 
__de°
,

497 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

498 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

499 *
	$°≤˝y
 (*
__ª°ri˘
 
__de°
,

500 c⁄° *
__ª°ri˘
 
__§c
, 
size_t
 
__n
)

501 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

504 #ifdef 
__USE_GNU


506 
	$°rvîscmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

507 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

510 *
	$°r‰y
 (*
__°rög
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

513 *
	$mem‰ob
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

514 
	`__©å_ac˚ss
 ((
__ªad_wrôe__
, 1, 2));

516 #i‚de‡
ba£«me


521 #ifde‡
__CORRECT_ISO_CPP_STRING_H_PROTO


522 "C++" *
	$ba£«me
 (*
__fûíame
)

523 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

524 "C++" c⁄° *
	$ba£«me
 (c⁄° *
__fûíame
)

525 
__THROW
 
	`__asm
 ("ba£«me"Ë
	`__n⁄nuŒ
 ((1));

527 *
	$ba£«me
 (c⁄° *
__fûíame
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

532 #i‡
	`__GNUC_PREREQ
 (3,4)

533 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


535 
	~<bôs/°rög_f‹tifõd.h
>

539 
__END_DECLS


	@/usr/include/unistd.h

22 #i‚def 
_UNISTD_H


23 
	#_UNISTD_H
 1

	)

25 
	~<„©uªs.h
>

27 
	g__BEGIN_DECLS


32 #ifde‡
__USE_XOPEN2K8


34 
	#_POSIX_VERSION
 200809L

	)

35 #ñi‡
deföed
 
__USE_XOPEN2K


37 
	#_POSIX_VERSION
 200112L

	)

38 #ñi‡
deföed
 
__USE_POSIX199506


40 
	#_POSIX_VERSION
 199506L

	)

41 #ñi‡
deföed
 
__USE_POSIX199309


43 
	#_POSIX_VERSION
 199309L

	)

46 
	#_POSIX_VERSION
 199009L

	)

52 #ifde‡
__USE_XOPEN2K8


53 
	#__POSIX2_THIS_VERSION
 200809L

	)

55 #ñi‡
deföed
 
__USE_XOPEN2K


57 
	#__POSIX2_THIS_VERSION
 200112L

	)

58 #ñi‡
deföed
 
__USE_POSIX199506


60 
	#__POSIX2_THIS_VERSION
 199506L

	)

63 
	#__POSIX2_THIS_VERSION
 199209L

	)

67 
	#_POSIX2_VERSION
 
__POSIX2_THIS_VERSION


	)

70 
	#_POSIX2_C_VERSION
 
__POSIX2_THIS_VERSION


	)

74 
	#_POSIX2_C_BIND
 
__POSIX2_THIS_VERSION


	)

78 
	#_POSIX2_C_DEV
 
__POSIX2_THIS_VERSION


	)

82 
	#_POSIX2_SW_DEV
 
__POSIX2_THIS_VERSION


	)

86 
	#_POSIX2_LOCALEDEF
 
__POSIX2_THIS_VERSION


	)

89 #ifde‡
__USE_XOPEN2K8


90 
	#_XOPEN_VERSION
 700

	)

91 #ñi‡
deföed
 
__USE_XOPEN2K


92 
	#_XOPEN_VERSION
 600

	)

93 #ñi‡
deföed
 
__USE_UNIX98


94 
	#_XOPEN_VERSION
 500

	)

96 
	#_XOPEN_VERSION
 4

	)

100 
	#_XOPEN_XCU_VERSION
 4

	)

103 
	#_XOPEN_XPG2
 1

	)

104 
	#_XOPEN_XPG3
 1

	)

105 
	#_XOPEN_XPG4
 1

	)

108 
	#_XOPEN_UNIX
 1

	)

112 
	#_XOPEN_ENH_I18N
 1

	)

115 
	#_XOPEN_LEGACY
 1

	)

202 
	~<bôs/posix_›t.h
>

205 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K


206 
	~<bôs/ívú⁄míts.h
>

210 
	#STDIN_FILENO
 0

	)

211 
	#STDOUT_FILENO
 1

	)

212 
	#STDERR_FILENO
 2

	)

217 
	~<bôs/ty≥s.h
>

219 #i‚def 
__ssize_t_deföed


220 
__ssize_t
 
	tssize_t
;

221 
	#__ssize_t_deföed


	)

224 
	#__√ed_size_t


	)

225 
	#__√ed_NULL


	)

226 
	~<°ddef.h
>

228 #i‡
deföed
 
__USE_XOPEN
 || deföed 
__USE_XOPEN2K


231 #i‚de‡
__gid_t_deföed


232 
__gid_t
 
	tgid_t
;

233 
	#__gid_t_deföed


	)

236 #i‚de‡
__uid_t_deföed


237 
__uid_t
 
	tuid_t
;

238 
	#__uid_t_deföed


	)

241 #i‚de‡
__off_t_deföed


242 #i‚de‡
__USE_FILE_OFFSET64


243 
__off_t
 
	toff_t
;

245 
__off64_t
 
	toff_t
;

247 
	#__off_t_deföed


	)

249 #i‡
deföed
 
__USE_LARGEFILE64
 && !deföed 
__off64_t_deföed


250 
__off64_t
 
	toff64_t
;

251 
	#__off64_t_deföed


	)

254 #i‚de‡
__u£c⁄ds_t_deföed


255 
__u£c⁄ds_t
 
	tu£c⁄ds_t
;

256 
	#__u£c⁄ds_t_deföed


	)

259 #i‚de‡
__pid_t_deföed


260 
__pid_t
 
	tpid_t
;

261 
	#__pid_t_deföed


	)

265 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


266 #i‚de‡
__öçå_t_deföed


267 
__öçå_t
 
	töçå_t
;

268 
	#__öçå_t_deföed


	)

272 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


273 #i‚de‡
__sockÀn_t_deföed


274 
__sockÀn_t
 
	tsockÀn_t
;

275 
	#__sockÀn_t_deföed


	)

281 
	#R_OK
 4

	)

282 
	#W_OK
 2

	)

283 
	#X_OK
 1

	)

284 
	#F_OK
 0

	)

287 
	$ac˚ss
 (c⁄° *
__«me
, 
__ty≥
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

289 #ifde‡
__USE_GNU


292 
	$euidac˚ss
 (c⁄° *
__«me
, 
__ty≥
)

293 
__THROW
 
	`__n⁄nuŒ
 ((1));

296 
	$óc˚ss
 (c⁄° *
__«me
, 
__ty≥
)

297 
__THROW
 
	`__n⁄nuŒ
 ((1));

300 
	$execvót
 (
__fd
, c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

301 *c⁄° 
__ívp
[], 
__Êags
)

302 
__THROW
 
	`__n⁄nuŒ
 ((2, 3));

305 #ifde‡
__USE_ATFILE


309 
	$Ác˚sßt
 (
__fd
, c⁄° *
__fûe
, 
__ty≥
, 
__Êag
)

310 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

315 #i‚def 
_STDIO_H


316 
	#SEEK_SET
 0

	)

317 
	#SEEK_CUR
 1

	)

318 
	#SEEK_END
 2

	)

319 #ifde‡
__USE_GNU


320 
	#SEEK_DATA
 3

	)

321 
	#SEEK_HOLE
 4

	)

325 #i‡
deföed
 
__USE_MISC
 && !deföed 
L_SET


327 
	#L_SET
 
SEEK_SET


	)

328 
	#L_INCR
 
SEEK_CUR


	)

329 
	#L_XTND
 
SEEK_END


	)

338 #i‚de‡
__USE_FILE_OFFSET64


339 
__off_t
 
	$l£ek
 (
__fd
, 
__off_t
 
__off£t
, 
__whí˚
Ë
__THROW
;

341 #ifde‡
__REDIRECT_NTH


342 
__off64_t
 
	`__REDIRECT_NTH
 (
l£ek
,

343 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
),

344 
l£ek64
);

346 
	#l£ek
 
l£ek64


	)

349 #ifde‡
__USE_LARGEFILE64


350 
__off64_t
 
	$l£ek64
 (
__fd
, 
__off64_t
 
__off£t
, 
__whí˚
)

351 
__THROW
;

358 
	`˛o£
 (
__fd
);

360 #ifde‡
__USE_MISC


363 
	$˛o£‰om
 (
__lowfd
Ë
__THROW
;

371 
ssize_t
 
	$ªad
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
Ë
__wur


372 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

378 
ssize_t
 
	$wrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
Ë
__wur


379 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

381 #i‡
deföed
 
__USE_UNIX98
 || deföed 
__USE_XOPEN2K8


382 #i‚de‡
__USE_FILE_OFFSET64


389 
ssize_t
 
	$¥ód
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

390 
__off_t
 
__off£t
Ë
__wur


391 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

398 
ssize_t
 
	$pwrôe
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

399 
__off_t
 
__off£t
Ë
__wur


400 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

403 #ifde‡
__REDIRECT


404 
ssize_t
 
	`__REDIRECT
 (
¥ód
, (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

405 
__off64_t
 
__off£t
),

406 
¥ód64
Ë
__wur


407 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

408 
ssize_t
 
	`__REDIRECT
 (
pwrôe
, (
__fd
, c⁄° *
__buf
,

409 
size_t
 
__nbyãs
, 
__off64_t
 
__off£t
),

410 
pwrôe64
Ë
__wur


411 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

413 
	#¥ód
 
¥ód64


	)

414 
	#pwrôe
 
pwrôe64


	)

418 #ifde‡
__USE_LARGEFILE64


422 
ssize_t
 
	$¥ód64
 (
__fd
, *
__buf
, 
size_t
 
__nbyãs
,

423 
__off64_t
 
__off£t
Ë
__wur


424 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

427 
ssize_t
 
	$pwrôe64
 (
__fd
, c⁄° *
__buf
, 
size_t
 
__n
,

428 
__off64_t
 
__off£t
Ë
__wur


429 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 2, 3));

437 
	$pùe
 (
__pùedes
[2]Ë
__THROW
 
__wur
;

439 #ifde‡
__USE_GNU


442 
	$pùe2
 (
__pùedes
[2], 
__Êags
Ë
__THROW
 
__wur
;

452 
	$Æ¨m
 (
__£c⁄ds
Ë
__THROW
;

464 
	`¶ìp
 (
__£c⁄ds
);

466 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

467 || 
deföed
 
__USE_MISC


472 
__u£c⁄ds_t
 
	$uÆ¨m
 (
__u£c⁄ds_t
 
__vÆue
, __u£c⁄ds_à
__öãrvÆ
)

473 
__THROW
;

480 
	`u¶ìp
 (
__u£c⁄ds_t
 
__u£c⁄ds
);

489 
	`∑u£
 ();

493 
	$chown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

494 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

496 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


498 
	$fchown
 (
__fd
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
Ë
__THROW
 
__wur
;

503 
	$lchown
 (c⁄° *
__fûe
, 
__uid_t
 
__ow√r
, 
__gid_t
 
__group
)

504 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

508 #ifde‡
__USE_ATFILE


511 
	$fchow«t
 (
__fd
, c⁄° *
__fûe
, 
__uid_t
 
__ow√r
,

512 
__gid_t
 
__group
, 
__Êag
)

513 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur
;

517 
	$chdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

519 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


521 
	$fchdú
 (
__fd
Ë
__THROW
 
__wur
;

531 *
	$gëcwd
 (*
__buf
, 
size_t
 
__size
Ë
__THROW
 
__wur
;

533 #ifdef 
__USE_GNU


537 *
	$gë_cuºít_dú_«me
 (Ë
__THROW
;

540 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

541 || 
deföed
 
__USE_MISC


545 *
	$gëwd
 (*
__buf
)

546 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__©åibuã_dïªˇãd__
 
__wur


547 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1));

552 
	$dup
 (
__fd
Ë
__THROW
 
__wur
;

555 
	$dup2
 (
__fd
, 
__fd2
Ë
__THROW
;

557 #ifde‡
__USE_GNU


560 
	$dup3
 (
__fd
, 
__fd2
, 
__Êags
Ë
__THROW
;

564 **
__ívú⁄
;

565 #ifde‡
__USE_GNU


566 **
ívú⁄
;

572 
	$execve
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[],

573 *c⁄° 
__ívp
[]Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

575 #ifde‡
__USE_XOPEN2K8


578 
	$„xecve
 (
__fd
, *c⁄° 
__¨gv
[], *c⁄° 
__ívp
[])

579 
__THROW
 
	`__n⁄nuŒ
 ((2));

584 
	$execv
 (c⁄° *
__∑th
, *c⁄° 
__¨gv
[])

585 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

589 
	$exe˛e
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

590 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

594 
	$exe˛
 (c⁄° *
__∑th
, c⁄° *
__¨g
, ...)

595 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

599 
	$execvp
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[])

600 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

605 
	$exe˛p
 (c⁄° *
__fûe
, c⁄° *
__¨g
, ...)

606 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

608 #ifde‡
__USE_GNU


611 
	$execv≥
 (c⁄° *
__fûe
, *c⁄° 
__¨gv
[],

612 *c⁄° 
__ívp
[])

613 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

617 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN


619 
	$ni˚
 (
__öc
Ë
__THROW
 
__wur
;

624 
	$_exô
 (
__°©us
Ë
	`__©åibuã__
 ((
__n‹ëu∫__
));

630 
	~<bôs/c⁄‚ame.h
>

633 
	$∑thc⁄f
 (c⁄° *
__∑th
, 
__«me
)

634 
__THROW
 
	`__n⁄nuŒ
 ((1));

637 
	$Â©hc⁄f
 (
__fd
, 
__«me
Ë
__THROW
;

640 
	$sysc⁄f
 (
__«me
Ë
__THROW
;

642 #ifdef 
__USE_POSIX2


644 
size_t
 
	$c⁄f°r
 (
__«me
, *
__buf
, 
size_t
 
__Àn
Ë
__THROW


645 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

650 
__pid_t
 
	$gëpid
 (Ë
__THROW
;

653 
__pid_t
 
	$gëµid
 (Ë
__THROW
;

656 
__pid_t
 
	$gëpgΩ
 (Ë
__THROW
;

659 
__pid_t
 
	$__gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

660 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


661 
__pid_t
 
	$gëpgid
 (
__pid_t
 
__pid
Ë
__THROW
;

668 
	$£çgid
 (
__pid_t
 
__pid
, __pid_à
__pgid
Ë
__THROW
;

670 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


682 
	$£çgΩ
 (Ë
__THROW
;

689 
__pid_t
 
	$£tsid
 (Ë
__THROW
;

691 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


693 
__pid_t
 
	$gësid
 (
__pid_t
 
__pid
Ë
__THROW
;

697 
__uid_t
 
	$gëuid
 (Ë
__THROW
;

700 
__uid_t
 
	$gëeuid
 (Ë
__THROW
;

703 
__gid_t
 
	$gëgid
 (Ë
__THROW
;

706 
__gid_t
 
	$gëegid
 (Ë
__THROW
;

711 
	$gëgroups
 (
__size
, 
__gid_t
 
__li°
[]Ë
__THROW
 
__wur


712 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 1);

713 #ifdef 
__USE_GNU


715 
	$group_membî
 (
__gid_t
 
__gid
Ë
__THROW
;

722 
	$£tuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

724 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


727 
	$£åeuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
Ë
__THROW
 
__wur
;

730 #ifde‡
__USE_XOPEN2K


732 
	$£ãuid
 (
__uid_t
 
__uid
Ë
__THROW
 
__wur
;

739 
	$£tgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

741 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


744 
	$£åegid
 (
__gid_t
 
__rgid
, __gid_à
__egid
Ë
__THROW
 
__wur
;

747 #ifde‡
__USE_XOPEN2K


749 
	$£ãgid
 (
__gid_t
 
__gid
Ë
__THROW
 
__wur
;

752 #ifde‡
__USE_GNU


755 
	$gëªsuid
 (
__uid_t
 *
__ruid
, __uid_à*
__euid
, __uid_à*
__suid
)

756 
__THROW
;

760 
	$gëªsgid
 (
__gid_t
 *
__rgid
, __gid_à*
__egid
, __gid_à*
__sgid
)

761 
__THROW
;

765 
	$£åesuid
 (
__uid_t
 
__ruid
, __uid_à
__euid
, __uid_à
__suid
)

766 
__THROW
 
__wur
;

770 
	$£åesgid
 (
__gid_t
 
__rgid
, __gid_à
__egid
, __gid_à
__sgid
)

771 
__THROW
 
__wur
;

778 
__pid_t
 
	$f‹k
 (Ë
__THROWNL
;

780 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K8
) \

781 || 
deföed
 
__USE_MISC


786 
__pid_t
 
	$vf‹k
 (Ë
__THROW
;

789 #ifde‡
__USE_GNU


793 
__pid_t
 
	$_F‹k
 (Ë
__THROW
;

799 *
	$ây«me
 (
__fd
Ë
__THROW
;

803 
	$ây«me_r
 (
__fd
, *
__buf
, 
size_t
 
__buÊí
)

804 
__THROW
 
	`__n⁄nuŒ
 ((2)Ë
__wur


805 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

809 
	$ißây
 (
__fd
Ë
__THROW
;

811 #ifde‡
__USE_MISC


814 
	$ây¶Ÿ
 (Ë
__THROW
;

819 
	$lök
 (c⁄° *
__‰om
, c⁄° *
__to
)

820 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

822 #ifde‡
__USE_ATFILE


825 
	$lök©
 (
__‰omfd
, c⁄° *
__‰om
, 
__tofd
,

826 c⁄° *
__to
, 
__Êags
)

827 
__THROW
 
	`__n⁄nuŒ
 ((2, 4)Ë
__wur
;

830 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


832 
	$symlök
 (c⁄° *
__‰om
, c⁄° *
__to
)

833 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur
;

838 
ssize_t
 
	$ªadlök
 (c⁄° *
__ª°ri˘
 
__∑th
,

839 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

840 
__THROW
 
	`__n⁄nuŒ
 ((1, 2)Ë
__wur


841 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 2, 3);

845 #ifde‡
__USE_ATFILE


847 
	$symlök©
 (c⁄° *
__‰om
, 
__tofd
,

848 c⁄° *
__to
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 3)Ë
__wur
;

851 
ssize_t
 
	$ªadlök©
 (
__fd
, c⁄° *
__ª°ri˘
 
__∑th
,

852 *
__ª°ri˘
 
__buf
, 
size_t
 
__Àn
)

853 
__THROW
 
	`__n⁄nuŒ
 ((2, 3)Ë
__wur


854 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 3, 4);

858 
	$u∆ök
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

860 #ifde‡
__USE_ATFILE


862 
	$u∆ök©
 (
__fd
, c⁄° *
__«me
, 
__Êag
)

863 
__THROW
 
	`__n⁄nuŒ
 ((2));

867 
	$rmdú
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

871 
__pid_t
 
	$tcgëpgΩ
 (
__fd
Ë
__THROW
;

874 
	$tc£çgΩ
 (
__fd
, 
__pid_t
 
__pgΩ_id
Ë
__THROW
;

881 *
	`gëlogö
 ();

882 #ifde‡
__USE_POSIX199506


889 
	$gëlogö_r
 (*
__«me
, 
size_t
 
__«me_Àn
Ë
	`__n⁄nuŒ
 ((1))

890 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

893 #ifdef 
__USE_MISC


895 
	$£éogö
 (c⁄° *
__«me
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

899 #ifdef 
__USE_POSIX2


903 
	~<bôs/gë›t_posix.h
>

907 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


911 
	$gëho°«me
 (*
__«me
, 
size_t
 
__Àn
Ë
__THROW
 
	`__n⁄nuŒ
 ((1))

912 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

916 #i‡
deföed
 
__USE_MISC


919 
	$£tho°«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

920 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

924 
	$£tho°id
 (
__id
Ë
__THROW
 
__wur
;

930 
	$gëdomaö«me
 (*
__«me
, 
size_t
 
__Àn
)

931 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur


932 
	`__f‹tifõd_©å_ac˚ss
 (
__wrôe_⁄ly__
, 1, 2);

933 
	$£tdomaö«me
 (c⁄° *
__«me
, 
size_t
 
__Àn
)

934 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 2));

939 
	$vh™gup
 (Ë
__THROW
;

942 
	$ªvoke
 (c⁄° *
__fûe
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

950 
	$¥ofû
 (*
__ßm∂e_buf„r
, 
size_t
 
__size
,

951 
size_t
 
__off£t
, 
__sˇÀ
)

952 
__THROW
 
	`__n⁄nuŒ
 ((1));

958 
	$ac˘
 (c⁄° *
__«me
Ë
__THROW
;

962 *
	$gëu£rshñl
 (Ë
__THROW
;

963 
	$ídu£rshñl
 (Ë
__THROW
;

964 
	$£tu£rshñl
 (Ë
__THROW
;

970 
	$d´m⁄
 (
__nochdú
, 
__no˛o£
Ë
__THROW
 
__wur
;

974 #i‡
deföed
 
__USE_MISC
 || (deföed 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K
)

977 
	$chroŸ
 (c⁄° *
__∑th
Ë
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

981 *
	$gë∑ss
 (c⁄° *
__¥om±
Ë
	`__n⁄nuŒ
 ((1));

989 
	`fsync
 (
__fd
);

992 #ifde‡
__USE_GNU


995 
	$syncfs
 (
__fd
Ë
__THROW
;

999 #i‡
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED


1002 
	`gëho°id
 ();

1005 
	$sync
 (Ë
__THROW
;

1008 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K


1011 
	$gë∑gesize
 (Ë
__THROW
 
	`__©åibuã__
 ((
__c⁄°__
));

1016 
	$gëdèbÀsize
 (Ë
__THROW
;

1022 #i‡
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K8


1025 #i‚de‡
__USE_FILE_OFFSET64


1026 
	$åunˇã
 (c⁄° *
__fûe
, 
__off_t
 
__Àngth
)

1027 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1029 #ifde‡
__REDIRECT_NTH


1030 
	`__REDIRECT_NTH
 (
åunˇã
,

1031 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
),

1032 
åunˇã64
Ë
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1034 
	#åunˇã
 
åunˇã64


	)

1037 #ifde‡
__USE_LARGEFILE64


1038 
	$åunˇã64
 (c⁄° *
__fûe
, 
__off64_t
 
__Àngth
)

1039 
__THROW
 
	`__n⁄nuŒ
 ((1)Ë
__wur
;

1044 #i‡
deföed
 
__USE_POSIX199309
 \

1045 || 
deföed
 
__USE_XOPEN_EXTENDED
 || deföed 
__USE_XOPEN2K


1048 #i‚de‡
__USE_FILE_OFFSET64


1049 
	$·runˇã
 (
__fd
, 
__off_t
 
__Àngth
Ë
__THROW
 
__wur
;

1051 #ifde‡
__REDIRECT_NTH


1052 
	`__REDIRECT_NTH
 (
·runˇã
, (
__fd
, 
__off64_t
 
__Àngth
),

1053 
·runˇã64
Ë
__wur
;

1055 
	#·runˇã
 
·runˇã64


	)

1058 #ifde‡
__USE_LARGEFILE64


1059 
	$·runˇã64
 (
__fd
, 
__off64_t
 
__Àngth
Ë
__THROW
 
__wur
;

1065 #i‡(
deföed
 
__USE_XOPEN_EXTENDED
 && !deföed 
__USE_XOPEN2K
) \

1066 || 
deföed
 
__USE_MISC


1070 
	$brk
 (*
__addr
Ë
__THROW
 
__wur
;

1076 *
	$sbrk
 (
öçå_t
 
__dñè
Ë
__THROW
;

1080 #ifde‡
__USE_MISC


1091 
	$sysˇŒ
 (
__sy¢o
, ...Ë
__THROW
;

1096 #i‡(
deföed
 
__USE_MISC
 || deföed 
__USE_XOPEN_EXTENDED
Ë&& !deföed 
F_LOCK


1108 
	#F_ULOCK
 0

	)

1109 
	#F_LOCK
 1

	)

1110 
	#F_TLOCK
 2

	)

1111 
	#F_TEST
 3

	)

1113 #i‚de‡
__USE_FILE_OFFSET64


1114 
	$lockf
 (
__fd
, 
__cmd
, 
__off_t
 
__Àn
Ë
__wur
;

1116 #ifde‡
__REDIRECT


1117 
	`__REDIRECT
 (
lockf
, (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
),

1118 
lockf64
Ë
__wur
;

1120 
	#lockf
 
lockf64


	)

1123 #ifde‡
__USE_LARGEFILE64


1124 
	$lockf64
 (
__fd
, 
__cmd
, 
__off64_t
 
__Àn
Ë
__wur
;

1129 #ifde‡
__USE_GNU


1134 
	#TEMP_FAILURE_RETRY
(
ex¥essi⁄
) \

1135 (
__exãnsi⁄__
 \

1136 ({ 
__ªsu…
; \

1137 dÿ
__ªsu…
 = (Ë(
ex¥essi⁄
); \

1138 
__ªsu…
 =-1L && 
î∫o
 =
EINTR
); \

1139 
__ªsu…
; 
	}
}))

	)

1142 
ssize_t
 
c›y_fûe_ønge
 (
__öfd
, 
__off64_t
 *
__pöoff
,

1143 
__outfd
, 
__off64_t
 *
__poutoff
,

1144 
size_t
 
__Àngth
, 
__Êags
);

1147 #i‡
deföed
 
__USE_POSIX199309
 || deföed 
__USE_UNIX98


1150 
fd©async
 (
__fûdes
);

1153 #ifde‡
__USE_MISC


1159 *
	$¸y±
 (c⁄° *
__key
, c⁄° *
__ß…
)

1160 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

1163 #ifdef 
__USE_XOPEN


1168 
	$swab
 (c⁄° *
__ª°ri˘
 
__‰om
, *__ª°ri˘ 
__to
,

1169 
ssize_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1, 2))

1170 
	`__©å_ac˚ss
 ((
__ªad_⁄ly__
, 1, 3))

1171 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 2, 3));

1178 #i‡
deföed
 
__USE_XOPEN
 && !deföed 
__USE_XOPEN2K


1180 *
	$˘îmid
 (*
__s
Ë
__THROW
;

1183 *
	`cu£rid
 (*
__s
);

1189 #i‡
deföed
 
__USE_UNIX98
 && !deföed 
__USE_XOPEN2K


1190 
	$±hªad_©f‹k
 ((*
__¥ï¨e
) (),

1191 (*
__∑ª¡
) (),

1192 (*
__chûd
Ë()Ë
__THROW
;

1195 #ifde‡
__USE_MISC


1198 
	$gëíå›y
 (*
__buf„r
, 
size_t
 
__Àngth
Ë
__wur


1199 
	`__©å_ac˚ss
 ((
__wrôe_⁄ly__
, 1, 2));

1202 #ifde‡
__USE_GNU


1208 
	$˛o£_ønge
 (
__fd
, 
__max_fd
,

1209 
__Êags
Ë
__THROW
;

1213 #i‡
__USE_FORTIFY_LEVEL
 > 0 && 
deföed
 
__f‹tify_fun˘i⁄


1214 
	~<bôs/uni°d.h
>

1218 
	~<bôs/uni°d_ext.h
>

1220 
__END_DECLS


	@/usr/include/alloca.h

18 #i‚def 
_ALLOCA_H


19 
	#_ALLOCA_H
 1

	)

21 
	~<„©uªs.h
>

23 
	#__√ed_size_t


	)

24 
	~<°ddef.h
>

26 
	g__BEGIN_DECLS


29 #unde‡
Æloˇ


32 *
	$Æloˇ
 (
size_t
 
__size
Ë
__THROW
;

34 #ifdef 
__GNUC__


35 
	#Æloˇ
(
size
Ë
	`__buûtö_Æloˇ
 (size)

	)

38 
__END_DECLS


	@/usr/include/features.h

18 #i‚def 
_FEATURES_H


19 
	#_FEATURES_H
 1

	)

126 #unde‡
__USE_ISOC11


127 #unde‡
__USE_ISOC99


128 #unde‡
__USE_ISOC95


129 #unde‡
__USE_ISOCXX11


130 #unde‡
__USE_POSIX


131 #unde‡
__USE_POSIX2


132 #unde‡
__USE_POSIX199309


133 #unde‡
__USE_POSIX199506


134 #unde‡
__USE_XOPEN


135 #unde‡
__USE_XOPEN_EXTENDED


136 #unde‡
__USE_UNIX98


137 #unde‡
__USE_XOPEN2K


138 #unde‡
__USE_XOPEN2KXSI


139 #unde‡
__USE_XOPEN2K8


140 #unde‡
__USE_XOPEN2K8XSI


141 #unde‡
__USE_LARGEFILE


142 #unde‡
__USE_LARGEFILE64


143 #unde‡
__USE_FILE_OFFSET64


144 #unde‡
__USE_MISC


145 #unde‡
__USE_ATFILE


146 #unde‡
__USE_DYNAMIC_STACK_SIZE


147 #unde‡
__USE_GNU


148 #unde‡
__USE_FORTIFY_LEVEL


149 #unde‡
__KERNEL_STRICT_NAMES


150 #unde‡
__GLIBC_USE_ISOC2X


151 #unde‡
__GLIBC_USE_DEPRECATED_GETS


152 #unde‡
__GLIBC_USE_DEPRECATED_SCANF


156 #i‚de‡
_LOOSE_KERNEL_NAMES


157 
	#__KERNEL_STRICT_NAMES


	)

167 #i‡
deföed
 
__GNUC__
 && deföed 
__GNUC_MINOR__


168 
	#__GNUC_PREREQ
(
maj
, 
mö
) \

169 ((
__GNUC__
 << 16Ë+ 
__GNUC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

171 
	#__GNUC_PREREQ
(
maj
, 
mö
Ë0

	)

178 #i‡
deföed
 
__˛™g_maj‹__
 && deföed 
__˛™g_mö‹__


179 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
) \

180 ((
__˛™g_maj‹__
 << 16Ë+ 
__˛™g_mö‹__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

182 
	#__glibc_˛™g_¥îeq
(
maj
, 
mö
Ë0

	)

186 
	#__GLIBC_USE
(
F
Ë
__GLIBC_USE_
 ## 
	)
F

192 #i‡(
deföed
 
_BSD_SOURCE
 || deföed 
_SVID_SOURCE
) \

193 && !
deföed
 
	g_DEFAULT_SOURCE


195 #unde‡
_DEFAULT_SOURCE


196 
	#_DEFAULT_SOURCE
 1

	)

200 #ifde‡
_GNU_SOURCE


201 #unde‡
_ISOC95_SOURCE


202 
	#_ISOC95_SOURCE
 1

	)

203 #unde‡
_ISOC99_SOURCE


204 
	#_ISOC99_SOURCE
 1

	)

205 #unde‡
_ISOC11_SOURCE


206 
	#_ISOC11_SOURCE
 1

	)

207 #unde‡
_ISOC2X_SOURCE


208 
	#_ISOC2X_SOURCE
 1

	)

209 #unde‡
_POSIX_SOURCE


210 
	#_POSIX_SOURCE
 1

	)

211 #unde‡
_POSIX_C_SOURCE


212 
	#_POSIX_C_SOURCE
 200809L

	)

213 #unde‡
_XOPEN_SOURCE


214 
	#_XOPEN_SOURCE
 700

	)

215 #unde‡
_XOPEN_SOURCE_EXTENDED


216 
	#_XOPEN_SOURCE_EXTENDED
 1

	)

217 #unde‡
_LARGEFILE64_SOURCE


218 
	#_LARGEFILE64_SOURCE
 1

	)

219 #unde‡
_DEFAULT_SOURCE


220 
	#_DEFAULT_SOURCE
 1

	)

221 #unde‡
_ATFILE_SOURCE


222 
	#_ATFILE_SOURCE
 1

	)

223 #unde‡
_DYNAMIC_STACK_SIZE_SOURCE


224 
	#_DYNAMIC_STACK_SIZE_SOURCE
 1

	)

229 #i‡(
deföed
 
_DEFAULT_SOURCE
 \

230 || (!
deföed
 
	g__STRICT_ANSI__
 \

231 && !
deföed
 
	g_ISOC99_SOURCE
 && !deföed 
	g_ISOC11_SOURCE
 \

232 && !
deföed
 
	g_ISOC2X_SOURCE
 \

233 && !
deföed
 
	g_POSIX_SOURCE
 && !deföed 
	g_POSIX_C_SOURCE
 \

234 && !
deföed
 
	g_XOPEN_SOURCE
))

235 #unde‡
_DEFAULT_SOURCE


236 
	#_DEFAULT_SOURCE
 1

	)

240 #i‡(
deföed
 
_ISOC2X_SOURCE
 \

241 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ > 201710L))

242 
	#__GLIBC_USE_ISOC2X
 1

	)

244 
	#__GLIBC_USE_ISOC2X
 0

	)

248 #i‡(
deföed
 
_ISOC11_SOURCE
 || deföed 
_ISOC2X_SOURCE
 \

249 || (
deföed
 
	g__STDC_VERSION__
 && __STDC_VERSION__ >= 201112L))

250 
	#__USE_ISOC11
 1

	)

254 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

255 || 
deföed
 
_ISOC2X_SOURCE
 \

256 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199901L))

257 
	#__USE_ISOC99
 1

	)

261 #i‡(
deföed
 
_ISOC99_SOURCE
 || deföed 
_ISOC11_SOURCE
 \

262 || 
deföed
 
_ISOC2X_SOURCE
 \

263 || (
deföed
 
__STDC_VERSION__
 && __STDC_VERSION__ >= 199409L))

264 
	#__USE_ISOC95
 1

	)

267 #ifde‡
__˝lu•lus


269 #i‡
__˝lu•lus
 >= 201703L

270 
	#__USE_ISOC11
 1

	)

274 #i‡
__˝lu•lus
 >201103L || 
deföed
 
__GXX_EXPERIMENTAL_CXX0X__


275 
	#__USE_ISOCXX11
 1

	)

276 
	#__USE_ISOC99
 1

	)

283 #ifde‡
_DEFAULT_SOURCE


284 #i‡!
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE


285 
	#__USE_POSIX_IMPLICITLY
 1

	)

287 #unde‡
_POSIX_SOURCE


288 
	#_POSIX_SOURCE
 1

	)

289 #unde‡
_POSIX_C_SOURCE


290 
	#_POSIX_C_SOURCE
 200809L

	)

293 #i‡((!
deföed
 
__STRICT_ANSI__
 \

294 || (
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) >= 500)) \

295 && !
deföed
 
_POSIX_SOURCE
 && !deföed 
_POSIX_C_SOURCE
)

296 
	#_POSIX_SOURCE
 1

	)

297 #i‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 500

298 
	#_POSIX_C_SOURCE
 2

	)

299 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 600

300 
	#_POSIX_C_SOURCE
 199506L

	)

301 #ñi‡
deföed
 
_XOPEN_SOURCE
 && (_XOPEN_SOURCE - 0) < 700

302 
	#_POSIX_C_SOURCE
 200112L

	)

304 
	#_POSIX_C_SOURCE
 200809L

	)

306 
	#__USE_POSIX_IMPLICITLY
 1

	)

315 #i‡((!
deföed
 
_POSIX_C_SOURCE
 || (_POSIX_C_SOURCE - 0) < 199506L) \

316 && (
deföed
 
_REENTRANT
 || deföed 
_THREAD_SAFE
))

317 
	#_POSIX_SOURCE
 1

	)

318 #unde‡
_POSIX_C_SOURCE


319 
	#_POSIX_C_SOURCE
 199506L

	)

322 #i‡(
deföed
 
_POSIX_SOURCE
 \

323 || (
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >= 1) \

324 || 
deföed
 
_XOPEN_SOURCE
)

325 
	#__USE_POSIX
 1

	)

328 #i‡
deföed
 
_POSIX_C_SOURCE
 && _POSIX_C_SOURCE >2 || deföed 
_XOPEN_SOURCE


329 
	#__USE_POSIX2
 1

	)

332 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199309L

333 
	#__USE_POSIX199309
 1

	)

336 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 199506L

337 
	#__USE_POSIX199506
 1

	)

340 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200112L

341 
	#__USE_XOPEN2K
 1

	)

342 #unde‡
__USE_ISOC95


343 
	#__USE_ISOC95
 1

	)

344 #unde‡
__USE_ISOC99


345 
	#__USE_ISOC99
 1

	)

348 #i‡
deföed
 
_POSIX_C_SOURCE
 && (_POSIX_C_SOURCE - 0) >= 200809L

349 
	#__USE_XOPEN2K8
 1

	)

350 #unde‡
_ATFILE_SOURCE


351 
	#_ATFILE_SOURCE
 1

	)

354 #ifdef 
_XOPEN_SOURCE


355 
	#__USE_XOPEN
 1

	)

356 #i‡(
_XOPEN_SOURCE
 - 0) >= 500

357 
	#__USE_XOPEN_EXTENDED
 1

	)

358 
	#__USE_UNIX98
 1

	)

359 #unde‡
_LARGEFILE_SOURCE


360 
	#_LARGEFILE_SOURCE
 1

	)

361 #i‡(
_XOPEN_SOURCE
 - 0) >= 600

362 #i‡(
_XOPEN_SOURCE
 - 0) >= 700

363 
	#__USE_XOPEN2K8
 1

	)

364 
	#__USE_XOPEN2K8XSI
 1

	)

366 
	#__USE_XOPEN2K
 1

	)

367 
	#__USE_XOPEN2KXSI
 1

	)

368 #unde‡
__USE_ISOC95


369 
	#__USE_ISOC95
 1

	)

370 #unde‡
__USE_ISOC99


371 
	#__USE_ISOC99
 1

	)

374 #ifde‡
_XOPEN_SOURCE_EXTENDED


375 
	#__USE_XOPEN_EXTENDED
 1

	)

380 #ifde‡
_LARGEFILE_SOURCE


381 
	#__USE_LARGEFILE
 1

	)

384 #ifde‡
_LARGEFILE64_SOURCE


385 
	#__USE_LARGEFILE64
 1

	)

388 #i‡
deföed
 
_FILE_OFFSET_BITS
 && _FILE_OFFSET_BITS == 64

389 
	#__USE_FILE_OFFSET64
 1

	)

392 
	~<„©uªs-time64.h
>

394 #i‡
deföed
 
_DEFAULT_SOURCE


395 
	#__USE_MISC
 1

	)

398 #ifdef 
_ATFILE_SOURCE


399 
	#__USE_ATFILE
 1

	)

402 #ifdef 
_DYNAMIC_STACK_SIZE_SOURCE


403 
	#__USE_DYNAMIC_STACK_SIZE
 1

	)

406 #ifdef 
_GNU_SOURCE


407 
	#__USE_GNU
 1

	)

410 #i‡
deföed
 
_FORTIFY_SOURCE
 && _FORTIFY_SOURCE > 0

411 #i‡!
deföed
 
__OPTIMIZE__
 || __OPTIMIZE__ <= 0

412 #ñi‡!
__GNUC_PREREQ
 (4, 1)

413 #ñi‡
_FORTIFY_SOURCE
 > 2 && (
__glibc_˛™g_¥îeq
 (9, 0) \

414 || 
	$__GNUC_PREREQ
 (12, 0))

416 #i‡
_FORTIFY_SOURCE
 > 3

418 
	#__USE_FORTIFY_LEVEL
 3

	)

419 #ñi‡
_FORTIFY_SOURCE
 > 1

420 #i‡
_FORTIFY_SOURCE
 > 2

422 
	#__USE_FORTIFY_LEVEL
 2

	)

424 
	#__USE_FORTIFY_LEVEL
 1

	)

427 #i‚de‡
__USE_FORTIFY_LEVEL


428 
	#__USE_FORTIFY_LEVEL
 0

	)

435 #i‡
deföed
 
__˝lu•lus
 ? __˝lu•lu†>201402L : deföed 
__USE_ISOC11


436 
	#__GLIBC_USE_DEPRECATED_GETS
 0

	)

438 
	#__GLIBC_USE_DEPRECATED_GETS
 1

	)

453 #i‡(
deföed
 
__USE_GNU
 \

454 && (
deföed
 
__˝lu•lus
 \

455 ? (
__˝lu•lus
 < 201103L && !
deföed
 
__GXX_EXPERIMENTAL_CXX0X__
) \

456 : (!
deföed
 
__STDC_VERSION__
 || __STDC_VERSION__ < 199901L)))

457 
	#__GLIBC_USE_DEPRECATED_SCANF
 1

	)

459 
	#__GLIBC_USE_DEPRECATED_SCANF
 0

	)

464 
	~<°dc-¥edef.h
>

472 #unde‡
__GNU_LIBRARY__


473 
	#__GNU_LIBRARY__
 6

	)

477 
	#__GLIBC__
 2

	)

478 
	#__GLIBC_MINOR__
 35

	)

480 
	#__GLIBC_PREREQ
(
maj
, 
mö
) \

481 ((
__GLIBC__
 << 16Ë+ 
__GLIBC_MINOR__
 >((
maj
Ë<< 16Ë+ (
mö
))

	)

484 #i‚de‡
__ASSEMBLER__


485 #i‚de‡
_SYS_CDEFS_H


486 
	~<sys/cdefs.h
>

491 #i‡
deföed
 
__USE_FILE_OFFSET64
 && !deföed 
__REDIRECT


492 
	#__USE_LARGEFILE
 1

	)

493 
	#__USE_LARGEFILE64
 1

	)

499 #i‡
	`__GNUC_PREREQ
 (2, 7Ë&& 
deföed
 
__OPTIMIZE__
 \

500 && !
deföed
 
__OPTIMIZE_SIZE__
 && !deföed 
__NO_INLINE__
 \

501 && 
deföed
 
__exã∫_ölöe


502 
	#__USE_EXTERN_INLINES
 1

	)

510 
	~<gnu/°ubs.h
>

	@/usr/include/strings.h

18 #i‚def 
_STRINGS_H


19 
	#_STRINGS_H
 1

	)

21 
	~<„©uªs.h
>

22 
	#__√ed_size_t


	)

23 
	~<°ddef.h
>

26 #i‡
deföed
 
__˝lu•lus
 && 
__GNUC_PREREQ
 (4, 4)

27 
	#__CORRECT_ISO_CPP_STRINGS_H_PROTO


	)

30 
	g__BEGIN_DECLS


32 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


34 
	$bcmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

35 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

38 
	$bc›y
 (c⁄° *
__§c
, *
__de°
, 
size_t
 
__n
)

39 
__THROW
 
	`__n⁄nuŒ
 ((1, 2));

42 
	$bzîo
 (*
__s
, 
size_t
 
__n
Ë
__THROW
 
	`__n⁄nuŒ
 ((1));

45 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


48 *
	`ödex
 (*
__s
, 
__c
)

49 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

50 c⁄° *
	`ödex
 (c⁄° *
__s
, 
__c
)

51 
__THROW
 
	`__asm
 ("ödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

53 #i‡
deföed
 
__OPTIMIZE__


54 
__exã∫_Æways_ölöe
 *

55 
	`ödex
 (*
__s
, 
__c
Ë
__THROW


57  
	`__buûtö_ödex
 (
__s
, 
__c
);

60 
__exã∫_Æways_ölöe
 const *

61 
	`ödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


63  
	`__buûtö_ödex
 (
__s
, 
__c
);

66 
	}
}

68 *
	$ödex
 (c⁄° *
__s
, 
__c
)

69 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

73 #ifde‡
__CORRECT_ISO_CPP_STRINGS_H_PROTO


76 *
	`rödex
 (*
__s
, 
__c
)

77 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

78 c⁄° *
	`rödex
 (c⁄° *
__s
, 
__c
)

79 
__THROW
 
	`__asm
 ("rödex"Ë
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

81 #i‡
deföed
 
__OPTIMIZE__


82 
__exã∫_Æways_ölöe
 *

83 
	`rödex
 (*
__s
, 
__c
Ë
__THROW


85  
	`__buûtö_rödex
 (
__s
, 
__c
);

88 
__exã∫_Æways_ölöe
 const *

89 
	`rödex
 (c⁄° *
__s
, 
__c
Ë
__THROW


91  
	`__buûtö_rödex
 (
__s
, 
__c
);

94 
	}
}

96 *
	$rödex
 (c⁄° *
__s
, 
__c
)

97 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1));

101 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8
 || deföed 
__USE_XOPEN2K8XSI


104 
	$ffs
 (
__i
Ë
__THROW
 
__©åibuã_c⁄°__
;

109 #ifdef 
__USE_MISC


110 
	$ff¶
 (
__l
Ë
__THROW
 
__©åibuã_c⁄°__
;

111 
__exãnsi⁄__
 
	$ff¶l
 (
__Œ
)

112 
__THROW
 
__©åibuã_c⁄°__
;

116 
	$°rˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
)

117 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

120 
	$°∫ˇ£cmp
 (c⁄° *
__s1
, c⁄° *
__s2
, 
size_t
 
__n
)

121 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2));

123 #ifdef 
__USE_XOPEN2K8


125 
	~<bôs/ty≥s/loˇÀ_t.h
>

128 
	$°rˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
, 
loˇÀ_t
 
__loc
)

129 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 3));

133 
	$°∫ˇ£cmp_l
 (c⁄° *
__s1
, c⁄° *
__s2
,

134 
size_t
 
__n
, 
loˇÀ_t
 
__loc
)

135 
__THROW
 
__©åibuã_puª__
 
	`__n⁄nuŒ
 ((1, 2, 4));

138 
__END_DECLS


140 #i‡
	`__GNUC_PREREQ
 (3,4Ë&& 
__USE_FORTIFY_LEVEL
 > 0 \

141 && 
deföed
 
__f‹tify_fun˘i⁄


143 #i‡
deföed
 
__USE_MISC
 || !deföed 
__USE_XOPEN2K8


144 
	~<bôs/°rögs_f‹tifõd.h
>

	@/usr/include/features-time64.h

20 
	~<bôs/w‹dsize.h
>

21 
	~<bôs/timesize.h
>

23 #i‡
deföed
 
_TIME_BITS


24 #i‡
_TIME_BITS
 == 64

25 #i‡! 
deföed
 (
_FILE_OFFSET_BITS
) || _FILE_OFFSET_BITS != 64

27 #ñi‡
__TIMESIZE
 == 32

28 
	#__USE_TIME_BITS64
 1

	)

30 #ñi‡
_TIME_BITS
 == 32

31 #i‡
__TIMESIZE
 > 32

35 #îr‹ 
InvÆid
 
_TIME_BITS
 
vÆue
 (
ˇn
 
⁄ly
 
be
 32 
‹
 64-
bô
)

	@/usr/include/stdc-predef.h

18 #i‚def 
_STDC_PREDEF_H


19 
	#_STDC_PREDEF_H
 1

	)

36 #ifde‡
__GCC_IEC_559


37 #i‡
__GCC_IEC_559
 > 0

38 
	#__STDC_IEC_559__
 1

	)

39 
	#__STDC_IEC_60559_BFP__
 201404L

	)

42 
	#__STDC_IEC_559__
 1

	)

43 
	#__STDC_IEC_60559_BFP__
 201404L

	)

46 #ifde‡
__GCC_IEC_559_COMPLEX


47 #i‡
__GCC_IEC_559_COMPLEX
 > 0

48 
	#__STDC_IEC_559_COMPLEX__
 1

	)

49 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

52 
	#__STDC_IEC_559_COMPLEX__
 1

	)

53 
	#__STDC_IEC_60559_COMPLEX__
 201404L

	)

62 
	#__STDC_ISO_10646__
 201706L

	)

	@
1
.
1
/usr/include
252
6343
kernel/api/access.c
kernel/api/binfmt.c
kernel/api/elf.c
kernel/api/exec.c
kernel/api/syscall.c
kernel/drivers/blockdev.c
kernel/drivers/chardev.c
kernel/drivers/cmos.c
kernel/drivers/disk/sata.c
kernel/drivers/keyboard.c
kernel/drivers/memdevs.c
kernel/drivers/pcie.c
kernel/drivers/screen.c
kernel/drivers/tty/ldisc.c
kernel/drivers/tty/tty.c
kernel/drivers/tty/vterminal.c
kernel/entry/entry.c
kernel/fs/file.c
kernel/fs/namev.c
kernel/fs/open.c
kernel/fs/pipe.c
kernel/fs/ramfs/ramfs.c
kernel/fs/s5fs/s5fs.c
kernel/fs/s5fs/s5fs_subr.c
kernel/fs/vfs.c
kernel/fs/vfs_syscall.c
kernel/fs/vnode.c
kernel/fs/vnode_specials.c
kernel/include/api/access.h
kernel/include/api/binfmt.h
kernel/include/api/elf.h
kernel/include/api/exec.h
kernel/include/api/syscall.h
kernel/include/api/utsname.h
kernel/include/boot/config.h
kernel/include/boot/multiboot_macros.h
kernel/include/config.h
kernel/include/ctype.h
kernel/include/drivers/blockdev.h
kernel/include/drivers/chardev.h
kernel/include/drivers/cmos.h
kernel/include/drivers/dev.h
kernel/include/drivers/disk/ahci.h
kernel/include/drivers/disk/sata.h
kernel/include/drivers/keyboard.h
kernel/include/drivers/memdevs.h
kernel/include/drivers/pcie.h
kernel/include/drivers/screen.h
kernel/include/drivers/tty/ldisc.h
kernel/include/drivers/tty/tty.h
kernel/include/drivers/tty/vterminal.h
kernel/include/errno.h
kernel/include/fs/dirent.h
kernel/include/fs/fcntl.h
kernel/include/fs/file.h
kernel/include/fs/lseek.h
kernel/include/fs/open.h
kernel/include/fs/pipe.h
kernel/include/fs/ramfs/ramfs.h
kernel/include/fs/s5fs/s5fs.h
kernel/include/fs/s5fs/s5fs_privtest.h
kernel/include/fs/s5fs/s5fs_subr.h
kernel/include/fs/stat.h
kernel/include/fs/vfs.h
kernel/include/fs/vfs_privtest.h
kernel/include/fs/vfs_syscall.h
kernel/include/fs/vnode.h
kernel/include/fs/vnode_specials.h
kernel/include/globals.h
kernel/include/kernel.h
kernel/include/limits.h
kernel/include/main/acpi.h
kernel/include/main/apic.h
kernel/include/main/cpuid.h
kernel/include/main/entry.h
kernel/include/main/gdt.h
kernel/include/main/inits.h
kernel/include/main/interrupt.h
kernel/include/main/io.h
kernel/include/main/smp.h
kernel/include/mm/kmalloc.h
kernel/include/mm/mm.h
kernel/include/mm/mman.h
kernel/include/mm/mobj.h
kernel/include/mm/page.h
kernel/include/mm/pagetable.h
kernel/include/mm/pframe.h
kernel/include/mm/slab.h
kernel/include/mm/tlb.h
kernel/include/multiboot.h
kernel/include/proc/context.h
kernel/include/proc/core.h
kernel/include/proc/kmutex.h
kernel/include/proc/kthread.h
kernel/include/proc/proc.h
kernel/include/proc/sched.h
kernel/include/proc/spinlock.h
kernel/include/stdarg.h
kernel/include/test/driverstest.h
kernel/include/test/kshell/io.h
kernel/include/test/kshell/kshell.h
kernel/include/test/proctest.h
kernel/include/test/s5fstest.h
kernel/include/test/usertest.h
kernel/include/test/vfstest/vfstest.h
kernel/include/types.h
kernel/include/util/atomic.h
kernel/include/util/bits.h
kernel/include/util/btree.h
kernel/include/util/debug.h
kernel/include/util/delay.h
kernel/include/util/gdb.h
kernel/include/util/init.h
kernel/include/util/list.h
kernel/include/util/printf.h
kernel/include/util/string.h
kernel/include/util/time.h
kernel/include/util/timer.h
kernel/include/vm/anon.h
kernel/include/vm/brk.h
kernel/include/vm/mmap.h
kernel/include/vm/pagefault.h
kernel/include/vm/shadow.h
kernel/include/vm/vmmap.h
kernel/main/acpi.c
kernel/main/apic.c
kernel/main/gdt.c
kernel/main/interrupt.c
kernel/main/kmain.c
kernel/main/smp.c
kernel/mm/mobj.c
kernel/mm/page.c
kernel/mm/pagetable.c
kernel/mm/pframe.c
kernel/mm/slab.c
kernel/proc/context.c
kernel/proc/fork.c
kernel/proc/kmutex.c
kernel/proc/kthread.c
kernel/proc/proc.c
kernel/proc/sched.c
kernel/proc/spinlock.c
kernel/test/driverstest.c
kernel/test/kshell/command.c
kernel/test/kshell/command.h
kernel/test/kshell/commands.c
kernel/test/kshell/commands.h
kernel/test/kshell/io.c
kernel/test/kshell/kshell.c
kernel/test/kshell/priv.h
kernel/test/kshell/tokenizer.c
kernel/test/kshell/tokenizer.h
kernel/test/pipes.c
kernel/test/proctest.c
kernel/test/s5fstest.c
kernel/test/usertest.c
kernel/test/vfstest/vfstest.c
kernel/test/vmtest.c
kernel/util/btree.c
kernel/util/debug.c
kernel/util/init.c
kernel/util/list.c
kernel/util/math.c
kernel/util/printf.c
kernel/util/string.c
kernel/util/time.c
kernel/util/timer.c
kernel/vm/anon.c
kernel/vm/brk.c
kernel/vm/mmap.c
kernel/vm/pagefault.c
kernel/vm/shadow.c
kernel/vm/vmmap.c
user/bin/ed.c
user/bin/hd.c
user/bin/ls.c
user/bin/sh.c
user/bin/sl.c
user/bin/sleep.c
user/bin/stat.c
user/bin/uname.c
user/include/pthread/pthread.h
user/include/stddef.h
user/include/stdio.h
user/include/stdlib.h
user/include/string.h
user/include/test/test.h
user/include/unistd.h
user/include/weenix/debug.h
user/include/weenix/trap.h
user/lib/ld-weenix/asm.h
user/lib/ld-weenix/elf.h
user/lib/ld-weenix/ldalloc.c
user/lib/ld-weenix/ldalloc.h
user/lib/ld-weenix/ldnames.c
user/lib/ld-weenix/ldnames.h
user/lib/ld-weenix/ldreloc_x86_64.c
user/lib/ld-weenix/ldresolve.c
user/lib/ld-weenix/ldresolve.h
user/lib/ld-weenix/ldstart.c
user/lib/ld-weenix/ldtypes.h
user/lib/ld-weenix/ldutil.c
user/lib/ld-weenix/ldutil.h
user/lib/ld-weenix/smacros.h
user/lib/libc/errno.c
user/lib/libc/malloc.c
user/lib/libc/printf.c
user/lib/libc/quad.c
user/lib/libc/rand.c
user/lib/libc/scanf.c
user/lib/libc/stream.c
user/lib/libc/string.c
user/lib/libc/strtol.c
user/lib/libc/syscall.c
user/lib/libc/vsnprintf.c
user/lib/libc/vsscanf.c
user/lib/libtest/test.c
user/sbin/halt.c
user/sbin/init.c
user/usr/bin/args.c
user/usr/bin/hello.c
user/usr/bin/kshell.c
user/usr/bin/spin.c
user/usr/bin/tests/eatinodes.c
user/usr/bin/tests/eatmem.c
user/usr/bin/tests/elf_test-64.c
user/usr/bin/tests/forkbomb.c
user/usr/bin/tests/forktest.c
user/usr/bin/tests/linkermagic.h
user/usr/bin/tests/memtest.c
user/usr/bin/tests/pipetest.c
user/usr/bin/tests/prime.c
user/usr/bin/tests/s5fstest.c
user/usr/bin/tests/stress.c
user/usr/bin/tests/vfstest.c
user/usr/bin/wc.c
/usr/include/ctype.h
/usr/include/dirent.h
/usr/include/elf.h
/usr/include/errno.h
/usr/include/fcntl.h
/usr/include/limits.h
/usr/include/stdint.h
/usr/include/stdio.h
/usr/include/stdlib.h
/usr/include/string.h
/usr/include/unistd.h
/usr/include/alloca.h
/usr/include/features.h
/usr/include/strings.h
/usr/include/features-time64.h
/usr/include/stdc-predef.h
